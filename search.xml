<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>缓存</title>
      <link href="/2023/08/07/%E6%AF%8F%E5%A4%A9%E5%B0%8F%E7%9F%A5%E8%AF%86/%E7%BC%93%E5%AD%98/"/>
      <url>/2023/08/07/%E6%AF%8F%E5%A4%A9%E5%B0%8F%E7%9F%A5%E8%AF%86/%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>缓存是将==请求的结果==存储在与<strong>原始存储位置</strong>或<strong>临时存储位置</strong>不同的位置的过程，可以避免重复执行相同的操作。<br>基本上，缓存是文件和数据的==临时存储==，从这个新位置访问数据会更快。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>Web浏览器缓存HTML、CSS、JS和图像，以便在再次请求时更快的访问网站。 </li><li>==CDN存储静态文件==，有助于减少延迟。</li><li>DNS用于获取查询的IP地址，查询结果可以存储在缓存中，因此当我们多次请求IP地址时，==不必再次执行DNS查询==，从而可以更快的访问网页。<h2 id="回收机制（Eviction-policy）"><a href="#回收机制（Eviction-policy）" class="headerlink" title="回收机制（Eviction policy）"></a>回收机制（Eviction policy）</h2>当缓存用完时，需要删除旧缓存项，从而可以缓存新内容。事实上，删除最近最少使用的对象是最流行的方法之一，这个解决方案可以优化缓存中命中请求资源的概率。</li><li><strong>随机替换（RR，Random Replacement）</strong>：正如其字面意思，我们可以随机删除一个条目。</li><li><strong>最少使用次数（LFU，Least frequently used）</strong>：记录一个条目被请求的频率，并删除最不频繁使用的条目。</li><li><strong>最近最少使用（LRU，Least Recently Used）</strong>：在LRU中，删除最近使用次数最少的条目。</li><li><strong>先入先出（FIFO，First In First Out）</strong>：FIFO算法保存对象加载到缓存中的顺序。如果缓存没有命中，从头部取出一个或多个对象，并将一个新的缓存对象插入到队尾。如果缓存命中，保持缓存不变。</li></ul><h2 id="不同的缓存方法"><a href="#不同的缓存方法" class="headerlink" title="不同的缓存方法"></a>不同的缓存方法</h2><ol><li><strong>应用服务器缓存（Application server cache）</strong>：我们可以==直接在应用层==缓存数据。每次向服务发出请求时，如果存在缓存的本地数据，可以快速返回。如果不在缓存中，将从数据库查询数据。</li><li><strong>全局缓存（Global caches）</strong>：在全局缓存中，==所有节点使用相同的单一缓存空间==，每个应用节点以与本地节点相同的方式查询缓存。</li><li><strong>分布式缓存（Distributed cache）</strong>：通常使用==一致性哈希算法==分割缓存数据，==每个节点都拥有部分缓存数据==。如果请求节点正在搜索某一段数据，那么可以很容易的使用哈希函数从分布式缓存中定位信息，以确定数据是否可用。</li><li><strong>内容分发网络（CDN，Content Distribution Network）</strong>:如果我们正在开发的框架还没有大到足以拥有自己的CDN，而我们的页面又需要大量静态媒体，那么租用CDN是最好的选择。使用像apache这样的轻量级HTTP服务器，可以为不同的子域（如“blog.enjoyalgorithms.com”）提供静态媒体服务，并将DNS从我们的服务器切到CDN层。</li><li><strong>客户端缓存（Client-Side Caches）</strong>：客户端缓存直接在浏览器或其他客户端（例如中间网络缓存）中缓存以前请求的文件数据。</li><li><strong>ISP层缓存（ISP layer cache）</strong>:ISP缓存的工作方式与浏览器缓存基本相同。一旦你访问了一个网站，你的ISP可能会缓存这些页面，这样当你下次访问它们时，加载速度会更快。这样做的主要问题是，与浏览器缓存不同，你不能删除这些临时文件，必须等待ISP的缓存过期才能请求文件的新副本。</li></ol><h2 id="缓存失效（Cache-Invalidation）"><a href="#缓存失效（Cache-Invalidation）" class="headerlink" title="缓存失效（Cache Invalidation）"></a>缓存失效（Cache Invalidation）</h2><p>如果数据库中的数据被更改，它在缓存中应该是无效的，否则可能会触发不一致的应用程序操作。当前主要有三种缓存系统设计方案：</p><ol><li><strong>Write through cache</strong>：通过缓存执行写操作，只有当写DB和缓存都成功时，写操作才被验证为成功。在缓存和存储之间，将拥有完全的数据一致性。在崩溃、电源故障或其他系统干扰的情况下，任何东西都不会丢失。然而，在这种情况下，因为要写入两个不同的系统，写入延迟会更高。</li><li><strong>Write around cache</strong>：写操作绕过缓存，直接写入DB。在缓存读取过程中，由于数据不在缓存中，cache miss会增加，缓存设备需要从数据库中读取信息。因此，在快速写入和重新读取数据的应用程序中，这可能会导致更高的读延迟。</li><li><strong>Write back cache</strong>：写操作直接发送给缓存层，一旦缓存的写操作完成，就认为写操作成功。然后缓存异步的将写操作同步到DB。对于写密集型应用，这可以降低写延迟以及提高写吞吐量。但是，因为缓存是写入数据的唯一副本，如果缓存层被关闭，有可能丢失数据。通过在缓存中部署多个可以识别写操作的副本，我们可以尽量减少数据丢失的风险。</li></ol><h1 id="缓存的好处"><a href="#缓存的好处" class="headerlink" title="缓存的好处"></a>缓存的好处</h1><ol><li><strong>提高应用程序性能</strong>—缓存可以用来==提高系统性能和降低API延迟==。</li><li><strong>降低数据库成本</strong>——缓存会占用缓存服务器的额外流量，从而==减少数据库流量==，最终降低数据库成本。</li><li><strong>减轻后端负载</strong>——将相同的请求流量从主服务器卸载到缓存服务器将减轻后端负载。</li><li>**增加读吞吐量(IOPS)**——缓存服务器对缓存数据的响应比主服务器快得多，这增加了读吞吐量。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程</title>
      <link href="/2023/08/07/%E6%AF%8F%E5%A4%A9%E5%B0%8F%E7%9F%A5%E8%AF%86/%E7%BA%BF%E7%A8%8B/"/>
      <url>/2023/08/07/%E6%AF%8F%E5%A4%A9%E5%B0%8F%E7%9F%A5%E8%AF%86/%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>线程包括以下这几个状态：</p><p>创建(new)、就绪(runnable)、运行(running)、阻塞(blocked)、time waiting（睡眠或等待一定的事件）、waiting（等待被唤醒）、消亡（dead）</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/682616-20161115183635779-1231872003.jpg" alt="img" style="zoom: 67%;" /><p>注意点：</p><p>1、当线程进入就绪状态后，不代表立刻就能获取CPU执行时间</p><p>2、如果调用了sleep方法，必须捕获InterruptedException异常或者将该异常向上层抛出。当线程睡眠时间满后，不一定会立即得到执行，因为此时可能CPU正在执行其他的任务。所以说调用sleep方法相当于让线程进入阻塞状态。</p><p>3、调用yield方法并不会让线程进入阻塞状态，而是让线程<strong>重回就绪</strong>状态，它只需要等待重新获取CPU执行时间，这一点是和sleep方法不一样的。</p><p>4、wait方法会让线程进入阻塞状态，并且会释放线程占有的锁，并交出CPU执行权限。</p><p>5、调用join方法实际上是调用了Object的wait方法。由于wait方法会让线程释放对象锁，所以join方法同样会让线程释放对一个对象持有的锁。</p><h3 id="Thread类中常用的方法："><a href="#Thread类中常用的方法：" class="headerlink" title="Thread类中常用的方法："></a>Thread类中常用的方法：</h3><p>以下是关系到线程 <em>运行状态</em> 的几个方法：</p><p>1）start方法</p><p>start()用来启动一个线程，当调用start方法后，系统才会开启一个新的线程来执行用户定义的子任务，在这个过程中，会为相应的线程分配需要的资源。</p><p>2）run方法</p><p>run()方法是不需要用户来调用的，当通过start方法启动一个线程之后，当线程获得了CPU执行时间，便进入run方法体去执行具体的任务。注意<strong>，继承Thread类必须重写run方法</strong>，在run方法中定义具体要执行的任务。</p><p>3）sleep方法</p><p>sleep方法有两个重载版本：</p><pre><code>sleep(long millis)     //参数为毫秒sleep(long millis,int nanoseconds)    //第一参数为毫秒，第二个参数为纳秒</code></pre><p>sleep相当于让线程睡眠，交出CPU，让CPU去执行其他的任务。</p><p>但是有一点要非常注意，sleep方法不会释放锁，也就是说如果当前线程持有对某个对象的锁，则即使调用sleep方法，其他线程也无法访问这个对象。</p><p>4）yield方法</p><p>调用yield方法会让<strong>当前线程交出CPU权限</strong>，让CPU去执行其他的线程。它跟sleep方法类似，同样<strong>不会释放锁</strong>。但是yield不能控制具体的交出CPU的时间，另外，yield方法只能让<u>拥有相同优先级的线程</u>有获取CPU执行时间的机会。</p><p>5）join方法</p><p>join方法有三个重载版本：</p><pre><code>join()join(long millis)     //参数为毫秒join(long millis,int nanoseconds)    //第一参数为毫秒，第二个参数为纳秒</code></pre><p>假如在main线程中，调用thread.join方法，则main方法会等待thread线程执行完毕或者等待一定的时间。如果调用的是无参join方法，则等待thread执行完毕，如果调用的是指定了时间参数的join方法，则等待一定的事件。</p><p>6）interrupt方法</p><p>单独调用interrupt方法可以使得处于阻塞状态的线程抛出一个异常，可以用来中断一个正处于阻塞状态的线程；另外，通过interrupt方法和isInterrupted()方法来停止正在运行的线程。</p><p>直接调用interrupt方法可以中断处于阻塞状态的线程，但不能中断正在运行中的线程。</p><p>如果配合isInterrupted()能够中断正在运行的线程，因为调用interrupt方法相当于将中断标志位置为true，那么可以通过调用isInterrupted()判断中断标志是否被置位来中断线程的执行。</p><p>7）stop方法</p><p>stop方法已经是一个废弃的方法，它是一个不安全的方法。因为调用stop方法会直接终止run方法的调用，并且会抛出一个ThreadDeath错误，如果线程持有某个对象锁的话，会完全释放锁，导致对象状态不一致。所以stop方法基本是不会被用到的。</p><p>8）destroy方法</p><p>destroy方法也是废弃的方法。基本不会被使用到。</p><h3 id="以下是关系到线程属性的几个方法"><a href="#以下是关系到线程属性的几个方法" class="headerlink" title="以下是关系到线程属性的几个方法:"></a>以下是关系到线程属性的几个方法:</h3><p>1）getId</p><p>用来得到线程ID</p><p>2）getName和setName</p><p>用来得到或者设置线程名称。</p><p>3）getPriority和setPriority</p><p>用来获取和设置线程优先级。</p><p>4）setDaemon和isDaemon</p><p>用来设置线程是否成为守护线程和判断线程是否是守护线程。</p><p>​    守护线程和用户线程的区别在于：</p><p>​    守护线程依赖于创建它的线程，而用户线程则不依赖。</p><p>​    举个简单的例子：如果在main线程中创建了一个守护线程，当main方法运行完毕之后，守护线程也会随着消亡。而用户线程则不会，用户线程会一直运行直到其运行完毕。在JVM中，像垃圾收集器线程就是守护线程。</p><p>5）public final boolean isAlive()<br>测试线程是否处于活动状态。</p><p>6）public static void yield()<br>暂停当前正在执行的线程对象，并执行其他线程</p><p>7）currentThread()</p><p>用来获取当前线程</p><h3 id="sleep-和-wait-方法解释"><a href="#sleep-和-wait-方法解释" class="headerlink" title="sleep 和 wait 方法解释"></a>sleep 和 wait 方法解释</h3><p>sleep()方法是Thread类里面的，主要的意义就是让当前线程停止执行，让出cpu给其他的线程，但是不会释放对象锁资源以及监控的状态，当指定的时间到了之后又会自动恢复运行状态。</p><p>wait()方法是Object类里面的，主要的意义就是让线程放弃当前的对象的锁，进入等待此对象的等待锁定池，只有针对此对象调动notify方法后本线程才能够进入对象锁定池准备获取对象锁进入运行状态。</p><h3 id="start-和-run-方法解释"><a href="#start-和-run-方法解释" class="headerlink" title="start 和 run 方法解释"></a><strong>start 和 run 方法解释</strong></h3><p>1、start：用start方法来启动线程，真正实现了多线程运行，这时<u>无需等待run方法体代码执行完毕而直接继续执行下面的代码</u>。</p><p>通过调用Thread类的start()方法来启动一个线程，这时此线程处于<strong>就绪（可运行）</strong>状态，并没有运行，一旦得到cpu时间片，就开始执行run()方法，这里方法 run()称为线程体，它包含了要执行的这个线程的内容，Run方法运行结束，此线程随即终止。<br>2、run： run()方法只是类的一个普通方法而已，如果直接调用Run方法，程序中依然<strong>只有主线程</strong>这一个线程，其程序执行路径还是只有一条，还是要顺序执行，还是要等待run方法体执行完毕后才可继续执行下面的代码，这样就没有达到写线程的目的。</p><p>总结：调用start方法方可启动线程，而run方法只是thread的一个普通方法调用，还是在主线程里执行。这两个方法应该都比较熟悉，把需要并行处理的代码放在run()方法中，start()方法启动线程将自动调用 run()方法，这是由jvm的内存机制规定的。并且run()方法必须是public访问权限，返回值类型为void。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/716271-20170320112245721-1831918220.jpg" alt="img" style="zoom:67%;" /><h2 id="创建一个线程"><a href="#创建一个线程" class="headerlink" title="创建一个线程"></a>创建一个线程</h2><p>Java 提供了三种创建线程的方法：</p><ul><li>通过实现 Runnable 接口；</li><li>通过继承 Thread 类本身；</li><li>通过 Callable 和 Future 创建线程。</li></ul><p><strong>实现并启动线程有两种方法</strong><br>1、写一个类继承自Thread类，重写run方法。用start方法启动线程<br>2、写一个类实现Runnable接口，实现run方法。用new Thread(Runnable target).start()方法来启动</p><p><strong>多线程原理：</strong></p><p><strong>多线程就是分时利用CPU，宏观上让所有线程一起执行 ，也叫并发</strong></p><p>相当于玩游戏机，只有一个游戏机（cpu），可是有很多人要玩，于是，start是排队！等CPU选中你就是轮到你，你就run（），当CPU的运行的时间片执行完，这个线程就继续排队，等待下一次的run（）</p><h3 id="通过实现-Runnable-接口来创建线程"><a href="#通过实现-Runnable-接口来创建线程" class="headerlink" title="通过实现 Runnable 接口来创建线程"></a>通过实现 Runnable 接口来创建线程</h3><p>创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类。</p><p>为了实现 Runnable，一个类只需要执行一个方法调用 run()，声明如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>可以重写该方法，重要的是理解的 run() 可以调用其他方法，使用其他类，并声明变量，就像主线程一样。</p><p>在创建一个实现 Runnable 接口的类之后，你可以在类中实例化一个线程对象。</p><p>Thread 定义了几个构造方法，下面的这个是我们经常使用的：</p><pre class=" language-java"><code class="language-java"><span class="token function">Thread</span><span class="token punctuation">(</span>Runnable threadOb<span class="token punctuation">,</span>String threadName<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里，threadOb 是一个实现 Runnable 接口的类的实例，并且 threadName 指定新线程的名字。</p><p>新线程创建之后，你调用它的 start() 方法它才会运行。</p><h3 id="通过继承Thread来创建线程"><a href="#通过继承Thread来创建线程" class="headerlink" title="通过继承Thread来创建线程"></a>通过继承Thread来创建线程</h3><p>创建一个线程的第二种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。</p><p>继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。</p><p>该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p><h3 id="通过-Callable-和-Future-创建线程"><a href="#通过-Callable-和-Future-创建线程" class="headerlink" title="通过 Callable 和 Future 创建线程"></a>通过 Callable 和 Future 创建线程</h3><ul><li>创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。</li><li>创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</li><li>使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</li><li>调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li></ul><h2 id="创建线程的三种方式的对比"><a href="#创建线程的三种方式的对比" class="headerlink" title="创建线程的三种方式的对比"></a>创建线程的三种方式的对比</h2><ul><li>采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。</li><li>使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2023/08/07/%E6%AF%8F%E5%A4%A9%E5%B0%8F%E7%9F%A5%E8%AF%86/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2023/08/07/%E6%AF%8F%E5%A4%A9%E5%B0%8F%E7%9F%A5%E8%AF%86/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h2><p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left"><strong>[ABC]</strong></td><td align="left">匹配 <strong>[…]</strong> 中的所有字符<img src="https://www.runoob.com/wp-content/uploads/2014/03/E691DDE1-E5CB-4EA8-8D16-759BD0D2B09D.jpg" alt="img"></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjsref_regexp5">尝试一下 »</a></td></tr><tr><td align="left"><strong>[^ABC]</strong></td><td align="left">匹配除了 <strong>[…]</strong> 中字符的所有字符，<img src="https://www.runoob.com/wp-content/uploads/2014/03/ED971D92-30F4-4768-A2C7-02A84A3A9DEB.jpg" alt="img"></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjsref_regexp6">尝试一下 »</a></td></tr><tr><td align="left"><strong>[A-Z]</strong></td><td align="left">[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。<img src="https://www.runoob.com/wp-content/uploads/2014/03/C5E357BD-65E3-4EB3-9D80-10D096F19287.jpg" alt="img"></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjsref_regexp7">尝试一下 »</a></td></tr><tr><td align="left"><strong>.</strong></td><td align="left">匹配除换行符（\n、\r）之外的任何单个字符，相等于 [^\n\r]。<img src="https://www.runoob.com/wp-content/uploads/2014/03/0FD7E77D-38A7-43BC-B51A-7DBA23A77756.jpg" alt="img"></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjsref_regexp8">尝试一下 »</a></td></tr><tr><td align="left"><strong>[\s\S]</strong></td><td align="left">匹配所有。\s 是匹配所有空白符，包括换行，\S 非空白符，不包括换行。<img src="https://www.runoob.com/wp-content/uploads/2014/03/47CA6C59-64CF-433A-909E-1E342349A4E0.jpg" alt="img"></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjsref_regexp9">尝试一下 »</a></td></tr><tr><td align="left"><strong>\w</strong></td><td align="left">匹配字母、数字、下划线。等价于 [A-Za-z0-9_]<img src="https://www.runoob.com/wp-content/uploads/2014/03/F35A5971-3519-4CAE-8BEC-9DE8F4A55257.jpg" alt="img"  /></td><td align="left"><a href="https://www.runoob.com/try/try.php?filename=tryjsref_regexp10">尝试一下 »</a></td></tr></tbody></table><h2 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h2><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\cx</td><td align="left">匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td align="left">\f</td><td align="left">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="left">\n</td><td align="left">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="left">\r</td><td align="left">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td align="left">\t</td><td align="left">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td align="left">\v</td><td align="left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr></tbody></table><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的 <strong>runoo*b</strong> 中的 *****，简单的说就是表示任何字符串的意思。如果要查找字符串中的 ***** 符号，则需要对 ***** 进行转义，即在其前加一个 <em>***，**runo*ob</em>* 匹配字符串 <strong>runo*ob</strong>。</p><p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符*<em>*</em> 放在它们前面。下表列出了正则表达式中的特殊字符：</p><table><thead><tr><th align="left">特别字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$</td><td align="left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</td></tr><tr><td align="left">( )</td><td align="left">标记一个<u>子表达式</u>的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式<strong>零次或多次</strong>。要匹配 * 字符，请使用 *。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式<strong>一次或多次</strong>。要匹配 + 字符，请使用 +。</td></tr><tr><td align="left">.</td><td align="left">匹配<strong>除换行符 \n 之外</strong>的任何单字符。要匹配 . ，请使用 . 。</td></tr><tr><td align="left">[</td><td align="left">标记一个中括号表达式的开始。要匹配 [，请使用 [。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式<strong>零次或一次</strong>，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td></tr><tr><td align="left">\</td><td align="left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td></tr><tr><td align="left">{</td><td align="left">标记<u>限定符表达式</u>的开始。要匹配 {，请使用 {。</td></tr><tr><td align="left">|</td><td align="left">指明两项之间的一个选择。要匹配 |，请使用 |。</td></tr></tbody></table><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 ***** 或 <strong>+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种。</p><p>正则表达式的限定符有：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="left">{n,}</td><td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td align="left">{n,m}</td><td align="left">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p><p>定位符用来描述字符串或单词的边界，<strong>^</strong> 和 <strong>$</strong> 分别指字符串的开始与结束，<strong>\b</strong> 描述单词的前或后边界，<strong>\B</strong> 表示非单词边界。</p><p>正则表达式的定位符有：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界，即字与空格间的位置。</td></tr><tr><td align="left">\B</td><td align="left">非单词边界匹配。</td></tr></tbody></table><p>\b单词边界元字符确保只检测整个单词。否则，诸如 “is issued” 或 “this is” 之类的词组将不能正确地被此表达式识别。</p><p> \i 标记指定不区分大小写。</p><p>全局标记 \g 指定将该表达式应用到输入字符串中能够查找到的尽可能多的匹配</p><p>多行标记 \m 指定换行符的两边可能出现潜在的匹配。</p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>用圆括号 <strong>()</strong> 将所有选择项括起来，相邻的选择项之间用 <strong>|</strong> 分隔。</p><p><strong>()</strong> 表示捕获分组，**()** 会把每个分组里的匹配的值保存起来， 多个匹配值可以通过数字 n 来查看(<strong>n</strong> 是一个数字，表示第 n 个捕获组的内容)。</p><h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h2><ul><li>数字：<strong>^[0-9]*$</strong></li><li>n位的数字：<strong>^\d{n}$</strong></li><li>至少n位的数字<strong>：^\d{n,}$</strong></li><li>m-n位的数字：<strong>^\d{m,n}$</strong></li><li>零和非零开头的数字：<strong>^(0|[1-9][0-9]*)$</strong></li><li>非零开头的最多带两位小数的数字：<strong>^([1-9][0-9]*)+(.[0-9]{1,2})?$</strong></li><li>带1-2位小数的正数或负数：<strong>^(-)?\d+(.\d{1,2})$</strong></li><li>正数、负数、和小数：<strong>^(-|+)?\d+(.\d+)?$</strong></li><li>有两位小数的正实数：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>有1~3位小数的正实数：<strong>^[0-9]+(.[0-9]{1,3})?$</strong></li><li>非零的正整数：<strong>^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^+?[1-9][0-9]*$</strong></li><li>非零的负整数：<strong>^-[1-9][]0-9”*$ 或 ^-[1-9]\d*$</strong></li><li>非负整数：<strong>^\d+$ 或 ^[1-9]\d*|0$</strong></li><li>非正整数：<strong>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</strong></li><li>非负浮点数：<strong>^\d+(.\d+)?$ 或 ^[1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0$</strong></li><li>非正浮点数：<strong>^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d*.\d*|0.\d*[1-9]\d*))|0?.0+|0$</strong></li><li>正浮点数：<strong>^[1-9]\d*.\d*|0.\d*[1-9]\d*$ 或 ^(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*))$</strong></li><li>负浮点数：<strong>^-([1-9]\d*.\d*|0.\d*[1-9]\d*)$ 或 ^(-(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*)))$</strong></li><li>浮点数：<strong>^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0)$</strong></li></ul><hr><h2 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h2><ul><li>汉字：<strong>^[\u4e00-\u9fa5]{0,}$</strong></li><li>英文和数字：<strong>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</strong></li><li>长度为3-20的所有字符：<strong>^.{3,20}$</strong></li><li>由26个英文字母组成的字符串：<strong>^[A-Za-z]+$</strong></li><li>由26个大写英文字母组成的字符串：<strong>^[A-Z]+$</strong></li><li>由26个小写英文字母组成的字符串：<strong>^[a-z]+$</strong></li><li>由数字和26个英文字母组成的字符串：<strong>^[A-Za-z0-9]+$</strong></li><li>由数字、26个英文字母或者下划线组成的字符串：<strong>^\w+$ 或 ^\w{3,20}$</strong></li><li>中文、英文、数字包括下划线：<strong>^[\u4E00-\u9FA5A-Za-z0-9_]+$</strong></li><li>中文、英文、数字但不包括下划线等符号：<strong>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</strong></li><li>可以输入含有^%&amp;’,;=?$&quot;等字符：**[^%&amp;’,;=?$\x22]+**</li><li>禁止输入含有<del>的字符：**[^</del>]+**</li></ul><hr><h2 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h2><ul><li>Email地址：<strong>^\w+([-+.]\w+)*@\w+([-.]\w+)*.\w+([-.]\w+)*$</strong></li><li>域名：**[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+.?**</li><li>InternetURL：**[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$**</li><li>手机号码：<strong>^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\d{8}$</strong></li><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<strong>^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</strong></li><li>国内电话号码(0511-4405222、021-87888822)：<strong>\d{3}-\d{8}|\d{4}-\d{7}</strong></li><li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: <strong>((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)</strong></li><li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：**(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)**</li><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<strong>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</strong></li><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<strong>^[a-zA-Z]\w{5,17}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$</strong></li><li>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：<strong>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</strong></li><li>日期格式：<strong>^\d{4}-\d{1,2}-\d{1,2}</strong></li><li>一年的12个月(01～09和1～12)：<strong>^(0?[1-9]|1[0-2])$</strong></li><li>一个月的31天(01～09和1～31)：<strong>^((0?[1-9])|((1|2)[0-9])|30|31)$</strong></li><li>钱的输入格式：<ol><li>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<strong>^[1-9][0-9]*$</strong></li><li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<strong>^(0|[1-9][0-9]*)$</strong></li><li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<strong>^(0|-?[1-9][0-9]*)$</strong></li><li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：<strong>^[0-9]+(.[0-9]+)?$</strong></li><li>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<strong>^[0-9]+(.[0-9]{2})?$</strong></li><li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<strong>^[0-9]+(.[0-9]{1,2})?$</strong></li><li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<strong>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</strong></li><li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<strong>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</strong></li><li>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li></ol></li><li>xml文件：<strong>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</strong></li><li>中文字符的正则表达式：**[\u4e00-\u9fa5]**</li><li>双字节字符：**[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))**</li><li>空白行的正则表达式：<strong>\n\s*\r (可以用来删除空白行)</strong></li><li>HTML标记的正则表达式：**&lt;(\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; ( 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)**</li><li>腾讯QQ号：**[1-9][0-9]{4,} (腾讯QQ号从10000开始)**</li><li>中国邮政编码：**[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)**</li><li>IPv4地址：**((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})(.((2(5[0-5]|[0-4]\d))|[0-1]?\d{1,2})){3}**</li></ul>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="/2023/08/07/%E6%AF%8F%E5%A4%A9%E5%B0%8F%E7%9F%A5%E8%AF%86/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2023/08/07/%E6%AF%8F%E5%A4%A9%E5%B0%8F%E7%9F%A5%E8%AF%86/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a><strong>多线程</strong></h1><h3 id="1-synchronized的实现原理"><a href="#1-synchronized的实现原理" class="headerlink" title="1. synchronized的实现原理"></a><strong>1. synchronized的实现原理</strong></h3><p>​        在 Java 中，每个对象都隐式包含一个 monitor（监视器）对象，加锁的过程其实就是==<strong>竞争 monitor</strong>== 的过程</p><p>​        当线程进入字节码 monitorenter 指令之后，线程将持有 monitor 对象，执行 monitorexit 时释放 monitor 对象，当其他线程没有拿到 monitor 对象时，则需要阻塞等待获取该对象。</p><h3 id="2-ReentrantLock与Synchronized的区别"><a href="#2-ReentrantLock与Synchronized的区别" class="headerlink" title="2.ReentrantLock与Synchronized的区别"></a><strong>2.ReentrantLock与Synchronized的区别</strong></h3><p>ReentrantLock 有如下特点：</p><ul><li><h5 id="可重入"><a href="#可重入" class="headerlink" title="可重入"></a>可重入</h5><p>ReentrantLock 和 syncronized 关键字一样，都是可重入锁，不过两者实现原理稍有差别。</p><p>RetrantLock ==利用 AQS 的的 state 状态来判断资源是否已锁==</p><ul><li>同一线程重入加锁，state 的状态+1 ; </li><li>同一线程重入解锁，state 状态 -1 (解锁必须为当前独占线程，否则异常); </li><li>当 state 为 0 时解锁成功。</li></ul></li><li><h5 id="需要手动加锁、解锁"><a href="#需要手动加锁、解锁" class="headerlink" title="需要手动加锁、解锁"></a>需要手动加锁、解锁</h5><ul><li>synchronized 关键字是自动进行加锁、解锁的。</li><li>ReentrantLock ==需要 <strong>lock() 和 unlock() 方法</strong>配合 try/finally 语句块==来完成，来手动加锁、解锁。</li></ul></li><li><h5 id="支持设置锁的超时时间"><a href="#支持设置锁的超时时间" class="headerlink" title="支持设置锁的超时时间"></a>支持设置锁的超时时间</h5><ul><li>synchronized 关键字无法设置锁的超时时间，如果一个获得锁的线程内部发生死锁，那么其他线程就会一直进入阻塞状态。</li><li>ReentrantLock 提供==<strong>tryLock</strong>==方法，允许设置线程获取锁的超时时间，如果超时，则跳过，不进行任何操作，避免死锁的发生。</li></ul></li><li><h5 id="支持公平-非公平锁"><a href="#支持公平-非公平锁" class="headerlink" title="支持公平/非公平锁"></a>支持公平/非公平锁</h5><ul><li>synchronized 关键字是一种非公平锁，先抢到锁的线程先执行。</li><li>ReentrantLock 的构造方法中允许设置 true/false 来实现公平、非公平锁，如果设置为 true ，则线程获取锁要遵循**”先来后到”**的</li></ul></li></ul><p>规则，每次都会构造一个线程 Node ，然后到双向链表的”尾巴”后面排队，等待前面的 Node 释放锁资源。</p><ul><li><h5 id="可中断锁"><a href="#可中断锁" class="headerlink" title="可中断锁"></a>可中断锁</h5><ul><li>ReentrantLock 中的==<strong>lockInterruptibly()</strong>==方法使得线程可以在被阻塞时响应中断<ul><li>比如一个线程 t1通过 lockInterruptibly() 方法获取到一个可重入锁，并执行一个长时间的任务，另一个线程通过nterrupt() 方法就可以立刻打断 t1 线程的执行，来获取t1持有的那个可重入锁。</li></ul></li><li>通过ReentrantLock 的 lock() 方法或者 Synchronized 持有锁的线程是不会响应其他线程的 interrupt()方法的，直到该方法主动释放锁之后才会响应 interrupt() 方法。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小知识 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket</title>
      <link href="/2023/08/07/%E6%AF%8F%E5%A4%A9%E5%B0%8F%E7%9F%A5%E8%AF%86/Socket/"/>
      <url>/2023/08/07/%E6%AF%8F%E5%A4%A9%E5%B0%8F%E7%9F%A5%E8%AF%86/Socket/</url>
      
        <content type="html"><![CDATA[<h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><p><strong>TCP/IP、UDP</strong></p><ol><li><p>TCP/IP（Transmission Control Protocol/Internet Protocol）即传输控制协议/网间协议，是一个工业标准的协议集，它是为广域网（WANs）设计的。</p></li><li><p>UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是属于TCP/IP协议族中的一种。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/20190718154523875.png" style="zoom:80%;" /><p><strong>Socket是什么呢？</strong></p><pre><code>Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。</code></pre><p>在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/20190718154556909.png" alt="img"  /><p>先从服务器端说起。</p><p>服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。</p><p>在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)</p><p>如果连接成功，这时客户端与服务器端的连接就建立了。</p><p>客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束。</p><h1 id="1、网络中进程之间如何通信？"><a href="#1、网络中进程之间如何通信？" class="headerlink" title="1、网络中进程之间如何通信？"></a>1、网络中进程之间如何通信？</h1><p>本地的进程间通信（IPC）有很多种方式，但可以总结为下面4类：</p><ul><li>消息传递（管道、FIFO、消息队列）</li><li>同步（互斥量、条件变量、读写锁、文件和写记录锁、信号量）</li><li>共享内存（匿名的和具名的）</li><li>远程过程调用（Solaris门和Sun RPC）</li></ul><p>本地可以通过进程PID来唯一标识一个进程，但是在网络中这是行不通的。</p><p>其实TCP/IP协议族已经帮我们解决了这个问题，网络层的“<strong>ip地址</strong>”可以唯一标识网络中的主机，而传输层的“<strong>协议+端口</strong>”可以唯一标识主机中的应用程序（进程）。</p><p>利用三元组（ip地址，协议，端口）就可以标识网络的进程了。</p><h1 id="2、socket的基本操作"><a href="#2、socket的基本操作" class="headerlink" title="2、socket的基本操作"></a>2、socket的基本操作</h1><p>socket是“open—write/read—close”模式的一种实现，socket提供了这些操作对应的函数接口。下面以TCP为例，介绍几个基本的socket接口函数。</p><h2 id="2-1、socket-函数"><a href="#2-1、socket-函数" class="headerlink" title="2.1、socket()函数"></a>2.1、socket()函数</h2><pre class=" language-vim"><code class="language-vim">int <span class="token function">socket</span><span class="token punctuation">(</span>int domain<span class="token punctuation">,</span> int type<span class="token punctuation">,</span> int protocol<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>socket函数对应于普通文件的打开操作。普通文件的打开操作返回一个文件描述字</p><p>而<strong>socket()<strong>用于创建一个socket描述符（</strong>socket descriptor</strong>），它唯一标识一个socket。</p><p>这个socket描述字跟文件描述字一样，后续的操作都有用到它，把它作为参数，通过它来进行一些读写操作。</p><p>正如可以给fopen的传入不同参数值，以打开不同的文件。创建socket的时候，也可以指定不同的参数创建不同的socket描述符，socket函数的三个参数分别为：</p><ul><li><p><strong>domain</strong>：即<strong>协议域</strong>，又称为协议族（family）。</p><p>常用的协议族有，AF_INET、AF_INET6、AF_LOCAL（或称AF_UNIX，Unix域socket）、AF_ROUTE等等。</p><p>协议族决定了socket的地址类型，在通信中必须采用对应的地址，如AF_INET决定了要用ipv4地址（32位的）与端口号（16位的）的组合、AF_UNIX决定了要用一个绝对路径名作为地址。</p></li><li><p><strong>type</strong>：指定socket<strong>类型</strong>。</p><p>常用的socket类型有，SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET等等。</p></li><li><p><strong>protocol</strong>：故名思意，就是<strong>指定协议</strong>。</p><p>常用的协议有，IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC等，它们分别对应TCP传输协议、UDP传输协议、STCP传输协议、TIPC传输协议</p></li></ul><p>注意：并不是上面的type和protocol可以随意组合的，如SOCK_STREAM不可以跟IPPROTO_UDP组合。当protocol为0时，会自动选择type类型对应的默认协议。</p><p>当我们调用<strong>socket</strong>创建一个socket时，返回的socket描述字它存在于协议族（address family，AF_XXX）空间中，但没有一个具体的地址。如果想要给它赋值一个地址，就必须调用bind()函数，否则就当调用connect()、listen()时系统会自动随机分配一个端口。</p><h2 id="2-2、bind-函数"><a href="#2-2、bind-函数" class="headerlink" title="2.2、bind()函数"></a>2.2、bind()函数</h2><p>正如上面所说bind()函数把一个地址族中的特定地址赋给socket。</p><p>例如对应AF_INET、AF_INET6就是把一个ipv4或ipv6地址和端口号组合赋给socket。</p><pre class=" language-vim"><code class="language-vim">int <span class="token function">bind</span><span class="token punctuation">(</span>int sockfd<span class="token punctuation">,</span> const struct sockaddr <span class="token operator">*</span>addr<span class="token punctuation">,</span> socklen_t addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>函数的三个参数分别为：</p><ul><li><p>sockfd：即socket描述字，它是通过socket()函数创建，唯一标识一个socket。<strong>bind()函数就是将给这个描述字绑定一个名字</strong></p></li><li><p>addr：一个const struct sockaddr *指针，指向要绑定给sockfd的协议地址。这个地址结构根据地址创建socket时的地址协议族的不同而不同，如ipv4对应的是：</p><pre class=" language-c++"><code class="language-c++">struct sockaddr_in &#123;    sa_family_t    sin_family;     in_port_t      sin_port;       struct in_addr sin_addr;   &#125;;struct in_addr &#123;    uint32_t       s_addr;     &#125;;</code></pre><p>ipv6对应的是：</p><pre class=" language-c++"><code class="language-c++">struct sockaddr_in6 &#123;     sa_family_t     sin6_family;        in_port_t       sin6_port;          uint32_t        sin6_flowinfo;      struct in6_addr sin6_addr;          uint32_t        sin6_scope_id;  &#125;;struct in6_addr &#123;     unsigned char   s6_addr[16];    &#125;;</code></pre><p>Unix域对应的是：</p><pre class=" language-c++"><code class="language-c++">#define UNIX_PATH_MAX    108struct sockaddr_un &#123;     sa_family_t sun_family;                    char        sun_path[UNIX_PATH_MAX];   &#125;;</code></pre></li></ul><p>通常服务器在启动的时候都会绑定一个众所周知的地址（如ip地址+端口号），用于提供服务，客户就可以通过它来接连服务器；</p><p>而客户端就不用指定，有系统自动分配一个端口号和自身的ip地址组合。</p><p>这就是为什么通常服务器端在listen之前会调用bind()，而客户端就不会调用，而是在connect()时由系统随机生成一个。</p><h3 id="网络字节序与主机字节序"><a href="#网络字节序与主机字节序" class="headerlink" title="网络字节序与主机字节序"></a>网络字节序与主机字节序</h3><p><strong>主机字节序</strong></p><p>就是我们平常说的大端和小端模式：不同的CPU有不同的字节序类型，这些字节序是指整数在内存中保存的顺序，这个叫做主机序。</p><p>　　a) Little-Endian就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。高高低低——小端</p><p>　　b) Big-Endian就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。</p><p><strong>网络字节序</strong>：</p><p>4个字节的32 bit值以下面的次序传输：首先是0～7bit，其次8～15bit，然后16～23bit，最后是24~31bit。</p><p>即大端字节序。<strong>由于TCP/IP首部中所有的二进制整数在网络中传输时都要求以这种次序，因此它又称作网络字节序。</strong></p><p>字节序，顾名思义字节的顺序，就是大于一个字节类型的数据在内存中的存放顺序，一个字节的数据没有顺序的问题了。</p><p>所以： 在将一个地址绑定到socket的时候，请<strong>先将主机字节序转换成为网络字节序</strong>，将其转化为网络字节序再赋给socket。</p><h2 id="2-3、listen-、connect-函数"><a href="#2-3、listen-、connect-函数" class="headerlink" title="2.3、listen()、connect()函数"></a>2.3、listen()、connect()函数</h2><p>如果作为一个服务器，在调用socket()、bind()之后就会调用listen()来监听这个socket</p><p>如果客户端这时调用connect()发出连接请求，服务器端就会接收到这个请求。</p><pre class=" language-c++"><code class="language-c++">int listen(int sockfd, int backlog);int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</code></pre><p>listen函数的第一个参数即为要监听的socket描述字，第二个参数为相应socket可以排队的<strong>最大连接个数</strong>。socket()函数创建的socket默认是一个主动类型的，listen函数将socket变为<strong>被动类型的，等待客户的连接请求</strong>。</p><p>connect函数的第一个参数即为客户端的socket描述字，第二参数为服务器的socket地址，第三个参数为socket地址的长度。客户端通过调用connect函数来建立与TCP服务器的连接。</p><h2 id="2-4、accept-函数"><a href="#2-4、accept-函数" class="headerlink" title="2.4、accept()函数"></a>2.4、accept()函数</h2><p>TCP服务器端依次调用socket()、bind()、listen()之后，就会监听指定的socket地址了。</p><p>TCP客户端依次调用socket()、connect()之后就想TCP服务器发送了一个连接请求。</p><p>TCP服务器监听到这个请求之后，就会调用accept()函数取接收请求，这样连接就建立好了。</p><p>之后就可以开始网络I/O操作了，即类同于普通文件的读写I/O操作。</p><pre class=" language-c++"><code class="language-c++">int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);</code></pre><p>accept函数的第一个参数为服务器的socket描述字，第二个参数为指向struct sockaddr *的指针，用于返回客户端的协议地址，第三个参数为协议地址的长度。</p><p>如果accpet成功，那么其返回值是<strong>由内核自动生成的一个全新的描述字</strong>，代表与返回客户的TCP连接。</p><p>注意：accept的第一个参数为服务器的socket描述字，是服务器开始调用socket()函数生成的，称为<strong>监听socket描述字</strong>；而accept函数返回的是已连接的socket描述字。一个服务器通常通常仅仅只创建一个监听socket描述字，<strong>它在该服务器的生命周期内一直存在</strong>。内核为每个由服务器进程接受的客户连接创建了一个已连接socket描述字，当服务器完成了对某个客户的服务，相应的已连接socket描述字就被关闭。</p><h2 id="2-5、read-、write-等函数"><a href="#2-5、read-、write-等函数" class="headerlink" title="2.5、read()、write()等函数"></a>2.5、read()、write()等函数</h2><p>至此服务器与客户已经建立好连接了。可以调用网络I/O进行读写操作了，即实现了网咯中不同进程之间的通信。</p><p>网络I/O操作有下面几组：</p><ul><li>read()/write()</li><li>recv()/send()</li><li>readv()/writev()</li><li>recvmsg()/sendmsg()</li><li>recvfrom()/sendto()</li></ul><p>推荐使用recvmsg()/sendmsg()函数，这两个函数是最通用的I/O函数</p><p>实际上可以把上面的其它函数都替换成这两个函数。它们的声明如下：</p><pre class=" language-c++"><code class="language-c++">#include ssize_t read(int fd, void *buf, size_t count);ssize_t write(int fd, const void *buf, size_t count);#include #include ssize_t send(int sockfd, const void *buf, size_t len, int flags);ssize_t recv(int sockfd, void *buf, size_t len, int flags);ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,                      const struct sockaddr *dest_addr, socklen_t addrlen);ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,                        struct sockaddr *src_addr, socklen_t *addrlen);ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags);ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags);</code></pre><p>read函数是负责从fd中读取内容。</p><p>​    当读成功时，read返回实际所读的字节数，如果返回的值是0表示已经读到文件的结束了，小于0表示出现了错误。</p><p>​    如果错误为EINTR说明读是由中断引起的，如果是ECONNREST表示网络连接出了问题。</p><p>write函数将buf中的nbytes字节内容写入文件描述符fd。</p><p>​    成功时返回写的字节数。失败时返回-1，并设置errno变量。</p><p>在网络程序中，当我们向套接字文件描述符写时有俩种可能。</p><p>​    1)write的返回值大于0，表示写了部分或者是 全部的数据。</p><p>​    2)返回的值小于0，此时出现了错误。</p><p>​    如果错误为EINTR表示在写的时候出现了中断错误。如果为EPIPE表示 网络连接出现了问题(对方已经关闭了连接)。</p><h2 id="2-6、close-函数"><a href="#2-6、close-函数" class="headerlink" title="2.6、close()函数"></a>2.6、close()函数</h2><p>完成了读写操作就要关闭相应的socket描述字，好比操作完打开的文件要调用fclose关闭打开的文件。</p><pre class=" language-c++"><code class="language-c++">#include int close(int fd);</code></pre><p>close一个TCP socket的缺省行为时把该socket标记为已关闭，然后立即返回到调用进程。该描述字不能再由调用进程使用，也就是说不能再作为read或write的第一个参数。</p><p>注意：close操作只是使相应socket描述字的引用计数-1，只有当引用计数为0的时候，才会触发TCP客户端向服务器发送终止连接请求。</p><h1 id="3、socket中TCP的三次握手建立连接详解"><a href="#3、socket中TCP的三次握手建立连接详解" class="headerlink" title="3、socket中TCP的三次握手建立连接详解"></a>3、socket中TCP的三次握手建立连接详解</h1><p>tcp建立连接要进行“三次握手”，即交换三个分组。大致流程如下：</p><ul><li>客户端向服务器发送一个SYN J</li><li>服务器向客户端响应一个SYN K，并对SYN J进行确认ACK J+1</li><li>客户端再想服务器发一个确认ACK K+1</li></ul><p>只有就完了三次握手，但是这个三次握手发生在socket的那几个函数中呢？请看下图：</p><p><a href="http://images.cnblogs.com/cnblogs_com/skynet/201012/201012122157467258.png"><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20vc2t5bmV0LzIwMTAxMi8yMDEwMTIxMjIxNTc0NzYyODYucG5n" alt="image"></a></p><p>socket中发送的TCP三次握手</p><ul><li>当客户端调用connect时，触发了连接请求，向服务器发送了SYN J包，这时connect进入阻塞状态；</li><li>服务器监听到连接请求，即收到SYN J包，调用accept函数接收请求向客户端发送SYN K ，ACK J+1，这时accept进入阻塞状态；</li><li>客户端收到服务器的SYN K ，ACK J+1之后，这时connect返回，并对SYN K进行确认；</li><li>服务器收到ACK K+1时，accept返回，至此三次握手完毕，连接建立。</li></ul><h1 id="4、socket中TCP的四次握手释放连接详解"><a href="#4、socket中TCP的四次握手释放连接详解" class="headerlink" title="4、socket中TCP的四次握手释放连接详解"></a>4、socket中TCP的四次握手释放连接详解</h1><p>上面介绍了socket中TCP的三次握手建立过程，及其涉及的socket函数。</p><p>现在介绍socket中的四次握手释放连接的过程</p><p><a href="http://images.cnblogs.com/cnblogs_com/skynet/201012/201012122157487616.png"><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/aHR0cHM6Ly9pbWFnZXMuY25ibG9ncy5jb20vY25ibG9nc19jb20vc2t5bmV0LzIwMTAxMi8yMDEwMTIxMjIxNTc0OTQ2OTMucG5n" alt="image"></a></p><p>socket中发送的TCP四次握手</p><ul><li><p>某个应用进程首先调用close主动关闭连接，这时TCP发送一个FIN M；</p></li><li><p>另一端接收到FIN M之后，执行被动关闭，对这个FIN进行确认。它的接收也作为文件结束符传递给应用进程，因为FIN的接收意味着应用进程在相应的连接上再也接收不到额外数据；</p></li><li><p>一段时间之后，接收到文件结束符的应用进程调用close关闭它的socket。这导致它的TCP也发送一个FIN N；</p></li><li><p>接收到这个FIN的源发送端TCP对它进行确认。</p><p>这样每个方向上都有一个FIN和ACK。</p></li></ul><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/20190718155008892.png" alt="img"></p></li></ol><p>小明住在上海市长江路幸福小区5#666，现在小明在京东上面买了一部小米10Pro。京东在接到小米的订单后，工作人员从仓库中找到一部小米10Pro（应用层）。工作人员将手机打包好， 交给了京东物流（传输层）。接下来手机就到了转运中心（路由器），转运中心根据时间，成本等一系列因素决定下一步该发往哪一个转运中心(网络层)。决定好接下来发往哪一个转运中心后就开始用货车运输了，那么运输的过程就是数据链路层了，链路层负责将数据从一个端点送到另一个端点。那么货车行驶的道路就是物理层。几经周转，手机安全地送到了小明手上。</p><p>我们将一个小区比作一台计算机，一台计算机里面跑了很多程序，怎么区分程序呢，用的是端口，就好像小区用门牌号区分每一户人家一样。手机送到小明家了，怎么进去呢？从大门进啊，怎么找到大门呢？门牌号呀。不就相当于从互联网来的数据找到接收端计算机后再根据端口判断应该给哪一个程序一样吗。小明家的入口就可以用小区地址+门牌号进行唯一表示，那么同样的道理，程序也可以用IP+端口号进行唯一标识。那么这个程序的入口就被称作Socket。</p>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx了解</title>
      <link href="/2023/08/07/%E6%AF%8F%E5%A4%A9%E5%B0%8F%E7%9F%A5%E8%AF%86/Nginx%E4%BA%86%E8%A7%A3/"/>
      <url>/2023/08/07/%E6%AF%8F%E5%A4%A9%E5%B0%8F%E7%9F%A5%E8%AF%86/Nginx%E4%BA%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx了解"><a href="#Nginx了解" class="headerlink" title="Nginx了解"></a>Nginx了解</h1><h2 id="1-什么是Nginx"><a href="#1-什么是Nginx" class="headerlink" title="1. 什么是Nginx?"></a>1. 什么是Nginx?</h2><p>​        <em>Nginx</em> (engine x) 是一个高性能的<a href="https://baike.baidu.com/item/HTTP">HTTP</a>和<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488">反向代理</a>web服务器，同时也提供了IMAP/POP3/SMTP服务。</p><p>​        Nginx的特点是占有内存少，<a href="https://baike.baidu.com/item/%E5%B9%B6%E5%8F%91/11024806">并发</a>能力强，能够支持高达 50,000 个并发连接数的响应，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、<a href="https://baike.baidu.com/item/%E4%BA%AC%E4%B8%9C/210931">京东</a>、<a href="https://baike.baidu.com/item/%E6%96%B0%E6%B5%AA/125692">新浪</a>、<a href="https://baike.baidu.com/item/%E7%BD%91%E6%98%93/185754">网易</a>、<a href="https://baike.baidu.com/item/%E8%85%BE%E8%AE%AF/112204">腾讯</a>、<a href="https://baike.baidu.com/item/%E6%B7%98%E5%AE%9D/145661">淘宝</a>等。</p><p>​        Nginx支持正向代理、反向代理、负载均衡和动静分离。接下来一一介绍。</p><h2 id="1-1-正向代理"><a href="#1-1-正向代理" class="headerlink" title="1.1 正向代理"></a>1.1 正向代理</h2><p>​        在如今的网络环境下，我们如果由于技术需要要去访问国外的某些网站，此时你会发现位于国外的某网站我们通过浏览器是没有办法访问的，此时大家可能都会用一个**代理(vpn)**进行访问，代理的方式主要是找到一个可以访问国外网站的代理服务器，我们将请求发送给代理服务器，代理服务器去访问国外的网站，然后将访问到的数据传递给我们！</p><p>​        Nginx支持正向代理，”它代理的是客户端”，是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230302110036503.png" alt="image-20230302110036503"  /><p>客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的IP地址，还有代理程序的端口。如图。</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/1614601035172-eea2a1ad-7f1b-4b53-8dd8-a6f8578d95b8.png" alt="img"></p><p><strong>正向代理的用途：</strong></p><p>（1）访问原来无法访问的资源，如Google</p><p>（2） 可以做缓存，加速访问资源</p><p>（3）对客户端访问授权，上网进行认证</p><p>（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</p><h2 id="1-2-反向代理"><a href="#1-2-反向代理" class="headerlink" title="1.2 反向代理"></a>1.2 反向代理</h2><p>​        关于反向代理的处理方式，举例淘宝网站，每天同时连接到网站的访问人数已经爆表，单个服务器远远不能满足人民日益增长的购买欲望了，此时就出现了一个大家耳熟能详的名词：分布式部署；也就是通过部署多台服务器来解决访问人数限制的问题；淘宝网站中大部分功能也是直接使用Nginx进行反向代理实现的，并且通过封装Nginx和其他的组件之后起了个高大上的名字：Tengine，有兴趣的童鞋可以访问Tengine的官网查看具体的信息：<a href="http://tengine.taobao.org/%E3%80%82">http://tengine.taobao.org/。</a></p><blockquote><p>Tengine是一个由淘宝网发起的Web服务器开源项目，其核心成员来自于<a href="http://www.taobao.com/">淘宝</a> 、<a href="http://www.sogou.com/">搜狗</a> 等互联网企业。它在<a href="http://nginx.org/">Nginx</a> 的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如<a href="http://www.taobao.com/">淘宝网</a> ，<a href="http://www.tmall.com/">天猫商城</a> 等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。</p></blockquote><p>​        Nginx支持反向代理，”它代理的是服务端，代服务端接收请求”，主要用于服务器集群分布式部署的情况下，反向代理隐藏了服务器的信息。多个客户端给服务器发送的请求，<strong>Nginx服务器接收到之后，按照一定的规则分发给了后端的业务处理服务器进行处理</strong>了。请求的来源也就是客户端是明确的，但是请求具体由哪台服务器处理的并不明确了，Nginx扮演的就是一个反向代理角色。</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/1614601035335-708a9d56-29ed-4ed8-9fa3-8604758f20e0.png" alt="img"></p><p><strong>反向代理的作用：</strong></p><p>（1）保证内网的安全，通常将反向代理作为公网访问地址，Web服务器是内网。</p><p>（2）负载均衡，通过反向代理服务器来优化网站的负载</p><h2 id="1-3-正向代理与反向代理的应用场景"><a href="#1-3-正向代理与反向代理的应用场景" class="headerlink" title="1.3 正向代理与反向代理的应用场景"></a>1.3 正向代理与反向代理的应用场景</h2><p>通常情况下，我们在实际项目操作时，正向代理和反向代理很有可能会存在在一个应用场景中，<strong>正向代理代理客户端的请求去访问目标服务器，目标服务器是一个反向代理服务器，反向代理了多台真实的业务处理服务器。</strong>具体的拓扑图如下：</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/1614601035276-64a46660-e97c-4186-aba2-c9d533a28a87.png" alt="img"></p><h2 id="1-4-正向代理与反向代理的区别"><a href="#1-4-正向代理与反向代理的区别" class="headerlink" title="1.4 正向代理与反向代理的区别"></a>1.4 正向代理与反向代理的区别</h2><p>通过一张图来说明正向代理和反向代理二者之间的区别：</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/1614601035284-7676d4e1-1895-4435-b3a2-3ab1c9195c7d.png" alt="img"></p><p><strong>图解：</strong></p><p>在正向代理中，Proxy和Client 同属于一个LAN（图中方框内），隐藏了客户端信息；</p><p>在反向代理中，Proxy和Server同属于一个LAN（图中方框内），隐藏了服务端信息；</p><p>实际上，Proxy在两种代理中做的事情都是替服务器代为收发请求和响应，不过从结构上看正好左右互换了一下，所以把后出现的那种代理方式称为反向代理了。</p><h2 id="1-5-负载均衡"><a href="#1-5-负载均衡" class="headerlink" title="1.5 负载均衡"></a>1.5 负载均衡</h2><p>当<strong>Nginx扮演了反向代理服务器的角色</strong>，它是以依据什么样的规则进行请求分发的呢？不用的项目应用场景，分发的规则是否可以控制呢？</p><p>我们把客户端发送的、Nginx反向代理服务器接收到的请求数量，就是我们说的负载量。</p><p>请求数量按照一定的规则进行分发到不同的服务器处理的规则，就是一种均衡规则。</p><p>将服务器接收到的请求按照规则分发的过程，称为负载均衡。</p><p>负载均衡在实际项目操作过程中，有<strong>硬件负载均衡和软件负载均衡</strong>两种，硬件负载均衡也称为硬负载，如F5负载均衡，相对造价昂贵成本较高，但是数据的稳定性安全性等等有非常好的保障，如中国移动中国联通这样的公司才会选择硬负载进行操作；更多的公司考虑到成本原因，会选择使用软件负载均衡，软件负载均衡是利用现有的技术结合主机硬件实现的一种消息队列分发机制。</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/1614601035715-45ff166b-1cd0-497c-92f2-43fc237fed5f.png" alt="img"></p><p><strong>Nginx支持的负载均衡调度算法方式如下：</strong></p><ol><li><strong>weight轮询</strong>（默认，常用，具有HA功效！）：接收到的请求按照权重分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。 这种方式下，可以给不同的后端服务器设置一个权重值(weight)，用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。</li><li><strong>ip_hash</strong>（常用）：每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，这也在一定程度上解决了集群部署环境下<strong>session共享</strong>的问题。</li><li><strong>fair</strong>：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是Nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块。</li><li><strong>url_hash</strong>：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在Nginx作为静态服务器的情况下提高缓存效率。同样要注意Nginx默认不支持这种调度算法，要使用的话需要安装Nginx的hash软件包。</li></ol><h2 id="1-6-动静分离"><a href="#1-6-动静分离" class="headerlink" title="1.6 动静分离"></a>1.6 动静分离</h2><p>​        为了提高网站的响应速度，减轻程序服务器（Tomcat，Jboss等）的负载，<strong>对于静态资源比如图片，js，css等文件，我们可以在Nginx反向代理服务器中进行缓存，这样浏览器在请求一个静态资源时，Nginx代理服务器就可以直接处理，而不用将请求转发给后端服务器。</strong>用户请求的动态文件比如servlet，jsp则转发给Tomcat，Jboss服务器处理，这就是动静分离。</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/1614601035199-3b5a8b4d-d447-4de8-a9f8-5ad24efd64be.png" alt="img"></p><h2 id="1-7-几种常用web服务器对比"><a href="#1-7-几种常用web服务器对比" class="headerlink" title="1.7 几种常用web服务器对比"></a>1.7 几种常用web服务器对比</h2><table><thead><tr><th><strong>对比项\服务器</strong></th><th><strong>Apache</strong></th><th><strong>Nginx</strong></th><th><strong>Lighttpd</strong></th></tr></thead><tbody><tr><td>Proxy代理</td><td>非常好</td><td>非常好</td><td>一般</td></tr><tr><td>Rewriter</td><td>好</td><td>非常好</td><td>一般</td></tr><tr><td>Fcgi</td><td>不好</td><td>好</td><td>非常好</td></tr><tr><td>热部署</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>系统压力</td><td>很大</td><td>很小</td><td>比较小</td></tr><tr><td>稳定性</td><td>好</td><td>非常好</td><td>不好</td></tr><tr><td>安全性</td><td>好</td><td>一般</td><td>一般</td></tr><tr><td>静态文件处理</td><td>一般</td><td>非常好</td><td>好</td></tr><tr><td>反向代理</td><td>一般</td><td>非常好</td><td>一般</td></tr></tbody></table><h2 id="2-Linux安装Nginx"><a href="#2-Linux安装Nginx" class="headerlink" title="2. Linux安装Nginx"></a>2. Linux安装Nginx</h2><blockquote><p>关于Nginx的依赖说明：<a href="https://www.jianshu.com/p/14c81fbcb401">https://www.jianshu.com/p/14c81fbcb401</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将Hexo部署到云服务器(CentOS)</title>
      <link href="/2023/08/07/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%B1%BB/%E5%B0%86Hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2023/08/07/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%B1%BB/%E5%B0%86Hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1. 安装git"></a>1. 安装git</h2><p>输入下面命令即可安装</p><pre class=" language-bash"><code class="language-bash">//方法一：<span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">git</span>//方法二：yum <span class="token function">install</span> curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-develyum <span class="token function">install</span> -y <span class="token function">git</span></code></pre><p>查看git版本</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> --version </code></pre><h2 id="2-配置参数"><a href="#2-配置参数" class="headerlink" title="2. 配置参数"></a>2. 配置参数</h2><p>接下来在git中配置自己的名称和电子邮件地址，可以通过使用以下命令来完成此操作：</p><pre class=" language-.vim"><code class="language-.vim">git config --global user.name "用户名" git config --global user.email "用户邮箱"</code></pre><p>可以通过下面命令查看是否正确配置。</p><pre class=" language-.vim"><code class="language-.vim">git config --list</code></pre><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209171308239.png" alt="git安装与配置" style="zoom: 80%;" /><h2 id="3-创建一个ssh-key"><a href="#3-创建一个ssh-key" class="headerlink" title="3.创建一个ssh key"></a>3.创建一个ssh key</h2><p>作用：将电脑和github账号联系在一起的密钥，可以十分方便的通过git上传代码。</p><p>获取密钥的方法如下：</p><p>首先在命令行输入cd ~/.ssh，第一次配置会显示没有那个文件或目录，这是正常现象。</p><p>然后在命令行输入ssh-keygen -t rsa -C “邮箱地址”，接下来连按三次回车就可以了。</p><p>命令行代码如下：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209171948768.png" alt="创建ssh key" style="zoom:80%;" /><p>密钥就创建成功了。</p><p>打开/root/.ssh文件夹下id_rsa.pub文件，复制里面的内容</p><h2 id="4-登录GitHub添加ssh-key"><a href="#4-登录GitHub添加ssh-key" class="headerlink" title="4.登录GitHub添加ssh key"></a>4.登录GitHub添加ssh key</h2><p>选择setting里面的SSH and GPG keys选项</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209172417818.png" alt="SSH and GPG keys"></p><p>点击New SSH keys后界面如下图所示，Title是给密钥起一个名字，随便起一个就行，之后把刚刚复制的密钥填写在下边的大框里，点击Add SSH keys即可。</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209172508480.png" alt="New SSH keys"></p><h2 id="5-创建用户并配置初始化仓库"><a href="#5-创建用户并配置初始化仓库" class="headerlink" title="5.创建用户并配置初始化仓库"></a>5.创建用户并配置初始化仓库</h2><p>创建一个 git 仓库</p><pre class=" language-bash"><code class="language-bash"><span class="token function">useradd</span> <span class="token function">git</span> <span class="token function">passwd</span> <span class="token function">git</span> // 设置密码<span class="token function">su</span> <span class="token function">git</span> // 这步很重要，避免文件权限的各种问题<span class="token function">cd</span> /home/git/<span class="token function">mkdir</span> -p project/hexo-blog // 项目存在的真实目录,存放hexo静态文件<span class="token function">mkdir</span> repos <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> repos // 放置git仓库的文件夹<span class="token function">git</span> init --bare hexo-blog-repo.git// 创建一个裸露的仓库</code></pre><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209175642145.png" alt="配置初始化仓库"></p><h2 id="6-创建钩子函数"><a href="#6-创建钩子函数" class="headerlink" title="6.创建钩子函数"></a>6.创建钩子函数</h2><p> 新建文件夹hexo-blog-repo.git 在文件夹中创建钩子post-receive，把提交到 git 仓库的文件同步到 home/hexo文件夹中</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> hexo-blog-repo.git/hooks //进入hooks文件夹vim post-receive //创建hook钩子函数文件<span class="token punctuation">(</span>git提交时自动部署<span class="token punctuation">)</span>，</code></pre><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209175759880.png" alt="钩子函数"></p><p>编写内容如下：（i进入insert模式，编写完毕后按Esc，连按两次Z保存退出）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> --work-tree<span class="token operator">=</span>/home/git/projects/hexo-blog --git-dir<span class="token operator">=</span>/home/git/repos/hexo-blog-repo checkout -f</code></pre><h2 id="7-修改权限"><a href="#7-修改权限" class="headerlink" title="7.修改权限"></a>7.修改权限</h2><p>chmod用法： 用来修改某个目录或文件的访问权限</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> +x post-receive<span class="token keyword">exit</span> // 退出到 root 登录<span class="token function">chown</span> -R git:git /home/git/repos/hexo-blog-repo.git // 添加权限</code></pre><h2 id="8-测试能否拉取"><a href="#8-测试能否拉取" class="headerlink" title="8.测试能否拉取"></a>8.测试能否拉取</h2><p>在本地打开一个终端，以 ssh 的方式登录云服务器</p><p>server_ip：用户的服务器ip</p><pre class=" language-shell"><code class="language-shell">ssh -v git@server_ip// 输入密码 即可成功登录云服务器</code></pre><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230210135945164.png" alt=" ssh 登录云服务器" style="zoom: 80%;" /><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git@server_ip:/home/git/repos/hexo-blog-repo.git</code></pre><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209180030554.png" alt="clone结果" style="zoom:80%;" /><h2 id="9-建立客户端与服务器的-SSH-免密连接"><a href="#9-建立客户端与服务器的-SSH-免密连接" class="headerlink" title="9.建立客户端与服务器的 SSH 免密连接"></a>9.建立客户端与服务器的 SSH 免密连接</h2><p>创建 authorized_keys 以及配置权限</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /home/git/.ssh<span class="token function">touch</span> authorized_keys  //存放客户端的ssh公钥<span class="token punctuation">(</span>id_rsa.pub<span class="token punctuation">)</span><span class="token function">chmod</span> 600 authorized_keys   //配置权限</code></pre><h2 id="10-生成密钥对（已有的请忽略）"><a href="#10-生成密钥对（已有的请忽略）" class="headerlink" title="10.生成密钥对（已有的请忽略）"></a>10.生成密钥对（已有的请忽略）</h2><p>进入你本机的(windows) c:/Users/电脑名称/.ssh 文件夹下，查看是否有名为 <code>id_rsa.pub</code> 和 <code>id_rsa</code> 的文件：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209180411071.png" alt="本机密钥对" style="zoom:67%;" /><p>如果有，请跳过下面 <strong>生成密钥</strong> 这一步：</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa</code></pre><blockquote><p>中途不管你提示啥，一直Enter就是了，生成成功的话会在控制台打印出一个图案</p></blockquote><h2 id="11-建立-SSH-信任关系（免密登录）"><a href="#11-建立-SSH-信任关系（免密登录）" class="headerlink" title="11.建立 SSH 信任关系（免密登录）"></a>11.建立 SSH 信任关系（免密登录）</h2><pre class=" language-bash"><code class="language-bash">ssh-copy-id -i C:/Users/电脑用户名/.ssh/id_rsa.pub git@server_ip<span class="token function">ssh</span> git@server_ip // 测试能否登录</code></pre><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209200559093.png" alt="登录情况" style="zoom: 80%;" /><p>注意本地 ssh-keygen生成密钥对时<strong>最好不要对密钥对进行重命名</strong></p><h2 id="12-限制-git-用户的权限"><a href="#12-限制-git-用户的权限" class="headerlink" title="12.限制 git 用户的权限"></a>12.限制 git 用户的权限</h2><p>为了安全起见，最好是将 git 用户的权限设置为只能执行 <strong>git clone , git push</strong> 命令等等：</p><p>/usr/bin/git-shell</p><pre class=" language-bash"><code class="language-bash">// 查看 git-shell 是否在登录方式里面<span class="token function">cat</span> /etc/shells // 查看是否安装<span class="token function">which</span> git-shell//添加第2步显示出来的路径，通常为 /usr/bin/git-shellvim /etc/shells</code></pre><p>/etc/shells内容：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209201858460.png" alt="/etc/shells内容" style="zoom:80%;" /><p>同时修改 /etc/passwd 文件内容，更改权限：</p><pre class=" language-bash"><code class="language-bash">将原来的:git:x:1002:1002::/home/git:/bin/bash //原来的修改为:git:x:1001:1001::/home/git:/usr/bin/git-shell //修改之后</code></pre><h2 id="13-安装配置-Nginx"><a href="#13-安装配置-Nginx" class="headerlink" title="13.安装配置 Nginx"></a>13.安装配置 Nginx</h2><h4 id="13-1安装"><a href="#13-1安装" class="headerlink" title="13.1安装"></a>13.1安装</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/src <span class="token function">wget</span> <span class="token string">"http://nginx.org/download/nginx-1.17.8.tar.gz"</span> //下载安装文件<span class="token function">tar</span> -xvzf nginx-1.17.8.tar.gz -C <span class="token punctuation">..</span>/<span class="token function">cd</span> <span class="token punctuation">..</span>/nginx-1.17.8./configure --prefix<span class="token operator">=</span>/usr/local/nginx-webServer --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span> // 编译安装<span class="token function">alias</span> nginx<span class="token operator">=</span><span class="token string">'/usr/local/nginx-webServer/sbin/nginx'</span> //取别名为nginx，方便调用</code></pre><p>根据上面的步骤，安装完成，在控制台输入</p><h4 id="13-2查看版本"><a href="#13-2查看版本" class="headerlink" title="13.2查看版本"></a>13.2查看版本</h4><pre class=" language-bash"><code class="language-bash">nginx -v</code></pre><p>可看到版本信息，代表安装成功</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209202213615.png" alt="nginx版本" style="zoom:80%;" /><h4 id="13-3运行"><a href="#13-3运行" class="headerlink" title="13.3运行"></a>13.3运行</h4><pre class=" language-bash"><code class="language-bash">nginx</code></pre><p>如果80端口被占用</p><h4 id="13-4安装iptables服务"><a href="#13-4安装iptables服务" class="headerlink" title="13.4安装iptables服务"></a>13.4安装iptables服务</h4><p>需要通过防火墙开放对外端口。如果服务器上没有iptables服务，需要安装。如果有，则跳过。</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> iptables-servicessystemctl mask firewalld.servicesystemctl <span class="token function">enable</span> iptables.servicesystemctl <span class="token function">enable</span> ip6tables.service</code></pre><h4 id="13-5配置端口"><a href="#13-5配置端口" class="headerlink" title="13.5配置端口"></a>13.5配置端口</h4><p>进入iptables配置80端口，因为nginx默认是由80端口访问</p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/sysconfig/iptables</code></pre><p>打开后，默认的配置信息如下（加粗部分为新添加的）：</p><pre class=" language-bash"><code class="language-bash">INPUT ACCEPT <span class="token punctuation">[</span>0:0<span class="token punctuation">]</span>:FORWARD ACCEPT <span class="token punctuation">[</span>0:0<span class="token punctuation">]</span>:OUTPUT ACCEPT <span class="token punctuation">[</span>6:696<span class="token punctuation">]</span>-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPTA INPUT -p tcp -m state --state NEW -m tcp --dport 30000:30999 -j ACCEPT-A INPUT -j REJECT --reject-with icmp-host-prohibited-A FORWARD -j REJECT --reject-with icmp-host-prohibitedCOMMIT</code></pre><p>后续需要开放其它端口，也是在此文件中添加修改即可！</p><p>修改完后，保存退出文件编辑。</p><pre class=" language-bash"><code class="language-bash">:wq</code></pre><h4 id="13-6重启防火墙"><a href="#13-6重启防火墙" class="headerlink" title="13.6重启防火墙"></a>13.6重启防火墙</h4><pre class=" language-bash"><code class="language-bash">systemctl restart iptables.service</code></pre><h4 id="13-7端口占用问题"><a href="#13-7端口占用问题" class="headerlink" title="13.7端口占用问题"></a>13.7端口占用问题</h4><p>1）<strong>先查看80端口被什么占用了</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">fuser</span> -n tcp 80</code></pre><p>2）<strong>将占用端口杀掉</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">kill</span> -9 进程号</code></pre><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209203733586.png" alt="杀掉占用端口" style="zoom:80%;" /><h2 id="14-Nginx详细配置"><a href="#14-Nginx详细配置" class="headerlink" title="14.Nginx详细配置"></a>14.Nginx详细配置</h2><p>将 user 修改为 root //避免权限不足无法访问博客目录<br>将 root 解析路径修改为博客目录 /home/git/project/hexo-blog</p><pre class=" language-bash"><code class="language-bash">nginx -s stop //先停止nginx<span class="token function">cd</span> /usr/local/nginx-webServer/confvim nginx.conf //打开配置文件nginx -s reload //重启nginx</code></pre><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209213256203.png" alt="Nginx原先配置" style="zoom:80%;" /><p>更改之后</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209213508091.png" alt="Nginx配置更新" style="zoom:80%;" /><h2 id="15-配置站点配置文件"><a href="#15-配置站点配置文件" class="headerlink" title="15.配置站点配置文件"></a>15.配置站点配置文件</h2><p>config.yml 的 deploy:</p><pre class=" language-shel"><code class="language-shel">deploy:  type: git  repo:         server: git@server_ip:/home/git/repos/hexo-blog-repo.git  branch: master</code></pre><p>server_ip : 即你购买的服务器的 IP 地址</p><p>部署</p><pre class=" language-bash"><code class="language-bash">hexo g -d</code></pre><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221194613138.png" alt="image-20230221194613138" style="zoom:50%;" /><p><a href="https://zhuanlan.zhihu.com/p/359394085">【Nginx/Hexo】在云服务器上搭建个人博客 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> hexo </tag>
            
            <tag> CentOS </tag>
            
            <tag> git </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/07/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%B1%BB/Pandoc%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/08/07/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%B1%BB/Pandoc%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>yaml文件</title>
      <link href="/2023/08/07/springAll/yaml/"/>
      <url>/2023/08/07/springAll/yaml/</url>
      
        <content type="html"><![CDATA[<h1 id="yaml文件"><a href="#yaml文件" class="headerlink" title="yaml文件"></a>yaml文件</h1><p>​        SpringBoot的配置以后主要使用yml结尾的这种文件格式，并且在书写时可以通过提示的形式加载正确的格式。但是这种文件还是有严格的书写格式要求的。下面就来说一下具体的语法格式。</p><p>​        YAML（YAML Ain’t Markup Language），一种数据序列化格式。具有容易阅读、容易与脚本语言交互、以数据为核心，重数据轻格式的特点。常见的文件扩展名有两种：</p><ul><li><p>.yml格式（主流）</p></li><li><p>.yaml格式</p><p>具体的语法格式要求如下：</p></li></ul><ol><li>大小写敏感</li><li>属性层级关系使用多行描述，<strong>每行结尾使用冒号结束</strong></li><li>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</li><li>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</li><li>#号 表示注释</li></ol><p>​        上述规则不要死记硬背，按照书写习惯慢慢适应，并且在Idea下由于具有提示功能，慢慢适应着写格式就行了。核心的一条规则要记住，<font color="#ff0000"><b>数据前面要加空格与冒号隔开</b></font>。</p><p>​        下面列出常见的数据书写格式，熟悉一下</p><pre class=" language-YAML"><code class="language-YAML">boolean: TRUE                          #TRUE,true,True,FALSE,false，False均可float: 3.14                            #6.8523015e+5  #支持科学计数法int: 123                               #0b1010_0111_0100_1010_1110    #支持二进制、八进制、十六进制null: ~                                #使用~表示nullstring: HelloWorld                  #字符串可以直接书写string2: "Hello World"              #可以使用双引号包裹特殊字符date: 2018-02-17                    #日期必须使用yyyy-MM-dd格式datetime: 2018-02-17T15:02:31+08:00  #时间和日期之间使用T连接，最后使用+代表时区</code></pre><p>​        此外，yaml格式中也可以表示数组，在属性名书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔。</p><pre class=" language-YAML"><code class="language-YAML">subject:    - Java    - 前端    - 大数据enterprise:    name: itcast    age: 16    subject:        - Java        - 前端        - 大数据likes: [王者荣耀,刺激战场]            #数组书写缩略格式users:                             #对象数组格式一  - name: Tom       age: 4  - name: Jerry    age: 5users:                             #对象数组格式二  -      name: Tom    age: 4  -       name: Jerry    age: 5                users2: [ &#123; name:Tom , age:4 &#125; , &#123; name:Jerry , age:5 &#125; ]    #对象数组缩略格式</code></pre><p><strong>总结</strong></p><ol><li>yaml语法规则<ul><li>大小写敏感</li><li>属性层级关系使用多行描述，每行结尾使用冒号结束</li><li>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</li><li>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</li><li>#号 表示注释</li></ul></li><li>注意属性名冒号后面与数据之间有一个<strong>空格</strong></li><li>字面值、对象数据格式、数组数据格式</li></ol><p><strong>思考</strong></p><p>​        现在我们已经知道了yaml具有严格的数据格式要求，并且已经可以正确的书写yaml文件了，那这些文件书写后其实是在定义一些数据。这些数据是给谁用的呢？大部分是SpringBoot框架内部使用，但是如果我们想配置一些数据自己使用，能不能用呢？答案是可以的，那如何读取yaml文件中的数据呢？</p><h3 id="yaml数据读取"><a href="#yaml数据读取" class="headerlink" title="yaml数据读取"></a>yaml数据读取</h3><p>​        对于yaml文件中的数据，其实你就可以想象成这就是一个小型的数据库，里面保存有若干数据，每个数据都有一个独立的名字，如果你想读取里面的数据，肯定是支持的，下面就介绍3种读取数据的方式。</p><h4 id="读取单一数据"><a href="#读取单一数据" class="headerlink" title="读取单一数据"></a>读取单一数据</h4><p>​        yaml中保存的单个数据，可以使用Spring中的注解@Value读取单个数据，属性名引用方式：<font color="#ff0000"><b>${一级属性名.二级属性名……}</b></font></p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20211126180433356.png" alt="image-20211126180433356" style="zoom:80%;" /><p>​        记得使用@Value注解时，要将该注解写在某一个指定的Spring管控的bean的属性名上方，这样当bean进行初始化时候就可以读取到对应的单一数据了。</p><p><strong>总结</strong></p><ol><li>使用@Value配合SpEL读取单个数据</li><li>如果数据存在多层级，依次书写层级名称即可</li></ol><h4 id="读取全部数据"><a href="#读取全部数据" class="headerlink" title="读取全部数据"></a>读取全部数据</h4><p>​        读取单一数据可以解决读取数据的问题，但是如果定义的数据量过大，这么一个一个书写肯定会累死人的，SpringBoot提供了一个对象，能够把所有的数据都封装到这一个对象中，这个对象叫做Environment，使用自动装配注解可以将所有的yaml数据封装到这个对象中</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20211126180738569.png" alt="image-20211126180738569" style="zoom:80%;" /><p>​        数据封装到了Environment对象中，获取属性时，通过Environment的接口操作进行，具体方法是getProperties（String），参数填写属性名即可</p><p><strong>总结</strong></p><ol><li>使用Environment对象封装全部配置信息</li><li>使用@Autowired自动装配数据到Environment对象中</li></ol><h4 id="读取对象数据"><a href="#读取对象数据" class="headerlink" title="读取对象数据"></a>读取对象数据</h4><p>​        单一数据读取书写比较繁琐，全数据读取封装的太厉害了，每次拿数据还要一个一个的getProperties（）,总之用起来都不是很舒服。由于Java是一个面向对象的语言，很多情况下，我们会将一组数据封装成一个对象。SpringBoot也提供了可以将一组yaml对象数据封装一个Java对象的操作</p><p>​        首先定义一个对象，并将该对象纳入Spring管控的范围，也就是定义成一个bean，然后使用注解@ConfigurationProperties指定该对象加载哪一组yaml中配置的信息。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20211126181126382.png" alt="image-20211126181126382" style="zoom:80%;" /><p>​        这个@ConfigurationProperties必须告诉他加载的数据前缀是什么，这样指定前缀下的所有属性就封装到这个对象中。记得数据属性名要与对象的变量名一一对应啊，不然没法封装。其实以后如果你要定义一组数据自己使用，就可以先写一个对象，然后定义好属性，下面到配置中根据这个格式书写即可。</p><p>​    <img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20211126181423432.png" alt="image-20211126181423432" style="zoom:80%;" /></p><p><font color="#f01"><b>温馨提示</b></font></p><p>​        细心的小伙伴会发现一个问题，自定义的这种数据在yaml文件中书写时没有弹出提示，咱们到原理篇再揭秘如何弹出提示。</p><p><strong>总结</strong></p><ol><li>使用@ConfigurationProperties注解绑定配置信息到封装类中</li><li>封装类需要定义为Spring管理的bean，否则无法进行属性注入</li></ol><h4 id="yaml文件中的数据引用"><a href="#yaml文件中的数据引用" class="headerlink" title="yaml文件中的数据引用"></a>yaml文件中的数据引用</h4><p>​        如果你在书写yaml数据时，经常出现如下现象，比如很多个文件都具有相同的目录前缀</p><pre class=" language-YAML"><code class="language-YAML">center:    dataDir: /usr/local/fire/data    tmpDir: /usr/local/fire/tmp    logDir: /usr/local/fire/log    msgDir: /usr/local/fire/msgDir</code></pre><p>​        或者</p><pre class=" language-YAML"><code class="language-YAML">center:    dataDir: D:/usr/local/fire/data    tmpDir: D:/usr/local/fire/tmp    logDir: D:/usr/local/fire/log    msgDir: D:/usr/local/fire/msgDir</code></pre><p>​        这个时候你可以使用引用格式来定义数据，其实就是搞了个变量名，然后引用变量了，格式如下：</p><pre class=" language-YAML"><code class="language-YAML">baseDir: /usr/local/firecenter:    dataDir: $&#123;baseDir&#125;/data    tmpDir: $&#123;baseDir&#125;/tmp    logDir: $&#123;baseDir&#125;/log    msgDir: $&#123;baseDir&#125;/msgDir</code></pre><p>​    还有一个注意事项，在书写字符串时，如果需要使用转义字符，需要将数据字符串使用双引号包裹起来</p><pre class=" language-YAML"><code class="language-YAML">lesson: "Spring\tboot\nlesson"</code></pre><p><strong>总结</strong></p><ol><li>在配置文件中可以使用${属性名}方式引用属性值</li><li>如果属性中出现特殊字符，可以使用双引号包裹起来作为字符解析</li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBootCLI</title>
      <link href="/2023/08/07/springAll/SpringBootCLI/"/>
      <url>/2023/08/07/springAll/SpringBootCLI/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBootCLI"><a href="#SpringBootCLI" class="headerlink" title="SpringBootCLI"></a>SpringBootCLI</h1><blockquote><p>Spring Boot CLI 是运行 SpringBoot 命令的命令行工具，能够帮助你快速的构建 Spring Boot 项目。只需要编写简单的 groovy 脚本，即可用最少的代码构建并运行一个完整的 Spring Boot 项目。</p><p>Spring Boot CLI 为 SpringCloud 提供了 SpringBoot 命令行功能。我们可以编写 groovy 脚本来运行 SpringCloud 组件应用程序（例如 @enableurekaserver）。我们还可以轻松地执行加密和解密等操作，以支持具有机密配置值的 SpringCloud 配置客户端。使用启动器 cli，我们可以从命令行方便地同时启动诸如 eureka、zipkin、config server 等服务（这在开发时非常有用）。</p><p>本篇内容包括：spring-boot-cli 模块介绍、spring-boot-cli 模块安装、spring-boot-cli 模块 DEMO<br>原文链接：<a href="https://blog.csdn.net/weixin_45187434/article/details/128394734">https://blog.csdn.net/weixin_45187434/article/details/128394734</a></p></blockquote><p>[TOC]</p><h2 id="一、spring-boot-cli-模块介绍"><a href="#一、spring-boot-cli-模块介绍" class="headerlink" title="一、spring-boot-cli 模块介绍"></a>一、spring-boot-cli 模块介绍</h2><h3 id="1、关于-spring-boot-cli-模块"><a href="#1、关于-spring-boot-cli-模块" class="headerlink" title="1、关于 spring-boot-cli 模块"></a>1、关于 spring-boot-cli 模块</h3><p>Spring Boot CLI 是运行 SpringBoot 命令的命令行工具，能够帮助你快速的构建 Spring Boot 项目。只需要编写简单的 groovy 脚本，即可用最少的代码构建并运行一个完整的 Spring Boot 项目。</p><p>Spring Boot CLI 为 SpringCloud 提供了 SpringBoot 命令行功能。我们可以编写 groovy 脚本来运行 SpringCloud 组件应用程序（例如 @enableurekaserver）。我们还可以轻松地执行加密和解密等操作，以支持具有机密配置值的 SpringCloud 配置客户端。使用启动器 cli，我们可以从命令行方便地同时启动诸如 eureka、zipkin、config server 等服务（这在开发时非常有用）。</p><h3 id="2、关于-Groovy-语言"><a href="#2、关于-Groovy-语言" class="headerlink" title="2、关于 Groovy 语言"></a>2、关于 Groovy 语言</h3><p>Groovy 是一种基于 JVM（Java虚拟机）的敏捷开发语言，它结合了 Python、Ruby 和 Smalltalk 的许多强大的特性，Groovy 代码能够与 Java 代码很好地结合，也能用于扩展现有代码。由于其运行在 JVM 上的特性，Groovy 也可以使用其他非 Java 语言编写的库。</p><h3 id="3、spring-boot-cli-源码地址"><a href="#3、spring-boot-cli-源码地址" class="headerlink" title="3、spring-boot-cli 源码地址"></a>3、spring-boot-cli 源码地址</h3><p>spring-boot-cli 位于 spring-boot 项目中。</p><p>spring-boot-cli 在 源码地址为：<a href="https://github.com/spring-projects/spring-boot/tree/v2.1.0.RELEASE/spring-boot-project/spring-boot-cli">https://github.com/spring-projects/spring-boot/tree/v2.1.0.RELEASE/spring-boot-project/spring-boot-cli</a></p><h3 id="4、spring-boot-cli-优势"><a href="#4、spring-boot-cli-优势" class="headerlink" title="4、spring-boot-cli 优势"></a>4、spring-boot-cli 优势</h3><p>spring-boot-cli 具有以下优势/特点：</p><p>Spring boot CLI 应用程序使用 groovy。<br>我们在应用程序中创建 groovy 文件，为此我们不需要提供 groovy 的任何 JAR 依赖。<br>SpringBoot 会自己配置 groovy 的 JAR 依赖项；</p><h2 id="二、spring-boot-cli-模块安装"><a href="#二、spring-boot-cli-模块安装" class="headerlink" title="二、spring-boot-cli 模块安装"></a>二、spring-boot-cli 模块安装</h2><h3 id="1、spring-boot-cli-模块官网地址"><a href="#1、spring-boot-cli-模块官网地址" class="headerlink" title="1、spring-boot-cli 模块官网地址"></a>1、spring-boot-cli 模块官网地址</h3><p>spring-boot-cli 官网地址：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/cli.html#cli">https://docs.spring.io/spring-boot/docs/current/reference/html/cli.html#cli</a>.</p><p>spring-boot-cli 安装官网地址: <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started.installing.cli">https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started.installing.cli</a>.</p><p>spring-boot-cli 版本安装地址: <a href="https://repo.spring.io/ui/native/release/org/springframework/boot/spring-boot-cli">https://repo.spring.io/ui/native/release/org/springframework/boot/spring-boot-cli</a></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230718114504355.png" alt="image-20230718114504355"></p><p>PS：此处采用的版本与上图不同为 2.5.5</p><h3 id="2、spring-boot-cli-模块安装"><a href="#2、spring-boot-cli-模块安装" class="headerlink" title="2、spring-boot-cli 模块安装"></a>2、spring-boot-cli 模块安装</h3><p>自行选择压缩包及版本后下载，解压后目录：</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230718114414421.png" alt="image-20230718114414421"></p><h3 id="3、spring-boot-cli-模块环境变量配置"><a href="#3、spring-boot-cli-模块环境变量配置" class="headerlink" title="3、spring-boot-cli 模块环境变量配置"></a>3、spring-boot-cli 模块环境变量配置</h3><p><code>vi ~/.bash_profile</code> 添加以下内容</p><pre class=" language-shell"><code class="language-shell">export SPRING_HOME=/Users/lizhengi/Downloads/spring-2.5.5export PATH=$PATH:$SPRING_HOME/bin</code></pre><p><code>source ~/.bash_profile</code> 更新环境变量</p><p>查看版本验证配置成功 </p><p><code>spring --version</code><br><code>Spring CLI v3.0.0</code></p><h2 id="三、spring-boot-cli-模块-DEMO"><a href="#三、spring-boot-cli-模块-DEMO" class="headerlink" title="三、spring-boot-cli 模块 DEMO"></a>三、spring-boot-cli 模块 DEMO</h2><h3 id="1、新建脚本"><a href="#1、新建脚本" class="headerlink" title="1、新建脚本"></a>1、新建脚本</h3><p>一般 Java 想要启动一个 web 应用需要很多样板代码与配置，一个基于 Spring 的 web 应用就更加可怕了，如果没有IDE的帮助，新建一个估计得查半天资料。而使用 Spring Boot CLI 我们只需要一个文件！</p><p>新建一个 Groovy 脚本：hello.groovy</p><pre class=" language-groovy"><code class="language-groovy"><span class="token annotation punctuation">@RestController</span><span class="token keyword">class</span> <span class="token class-name">ThisWillActuallyRun</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    String <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token string">"Hello World!--------"</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>或者新建一个 Java 脚本：hello.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Hello World Java!"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="2、运行脚本"><a href="#2、运行脚本" class="headerlink" title="2、运行脚本"></a>2、运行脚本</h3><p>然后执行</p><p><code>$ spring run app.groovy</code></p><p>第一次执行会下载依赖，会慢一些，之后就很快了，通过localhost:8080可以访问这个应用。</p><p>如果想指定别的端口：</p><p><code>$ spring run hello.groovy -- --server.port=9000</code></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot升级</title>
      <link href="/2023/08/07/springAll/SpringBoot%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/08/07/springAll/SpringBoot%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Bean-和-依赖注入"><a href="#Spring-Bean-和-依赖注入" class="headerlink" title="Spring Bean 和 依赖注入"></a>Spring Bean 和 依赖注入</h1><p>你可以使用任何标准的Spring技术来定义你的Bean以及依赖注入关系。</p><p><font color="#ff0000"><b>推荐使用构造函数注入，并使用 <code>@ComponentScan</code> 注解来扫描Bean</b></font></p><p>如果你按照上面的建议构造你的代码（将你的启动类定位在顶级包中），你可以在启动类添加 <code>@ComponentScan</code> 注解，也不需要定义它任何参数， 你的所有应用组件（<code>@Component</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code> 和其他）都会自动注册为Spring Bean。</p><p>也可以直接使用 <code>@SpringBootApplication</code> 注解（该注解已经包含了 <code>@ComponentScan</code>）。</p><p>下面的例子展示了一个 <code>@Service</code> Bean，它使用构造器注入的方式注入了 <code>RiskAssessor</code> Bean。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAccountService</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RiskAssessor riskAssessor<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyAccountService</span><span class="token punctuation">(</span>RiskAssessor riskAssessor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>riskAssessor <span class="token operator">=</span> riskAssessor<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>如果一个Bean有多个构造函数，你需要用 <code>@Autowired</code> 注解来告诉Spring该用哪个构造函数进行注入。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAccountService</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RiskAssessor riskAssessor<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> PrintStream out<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">MyAccountService</span><span class="token punctuation">(</span>RiskAssessor riskAssessor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>riskAssessor <span class="token operator">=</span> riskAssessor<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>out <span class="token operator">=</span> System<span class="token punctuation">.</span>out<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyAccountService</span><span class="token punctuation">(</span>RiskAssessor riskAssessor<span class="token punctuation">,</span> PrintStream out<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>riskAssessor <span class="token operator">=</span> riskAssessor<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>out <span class="token operator">=</span> out<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>上面示例中通过构造器注入的 <code>riskAssessor</code> 字段被标识为了 <code>final</code>，表示一旦Bean创建这个字段就不被改变了。这也是推荐的做法。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot升级</title>
      <link href="/2023/08/07/springAll/SpringBoot%E5%8D%87%E7%BA%A7/"/>
      <url>/2023/08/07/springAll/SpringBoot%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><h2 id="1-从-1-x-升级"><a href="#1-从-1-x-升级" class="headerlink" title="1. 从 1.x 升级"></a>1. 从 1.x 升级</h2><p>如果你要从Spring Boot的 <code>1.x</code> 版本升级，请查看 <a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide">项目维基上的 “迁移指南”</a>。 ，其中提供了详细的升级说明。 还可以查看 <a href="https://github.com/spring-projects/spring-boot/wiki">“发布说明”</a> ，了解每个版本的 “新的和值得注意的” 特性列表。</p><h2 id="2-升级到一个新的特性版本"><a href="#2-升级到一个新的特性版本" class="headerlink" title="2. 升级到一个新的特性版本"></a>2. 升级到一个新的特性版本</h2><p>在升级到新的功能版本时，一些属性可能已经被重新命名或删除。 Spring Boot提供了一种方法，可以在启动时分析你的应用程序的环境并打印诊断结果，还可以在运行时为你临时迁移属性。 要启用该功能，请在你的项目中添加以下依赖。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-properties-migrator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>在environment中添加得较晚的属性，例如使用 <code>@PropertySource</code> 时，将不会被考虑在内</p><p>一旦你完成了迁移，请确保从你的项目的依赖中删除这个依赖。</p><h2 id="3-升级-Spring-Boot-CLI"><a href="#3-升级-Spring-Boot-CLI" class="headerlink" title="3. 升级 Spring Boot CLI"></a>3. 升级 Spring Boot CLI</h2><p>要升级现有的CLI，可以使用适当的软件包管理器命令（例如，<code>brew upgrade</code>）。 如果你是手动安装了CLI的，请遵循<a href="https://springdoc.cn/spring-boot/getting-started.html#getting-started.installing.cli.manual-installation">标准说明</a>，记得更新你的 <code>PATH</code> 环境变量，删除任何旧的引用。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot@Import和@ImportResource和@PropertySource</title>
      <link href="/2023/08/07/springAll/SpringBoot@Import/"/>
      <url>/2023/08/07/springAll/SpringBoot@Import/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot中-Import和-ImportResource和-PropertySource"><a href="#SpringBoot中-Import和-ImportResource和-PropertySource" class="headerlink" title="SpringBoot中@Import和@ImportResource和@PropertySource"></a>SpringBoot中@Import和@ImportResource和@PropertySource</h1><blockquote><p>原文链接：<a href="https://blog.csdn.net/u012060033/article/details/98088820">https://blog.csdn.net/u012060033/article/details/98088820</a></p><p>原文链接：<a href="https://blog.csdn.net/2301_76607156/article/details/129835319">https://blog.csdn.net/2301_76607156/article/details/129835319</a></p></blockquote><p>[TOC]</p><h2 id="Import注解的实现原理：涉及到Spring框架的组件扫描、Bean注册和依赖注入等机制"><a href="#Import注解的实现原理：涉及到Spring框架的组件扫描、Bean注册和依赖注入等机制" class="headerlink" title="@Import注解的实现原理：涉及到Spring框架的组件扫描、Bean注册和依赖注入等机制"></a>@Import注解的实现原理：涉及到Spring框架的组件扫描、Bean注册和依赖注入等机制</h2><ol><li>组件扫描：Spring框架会通过组件扫描机制，自动扫描并加载带有@Configuration注解或其他指定注解的配置类，将它们识别为配置类。</li><li>注册配置类：当一个配置类被识别后，Spring会将其实例化为一个Bean，并将其注册到容器中。这样，配置类内部定义的所有Bean都可以由Spring容器进行管理。</li><li>处理@Import注解：当在配置类上使用@Import注解时，Spring会解析注解的参数，根据参数的不同类型进行相应的处理。<ul><li>导入其他配置类：如果@Import的参数是其他配置类（例如@Configuration注解的类），Spring会将导入的配置类也加入到容器中，使得被导入的配置类内部定义的Bean也可以被管理。</li><li>导入普通类：如果@Import的参数是普通类，则Spring会将该类实例化为一个Bean，并注册到容器中。</li><li>导入实现了ImportSelector的类：如果@Import的参数是实现了ImportSelector接口的类，Spring会调用ImportSelector接口的selectImports()方法，根据返回的类名数组将相应的类注册为Bean。这样，可以根据特定的逻辑动态选择需要导入的类。</li><li>导入实现了ImportBeanDefinitionRegistrar的类：如果@Import的参数是实现了ImportBeanDefinitionRegistrar接口的类，Spring会调用ImportBeanDefinitionRegistrar接口的registerBeanDefinitions()方法，通过编程方式注册Bean定义到容器中。这样，可以通过自定义的逻辑来注册额外的Bean。</li></ul></li></ol><p>通过以上步骤，@Import注解使得我们能够方便地导入其他配置类、普通类或实现了ImportSelector、ImportBeanDefinitionRegistrar接口的类，并将它们注册到Spring容器中，从而实现Bean的管理和依赖注入。</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230718163032184.png" alt="image-20230718163032184"></p><p>如上图所示，我们在使用User的时候直接注入是没有问题的，因为UserConfig配置类，在启动主类的默认扫描范围内。</p><p>@SpringBootApplication 默认扫描范围是，扫描当前程序启动主类所在的包，及其当前包下的所有子包。如果需要扫描父类包中的配置，需要在启动类上使用 @ComponentScan(“***”) 注解来指明扫描的包路径。</p><p> 如果配置类所在路径不在主类所在包，及其子包下，如下：<br><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230718162928063.png" alt="image-20230718162928063"></p><p>这种情况下，如果直接注入FaultConfig的话，程序在启动的时候就会报错</p><p><strong>@SpringBootApplication 默认扫描范围是，扫描当前程序启动主类所在的包，及其当前包下的所有子包。如果需要扫描父类包中的配置，需要在启动类上使用 @ComponentScan(“com.**”) 注解来指明扫描的包路径。</strong></p><p> 解决办法</p><pre class=" language-java"><code class="language-java">在启动类上加 <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"*.**"</span><span class="token punctuation">)</span> 注解，直接搞定使用 <span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>UserConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> 注解引入</code></pre><p>方式一简单粗暴，直接解决问题，但是，这种解决方式，仅仅只适合知道该类的包名，在此基础之上，就延伸出了 @Import</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230718163855602.png" alt="image-20230718163855602"></p><h2 id="一、3个注解概述"><a href="#一、3个注解概述" class="headerlink" title="一、3个注解概述"></a>一、3个注解概述</h2><p>概述：</p><p>@Import注解是引入java类：</p><ol><li>导入@Configuration注解的配置类（4.2版本之前只可以导入配置类，4.2版本之后也可以导入普通类）</li><li>导入ImportSelector的实现类</li><li>导入ImportBeanDefinitionRegistrar的实现类</li></ol><p>@ImportResource是引入spring配置文件.xml</p><p>@PropertySource是引入自定义配置文件(yml或properties)，用于spring boot 配置文件(yml或properties)与实体属性映射</p><h2 id="二、-Import：获取某个类的bean对象"><a href="#二、-Import：获取某个类的bean对象" class="headerlink" title="二、@Import：获取某个类的bean对象"></a>二、@Import：获取某个类的bean对象</h2><p>@Import 注解出自spring-context包中，该注解主要是用作导入一个配置类（Configuration），正常我们创建一个配置文件，都是在 @SpringBootApplication 的可扫描范围内，然后业务在使用到这个配置的时候，直接 @Autowired 注入就可以正常使用</p><h3 id="使用详情"><a href="#使用详情" class="headerlink" title="使用详情"></a>使用详情</h3><p>Import注解源码的定义非常简单，就一个属性 value，而且是一个 Class 类型的数组。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>可以同时导入多个 @Configuration类 、ImportSelector 和 ImportBeanDefinitionRegistrar 的实现，以及导入普通类</li><li>@Import的功能与 xml 中的 <import/>标签等效</li><li>在类级别声明或作为元注释</li><li>如果需要导入XML 或其他非bean 定义资源，请使用@ImportResource注解</li></ul><h3 id="第一种：-Import-A-class"><a href="#第一种：-Import-A-class" class="headerlink" title="第一种：@Import(A.class)"></a>第一种：@Import(A.class)</h3><p>直接使用@Import导入了一个类，然后自动的就被放置在IOC容器中了。</p><blockquote><p>注意：我们的Person类上 就不需要任何的注解了，直接导入即可。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** 直接使用@Import导入User类，然后尝试从applicationContext中取，成功拿到**/</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        AnnotationConfigApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>Demo1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User bean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="第二种：-Import-MyImportBeanDefinitionRegister-class"><a href="#第二种：-Import-MyImportBeanDefinitionRegister-class" class="headerlink" title="第二种：@Import(MyImportBeanDefinitionRegister.class)"></a>第二种：@Import(MyImportBeanDefinitionRegister.class)</h3><p>第二种形式@Import(MyImportBeanDefinitionRegister.class)<br> 传递了一个bean定义注册器，这个注册器的具体内容如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImportBeanDefinitionRegister</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata importingClassMetadata<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                RootBeanDefinition aDef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> aDef<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这个注册器实现了ImportBeanDefinitionRegistrar接口，并且重写了里面的registerBeanDefinitions方法<br>看他做了什么事：创建了一个新的bean定义，他的类型就是A，然后把这个bean定义注册到BeanDefinitionMap里面，key值我们可以人为设置，这里就设置成”a”<br>这样在传递一个注册器的时候，我们就可以把注册器中新增的bean定义注册进来使用。</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230718190411758.png" alt="image-20230718190411758"></p><p>BeanDefinition（<a href="https://jingzh.blog.csdn.net/article/details/123162295">点此了解Spring中beandefinition</a>），可以简单理解为bean的定义(bean的元数据)，也是需要放在IOC容器中进行管理的，先有bean的元数据，applicationContext再根据bean的元数据去创建Bean。</p><h3 id="第三种：-Import-MyImportSelector-class"><a href="#第三种：-Import-MyImportSelector-class" class="headerlink" title="第三种：@Import(MyImportSelector.class)"></a>第三种：@Import(MyImportSelector.class)</h3><p>Application.class</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImportInnotationApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ImportInnotationApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        AnnotationConfigApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MyAutoConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        A aaa <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> A<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>MyAutoConfig.class</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MyEnableAutoConfig</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAutoConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>MyEnableAutoConfig.@interface</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>MyImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 导入bean定义</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyEnableAutoConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>MyImportSelector.class</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">ImportSelector</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span>AnnotationMetadata importingClassMetadata<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 导入配置类</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"cn.itsource.importinnotation.config.MyConfig"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//或者这样写 </span>        <span class="token comment" spellcheck="true">//return new String[]&amp;#123;A.class.getName()&amp;#125;;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这个类实现了ImportSelector接口，并且重写了selectImports方法，返回一个字符串数组<br>我们可以看到，返回的字符串数组中是我们要<strong>导入类的全类名</strong><br>这个Importer返回的类：</p><p>​    如果是组件bean对象，就会被加载进来使用；</p><p>​    如果是一个配置类，就会加载这个配置类<br>第三种和第二种的区别：</p><p>​    第三种可以一次性写很多类，而且比较简洁，只需要清楚类的全包名即可。</p><p>​    第二种方式需要自己清楚包类名，手动创建bean定义，然后手动加入BeanDefinitionMap。</p><p>从MyImportSelector可以找到config.MyConfig类，即JavaConfig版本的配置文件：</p><p>加载这个MyConfig配置类，就相当于加载了A和B两个Bean定义</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> A <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> B <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>A.class和B.class</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"我是AAA"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> B b<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"我是BBB"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>运行界面：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230718181710276.png" alt="image-20230718181710276" style="zoom:80%;" /><p>实现 ImportSelector 的类不会被注入容器中。</p><p>效果达到之后，你会发现这种使用方式有点繁琐，还要写一个实现类。觉得并没有什么用，直接使用 import直接导入不更优雅吗。的确是的，如果是导入固定的 Bean 定义，这种方式肯定不是最优的。所以它的用途在其他方向，比如需要进行一些逻辑处理之后，进行动态注册时，该方式是非常有用的。在 Spring、Spring Boot底层大量使用该方式进行导入Bean定义。</p><h3 id="补充：-Import-DeferredImportSelector"><a href="#补充：-Import-DeferredImportSelector" class="headerlink" title="补充：@Import + DeferredImportSelector"></a>补充：@Import + DeferredImportSelector</h3><p>这种方式也需要我们进行实现接口，其实它和@Import的第二种方式差不多，DeferredImportSelector 它是 ImportSelector 的子接口，所以实现的方法和第二种无异。只是Spring的处理方式不同，它和Spring Boot中的自动导入配置文件延迟导入有关，非常重要。使用方式如下:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>MyDeferredImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        AnnotationConfigApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>Demo1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person bean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyDeferredImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">DeferredImportSelector</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span>AnnotationMetadata importingClassMetadata<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 也是直接将Person的全限定名放进去</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="三、-ImportResource"><a href="#三、-ImportResource" class="headerlink" title="三、@ImportResource"></a>三、@ImportResource</h2><p>@ImportResource等同于xml配置：</p><import resource="cons-injec.xml" /><p>xml配置文件<br>cons-injec.xml：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>c</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/c<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>compactDisc<span class="token punctuation">"</span></span>             <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.jiaobuchong.soundsystem.BlankDisc<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">c:</span>_0</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sgt. Pepper<span class="token punctuation">'</span>s Lonely Hearts Club Band<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">c:</span>_1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>The Beatles<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Sgt. Pepper's Lonely Hearts Club Band<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>With a Little Help from My Friends<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Lucy in the Sky with Diamonds<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Getting Better<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Fixing a Hole<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                            <span class="token comment" spellcheck="true">&lt;!-- ...other tracks omitted for brevity... --></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="支持的三种类型"><a href="#支持的三种类型" class="headerlink" title="支持的三种类型"></a>支持的三种类型</h2><ul><li>实现 <code>ImportSelector</code> 接口的类</li><li>实现 <code>ImportBeanDefinitionRegistrar</code> 接口的类</li><li>不是上述两种情况，将类作为配置类处理。</li></ul><h3 id="Import导入配置类"><a href="#Import导入配置类" class="headerlink" title="@Import导入配置类"></a>@Import导入配置类</h3><p>这里说的配置类是被 <code>@Configuration</code>标注的类。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImportTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ImportTest === >"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>启动结果和导入普通类一致。区别在于 <strong>被 <code>@Configuration</code>标注的类会被 CGLIB 进行代理</strong>。</li></ul><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230718154142234.png" alt="image-20230718154142234" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot的@SpringBootApplication 注解</title>
      <link href="/2023/08/07/springAll/SpringBoot@SpringBootApplication/"/>
      <url>/2023/08/07/springAll/SpringBoot@SpringBootApplication/</url>
      
        <content type="html"><![CDATA[<h2 id="使用-SpringBootApplication-注解"><a href="#使用-SpringBootApplication-注解" class="headerlink" title="使用 @SpringBootApplication 注解"></a>使用 @SpringBootApplication 注解</h2><p>许多Spring Boot开发者希望他们的应用程序能够使用自动配置、组件扫描，并且能够在他们的 “application class “上定义额外的配置。 一个 <code>@SpringBootApplication</code> 注解就可以用来启用这三个功能，如下。</p><ul><li><code>@EnableAutoConfiguration</code>：启用Spring Boot的自动配置机制。</li><li><code>@ComponentScan</code>：对应用程序所在的包启用 <code>@Component</code> 扫描。</li><li><code>@SpringBootConfiguration</code>：允许在Context中注册额外的Bean或导入额外的配置类。这是Spring标准的 <code>@Configuration</code> 的替代方案，有助于在你的集成测试中<a href="https://springdoc.cn/spring-boot/features.html#features.testing.spring-boot-applications.detecting-configuration">检测配置</a>。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Same as @SpringBootConfiguration @EnableAutoConfiguration @ComponentScan</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MyApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><code>@SpringBootApplication</code> 也提供了属性别名来定制 <code>@EnableAutoConfiguration</code> 和 <code>@ComponentScan</code> 中的属性。</p><p>  这些功能都不是强制必须的，你可以随时只使用其中任意功能的注解。 例如，你不需要在你的应用程序中使用组件扫描或配置属性扫描。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringBootConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>EnableAutoConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Import<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> SomeConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> AnotherConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MyApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>在这个例子中，<code>MyApplication</code> 和其他Spring Boot应用程序一样，只是不能自动检测到 <code>@Component</code> 和 <code>@ConfigurationProperties</code> 注解的类，而是明确导入用户定义的Bean（见 <code>@Import</code>）。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot@Valid 注解 + Exception 全局处理器优雅处理参数验证</title>
      <link href="/2023/08/07/springAll/SpringBoot@Valid%20%E6%B3%A8%E8%A7%A3%20+%20Exception%20%E5%85%A8%E5%B1%80%E5%A4%84%E7%90%86%E5%99%A8%E4%BC%98%E9%9B%85%E5%A4%84%E7%90%86%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81/"/>
      <url>/2023/08/07/springAll/SpringBoot@Valid%20%E6%B3%A8%E8%A7%A3%20+%20Exception%20%E5%85%A8%E5%B1%80%E5%A4%84%E7%90%86%E5%99%A8%E4%BC%98%E9%9B%85%E5%A4%84%E7%90%86%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-Valid-注解-Exception-全局处理器优雅处理参数验证"><a href="#SpringBoot-Valid-注解-Exception-全局处理器优雅处理参数验证" class="headerlink" title="SpringBoot@Valid 注解 + Exception 全局处理器优雅处理参数验证"></a>SpringBoot@Valid 注解 + Exception 全局处理器优雅处理参数验证</h1><p>[TOC]</p><h3 id="Jdk-版本：jdk-8"><a href="#Jdk-版本：jdk-8" class="headerlink" title="Jdk 版本：jdk 8"></a>Jdk 版本：jdk 8</h3><p>SpringBoot 版本：2.2.1.RELEASE</p><h2 id="一、为什么使用-Valid-来验证参数"><a href="#一、为什么使用-Valid-来验证参数" class="headerlink" title="一、为什么使用 @Valid 来验证参数"></a>一、为什么使用 @Valid 来验证参数</h2><p>在平常通过 Spring 框架写代码时候，会经常写接口类，相信大家对该类的写法非常熟悉。在写接口时经常要写效验请求参数逻辑，这时候我们会常用做法是写大量的 if 与 if else 类似这样的代码来做判断，不仅不优雅，而且如果存在大量的验证逻辑，这会使代码看起来乱糟糟，大大降低代码可读性，简化这个过程推荐的是使用 @Valid 注解来帮助我们简化验证逻辑。</p><h2 id="二、-Valid-注解的作用"><a href="#二、-Valid-注解的作用" class="headerlink" title="二、@Valid 注解的作用"></a>二、@Valid 注解的作用</h2><p>注解 @Valid 的主要作用是用于数据效验，可以在定义的实体中的属性上，添加不同的注解来完成不同的校验规则，而在接口类中的接收数据参数中添加 @valid 注解，这时你的实体将会开启一个校验的功能。</p><h2 id="三、-Valid-的相关注解"><a href="#三、-Valid-的相关注解" class="headerlink" title="三、@Valid 的相关注解"></a>三、@Valid 的相关注解</h2><p>下面是 @Valid 相关的注解，在实体类中不同的属性上添加不同的注解，就能实现不同数据的效验功能。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230711133559859.png" alt="image-20230711133559859" style="zoom: 80%;" /><h2 id="四、使用-Valid-进行参数效验步骤"><a href="#四、使用-Valid-进行参数效验步骤" class="headerlink" title="四、使用 @Valid 进行参数效验步骤"></a>四、使用 @Valid 进行参数效验步骤</h2><p>整个过程如下图所示，用户访问接口，然后进行参数效验，因为 @Valid 不支持平面的参数效验（直接写在参数中字段的效验）所以基于 GET 请求的参数还是按照原先方式进行效验，而 POST  则可以以实体对象为参数，可以使用 @Valid 方式进行效验。如果效验通过，则进入业务逻辑，否则抛出异常，交由全局异常处理器进行处理。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230711133705760.png" alt="image-20230711133705760" style="zoom:80%;" /><h3 id="1、实体类中添加-Valid-相关注解"><a href="#1、实体类中添加-Valid-相关注解" class="headerlink" title="1、实体类中添加 @Valid 相关注解"></a>1、实体类中添加 @Valid 相关注解</h3><p>使用 @Valid 相关注解非常简单，只需要在参数的实体类中属性上面添加如 @NotBlank、@Max、@Min 等注解来对该字段进限制，如下：</p><p>User：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"姓名不为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"密码不为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>如果是嵌套的实体对象，则需要在<strong>最外层属性</strong>上添加 @Valid 注解：</p><p>User：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"姓名不为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"密码不为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//嵌套必须加 @Valid，否则嵌套中的验证不生效</span>    <span class="token annotation punctuation">@Valid</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"用户信息不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> UserInfo userInfo<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>UserInfo：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"年龄不为空"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"不能超过18岁"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"性别不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String gender<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="2、接口类中添加-Valid-注解"><a href="#2、接口类中添加-Valid-注解" class="headerlink" title="2、接口类中添加 @Valid 注解"></a>2、接口类中添加 @Valid 注解</h3><p>在 Controller 类中添加接口，POST 方法中接收设置了 @Valid 相关注解的实体对象，然后在参数中添加 @Valid 注解来开启效验功能，需要注意的是， @Valid 对 Get 请求中接收的平面参数请求无效，稍微略显遗憾。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">addUserInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"调用成功!"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="3、全局异常处理类中处理-Valid-抛出的异常"><a href="#3、全局异常处理类中处理-Valid-抛出的异常" class="headerlink" title="3、全局异常处理类中处理 @Valid 抛出的异常"></a>3、全局异常处理类中处理 @Valid 抛出的异常</h3><p>最后，我们写一个全局异常处理类，然后对接口中抛出的异常进行处理，而 @Valid 配合 Spring 会抛出 MethodArgumentNotValidException 异常，这里我们需要对该异常进行处理即可。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token punctuation">(</span><span class="token string">"club.mydlq.valid"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//指定异常处理的包名</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//设置状态码为 400</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>MethodArgumentNotValidException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">paramExceptionHandler</span><span class="token punctuation">(</span>MethodArgumentNotValidException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        BindingResult exceptions <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断异常中是否有错误信息，如果存在就使用异常中的消息，否则使用默认消息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exceptions<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>ObjectError<span class="token operator">></span> errors <span class="token operator">=</span> exceptions<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 这里列出了全部错误参数，按正常逻辑，只需要第一条错误即可</span>                FieldError fieldError <span class="token operator">=</span> <span class="token punctuation">(</span>FieldError<span class="token punctuation">)</span> errors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> fieldError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"请求参数错误"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="五、SpringBoot-中使用-Valid-示例"><a href="#五、SpringBoot-中使用-Valid-示例" class="headerlink" title="五、SpringBoot 中使用 @Valid 示例"></a>五、SpringBoot 中使用 @Valid 示例</h2><h3 id="1、Maven-引入相关依赖"><a href="#1、Maven-引入相关依赖" class="headerlink" title="1、Maven 引入相关依赖"></a>1、Maven 引入相关依赖</h3><p>Maven 引入 SpringBoot 相关依赖，这里引入了 Lombok 包来简化开发过程。</p><pre class=" language-yaml"><code class="language-yaml">&lt;<span class="token punctuation">?</span>xml version="1.0" encoding="UTF<span class="token punctuation">-</span>8"<span class="token punctuation">?</span><span class="token punctuation">></span>&lt;project xmlns="http<span class="token punctuation">:</span>//maven.apache.org/POM/4.0.0" xmlns<span class="token punctuation">:</span>xsi="http<span class="token punctuation">:</span>//www.w3.org/2001/XMLSchema<span class="token punctuation">-</span>instance"    xsi<span class="token punctuation">:</span>schemaLocation="http<span class="token punctuation">:</span>//maven.apache.org/POM/4.0.0 https<span class="token punctuation">:</span>//maven.apache.org/xsd/maven<span class="token punctuation">-</span>4.0.0.xsd"<span class="token punctuation">></span>    &lt;modelVersion<span class="token punctuation">></span>4.0.0&lt;/modelVersion<span class="token punctuation">></span>    &lt;parent<span class="token punctuation">></span>        &lt;groupId<span class="token punctuation">></span>org.springframework.boot&lt;/groupId<span class="token punctuation">></span>        &lt;artifactId<span class="token punctuation">></span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>parent&lt;/artifactId<span class="token punctuation">></span>        &lt;version<span class="token punctuation">></span>2.2.1.RELEASE&lt;/version<span class="token punctuation">></span>    &lt;/parent<span class="token punctuation">></span>    &lt;groupId<span class="token punctuation">></span>com.aspire&lt;/groupId<span class="token punctuation">></span>    &lt;artifactId<span class="token punctuation">></span>springboot<span class="token punctuation">-</span>valid<span class="token punctuation">-</span>demo&lt;/artifactId<span class="token punctuation">></span>    &lt;version<span class="token punctuation">></span>0.0.1<span class="token punctuation">-</span>SNAPSHOT&lt;/version<span class="token punctuation">></span>    &lt;name<span class="token punctuation">></span>springboot<span class="token punctuation">-</span>valid<span class="token punctuation">-</span>demo&lt;/name<span class="token punctuation">></span>    &lt;description<span class="token punctuation">></span>@valid demo&lt;/description<span class="token punctuation">></span>    &lt;properties<span class="token punctuation">></span>        &lt;java.version<span class="token punctuation">></span>1.8&lt;/java.version<span class="token punctuation">></span>    &lt;/properties<span class="token punctuation">></span>    &lt;dependencies<span class="token punctuation">></span>        &lt;dependency<span class="token punctuation">></span>            &lt;groupId<span class="token punctuation">></span>org.springframework.boot&lt;/groupId<span class="token punctuation">></span>            &lt;artifactId<span class="token punctuation">></span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>starter<span class="token punctuation">-</span>web&lt;/artifactId<span class="token punctuation">></span>        &lt;/dependency<span class="token punctuation">></span>        &lt;dependency<span class="token punctuation">></span>            &lt;groupId<span class="token punctuation">></span>org.projectlombok&lt;/groupId<span class="token punctuation">></span>            &lt;artifactId<span class="token punctuation">></span>lombok&lt;/artifactId<span class="token punctuation">></span>            &lt;optional<span class="token punctuation">></span>true&lt;/optional<span class="token punctuation">></span>        &lt;/dependency<span class="token punctuation">></span>    &lt;/dependencies<span class="token punctuation">></span>    &lt;build<span class="token punctuation">></span>        &lt;plugins<span class="token punctuation">></span>            &lt;plugin<span class="token punctuation">></span>                &lt;groupId<span class="token punctuation">></span>org.springframework.boot&lt;/groupId<span class="token punctuation">></span>                &lt;artifactId<span class="token punctuation">></span>spring<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>maven<span class="token punctuation">-</span>plugin&lt;/artifactId<span class="token punctuation">></span>            &lt;/plugin<span class="token punctuation">></span>        &lt;/plugins<span class="token punctuation">></span>    &lt;/build<span class="token punctuation">></span>&lt;/project<span class="token punctuation">></span></code></pre><h3 id="2、自定义个异常类"><a href="#2、自定义个异常类" class="headerlink" title="2、自定义个异常类"></a>2、自定义个异常类</h3><p>自定义个异常类，方便我们处理 GET 请求（GET 请求参数中一般是没有实体对象的，所以不能使用 @Valid），当请求验证失败时，手动抛出自定义异常，交由全局异常处理。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParamaErrorException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ParamaErrorException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ParamaErrorException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="3、自定义响应枚举类"><a href="#3、自定义响应枚举类" class="headerlink" title="3、自定义响应枚举类"></a>3、自定义响应枚举类</h3><p>定义一个返回信息的枚举类，方便我们快速响应信息，不必每次都写返回消息和响应码。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> ResultEnum <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">"请求成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">PARAMETER_ERROR</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"请求参数有误!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">UNKNOWN_ERROR</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">,</span> <span class="token string">"未知的错误!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token function">ResultEnum</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="4、自定义响应对象类"><a href="#4、自定义响应对象类" class="headerlink" title="4、自定义响应对象类"></a>4、自定义响应对象类</h3><p>创建用于返回调用方的响应信息的实体类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>aspire<span class="token punctuation">.</span>parameter<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>ResultEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseResult</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ResponseResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ResponseResult</span><span class="token punctuation">(</span>ResultEnum resultEnum<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> resultEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> resultEnum<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ResponseResult</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="5、自定义实体类中添加-Valid-相关注解"><a href="#5、自定义实体类中添加-Valid-相关注解" class="headerlink" title="5、自定义实体类中添加 @Valid 相关注解"></a>5、自定义实体类中添加 @Valid 相关注解</h3><p>下面将创建用于 POST 方法接收参数的实体对象，里面添加 @Valid 相关验证注解，并在注解中添加出错时的响应消息。</p><p>User</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>Valid<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span>NotBlank<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span>NotNull<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * user实体类 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"姓名不为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"密码不为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 嵌套必须加 @Valid，否则嵌套中的验证不生效</span>    <span class="token annotation punctuation">@Valid</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"userinfo不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> UserInfo userInfo<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>UserInfo</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span>Max<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span>NotBlank<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"年龄不为空"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"不能超过18岁"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"性别不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String gender<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="6、Controller-中添加-Valid-注解"><a href="#6、Controller-中添加-Valid-注解" class="headerlink" title="6、Controller 中添加 @Valid 注解"></a>6、Controller 中添加 @Valid 注解</h3><p>接口类中添加 GET 和 POST 方法的两个接口用于测试，其中 POST 方法以上面创建的 Uer 实体对象接收参数，并使用 @Valid，而 GET 请求一般接收参数较少，所以使用正常判断逻辑进行参数效验。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> club<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>valid<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>ResponseResult<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>valid<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>valid<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>ResultEnum<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>valid<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>ParamaErrorException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Validated<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>Valid<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取用户信息     *     * @param username 姓名     * @return ResponseResult     */</span>    <span class="token annotation punctuation">@Validated</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/&amp;#123;username&amp;#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseResult <span class="token function">findUserInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String username<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ParamaErrorException</span><span class="token punctuation">(</span><span class="token string">"username 不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span>ResultEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 新增用户     *     * @param user 用户信息     * @return ResponseResult     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseResult <span class="token function">addUserInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span>ResultEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="7、全局异常处理"><a href="#7、全局异常处理" class="headerlink" title="7、全局异常处理"></a>7、全局异常处理</h3><p>这里创建一个全局异常处理类，方便统一处理异常错误信息。里面添加了不同异常处理的方法，专门用于处理接口中抛出的异常信。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> club<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>valid<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>ResponseResult<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>valid<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>ResultEnum<span class="token punctuation">;</span><span class="token keyword">import</span> club<span class="token punctuation">.</span>mydlq<span class="token punctuation">.</span>valid<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>ParamaErrorException<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpStatus<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>converter<span class="token punctuation">.</span>HttpMessageNotReadableException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>BindingResult<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>FieldError<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>ObjectError<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>MethodArgumentNotValidException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>MissingServletRequestParameterException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ExceptionHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseStatus<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestControllerAdvice<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token punctuation">(</span><span class="token string">"club.mydlq.valid"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 忽略参数异常处理器     *     * @param e 忽略参数异常     * @return ResponseResult     */</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MissingServletRequestParameterException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseResult <span class="token function">parameterMissingExceptionHandler</span><span class="token punctuation">(</span>MissingServletRequestParameterException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span>ResultEnum<span class="token punctuation">.</span>PARAMETER_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"请求参数 "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getParameterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 缺少请求体异常处理器     *     * @param e 缺少请求体异常     * @return ResponseResult     */</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>HttpMessageNotReadableException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseResult <span class="token function">parameterBodyMissingExceptionHandler</span><span class="token punctuation">(</span>HttpMessageNotReadableException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span>ResultEnum<span class="token punctuation">.</span>PARAMETER_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"参数体不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 参数效验异常处理器     *     * @param e 参数验证异常     * @return ResponseInfo     */</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MethodArgumentNotValidException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseResult <span class="token function">parameterExceptionHandler</span><span class="token punctuation">(</span>MethodArgumentNotValidException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取异常信息</span>        BindingResult exceptions <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断异常中是否有错误信息，如果存在就使用异常中的消息，否则使用默认消息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exceptions<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>ObjectError<span class="token operator">></span> errors <span class="token operator">=</span> exceptions<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 这里列出了全部错误参数，按正常逻辑，只需要第一条错误即可</span>                FieldError fieldError <span class="token operator">=</span> <span class="token punctuation">(</span>FieldError<span class="token punctuation">)</span> errors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span>ResultEnum<span class="token punctuation">.</span>PARAMETER_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fieldError<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span>ResultEnum<span class="token punctuation">.</span>PARAMETER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 自定义参数错误异常处理器     *     * @param e 自定义参数     * @return ResponseInfo     */</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>ParamaErrorException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseResult <span class="token function">paramExceptionHandler</span><span class="token punctuation">(</span>ParamaErrorException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断异常中是否有错误信息，如果存在就使用异常中的消息，否则使用默认消息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span>ResultEnum<span class="token punctuation">.</span>PARAMETER_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span>ResultEnum<span class="token punctuation">.</span>PARAMETER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="8、启动类"><a href="#8、启动类" class="headerlink" title="8、启动类"></a>8、启动类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="9、示例测试"><a href="#9、示例测试" class="headerlink" title="9、示例测试"></a>9、示例测试</h3><p>下面将针对上面示例中设置的两种接口进行测试，分别来验证参数效验功能。</p><p><strong>|| - 测试接口 /user/{username}</strong></p><p>使用 GET 方法请求地址 <a href="http://localhost:8080/user?username=test">http://localhost:8080/user?username=test</a> 时，返回信息：</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"请求成功"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>当不输入参数，输入地址 <a href="http://localhost:8080/user">http://localhost:8080/user</a> 时，返回信息：</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">1001</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"请求参数 username 不能为空"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>可以看到在执行 GET 请求，能够正常按我们全局异常处理器中的设置处理异常信息。</p><p><strong>|| - 测试接口 /user</strong></p><p>(1)、使用 POST 方法发起请求，首先进行不加 JSON 请求体来对 <a href="http://localhost:8080/user">http://localhost:8080/user</a> 地址进行请求，返回信息：</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">1001</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"参数体不能为空"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>(2)、输入部分参数进行测试。</p><p>请求内容：</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"123"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>返回信息：</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">1001</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"userinfo不能为空"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>(3)、输入完整参数，且设置 age &gt; 18 时，进行测试。</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token property">"username"</span><span class="token operator">:</span><span class="token string">"111"</span><span class="token punctuation">,</span> <span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"sa"</span><span class="token punctuation">,</span>  <span class="token property">"userInfo"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">,</span>    <span class="token property">"gender"</span><span class="token operator">:</span><span class="token string">"男"</span>  &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>返回信息：</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">1001</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"不能超过18岁"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>可以看到在执行 POST 请求，也能正常按我们全局异常处理器中的设置处理异常信息，且提示信息为我们设置在实体类中的 Message。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 中的 @Cacheable 缓存注解</title>
      <link href="/2023/08/07/springAll/Spring@Cacheable%20%E7%BC%93%E5%AD%98%E6%B3%A8%E8%A7%A3/"/>
      <url>/2023/08/07/springAll/Spring@Cacheable%20%E7%BC%93%E5%AD%98%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-中的-Cacheable-缓存注解"><a href="#Spring-中的-Cacheable-缓存注解" class="headerlink" title="Spring 中的 @Cacheable 缓存注解"></a>Spring 中的 @Cacheable 缓存注解</h1><p>[TOC]</p><h2 id="1-什么是缓存"><a href="#1-什么是缓存" class="headerlink" title="1 什么是缓存"></a>1 什么是缓存</h2><p>第一个问题，首先要搞明白什么是缓存，缓存的意义是什么。</p><p>对于普通业务，如果要查询一个数据，一般直接select数据库进行查找。但是在高流量的情况下，直接查找数据库就会成为性能的瓶颈。</p><p>因为数据库查找的流程是先要从磁盘拿到数据，再刷新到内存，再返回数据。磁盘相比于内存来说，速度是很慢的，<strong>为了提升性能，就出现了基于内存的缓存</strong>。</p><p>这种基于内存的缓存，<strong>由于无法跟磁盘频繁进行存储，所以无法保证数据的完整性，随时有可能丢失</strong>，所以架构一般使用<strong>数据库加缓存</strong>的方式，== 数据库用来持久化数据，缓存用来处理大流量。==</p><h2 id="2-本地缓存和集中式缓存"><a href="#2-本地缓存和集中式缓存" class="headerlink" title="2 本地缓存和集中式缓存"></a>2 本地缓存和集中式缓存</h2><p>缓存按照存储方式可以分为 <strong>本地缓存和集中式缓存</strong>。</p><p>本地缓存顾名思义就是存储在本地上，例如静态变量就可以说是一种本地缓存，存储在了JVM中，或者说自己本地搭建的项目用的redis也算是本地缓存，因为缓存和应用都在一台机器上。</p><p>本地缓存效率很高，直接读取内存，没有网络延迟 ，但是可用性很低，因为出现单点故障的话，数据库和系统都会宕机。</p><p>对于大型项目来说，都会有集中式缓存，例如redis集群。== 缓存和应用服务器是分离的，服务器需要通过网络请求从缓存获取数据 ==，一般应用服务器也会采取集群的方式，这样可以保证高可用，数据不易丢失，而且也能保证各个服务器的缓存数据一致。</p><p><strong>对于分布式应用来说，本地缓存还会出现缓存不一致的问题，因为每个服务器的本地缓存都是独立的。</strong></p><h2 id="3-本地缓存的优点"><a href="#3-本地缓存的优点" class="headerlink" title="3 本地缓存的优点"></a>3 本地缓存的优点</h2><p>刚才说了这么多本地缓存的缺点，那为什么还要用呢？</p><p>因为如果都放在集中式缓存中，<strong>网络延迟会成为性能的瓶颈</strong>。因为不在本地内存，读取的时间需要加上网络通信的时间。所以在<u>对性能要求更大或者缓存内容不需要持久化、不需要一致性的情况下</u>，本地缓存更适合。</p><p>所以一般的大型项目都采用** == 本地缓存和集中式缓存混合使用 ==**的方式。</p><h2 id="4-Spring对于缓存的支持"><a href="#4-Spring对于缓存的支持" class="headerlink" title="4 Spring对于缓存的支持"></a>4 Spring对于缓存的支持</h2><p>本地缓存可以通过spring更简单的管理和使用。</p><p>springboot和springmvc都支持缓存，其中CacheManager是Spring提供的缓存接口。</p><h3 id="4-1-spring支持的CacheManager"><a href="#4-1-spring支持的CacheManager" class="headerlink" title="4.1 spring支持的CacheManager"></a>4.1 spring支持的CacheManager</h3><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230710143647825.png" alt="image-20230710143647825" style="zoom:80%;" /><p>看着非常多，实际上常用的只有<code>ConcurrentMapCacheManager</code>，<code>EhCacheCacheManager</code>，<code>GuavaCacheManager</code></p><p>（一般使用redis，我们需要更灵活的对redis键值进行操作，所以不用<code>RedisCacheManager</code>），我们重点去讲一下这个<code>GuavaCacheManager</code>。</p><h3 id="4-2-GuavaCache"><a href="#4-2-GuavaCache" class="headerlink" title="4.2 GuavaCache"></a>4.2 GuavaCache</h3><p>Guava是谷歌开源的Java库，其中的代表就有这个缓存。</p><p>GuavaCache的原理大概是<code>LRU+ConcurrentHashMap</code>，加载在JVM的本地缓存</p><h3 id="4-3-引入依赖"><a href="#4-3-引入依赖" class="headerlink" title="4.3 引入依赖"></a>4.3 引入依赖</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>cache<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>     <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>guava<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>     <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>guava<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>     <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">18.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token comment" spellcheck="true">//有可能需要这个</span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>context<span class="token operator">-</span>support<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.2</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h3 id="4-4-创建配置类"><a href="#4-4-创建配置类" class="headerlink" title="4.4 创建配置类"></a>4.4 创建配置类</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableCaching</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GuavaCacheConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CacheManager <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        GuavaCacheManager cacheManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GuavaCacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cacheManager<span class="token punctuation">.</span><span class="token function">setCacheBuilder</span><span class="token punctuation">(</span>                CacheBuilder<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                        <span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cacheManager<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>@EnableCaching用来开启注解功能，这里设置的失效时间是3分钟。</p><p>Guava Cache 除了代码中提到的设置缓存过期时间的策略外，还有其他的策略。下面是 Guava Cache 设置缓存过期时间的策略：</p><ul><li><strong>expireAfterAccess</strong>: 当缓存项在指定的时间段内没有被读或写就会被回收。</li><li><strong>expireAfterWrite</strong>：当缓存项在指定的时间段内没有更新就会被回收，如果我们认为<strong>缓存数据在一段时间后数据不再可用</strong>，那么可以使用该种策略。</li><li><strong>refreshAfterWrite</strong>：当缓存项上一次更新操作之后的多久会被刷新。</li></ul><h3 id="4-5-缓存注解"><a href="#4-5-缓存注解" class="headerlink" title="4.5 缓存注解"></a>4.5 缓存注解</h3><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230710141419152.png" alt="image-20230710141419152" style="zoom:80%;" /><h3 id="4-6-Cacheable的用法"><a href="#4-6-Cacheable的用法" class="headerlink" title="4.6 @Cacheable的用法"></a>4.6 @Cacheable的用法</h3><p>常用参数有</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230710142814894.png" alt="image-20230710142814894" style="zoom:80%;" /><p><code>#</code>代表的是EL表达式</p><p>这里的key和value和我们以为的缓存键值对是不一样的</p><p>value+key 只是我们缓存键的名字，真正的值是方法的返回值。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"olympic_match_new_action"</span><span class="token punctuation">,</span>key <span class="token operator">=</span> <span class="token string">"'get_relate_news_'+#rsc"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> List<span class="token operator">&lt;</span>MatchNewsVO<span class="token operator">></span> <span class="token function">getRelateNews</span><span class="token punctuation">(</span>String rsc<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>一般value取service名，key取方法名，取名按照数据库的下划线方式。后面那个#rsc指的是传进来的参数，这些都是键。返回的List就是缓存的值。</p><h2 id="5-Cacheable失效的原因"><a href="#5-Cacheable失效的原因" class="headerlink" title="5 @Cacheable失效的原因"></a>5 @Cacheable失效的原因</h2><p>在配置正常的情况下，失效原因就是一个类的方法调用了带有缓存的方法，结果缓存失效。</p><p>使用了service的A方法，想调用这个service的缓存B方法，这样是不行的。</p><p>原因是@Cacheable是由AOP代理实现，生成了带有缓存的代理类。其他类想调用这个类的缓存方法时，会去调用这个代理类的方法，实现缓存功能。但是类内部调用这个方法，就不会去调用代理类的方法，导致缓存失效</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 注解区分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 自动装配</title>
      <link href="/2023/08/07/springAll/SpringBoot%20%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
      <url>/2023/08/07/springAll/SpringBoot%20%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-自动装配（配置）"><a href="#SpringBoot-自动装配（配置）" class="headerlink" title="SpringBoot 自动装配（配置）"></a>SpringBoot 自动装配（配置）</h1><h2 id="一、自动装配："><a href="#一、自动装配：" class="headerlink" title="一、自动装配："></a>一、自动装配：</h2><p>自动把第三方组件的Bean装载到IOC容器中，不需要开发人员再去写Bean相关配置。在SpringBoot应用中，只需要在启动类上加上SpringBootApplication注解就可以实现自动装配</p><h2 id="二、实现原理："><a href="#二、实现原理：" class="headerlink" title="二、实现原理："></a>二、实现原理：</h2><p>自动装配的实现主要依靠三个核心技术：</p><ol><li>引入start，启动组件时组件内必须包含Configuration配置类，在配置类中通过Bean声明需要装配到IOC容器中的Bean对象</li><li>配置类放第三方jar包中，通过SpringBoot中约定优于配置的理念去配配置类的路径，这一步主要使用SpringFactoriesLoader类完成</li><li>SpringBoot拿到第三方所有jar包声明的配置类后，通过Spring提供的ImportSelector接口实现对这些类的动态加载从而完成自动装配</li></ol><p><strong>好处：SpringBoot的自动装配简化了Spring应用程序的开发和部署过程，可以省去很多繁琐的配置和依赖管理工作，提高开发效率和代码质量。</strong></p><h2 id="三、开启自动部署："><a href="#三、开启自动部署：" class="headerlink" title="三、开启自动部署："></a>三、开启自动部署：</h2><p>将 <code>@EnableAutoConfiguration</code> 或 <code>@SpringBootApplication</code> 注解添加到你的 <code>@Configuration</code> 类中，从而开启自动配置功能。这两个注解你应该只添加一个，建议添加到主要的 <code>@Configuration</code> 类上。</p><blockquote><p>注：Spring Boot的自动装配机制会试图根据你所添加的依赖来自动配置你的Spring应用程序。 </p></blockquote><p>例如，如果你添加了 <code>HSQLDB</code> 依赖，而且你没有手动配置任何DataSource Bean，那么Spring Boot就会自动配置内存数据库。</p><h2 id="四、逐步取代自动配置"><a href="#四、逐步取代自动配置" class="headerlink" title="四、逐步取代自动配置"></a>四、逐步取代自动配置</h2><p>自动配置是非侵入性的。 在任何时候，你都可以开始定义你自己的配置来取代自动配置的特定部分。 </p><p>例如，如果你添加了你自己的 <code>DataSource bean</code>，默认的嵌入式数据库支持就会“退步”从而让你的自定义配置生效。</p><p>如果你想知道在应用中使用了哪些自动配置，你可以在启动命令后添加 <code>--debug</code> 参数。 这个参数会为核心的logger开启debug级别的日志，会在控制台输出自动装配项目以及触发自动装配的条件。</p><h2 id="五、禁用指定的自动装配类"><a href="#五、禁用指定的自动装配类" class="headerlink" title="五、禁用指定的自动装配类"></a>五、禁用指定的自动装配类</h2><p>想禁用掉项目中某些自动装配类，你可以在 <code>@SpringBootApplication</code> 注解的 <code>exclude</code> 属性中指定，如下例所示。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>DataSourceAutoConfiguration<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> DataSourceAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>如果要禁用的自动装配类不在classpath上（没有导入），那么你可以在注解的 <code>excludeName</code> 属性中指定类的全路径名称。</p><p> <code>exclude</code> 和 <code>excludeName</code> 属性在 <code>@EnableAutoConfiguration</code> 中也可以使用。</p><p>也可以在配置文件中通过 <code>spring.autoconfigure.exclude[]</code> 配置来定义要禁用的自动配置类列表。</p><p>可以同时使用<strong>注解 + 配置</strong>的方式来禁用自动装配类。</p><p>自动配置类一般都是 <code>public</code> 的，除了这个类的名称以外（用来禁用它）的任何东西，例如它的方法和属性，包括嵌套的配置类。都不建议你去使用。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 自动装配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中@Autowired和@Resource的区别</title>
      <link href="/2023/08/07/springAll/Spring@Autowired%E5%92%8C@Resource%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2023/08/07/springAll/Spring@Autowired%E5%92%8C@Resource%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring中-Autowired和-Resource的区别"><a href="#Spring中-Autowired和-Resource的区别" class="headerlink" title="Spring中@Autowired和@Resource的区别"></a>Spring中@Autowired和@Resource的区别</h1><p><strong>Autowired注解是由Spring提供的</strong>，它可以用来对构造方法、成员变量及方法参数进行标注，它能够根据对象类型完成自动注入，代码如下。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造方法注入    </span>    <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">public</span> <span class="token function">Service</span><span class="token punctuation">(</span>Service service<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>service <span class="token operator">=</span> service<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 成员变量注入    </span>    <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span> Service service<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 方法参数注入    </span>    <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setService</span><span class="token punctuation">(</span>Service service<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>service <span class="token operator">=</span> service<span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>再来看@Resource注解，代码如下。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Service</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"service1"</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> Service service1<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"service2"</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> Service service2<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Reource</span>        <span class="token keyword">private</span> Service service3<span class="token punctuation">;</span>         <span class="token annotation punctuation">@Reource</span>        <span class="token keyword">private</span> Service service4<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>它是由JDK提供的</strong>，遵循JSR-250规范，是JDK 1.6及以上加入的新特性。作为Java的标准，它的作用和@Autowired无区别。与@Autowired不同的是，它适用于所有的Java框架，而@Autowired只适用于Spring。读者可以简单地理解为，@Resource能够支持对象类型注入，也能够支持对象名称注入。</p><p>@Resource和@Autowired之间<strong>具体有哪些区别呢？</strong></p><p>可以从以下5个方面来分析。</p><p><strong>1．注解内部定义的参数不同</strong></p><p>@Autowired只包含一个required参数，默认为true，表示开启自动注入。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Autowired</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 是否开启自动注入，在不开启自动装配时，可设为false</span>    <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>@Resource 包含7个参数，其中最重要的两个是name和type。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Resource</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Bean的名称      </span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>         String <span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// Java类，被解析为Bean的类型    </span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>         <span class="token keyword">enum</span> AuthenticationType <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    CONTAINER<span class="token punctuation">,</span>                    APPLICATION        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 身份验证类型       </span>    AuthenticationType <span class="token function">authenticationType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> AuthenticationType<span class="token punctuation">.</span>CONTAINER<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 组件是否可以与其他组件共享</span>    <span class="token keyword">boolean</span> <span class="token function">shareable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         String <span class="token function">mappedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 描述    </span>    String <span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>2．装配方式的默认值不同</strong></p><p>@Autowired默认按type自动装配，而@Resource默认按name自动装配。</p><p>@Resource注解可以自定义选择装配方式，如果指定name，则按name自动装配。如果指定type，则按type自动装配。</p><p><strong>3．注解应用的范围不同</strong></p><p>@Autowired能够用在构造方法、成员变量、方法参数及注解上，而@Resource能用在类、成员变量和方法参数上，源码如下。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>ElementType<span class="token punctuation">.</span>CONSTRUCTOR<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>PARAMETER<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documentedpublic</span> @<span class="token keyword">interface</span> <span class="token class-name">Autowired</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>TYPE<span class="token punctuation">,</span> FIELD<span class="token punctuation">,</span> METHOD<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Resource</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>4．出处不同</strong></p><p>@Autowired是Spring定义的注解，而@Resource遵循JSR-250的规范，定义在JDK中。所以@Autowired只能在Spring框架下使用，而@Resource则可以与其他框架一起使用。</p><p><strong>5．装配顺序不同</strong></p><p>@Autowired默认先与byType进行匹配，如果发现找到多个Bean，则又按照byName方式进行匹配，如果还有多个Bean，则报出异常。装配顺序如下图所示。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/641" alt="图片" style="zoom:80%;" /><p>而@Resource的装载顺序分为如下4种情况。</p><p>1）如果同时指定name和type，则从Spring上下文中找到与它们唯一匹配的Bean进行装配，如果找不到则抛出异常，具体流程如下图所示。</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/640" alt="图片"></p><p>2）如果指定name，则从上下文中查找与名称（ID）匹配的Bean进行装配，如果找不到则抛出异常，具体流程如下图所示。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/645" alt="图片" style="zoom:80%;" /><p>3）如果指定type，则从上下文中找到与类型匹配的唯一Bean进行装配，如果找不到或者找到多个就会抛出异常，具体流程如下图所示。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/643" alt="图片" style="zoom:80%;" /><p>4）如果既没有指定name，也没有指定type，则自动按byName方式进行装配。如果没有匹配成功，则仍按照type进行匹配，具体流程如下图所示。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/644" alt="图片" style="zoom:80%;" /><p>下面这张表可以帮助大家更好地理解和区分@Autowired和@Resource。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/642" alt="图片" style="zoom:80%;" /><p>总结一下，两者在功能上差别不大，使用起来也差不多。但是，<strong>在日常开发中建议使用@Autowired，有以下3个理由。</strong></p><p>第1：@Autowired功能略强大。支持优先注入、可以配置允许Bean不存在。</p><p>第2：若使用Spring框架，则使用其特有的注解更好一点。</p><p>第3：有人认为@Resource更加通用，因为它是一个规范，其他框架也会支持。目前后端都在用Spring，没有必要考虑其他框架。</p><p><strong>面试点评：</strong>我们可以直接告诉面试官这两个注解的差异，同时基于两个注解的特性解释更多的差异，这样可以更好地体现自己对这方面知识的理解深度。面试官想考查求职者对Spring依赖注入方式的理解，以及对@Autowired和@Resource两个注解底层实现方面的区别的理解。求职者在理解了底层实现的差异后，回答这个问题会比较容易。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 注解区分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket</title>
      <link href="/2023/08/07/linux/%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
      <url>/2023/08/07/linux/%E5%AE%9E%E9%AA%8C%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/实验1_00.jpg" alt="实验一" style="zoom: 67%;" /><p>前言<br>当我们从Windows系统上传文件到Linux/Unix系统上时，有时候会由于文件格式导致可执行文件无法使用。</p><p>Windows系统的文件格式为DOS，而Linx/Unix系统的文件格式为UNIX。</p><p>而在CentOS系统上有个很方便的工具dos2unix/unix2dos可以解决这个问题。<br>Ubuntu上则可以使用tofrodos/fromdos</p><p>简介<br>dos2unix（tofrodos）指令可以将DOS格式文件转换为UNIX格式文件。</p><p>而unix2dos（fromdos）指令可以将UNIX格式文件转换为DOS格式文件。</p><p>安装<br>CentOS下可以直接使用yum安装：sudo yum -y install dos2unix（同时安装了dos2unix/unix2dos）<br>Ubuntu可以使用apt安装：sudo apt-get install tofrodos（同时安装了tofrodos/fromdos）<br>基本使用<br>dos2unix/unix2dos只需要直接执行：dos2unix file就可以将DOS格式的文件转成UNIX格式的文件<br>tofrodos/fromdos则可以执行：tofrodos file就可以将DOS格式的文件转成UNIX格式的文件</p><p><a href="https://blog.csdn.net/Nicolas12/article/details/80890811">CentOS7 复制、删除、移动、压缩、解压等常用命令整理_centos7命令行复制文件到移动硬盘_爱新觉罗1的博客-CSDN博客</a></p><pre class=" language-bash"><code class="language-bash">4. yum -y <span class="token function">install</span> lrzsz5. rz6. <span class="token function">mv</span> 实验一.txt /tmp/exam1.txt7. <span class="token function">sudo</span> yum -y <span class="token function">install</span> dos2unix8. dos2unix /tmp/exam1.txt9. <span class="token function">vi</span> /tmp/exam1.txt10. <span class="token function">tail</span> -5 /etc/passwd <span class="token operator">>></span> /tmp/exam1.txt11. <span class="token function">find</span> /usr -type f -name <span class="token string">"*.xml"</span>-path<span class="token string">"*mysql*"</span><span class="token operator">>></span>/tmp/exam1.txt12. <span class="token function">date</span> +<span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token operator">>></span>/tmp/exam1.txt13. <span class="token function">tar</span> -zcvf log.tar.gz /var/log14. <span class="token function">ls</span> -alh log.tar.gz <span class="token operator">>></span> /tmp/exam1.txt15. <span class="token function">ls</span> -alh log.tar.gz <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&amp;#123;print <span class="token variable">$1</span>, <span class="token variable">$9</span>&amp;#125;'</span> <span class="token operator">>></span> /tmp/exam1.txt16. dos2unix /tmp/exam1.txt</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/07/linux/CentOS%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
      <url>/2023/08/07/linux/CentOS%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>一、下载安装包</p><p>  cd /usr/local/software  (software可能没有，用<a href="https://so.csdn.net/so/search?q=mkdir&spm=1001.2101.3001.7020">mkdir</a>创建或者只到local目录下也行)</p><p>  <a href="https://so.csdn.net/so/search?q=wget&spm=1001.2101.3001.7020">wget</a> <a href="http://nginx.org/download/nginx-1.6.2.tar.gz">http://nginx.org/download/nginx-1.6.2.tar.gz</a>   (选择一个比较稳定的版本下载即可，或者手动下载后，用xshell传到该目录下也行)</p><p>二、解压安装</p><p>  tar -zxvf <a href="https://so.csdn.net/so/search?q=nginx&spm=1001.2101.3001.7020">nginx</a>-1.6.2.tar.gz -C /usr/local   (local这个目录类似于Windows的program目录，所以一些软件可以都安装在这里)</p><p>三、下载依赖的库文件</p><p>  1  yum install pcre</p><p>  2  yum install pcre-devel</p><p>  3  yum install zlib</p><p>  4 yum install zlib-devel</p><p>四、进行configure配置</p><p>  cd /usr/local/nginx-1.6.2  &amp;&amp; ./configure –prefix=/usr/local/nginx</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/20180403165135209" alt="img"></p><p>五、编译安装（  cd 到解压好的nginx-1.6.2，这个目录下安装编译）</p><p>make &amp;&amp; make install</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/20180403165259201" alt="img"></p><p>六、启动Nginx</p><p>  执行完5步骤后，cd 到/usr/local/nginx目录下。执行ls，可以看到四个目录</p><p> conf—-配置文件 html—-网页文件 logs—–日志文件 sbin——主要二进制程序</p><p> 启动命令：  /usr/local/nginx/sbin/nginx   (无参数) 启动   （-s  stop）关闭   （-s reload）重启</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/20180403165435137" alt="img"></p><p>七、查看</p><p>查看是否成功   ps -ef | grep nginx (如果能看到两个相邻ID的进程，说明启动成功)</p><p>失败的可能    80端口被占用了。   netstat -ano | grep 80</p><p>如果成功的话，浏览器访问能看到欢迎页面：（http://服务器的IP:80）</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/20180403165545204" alt="img"></p><p> nginx的结构目录（四个conf、html、logs、sbin，其他的都是运行后生成的或者自己添加的）</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/20180920150536576" alt="img"></p><p> Nginx的作用都是靠着conf/nginx.conf 配置文件发挥的作用。只要能读懂它，会简单的编写，基本算是入门级别了。</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/20180920151421670" alt="img"></p><p><a href="https://blog.csdn.net/jrgdspuwij/article/details/104060880#:~:text=%E6%A6%82%E8%A7%88">(95条消息) Centos 下 Nginx 安装、启动 、关闭、重启 教程_福尔摩千的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/lzl18918615216/article/details/80049471?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-80049471-blog-102780363.pc_relevant_vip_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-80049471-blog-102780363.pc_relevant_vip_default&utm_relevant_index=2">(95条消息) CentOS7 安装nginx 无法访问的问题_李振磊的博客-CSDN博客</a></p><h5 id="centos下解决-bash-nginx-command-not-found添加环境变量：ln-s-usr-local-nginx-sbin-nginx-usr-local-bin"><a href="#centos下解决-bash-nginx-command-not-found添加环境变量：ln-s-usr-local-nginx-sbin-nginx-usr-local-bin" class="headerlink" title="centos下解决-bash: nginx: command not found添加环境变量：ln -s /usr/local/nginx/sbin/nginx /usr/local/bin/"></a>centos下解决-bash: nginx: command not found添加环境变量：ln -s /usr/local/nginx/sbin/nginx /usr/local/bin/</h5>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/4_route_page2/css/bootstrap/"/>
      <url>/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/4_route_page2/css/bootstrap/</url>
      
        <content type="html"><![CDATA[/*! * Bootstrap v3.3.5 (http://getbootstrap.com) * Copyright 2011-2015 Twitter, Inc. * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE) *//*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html {  font-family: sans-serif;  -webkit-text-size-adjust: 100%;      -ms-text-size-adjust: 100%;}body {  margin: 0;}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary {  display: block;}audio,canvas,progress,video {  display: inline-block;  vertical-align: baseline;}audio:not([controls]) {  display: none;  height: 0;}[hidden],template {  display: none;}a {  background-color: transparent;}a:active,a:hover {  outline: 0;}abbr[title] {  border-bottom: 1px dotted;}b,strong {  font-weight: bold;}dfn {  font-style: italic;}h1 {  margin: .67em 0;  font-size: 2em;}mark {  color: #000;  background: #ff0;}small {  font-size: 80%;}sub,sup {  position: relative;  font-size: 75%;  line-height: 0;  vertical-align: baseline;}sup {  top: -.5em;}sub {  bottom: -.25em;}img {  border: 0;}svg:not(:root) {  overflow: hidden;}figure {  margin: 1em 40px;}hr {  height: 0;  -webkit-box-sizing: content-box;     -moz-box-sizing: content-box;          box-sizing: content-box;}pre {  overflow: auto;}code,kbd,pre,samp {  font-family: monospace, monospace;  font-size: 1em;}button,input,optgroup,select,textarea {  margin: 0;  font: inherit;  color: inherit;}button {  overflow: visible;}button,select {  text-transform: none;}button,html input[type="button"],input[type="reset"],input[type="submit"] {  -webkit-appearance: button;  cursor: pointer;}button[disabled],html input[disabled] {  cursor: default;}button::-moz-focus-inner,input::-moz-focus-inner {  padding: 0;  border: 0;}input {  line-height: normal;}input[type="checkbox"],input[type="radio"] {  -webkit-box-sizing: border-box;     -moz-box-sizing: border-box;          box-sizing: border-box;  padding: 0;}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button {  height: auto;}input[type="search"] {  -webkit-box-sizing: content-box;     -moz-box-sizing: content-box;          box-sizing: content-box;  -webkit-appearance: textfield;}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration {  -webkit-appearance: none;}fieldset {  padding: .35em .625em .75em;  margin: 0 2px;  border: 1px solid #c0c0c0;}legend {  padding: 0;  border: 0;}textarea {  overflow: auto;}optgroup {  font-weight: bold;}table {  border-spacing: 0;  border-collapse: collapse;}td,th {  padding: 0;}/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */@media print {  *,  *:before,  *:after {    color: #000 !important;    text-shadow: none !important;    background: transparent !important;    -webkit-box-shadow: none !important;            box-shadow: none !important;  }  a,  a:visited {    text-decoration: underline;  }  a[href]:after {    content: " (" attr(href) ")";  }  abbr[title]:after {    content: " (" attr(title) ")";  }  a[href^="#"]:after,  a[href^="javascript:"]:after {    content: "";  }  pre,  blockquote {    border: 1px solid #999;    page-break-inside: avoid;  }  thead {    display: table-header-group;  }  tr,  img {    page-break-inside: avoid;  }  img {    max-width: 100% !important;  }  p,  h2,  h3 {    orphans: 3;    widows: 3;  }  h2,  h3 {    page-break-after: avoid;  }  .navbar {    display: none;  }  .btn > .caret,  .dropup > .btn > .caret {    border-top-color: #000 !important;  }  .label {    border: 1px solid #000;  }  .table {    border-collapse: collapse !important;  }  .table td,  .table th {    background-color: #fff !important;  }  .table-bordered th,  .table-bordered td {    border: 1px solid #ddd !important;  }}@font-face {  font-family: 'Glyphicons Halflings';  src: url('../fonts/glyphicons-halflings-regular.eot');  src: url('../fonts/glyphicons-halflings-regular.eot?#iefix') format('embedded-opentype'), url('../fonts/glyphicons-halflings-regular.woff2') format('woff2'), url('../fonts/glyphicons-halflings-regular.woff') format('woff'), url('../fonts/glyphicons-halflings-regular.ttf') format('truetype'), url('../fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular') format('svg');}.glyphicon {  position: relative;  top: 1px;  display: inline-block;  font-family: 'Glyphicons Halflings';  font-style: normal;  font-weight: normal;  line-height: 1;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.glyphicon-asterisk:before {  content: "\2a";}.glyphicon-plus:before {  content: "\2b";}.glyphicon-euro:before,.glyphicon-eur:before {  content: "\20ac";}.glyphicon-minus:before {  content: "\2212";}.glyphicon-cloud:before {  content: "\2601";}.glyphicon-envelope:before {  content: "\2709";}.glyphicon-pencil:before {  content: "\270f";}.glyphicon-glass:before {  content: "\e001";}.glyphicon-music:before {  content: "\e002";}.glyphicon-search:before {  content: "\e003";}.glyphicon-heart:before {  content: "\e005";}.glyphicon-star:before {  content: "\e006";}.glyphicon-star-empty:before {  content: "\e007";}.glyphicon-user:before {  content: "\e008";}.glyphicon-film:before {  content: "\e009";}.glyphicon-th-large:before {  content: "\e010";}.glyphicon-th:before {  content: "\e011";}.glyphicon-th-list:before {  content: "\e012";}.glyphicon-ok:before {  content: "\e013";}.glyphicon-remove:before {  content: "\e014";}.glyphicon-zoom-in:before {  content: "\e015";}.glyphicon-zoom-out:before {  content: "\e016";}.glyphicon-off:before {  content: "\e017";}.glyphicon-signal:before {  content: "\e018";}.glyphicon-cog:before {  content: "\e019";}.glyphicon-trash:before {  content: "\e020";}.glyphicon-home:before {  content: "\e021";}.glyphicon-file:before {  content: "\e022";}.glyphicon-time:before {  content: "\e023";}.glyphicon-road:before {  content: "\e024";}.glyphicon-download-alt:before {  content: "\e025";}.glyphicon-download:before {  content: "\e026";}.glyphicon-upload:before {  content: "\e027";}.glyphicon-inbox:before {  content: "\e028";}.glyphicon-play-circle:before {  content: "\e029";}.glyphicon-repeat:before {  content: "\e030";}.glyphicon-refresh:before {  content: "\e031";}.glyphicon-list-alt:before {  content: "\e032";}.glyphicon-lock:before {  content: "\e033";}.glyphicon-flag:before {  content: "\e034";}.glyphicon-headphones:before {  content: "\e035";}.glyphicon-volume-off:before {  content: "\e036";}.glyphicon-volume-down:before {  content: "\e037";}.glyphicon-volume-up:before {  content: "\e038";}.glyphicon-qrcode:before {  content: "\e039";}.glyphicon-barcode:before {  content: "\e040";}.glyphicon-tag:before {  content: "\e041";}.glyphicon-tags:before {  content: "\e042";}.glyphicon-book:before {  content: "\e043";}.glyphicon-bookmark:before {  content: "\e044";}.glyphicon-print:before {  content: "\e045";}.glyphicon-camera:before {  content: "\e046";}.glyphicon-font:before {  content: "\e047";}.glyphicon-bold:before {  content: "\e048";}.glyphicon-italic:before {  content: "\e049";}.glyphicon-text-height:before {  content: "\e050";}.glyphicon-text-width:before {  content: "\e051";}.glyphicon-align-left:before {  content: "\e052";}.glyphicon-align-center:before {  content: "\e053";}.glyphicon-align-right:before {  content: "\e054";}.glyphicon-align-justify:before {  content: "\e055";}.glyphicon-list:before {  content: "\e056";}.glyphicon-indent-left:before {  content: "\e057";}.glyphicon-indent-right:before {  content: "\e058";}.glyphicon-facetime-video:before {  content: "\e059";}.glyphicon-picture:before {  content: "\e060";}.glyphicon-map-marker:before {  content: "\e062";}.glyphicon-adjust:before {  content: "\e063";}.glyphicon-tint:before {  content: "\e064";}.glyphicon-edit:before {  content: "\e065";}.glyphicon-share:before {  content: "\e066";}.glyphicon-check:before {  content: "\e067";}.glyphicon-move:before {  content: "\e068";}.glyphicon-step-backward:before {  content: "\e069";}.glyphicon-fast-backward:before {  content: "\e070";}.glyphicon-backward:before {  content: "\e071";}.glyphicon-play:before {  content: "\e072";}.glyphicon-pause:before {  content: "\e073";}.glyphicon-stop:before {  content: "\e074";}.glyphicon-forward:before {  content: "\e075";}.glyphicon-fast-forward:before {  content: "\e076";}.glyphicon-step-forward:before {  content: "\e077";}.glyphicon-eject:before {  content: "\e078";}.glyphicon-chevron-left:before {  content: "\e079";}.glyphicon-chevron-right:before {  content: "\e080";}.glyphicon-plus-sign:before {  content: "\e081";}.glyphicon-minus-sign:before {  content: "\e082";}.glyphicon-remove-sign:before {  content: "\e083";}.glyphicon-ok-sign:before {  content: "\e084";}.glyphicon-question-sign:before {  content: "\e085";}.glyphicon-info-sign:before {  content: "\e086";}.glyphicon-screenshot:before {  content: "\e087";}.glyphicon-remove-circle:before {  content: "\e088";}.glyphicon-ok-circle:before {  content: "\e089";}.glyphicon-ban-circle:before {  content: "\e090";}.glyphicon-arrow-left:before {  content: "\e091";}.glyphicon-arrow-right:before {  content: "\e092";}.glyphicon-arrow-up:before {  content: "\e093";}.glyphicon-arrow-down:before {  content: "\e094";}.glyphicon-share-alt:before {  content: "\e095";}.glyphicon-resize-full:before {  content: "\e096";}.glyphicon-resize-small:before {  content: "\e097";}.glyphicon-exclamation-sign:before {  content: "\e101";}.glyphicon-gift:before {  content: "\e102";}.glyphicon-leaf:before {  content: "\e103";}.glyphicon-fire:before {  content: "\e104";}.glyphicon-eye-open:before {  content: "\e105";}.glyphicon-eye-close:before {  content: "\e106";}.glyphicon-warning-sign:before {  content: "\e107";}.glyphicon-plane:before {  content: "\e108";}.glyphicon-calendar:before {  content: "\e109";}.glyphicon-random:before {  content: "\e110";}.glyphicon-comment:before {  content: "\e111";}.glyphicon-magnet:before {  content: "\e112";}.glyphicon-chevron-up:before {  content: "\e113";}.glyphicon-chevron-down:before {  content: "\e114";}.glyphicon-retweet:before {  content: "\e115";}.glyphicon-shopping-cart:before {  content: "\e116";}.glyphicon-folder-close:before {  content: "\e117";}.glyphicon-folder-open:before {  content: "\e118";}.glyphicon-resize-vertical:before {  content: "\e119";}.glyphicon-resize-horizontal:before {  content: "\e120";}.glyphicon-hdd:before {  content: "\e121";}.glyphicon-bullhorn:before {  content: "\e122";}.glyphicon-bell:before {  content: "\e123";}.glyphicon-certificate:before {  content: "\e124";}.glyphicon-thumbs-up:before {  content: "\e125";}.glyphicon-thumbs-down:before {  content: "\e126";}.glyphicon-hand-right:before {  content: "\e127";}.glyphicon-hand-left:before {  content: "\e128";}.glyphicon-hand-up:before {  content: "\e129";}.glyphicon-hand-down:before {  content: "\e130";}.glyphicon-circle-arrow-right:before {  content: "\e131";}.glyphicon-circle-arrow-left:before {  content: "\e132";}.glyphicon-circle-arrow-up:before {  content: "\e133";}.glyphicon-circle-arrow-down:before {  content: "\e134";}.glyphicon-globe:before {  content: "\e135";}.glyphicon-wrench:before {  content: "\e136";}.glyphicon-tasks:before {  content: "\e137";}.glyphicon-filter:before {  content: "\e138";}.glyphicon-briefcase:before {  content: "\e139";}.glyphicon-fullscreen:before {  content: "\e140";}.glyphicon-dashboard:before {  content: "\e141";}.glyphicon-paperclip:before {  content: "\e142";}.glyphicon-heart-empty:before {  content: "\e143";}.glyphicon-link:before {  content: "\e144";}.glyphicon-phone:before {  content: "\e145";}.glyphicon-pushpin:before {  content: "\e146";}.glyphicon-usd:before {  content: "\e148";}.glyphicon-gbp:before {  content: "\e149";}.glyphicon-sort:before {  content: "\e150";}.glyphicon-sort-by-alphabet:before {  content: "\e151";}.glyphicon-sort-by-alphabet-alt:before {  content: "\e152";}.glyphicon-sort-by-order:before {  content: "\e153";}.glyphicon-sort-by-order-alt:before {  content: "\e154";}.glyphicon-sort-by-attributes:before {  content: "\e155";}.glyphicon-sort-by-attributes-alt:before {  content: "\e156";}.glyphicon-unchecked:before {  content: "\e157";}.glyphicon-expand:before {  content: "\e158";}.glyphicon-collapse-down:before {  content: "\e159";}.glyphicon-collapse-up:before {  content: "\e160";}.glyphicon-log-in:before {  content: "\e161";}.glyphicon-flash:before {  content: "\e162";}.glyphicon-log-out:before {  content: "\e163";}.glyphicon-new-window:before {  content: "\e164";}.glyphicon-record:before {  content: "\e165";}.glyphicon-save:before {  content: "\e166";}.glyphicon-open:before {  content: "\e167";}.glyphicon-saved:before {  content: "\e168";}.glyphicon-import:before {  content: "\e169";}.glyphicon-export:before {  content: "\e170";}.glyphicon-send:before {  content: "\e171";}.glyphicon-floppy-disk:before {  content: "\e172";}.glyphicon-floppy-saved:before {  content: "\e173";}.glyphicon-floppy-remove:before {  content: "\e174";}.glyphicon-floppy-save:before {  content: "\e175";}.glyphicon-floppy-open:before {  content: "\e176";}.glyphicon-credit-card:before {  content: "\e177";}.glyphicon-transfer:before {  content: "\e178";}.glyphicon-cutlery:before {  content: "\e179";}.glyphicon-header:before {  content: "\e180";}.glyphicon-compressed:before {  content: "\e181";}.glyphicon-earphone:before {  content: "\e182";}.glyphicon-phone-alt:before {  content: "\e183";}.glyphicon-tower:before {  content: "\e184";}.glyphicon-stats:before {  content: "\e185";}.glyphicon-sd-video:before {  content: "\e186";}.glyphicon-hd-video:before {  content: "\e187";}.glyphicon-subtitles:before {  content: "\e188";}.glyphicon-sound-stereo:before {  content: "\e189";}.glyphicon-sound-dolby:before {  content: "\e190";}.glyphicon-sound-5-1:before {  content: "\e191";}.glyphicon-sound-6-1:before {  content: "\e192";}.glyphicon-sound-7-1:before {  content: "\e193";}.glyphicon-copyright-mark:before {  content: "\e194";}.glyphicon-registration-mark:before {  content: "\e195";}.glyphicon-cloud-download:before {  content: "\e197";}.glyphicon-cloud-upload:before {  content: "\e198";}.glyphicon-tree-conifer:before {  content: "\e199";}.glyphicon-tree-deciduous:before {  content: "\e200";}.glyphicon-cd:before {  content: "\e201";}.glyphicon-save-file:before {  content: "\e202";}.glyphicon-open-file:before {  content: "\e203";}.glyphicon-level-up:before {  content: "\e204";}.glyphicon-copy:before {  content: "\e205";}.glyphicon-paste:before {  content: "\e206";}.glyphicon-alert:before {  content: "\e209";}.glyphicon-equalizer:before {  content: "\e210";}.glyphicon-king:before {  content: "\e211";}.glyphicon-queen:before {  content: "\e212";}.glyphicon-pawn:before {  content: "\e213";}.glyphicon-bishop:before {  content: "\e214";}.glyphicon-knight:before {  content: "\e215";}.glyphicon-baby-formula:before {  content: "\e216";}.glyphicon-tent:before {  content: "\26fa";}.glyphicon-blackboard:before {  content: "\e218";}.glyphicon-bed:before {  content: "\e219";}.glyphicon-apple:before {  content: "\f8ff";}.glyphicon-erase:before {  content: "\e221";}.glyphicon-hourglass:before {  content: "\231b";}.glyphicon-lamp:before {  content: "\e223";}.glyphicon-duplicate:before {  content: "\e224";}.glyphicon-piggy-bank:before {  content: "\e225";}.glyphicon-scissors:before {  content: "\e226";}.glyphicon-bitcoin:before {  content: "\e227";}.glyphicon-btc:before {  content: "\e227";}.glyphicon-xbt:before {  content: "\e227";}.glyphicon-yen:before {  content: "\00a5";}.glyphicon-jpy:before {  content: "\00a5";}.glyphicon-ruble:before {  content: "\20bd";}.glyphicon-rub:before {  content: "\20bd";}.glyphicon-scale:before {  content: "\e230";}.glyphicon-ice-lolly:before {  content: "\e231";}.glyphicon-ice-lolly-tasted:before {  content: "\e232";}.glyphicon-education:before {  content: "\e233";}.glyphicon-option-horizontal:before {  content: "\e234";}.glyphicon-option-vertical:before {  content: "\e235";}.glyphicon-menu-hamburger:before {  content: "\e236";}.glyphicon-modal-window:before {  content: "\e237";}.glyphicon-oil:before {  content: "\e238";}.glyphicon-grain:before {  content: "\e239";}.glyphicon-sunglasses:before {  content: "\e240";}.glyphicon-text-size:before {  content: "\e241";}.glyphicon-text-color:before {  content: "\e242";}.glyphicon-text-background:before {  content: "\e243";}.glyphicon-object-align-top:before {  content: "\e244";}.glyphicon-object-align-bottom:before {  content: "\e245";}.glyphicon-object-align-horizontal:before {  content: "\e246";}.glyphicon-object-align-left:before {  content: "\e247";}.glyphicon-object-align-vertical:before {  content: "\e248";}.glyphicon-object-align-right:before {  content: "\e249";}.glyphicon-triangle-right:before {  content: "\e250";}.glyphicon-triangle-left:before {  content: "\e251";}.glyphicon-triangle-bottom:before {  content: "\e252";}.glyphicon-triangle-top:before {  content: "\e253";}.glyphicon-console:before {  content: "\e254";}.glyphicon-superscript:before {  content: "\e255";}.glyphicon-subscript:before {  content: "\e256";}.glyphicon-menu-left:before {  content: "\e257";}.glyphicon-menu-right:before {  content: "\e258";}.glyphicon-menu-down:before {  content: "\e259";}.glyphicon-menu-up:before {  content: "\e260";}* {  -webkit-box-sizing: border-box;     -moz-box-sizing: border-box;          box-sizing: border-box;}*:before,*:after {  -webkit-box-sizing: border-box;     -moz-box-sizing: border-box;          box-sizing: border-box;}html {  font-size: 10px;  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);}body {  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;  font-size: 14px;  line-height: 1.42857143;  color: #333;  background-color: #fff;}input,button,select,textarea {  font-family: inherit;  font-size: inherit;  line-height: inherit;}a {  color: #337ab7;  text-decoration: none;}a:hover,a:focus {  color: #23527c;  text-decoration: underline;}a:focus {  outline: thin dotted;  outline: 5px auto -webkit-focus-ring-color;  outline-offset: -2px;}figure {  margin: 0;}img {  vertical-align: middle;}.img-responsive,.thumbnail > img,.thumbnail a > img,.carousel-inner > .item > img,.carousel-inner > .item > a > img {  display: block;  max-width: 100%;  height: auto;}.img-rounded {  border-radius: 6px;}.img-thumbnail {  display: inline-block;  max-width: 100%;  height: auto;  padding: 4px;  line-height: 1.42857143;  background-color: #fff;  border: 1px solid #ddd;  border-radius: 4px;  -webkit-transition: all .2s ease-in-out;       -o-transition: all .2s ease-in-out;          transition: all .2s ease-in-out;}.img-circle {  border-radius: 50%;}hr {  margin-top: 20px;  margin-bottom: 20px;  border: 0;  border-top: 1px solid #eee;}.sr-only {  position: absolute;  width: 1px;  height: 1px;  padding: 0;  margin: -1px;  overflow: hidden;  clip: rect(0, 0, 0, 0);  border: 0;}.sr-only-focusable:active,.sr-only-focusable:focus {  position: static;  width: auto;  height: auto;  margin: 0;  overflow: visible;  clip: auto;}[role="button"] {  cursor: pointer;}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6 {  font-family: inherit;  font-weight: 500;  line-height: 1.1;  color: inherit;}h1 small,h2 small,h3 small,h4 small,h5 small,h6 small,.h1 small,.h2 small,.h3 small,.h4 small,.h5 small,.h6 small,h1 .small,h2 .small,h3 .small,h4 .small,h5 .small,h6 .small,.h1 .small,.h2 .small,.h3 .small,.h4 .small,.h5 .small,.h6 .small {  font-weight: normal;  line-height: 1;  color: #777;}h1,.h1,h2,.h2,h3,.h3 {  margin-top: 20px;  margin-bottom: 10px;}h1 small,.h1 small,h2 small,.h2 small,h3 small,.h3 small,h1 .small,.h1 .small,h2 .small,.h2 .small,h3 .small,.h3 .small {  font-size: 65%;}h4,.h4,h5,.h5,h6,.h6 {  margin-top: 10px;  margin-bottom: 10px;}h4 small,.h4 small,h5 small,.h5 small,h6 small,.h6 small,h4 .small,.h4 .small,h5 .small,.h5 .small,h6 .small,.h6 .small {  font-size: 75%;}h1,.h1 {  font-size: 36px;}h2,.h2 {  font-size: 30px;}h3,.h3 {  font-size: 24px;}h4,.h4 {  font-size: 18px;}h5,.h5 {  font-size: 14px;}h6,.h6 {  font-size: 12px;}p {  margin: 0 0 10px;}.lead {  margin-bottom: 20px;  font-size: 16px;  font-weight: 300;  line-height: 1.4;}@media (min-width: 768px) {  .lead {    font-size: 21px;  }}small,.small {  font-size: 85%;}mark,.mark {  padding: .2em;  background-color: #fcf8e3;}.text-left {  text-align: left;}.text-right {  text-align: right;}.text-center {  text-align: center;}.text-justify {  text-align: justify;}.text-nowrap {  white-space: nowrap;}.text-lowercase {  text-transform: lowercase;}.text-uppercase {  text-transform: uppercase;}.text-capitalize {  text-transform: capitalize;}.text-muted {  color: #777;}.text-primary {  color: #337ab7;}a.text-primary:hover,a.text-primary:focus {  color: #286090;}.text-success {  color: #3c763d;}a.text-success:hover,a.text-success:focus {  color: #2b542c;}.text-info {  color: #31708f;}a.text-info:hover,a.text-info:focus {  color: #245269;}.text-warning {  color: #8a6d3b;}a.text-warning:hover,a.text-warning:focus {  color: #66512c;}.text-danger {  color: #a94442;}a.text-danger:hover,a.text-danger:focus {  color: #843534;}.bg-primary {  color: #fff;  background-color: #337ab7;}a.bg-primary:hover,a.bg-primary:focus {  background-color: #286090;}.bg-success {  background-color: #dff0d8;}a.bg-success:hover,a.bg-success:focus {  background-color: #c1e2b3;}.bg-info {  background-color: #d9edf7;}a.bg-info:hover,a.bg-info:focus {  background-color: #afd9ee;}.bg-warning {  background-color: #fcf8e3;}a.bg-warning:hover,a.bg-warning:focus {  background-color: #f7ecb5;}.bg-danger {  background-color: #f2dede;}a.bg-danger:hover,a.bg-danger:focus {  background-color: #e4b9b9;}.page-header {  padding-bottom: 9px;  margin: 40px 0 20px;  border-bottom: 1px solid #eee;}ul,ol {  margin-top: 0;  margin-bottom: 10px;}ul ul,ol ul,ul ol,ol ol {  margin-bottom: 0;}.list-unstyled {  padding-left: 0;  list-style: none;}.list-inline {  padding-left: 0;  margin-left: -5px;  list-style: none;}.list-inline > li {  display: inline-block;  padding-right: 5px;  padding-left: 5px;}dl {  margin-top: 0;  margin-bottom: 20px;}dt,dd {  line-height: 1.42857143;}dt {  font-weight: bold;}dd {  margin-left: 0;}@media (min-width: 768px) {  .dl-horizontal dt {    float: left;    width: 160px;    overflow: hidden;    clear: left;    text-align: right;    text-overflow: ellipsis;    white-space: nowrap;  }  .dl-horizontal dd {    margin-left: 180px;  }}abbr[title],abbr[data-original-title] {  cursor: help;  border-bottom: 1px dotted #777;}.initialism {  font-size: 90%;  text-transform: uppercase;}blockquote {  padding: 10px 20px;  margin: 0 0 20px;  font-size: 17.5px;  border-left: 5px solid #eee;}blockquote p:last-child,blockquote ul:last-child,blockquote ol:last-child {  margin-bottom: 0;}blockquote footer,blockquote small,blockquote .small {  display: block;  font-size: 80%;  line-height: 1.42857143;  color: #777;}blockquote footer:before,blockquote small:before,blockquote .small:before {  content: '\2014 \00A0';}.blockquote-reverse,blockquote.pull-right {  padding-right: 15px;  padding-left: 0;  text-align: right;  border-right: 5px solid #eee;  border-left: 0;}.blockquote-reverse footer:before,blockquote.pull-right footer:before,.blockquote-reverse small:before,blockquote.pull-right small:before,.blockquote-reverse .small:before,blockquote.pull-right .small:before {  content: '';}.blockquote-reverse footer:after,blockquote.pull-right footer:after,.blockquote-reverse small:after,blockquote.pull-right small:after,.blockquote-reverse .small:after,blockquote.pull-right .small:after {  content: '\00A0 \2014';}address {  margin-bottom: 20px;  font-style: normal;  line-height: 1.42857143;}code,kbd,pre,samp {  font-family: Menlo, Monaco, Consolas, "Courier New", monospace;}code {  padding: 2px 4px;  font-size: 90%;  color: #c7254e;  background-color: #f9f2f4;  border-radius: 4px;}kbd {  padding: 2px 4px;  font-size: 90%;  color: #fff;  background-color: #333;  border-radius: 3px;  -webkit-box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .25);          box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .25);}kbd kbd {  padding: 0;  font-size: 100%;  font-weight: bold;  -webkit-box-shadow: none;          box-shadow: none;}pre {  display: block;  padding: 9.5px;  margin: 0 0 10px;  font-size: 13px;  line-height: 1.42857143;  color: #333;  word-break: break-all;  word-wrap: break-word;  background-color: #f5f5f5;  border: 1px solid #ccc;  border-radius: 4px;}pre code {  padding: 0;  font-size: inherit;  color: inherit;  white-space: pre-wrap;  background-color: transparent;  border-radius: 0;}.pre-scrollable {  max-height: 340px;  overflow-y: scroll;}.container {  padding-right: 15px;  padding-left: 15px;  margin-right: auto;  margin-left: auto;}@media (min-width: 768px) {  .container {    width: 750px;  }}@media (min-width: 992px) {  .container {    width: 970px;  }}@media (min-width: 1200px) {  .container {    width: 1170px;  }}.container-fluid {  padding-right: 15px;  padding-left: 15px;  margin-right: auto;  margin-left: auto;}.row {  margin-right: -15px;  margin-left: -15px;}.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 {  position: relative;  min-height: 1px;  padding-right: 15px;  padding-left: 15px;}.col-xs-1, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9, .col-xs-10, .col-xs-11, .col-xs-12 {  float: left;}.col-xs-12 {  width: 100%;}.col-xs-11 {  width: 91.66666667%;}.col-xs-10 {  width: 83.33333333%;}.col-xs-9 {  width: 75%;}.col-xs-8 {  width: 66.66666667%;}.col-xs-7 {  width: 58.33333333%;}.col-xs-6 {  width: 50%;}.col-xs-5 {  width: 41.66666667%;}.col-xs-4 {  width: 33.33333333%;}.col-xs-3 {  width: 25%;}.col-xs-2 {  width: 16.66666667%;}.col-xs-1 {  width: 8.33333333%;}.col-xs-pull-12 {  right: 100%;}.col-xs-pull-11 {  right: 91.66666667%;}.col-xs-pull-10 {  right: 83.33333333%;}.col-xs-pull-9 {  right: 75%;}.col-xs-pull-8 {  right: 66.66666667%;}.col-xs-pull-7 {  right: 58.33333333%;}.col-xs-pull-6 {  right: 50%;}.col-xs-pull-5 {  right: 41.66666667%;}.col-xs-pull-4 {  right: 33.33333333%;}.col-xs-pull-3 {  right: 25%;}.col-xs-pull-2 {  right: 16.66666667%;}.col-xs-pull-1 {  right: 8.33333333%;}.col-xs-pull-0 {  right: auto;}.col-xs-push-12 {  left: 100%;}.col-xs-push-11 {  left: 91.66666667%;}.col-xs-push-10 {  left: 83.33333333%;}.col-xs-push-9 {  left: 75%;}.col-xs-push-8 {  left: 66.66666667%;}.col-xs-push-7 {  left: 58.33333333%;}.col-xs-push-6 {  left: 50%;}.col-xs-push-5 {  left: 41.66666667%;}.col-xs-push-4 {  left: 33.33333333%;}.col-xs-push-3 {  left: 25%;}.col-xs-push-2 {  left: 16.66666667%;}.col-xs-push-1 {  left: 8.33333333%;}.col-xs-push-0 {  left: auto;}.col-xs-offset-12 {  margin-left: 100%;}.col-xs-offset-11 {  margin-left: 91.66666667%;}.col-xs-offset-10 {  margin-left: 83.33333333%;}.col-xs-offset-9 {  margin-left: 75%;}.col-xs-offset-8 {  margin-left: 66.66666667%;}.col-xs-offset-7 {  margin-left: 58.33333333%;}.col-xs-offset-6 {  margin-left: 50%;}.col-xs-offset-5 {  margin-left: 41.66666667%;}.col-xs-offset-4 {  margin-left: 33.33333333%;}.col-xs-offset-3 {  margin-left: 25%;}.col-xs-offset-2 {  margin-left: 16.66666667%;}.col-xs-offset-1 {  margin-left: 8.33333333%;}.col-xs-offset-0 {  margin-left: 0;}@media (min-width: 768px) {  .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12 {    float: left;  }  .col-sm-12 {    width: 100%;  }  .col-sm-11 {    width: 91.66666667%;  }  .col-sm-10 {    width: 83.33333333%;  }  .col-sm-9 {    width: 75%;  }  .col-sm-8 {    width: 66.66666667%;  }  .col-sm-7 {    width: 58.33333333%;  }  .col-sm-6 {    width: 50%;  }  .col-sm-5 {    width: 41.66666667%;  }  .col-sm-4 {    width: 33.33333333%;  }  .col-sm-3 {    width: 25%;  }  .col-sm-2 {    width: 16.66666667%;  }  .col-sm-1 {    width: 8.33333333%;  }  .col-sm-pull-12 {    right: 100%;  }  .col-sm-pull-11 {    right: 91.66666667%;  }  .col-sm-pull-10 {    right: 83.33333333%;  }  .col-sm-pull-9 {    right: 75%;  }  .col-sm-pull-8 {    right: 66.66666667%;  }  .col-sm-pull-7 {    right: 58.33333333%;  }  .col-sm-pull-6 {    right: 50%;  }  .col-sm-pull-5 {    right: 41.66666667%;  }  .col-sm-pull-4 {    right: 33.33333333%;  }  .col-sm-pull-3 {    right: 25%;  }  .col-sm-pull-2 {    right: 16.66666667%;  }  .col-sm-pull-1 {    right: 8.33333333%;  }  .col-sm-pull-0 {    right: auto;  }  .col-sm-push-12 {    left: 100%;  }  .col-sm-push-11 {    left: 91.66666667%;  }  .col-sm-push-10 {    left: 83.33333333%;  }  .col-sm-push-9 {    left: 75%;  }  .col-sm-push-8 {    left: 66.66666667%;  }  .col-sm-push-7 {    left: 58.33333333%;  }  .col-sm-push-6 {    left: 50%;  }  .col-sm-push-5 {    left: 41.66666667%;  }  .col-sm-push-4 {    left: 33.33333333%;  }  .col-sm-push-3 {    left: 25%;  }  .col-sm-push-2 {    left: 16.66666667%;  }  .col-sm-push-1 {    left: 8.33333333%;  }  .col-sm-push-0 {    left: auto;  }  .col-sm-offset-12 {    margin-left: 100%;  }  .col-sm-offset-11 {    margin-left: 91.66666667%;  }  .col-sm-offset-10 {    margin-left: 83.33333333%;  }  .col-sm-offset-9 {    margin-left: 75%;  }  .col-sm-offset-8 {    margin-left: 66.66666667%;  }  .col-sm-offset-7 {    margin-left: 58.33333333%;  }  .col-sm-offset-6 {    margin-left: 50%;  }  .col-sm-offset-5 {    margin-left: 41.66666667%;  }  .col-sm-offset-4 {    margin-left: 33.33333333%;  }  .col-sm-offset-3 {    margin-left: 25%;  }  .col-sm-offset-2 {    margin-left: 16.66666667%;  }  .col-sm-offset-1 {    margin-left: 8.33333333%;  }  .col-sm-offset-0 {    margin-left: 0;  }}@media (min-width: 992px) {  .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 {    float: left;  }  .col-md-12 {    width: 100%;  }  .col-md-11 {    width: 91.66666667%;  }  .col-md-10 {    width: 83.33333333%;  }  .col-md-9 {    width: 75%;  }  .col-md-8 {    width: 66.66666667%;  }  .col-md-7 {    width: 58.33333333%;  }  .col-md-6 {    width: 50%;  }  .col-md-5 {    width: 41.66666667%;  }  .col-md-4 {    width: 33.33333333%;  }  .col-md-3 {    width: 25%;  }  .col-md-2 {    width: 16.66666667%;  }  .col-md-1 {    width: 8.33333333%;  }  .col-md-pull-12 {    right: 100%;  }  .col-md-pull-11 {    right: 91.66666667%;  }  .col-md-pull-10 {    right: 83.33333333%;  }  .col-md-pull-9 {    right: 75%;  }  .col-md-pull-8 {    right: 66.66666667%;  }  .col-md-pull-7 {    right: 58.33333333%;  }  .col-md-pull-6 {    right: 50%;  }  .col-md-pull-5 {    right: 41.66666667%;  }  .col-md-pull-4 {    right: 33.33333333%;  }  .col-md-pull-3 {    right: 25%;  }  .col-md-pull-2 {    right: 16.66666667%;  }  .col-md-pull-1 {    right: 8.33333333%;  }  .col-md-pull-0 {    right: auto;  }  .col-md-push-12 {    left: 100%;  }  .col-md-push-11 {    left: 91.66666667%;  }  .col-md-push-10 {    left: 83.33333333%;  }  .col-md-push-9 {    left: 75%;  }  .col-md-push-8 {    left: 66.66666667%;  }  .col-md-push-7 {    left: 58.33333333%;  }  .col-md-push-6 {    left: 50%;  }  .col-md-push-5 {    left: 41.66666667%;  }  .col-md-push-4 {    left: 33.33333333%;  }  .col-md-push-3 {    left: 25%;  }  .col-md-push-2 {    left: 16.66666667%;  }  .col-md-push-1 {    left: 8.33333333%;  }  .col-md-push-0 {    left: auto;  }  .col-md-offset-12 {    margin-left: 100%;  }  .col-md-offset-11 {    margin-left: 91.66666667%;  }  .col-md-offset-10 {    margin-left: 83.33333333%;  }  .col-md-offset-9 {    margin-left: 75%;  }  .col-md-offset-8 {    margin-left: 66.66666667%;  }  .col-md-offset-7 {    margin-left: 58.33333333%;  }  .col-md-offset-6 {    margin-left: 50%;  }  .col-md-offset-5 {    margin-left: 41.66666667%;  }  .col-md-offset-4 {    margin-left: 33.33333333%;  }  .col-md-offset-3 {    margin-left: 25%;  }  .col-md-offset-2 {    margin-left: 16.66666667%;  }  .col-md-offset-1 {    margin-left: 8.33333333%;  }  .col-md-offset-0 {    margin-left: 0;  }}@media (min-width: 1200px) {  .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12 {    float: left;  }  .col-lg-12 {    width: 100%;  }  .col-lg-11 {    width: 91.66666667%;  }  .col-lg-10 {    width: 83.33333333%;  }  .col-lg-9 {    width: 75%;  }  .col-lg-8 {    width: 66.66666667%;  }  .col-lg-7 {    width: 58.33333333%;  }  .col-lg-6 {    width: 50%;  }  .col-lg-5 {    width: 41.66666667%;  }  .col-lg-4 {    width: 33.33333333%;  }  .col-lg-3 {    width: 25%;  }  .col-lg-2 {    width: 16.66666667%;  }  .col-lg-1 {    width: 8.33333333%;  }  .col-lg-pull-12 {    right: 100%;  }  .col-lg-pull-11 {    right: 91.66666667%;  }  .col-lg-pull-10 {    right: 83.33333333%;  }  .col-lg-pull-9 {    right: 75%;  }  .col-lg-pull-8 {    right: 66.66666667%;  }  .col-lg-pull-7 {    right: 58.33333333%;  }  .col-lg-pull-6 {    right: 50%;  }  .col-lg-pull-5 {    right: 41.66666667%;  }  .col-lg-pull-4 {    right: 33.33333333%;  }  .col-lg-pull-3 {    right: 25%;  }  .col-lg-pull-2 {    right: 16.66666667%;  }  .col-lg-pull-1 {    right: 8.33333333%;  }  .col-lg-pull-0 {    right: auto;  }  .col-lg-push-12 {    left: 100%;  }  .col-lg-push-11 {    left: 91.66666667%;  }  .col-lg-push-10 {    left: 83.33333333%;  }  .col-lg-push-9 {    left: 75%;  }  .col-lg-push-8 {    left: 66.66666667%;  }  .col-lg-push-7 {    left: 58.33333333%;  }  .col-lg-push-6 {    left: 50%;  }  .col-lg-push-5 {    left: 41.66666667%;  }  .col-lg-push-4 {    left: 33.33333333%;  }  .col-lg-push-3 {    left: 25%;  }  .col-lg-push-2 {    left: 16.66666667%;  }  .col-lg-push-1 {    left: 8.33333333%;  }  .col-lg-push-0 {    left: auto;  }  .col-lg-offset-12 {    margin-left: 100%;  }  .col-lg-offset-11 {    margin-left: 91.66666667%;  }  .col-lg-offset-10 {    margin-left: 83.33333333%;  }  .col-lg-offset-9 {    margin-left: 75%;  }  .col-lg-offset-8 {    margin-left: 66.66666667%;  }  .col-lg-offset-7 {    margin-left: 58.33333333%;  }  .col-lg-offset-6 {    margin-left: 50%;  }  .col-lg-offset-5 {    margin-left: 41.66666667%;  }  .col-lg-offset-4 {    margin-left: 33.33333333%;  }  .col-lg-offset-3 {    margin-left: 25%;  }  .col-lg-offset-2 {    margin-left: 16.66666667%;  }  .col-lg-offset-1 {    margin-left: 8.33333333%;  }  .col-lg-offset-0 {    margin-left: 0;  }}table {  background-color: transparent;}caption {  padding-top: 8px;  padding-bottom: 8px;  color: #777;  text-align: left;}th {  text-align: left;}.table {  width: 100%;  max-width: 100%;  margin-bottom: 20px;}.table > thead > tr > th,.table > tbody > tr > th,.table > tfoot > tr > th,.table > thead > tr > td,.table > tbody > tr > td,.table > tfoot > tr > td {  padding: 8px;  line-height: 1.42857143;  vertical-align: top;  border-top: 1px solid #ddd;}.table > thead > tr > th {  vertical-align: bottom;  border-bottom: 2px solid #ddd;}.table > caption + thead > tr:first-child > th,.table > colgroup + thead > tr:first-child > th,.table > thead:first-child > tr:first-child > th,.table > caption + thead > tr:first-child > td,.table > colgroup + thead > tr:first-child > td,.table > thead:first-child > tr:first-child > td {  border-top: 0;}.table > tbody + tbody {  border-top: 2px solid #ddd;}.table .table {  background-color: #fff;}.table-condensed > thead > tr > th,.table-condensed > tbody > tr > th,.table-condensed > tfoot > tr > th,.table-condensed > thead > tr > td,.table-condensed > tbody > tr > td,.table-condensed > tfoot > tr > td {  padding: 5px;}.table-bordered {  border: 1px solid #ddd;}.table-bordered > thead > tr > th,.table-bordered > tbody > tr > th,.table-bordered > tfoot > tr > th,.table-bordered > thead > tr > td,.table-bordered > tbody > tr > td,.table-bordered > tfoot > tr > td {  border: 1px solid #ddd;}.table-bordered > thead > tr > th,.table-bordered > thead > tr > td {  border-bottom-width: 2px;}.table-striped > tbody > tr:nth-of-type(odd) {  background-color: #f9f9f9;}.table-hover > tbody > tr:hover {  background-color: #f5f5f5;}table col[class*="col-"] {  position: static;  display: table-column;  float: none;}table td[class*="col-"],table th[class*="col-"] {  position: static;  display: table-cell;  float: none;}.table > thead > tr > td.active,.table > tbody > tr > td.active,.table > tfoot > tr > td.active,.table > thead > tr > th.active,.table > tbody > tr > th.active,.table > tfoot > tr > th.active,.table > thead > tr.active > td,.table > tbody > tr.active > td,.table > tfoot > tr.active > td,.table > thead > tr.active > th,.table > tbody > tr.active > th,.table > tfoot > tr.active > th {  background-color: #f5f5f5;}.table-hover > tbody > tr > td.active:hover,.table-hover > tbody > tr > th.active:hover,.table-hover > tbody > tr.active:hover > td,.table-hover > tbody > tr:hover > .active,.table-hover > tbody > tr.active:hover > th {  background-color: #e8e8e8;}.table > thead > tr > td.success,.table > tbody > tr > td.success,.table > tfoot > tr > td.success,.table > thead > tr > th.success,.table > tbody > tr > th.success,.table > tfoot > tr > th.success,.table > thead > tr.success > td,.table > tbody > tr.success > td,.table > tfoot > tr.success > td,.table > thead > tr.success > th,.table > tbody > tr.success > th,.table > tfoot > tr.success > th {  background-color: #dff0d8;}.table-hover > tbody > tr > td.success:hover,.table-hover > tbody > tr > th.success:hover,.table-hover > tbody > tr.success:hover > td,.table-hover > tbody > tr:hover > .success,.table-hover > tbody > tr.success:hover > th {  background-color: #d0e9c6;}.table > thead > tr > td.info,.table > tbody > tr > td.info,.table > tfoot > tr > td.info,.table > thead > tr > th.info,.table > tbody > tr > th.info,.table > tfoot > tr > th.info,.table > thead > tr.info > td,.table > tbody > tr.info > td,.table > tfoot > tr.info > td,.table > thead > tr.info > th,.table > tbody > tr.info > th,.table > tfoot > tr.info > th {  background-color: #d9edf7;}.table-hover > tbody > tr > td.info:hover,.table-hover > tbody > tr > th.info:hover,.table-hover > tbody > tr.info:hover > td,.table-hover > tbody > tr:hover > .info,.table-hover > tbody > tr.info:hover > th {  background-color: #c4e3f3;}.table > thead > tr > td.warning,.table > tbody > tr > td.warning,.table > tfoot > tr > td.warning,.table > thead > tr > th.warning,.table > tbody > tr > th.warning,.table > tfoot > tr > th.warning,.table > thead > tr.warning > td,.table > tbody > tr.warning > td,.table > tfoot > tr.warning > td,.table > thead > tr.warning > th,.table > tbody > tr.warning > th,.table > tfoot > tr.warning > th {  background-color: #fcf8e3;}.table-hover > tbody > tr > td.warning:hover,.table-hover > tbody > tr > th.warning:hover,.table-hover > tbody > tr.warning:hover > td,.table-hover > tbody > tr:hover > .warning,.table-hover > tbody > tr.warning:hover > th {  background-color: #faf2cc;}.table > thead > tr > td.danger,.table > tbody > tr > td.danger,.table > tfoot > tr > td.danger,.table > thead > tr > th.danger,.table > tbody > tr > th.danger,.table > tfoot > tr > th.danger,.table > thead > tr.danger > td,.table > tbody > tr.danger > td,.table > tfoot > tr.danger > td,.table > thead > tr.danger > th,.table > tbody > tr.danger > th,.table > tfoot > tr.danger > th {  background-color: #f2dede;}.table-hover > tbody > tr > td.danger:hover,.table-hover > tbody > tr > th.danger:hover,.table-hover > tbody > tr.danger:hover > td,.table-hover > tbody > tr:hover > .danger,.table-hover > tbody > tr.danger:hover > th {  background-color: #ebcccc;}.table-responsive {  min-height: .01%;  overflow-x: auto;}@media screen and (max-width: 767px) {  .table-responsive {    width: 100%;    margin-bottom: 15px;    overflow-y: hidden;    -ms-overflow-style: -ms-autohiding-scrollbar;    border: 1px solid #ddd;  }  .table-responsive > .table {    margin-bottom: 0;  }  .table-responsive > .table > thead > tr > th,  .table-responsive > .table > tbody > tr > th,  .table-responsive > .table > tfoot > tr > th,  .table-responsive > .table > thead > tr > td,  .table-responsive > .table > tbody > tr > td,  .table-responsive > .table > tfoot > tr > td {    white-space: nowrap;  }  .table-responsive > .table-bordered {    border: 0;  }  .table-responsive > .table-bordered > thead > tr > th:first-child,  .table-responsive > .table-bordered > tbody > tr > th:first-child,  .table-responsive > .table-bordered > tfoot > tr > th:first-child,  .table-responsive > .table-bordered > thead > tr > td:first-child,  .table-responsive > .table-bordered > tbody > tr > td:first-child,  .table-responsive > .table-bordered > tfoot > tr > td:first-child {    border-left: 0;  }  .table-responsive > .table-bordered > thead > tr > th:last-child,  .table-responsive > .table-bordered > tbody > tr > th:last-child,  .table-responsive > .table-bordered > tfoot > tr > th:last-child,  .table-responsive > .table-bordered > thead > tr > td:last-child,  .table-responsive > .table-bordered > tbody > tr > td:last-child,  .table-responsive > .table-bordered > tfoot > tr > td:last-child {    border-right: 0;  }  .table-responsive > .table-bordered > tbody > tr:last-child > th,  .table-responsive > .table-bordered > tfoot > tr:last-child > th,  .table-responsive > .table-bordered > tbody > tr:last-child > td,  .table-responsive > .table-bordered > tfoot > tr:last-child > td {    border-bottom: 0;  }}fieldset {  min-width: 0;  padding: 0;  margin: 0;  border: 0;}legend {  display: block;  width: 100%;  padding: 0;  margin-bottom: 20px;  font-size: 21px;  line-height: inherit;  color: #333;  border: 0;  border-bottom: 1px solid #e5e5e5;}label {  display: inline-block;  max-width: 100%;  margin-bottom: 5px;  font-weight: bold;}input[type="search"] {  -webkit-box-sizing: border-box;     -moz-box-sizing: border-box;          box-sizing: border-box;}input[type="radio"],input[type="checkbox"] {  margin: 4px 0 0;  margin-top: 1px \9;  line-height: normal;}input[type="file"] {  display: block;}input[type="range"] {  display: block;  width: 100%;}select[multiple],select[size] {  height: auto;}input[type="file"]:focus,input[type="radio"]:focus,input[type="checkbox"]:focus {  outline: thin dotted;  outline: 5px auto -webkit-focus-ring-color;  outline-offset: -2px;}output {  display: block;  padding-top: 7px;  font-size: 14px;  line-height: 1.42857143;  color: #555;}.form-control {  display: block;  width: 100%;  height: 34px;  padding: 6px 12px;  font-size: 14px;  line-height: 1.42857143;  color: #555;  background-color: #fff;  background-image: none;  border: 1px solid #ccc;  border-radius: 4px;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);  -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;       -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;          transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;}.form-control:focus {  border-color: #66afe9;  outline: 0;  -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, .6);          box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, .6);}.form-control::-moz-placeholder {  color: #999;  opacity: 1;}.form-control:-ms-input-placeholder {  color: #999;}.form-control::-webkit-input-placeholder {  color: #999;}.form-control[disabled],.form-control[readonly],fieldset[disabled] .form-control {  background-color: #eee;  opacity: 1;}.form-control[disabled],fieldset[disabled] .form-control {  cursor: not-allowed;}textarea.form-control {  height: auto;}input[type="search"] {  -webkit-appearance: none;}@media screen and (-webkit-min-device-pixel-ratio: 0) {  input[type="date"].form-control,  input[type="time"].form-control,  input[type="datetime-local"].form-control,  input[type="month"].form-control {    line-height: 34px;  }  input[type="date"].input-sm,  input[type="time"].input-sm,  input[type="datetime-local"].input-sm,  input[type="month"].input-sm,  .input-group-sm input[type="date"],  .input-group-sm input[type="time"],  .input-group-sm input[type="datetime-local"],  .input-group-sm input[type="month"] {    line-height: 30px;  }  input[type="date"].input-lg,  input[type="time"].input-lg,  input[type="datetime-local"].input-lg,  input[type="month"].input-lg,  .input-group-lg input[type="date"],  .input-group-lg input[type="time"],  .input-group-lg input[type="datetime-local"],  .input-group-lg input[type="month"] {    line-height: 46px;  }}.form-group {  margin-bottom: 15px;}.radio,.checkbox {  position: relative;  display: block;  margin-top: 10px;  margin-bottom: 10px;}.radio label,.checkbox label {  min-height: 20px;  padding-left: 20px;  margin-bottom: 0;  font-weight: normal;  cursor: pointer;}.radio input[type="radio"],.radio-inline input[type="radio"],.checkbox input[type="checkbox"],.checkbox-inline input[type="checkbox"] {  position: absolute;  margin-top: 4px \9;  margin-left: -20px;}.radio + .radio,.checkbox + .checkbox {  margin-top: -5px;}.radio-inline,.checkbox-inline {  position: relative;  display: inline-block;  padding-left: 20px;  margin-bottom: 0;  font-weight: normal;  vertical-align: middle;  cursor: pointer;}.radio-inline + .radio-inline,.checkbox-inline + .checkbox-inline {  margin-top: 0;  margin-left: 10px;}input[type="radio"][disabled],input[type="checkbox"][disabled],input[type="radio"].disabled,input[type="checkbox"].disabled,fieldset[disabled] input[type="radio"],fieldset[disabled] input[type="checkbox"] {  cursor: not-allowed;}.radio-inline.disabled,.checkbox-inline.disabled,fieldset[disabled] .radio-inline,fieldset[disabled] .checkbox-inline {  cursor: not-allowed;}.radio.disabled label,.checkbox.disabled label,fieldset[disabled] .radio label,fieldset[disabled] .checkbox label {  cursor: not-allowed;}.form-control-static {  min-height: 34px;  padding-top: 7px;  padding-bottom: 7px;  margin-bottom: 0;}.form-control-static.input-lg,.form-control-static.input-sm {  padding-right: 0;  padding-left: 0;}.input-sm {  height: 30px;  padding: 5px 10px;  font-size: 12px;  line-height: 1.5;  border-radius: 3px;}select.input-sm {  height: 30px;  line-height: 30px;}textarea.input-sm,select[multiple].input-sm {  height: auto;}.form-group-sm .form-control {  height: 30px;  padding: 5px 10px;  font-size: 12px;  line-height: 1.5;  border-radius: 3px;}.form-group-sm select.form-control {  height: 30px;  line-height: 30px;}.form-group-sm textarea.form-control,.form-group-sm select[multiple].form-control {  height: auto;}.form-group-sm .form-control-static {  height: 30px;  min-height: 32px;  padding: 6px 10px;  font-size: 12px;  line-height: 1.5;}.input-lg {  height: 46px;  padding: 10px 16px;  font-size: 18px;  line-height: 1.3333333;  border-radius: 6px;}select.input-lg {  height: 46px;  line-height: 46px;}textarea.input-lg,select[multiple].input-lg {  height: auto;}.form-group-lg .form-control {  height: 46px;  padding: 10px 16px;  font-size: 18px;  line-height: 1.3333333;  border-radius: 6px;}.form-group-lg select.form-control {  height: 46px;  line-height: 46px;}.form-group-lg textarea.form-control,.form-group-lg select[multiple].form-control {  height: auto;}.form-group-lg .form-control-static {  height: 46px;  min-height: 38px;  padding: 11px 16px;  font-size: 18px;  line-height: 1.3333333;}.has-feedback {  position: relative;}.has-feedback .form-control {  padding-right: 42.5px;}.form-control-feedback {  position: absolute;  top: 0;  right: 0;  z-index: 2;  display: block;  width: 34px;  height: 34px;  line-height: 34px;  text-align: center;  pointer-events: none;}.input-lg + .form-control-feedback,.input-group-lg + .form-control-feedback,.form-group-lg .form-control + .form-control-feedback {  width: 46px;  height: 46px;  line-height: 46px;}.input-sm + .form-control-feedback,.input-group-sm + .form-control-feedback,.form-group-sm .form-control + .form-control-feedback {  width: 30px;  height: 30px;  line-height: 30px;}.has-success .help-block,.has-success .control-label,.has-success .radio,.has-success .checkbox,.has-success .radio-inline,.has-success .checkbox-inline,.has-success.radio label,.has-success.checkbox label,.has-success.radio-inline label,.has-success.checkbox-inline label {  color: #3c763d;}.has-success .form-control {  border-color: #3c763d;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);}.has-success .form-control:focus {  border-color: #2b542c;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #67b168;          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #67b168;}.has-success .input-group-addon {  color: #3c763d;  background-color: #dff0d8;  border-color: #3c763d;}.has-success .form-control-feedback {  color: #3c763d;}.has-warning .help-block,.has-warning .control-label,.has-warning .radio,.has-warning .checkbox,.has-warning .radio-inline,.has-warning .checkbox-inline,.has-warning.radio label,.has-warning.checkbox label,.has-warning.radio-inline label,.has-warning.checkbox-inline label {  color: #8a6d3b;}.has-warning .form-control {  border-color: #8a6d3b;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);}.has-warning .form-control:focus {  border-color: #66512c;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #c0a16b;          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #c0a16b;}.has-warning .input-group-addon {  color: #8a6d3b;  background-color: #fcf8e3;  border-color: #8a6d3b;}.has-warning .form-control-feedback {  color: #8a6d3b;}.has-error .help-block,.has-error .control-label,.has-error .radio,.has-error .checkbox,.has-error .radio-inline,.has-error .checkbox-inline,.has-error.radio label,.has-error.checkbox label,.has-error.radio-inline label,.has-error.checkbox-inline label {  color: #a94442;}.has-error .form-control {  border-color: #a94442;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);}.has-error .form-control:focus {  border-color: #843534;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #ce8483;          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #ce8483;}.has-error .input-group-addon {  color: #a94442;  background-color: #f2dede;  border-color: #a94442;}.has-error .form-control-feedback {  color: #a94442;}.has-feedback label ~ .form-control-feedback {  top: 25px;}.has-feedback label.sr-only ~ .form-control-feedback {  top: 0;}.help-block {  display: block;  margin-top: 5px;  margin-bottom: 10px;  color: #737373;}@media (min-width: 768px) {  .form-inline .form-group {    display: inline-block;    margin-bottom: 0;    vertical-align: middle;  }  .form-inline .form-control {    display: inline-block;    width: auto;    vertical-align: middle;  }  .form-inline .form-control-static {    display: inline-block;  }  .form-inline .input-group {    display: inline-table;    vertical-align: middle;  }  .form-inline .input-group .input-group-addon,  .form-inline .input-group .input-group-btn,  .form-inline .input-group .form-control {    width: auto;  }  .form-inline .input-group > .form-control {    width: 100%;  }  .form-inline .control-label {    margin-bottom: 0;    vertical-align: middle;  }  .form-inline .radio,  .form-inline .checkbox {    display: inline-block;    margin-top: 0;    margin-bottom: 0;    vertical-align: middle;  }  .form-inline .radio label,  .form-inline .checkbox label {    padding-left: 0;  }  .form-inline .radio input[type="radio"],  .form-inline .checkbox input[type="checkbox"] {    position: relative;    margin-left: 0;  }  .form-inline .has-feedback .form-control-feedback {    top: 0;  }}.form-horizontal .radio,.form-horizontal .checkbox,.form-horizontal .radio-inline,.form-horizontal .checkbox-inline {  padding-top: 7px;  margin-top: 0;  margin-bottom: 0;}.form-horizontal .radio,.form-horizontal .checkbox {  min-height: 27px;}.form-horizontal .form-group {  margin-right: -15px;  margin-left: -15px;}@media (min-width: 768px) {  .form-horizontal .control-label {    padding-top: 7px;    margin-bottom: 0;    text-align: right;  }}.form-horizontal .has-feedback .form-control-feedback {  right: 15px;}@media (min-width: 768px) {  .form-horizontal .form-group-lg .control-label {    padding-top: 14.333333px;    font-size: 18px;  }}@media (min-width: 768px) {  .form-horizontal .form-group-sm .control-label {    padding-top: 6px;    font-size: 12px;  }}.btn {  display: inline-block;  padding: 6px 12px;  margin-bottom: 0;  font-size: 14px;  font-weight: normal;  line-height: 1.42857143;  text-align: center;  white-space: nowrap;  vertical-align: middle;  -ms-touch-action: manipulation;      touch-action: manipulation;  cursor: pointer;  -webkit-user-select: none;     -moz-user-select: none;      -ms-user-select: none;          user-select: none;  background-image: none;  border: 1px solid transparent;  border-radius: 4px;}.btn:focus,.btn:active:focus,.btn.active:focus,.btn.focus,.btn:active.focus,.btn.active.focus {  outline: thin dotted;  outline: 5px auto -webkit-focus-ring-color;  outline-offset: -2px;}.btn:hover,.btn:focus,.btn.focus {  color: #333;  text-decoration: none;}.btn:active,.btn.active {  background-image: none;  outline: 0;  -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);          box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);}.btn.disabled,.btn[disabled],fieldset[disabled] .btn {  cursor: not-allowed;  filter: alpha(opacity=65);  -webkit-box-shadow: none;          box-shadow: none;  opacity: .65;}a.btn.disabled,fieldset[disabled] a.btn {  pointer-events: none;}.btn-default {  color: #333;  background-color: #fff;  border-color: #ccc;}.btn-default:focus,.btn-default.focus {  color: #333;  background-color: #e6e6e6;  border-color: #8c8c8c;}.btn-default:hover {  color: #333;  background-color: #e6e6e6;  border-color: #adadad;}.btn-default:active,.btn-default.active,.open > .dropdown-toggle.btn-default {  color: #333;  background-color: #e6e6e6;  border-color: #adadad;}.btn-default:active:hover,.btn-default.active:hover,.open > .dropdown-toggle.btn-default:hover,.btn-default:active:focus,.btn-default.active:focus,.open > .dropdown-toggle.btn-default:focus,.btn-default:active.focus,.btn-default.active.focus,.open > .dropdown-toggle.btn-default.focus {  color: #333;  background-color: #d4d4d4;  border-color: #8c8c8c;}.btn-default:active,.btn-default.active,.open > .dropdown-toggle.btn-default {  background-image: none;}.btn-default.disabled,.btn-default[disabled],fieldset[disabled] .btn-default,.btn-default.disabled:hover,.btn-default[disabled]:hover,fieldset[disabled] .btn-default:hover,.btn-default.disabled:focus,.btn-default[disabled]:focus,fieldset[disabled] .btn-default:focus,.btn-default.disabled.focus,.btn-default[disabled].focus,fieldset[disabled] .btn-default.focus,.btn-default.disabled:active,.btn-default[disabled]:active,fieldset[disabled] .btn-default:active,.btn-default.disabled.active,.btn-default[disabled].active,fieldset[disabled] .btn-default.active {  background-color: #fff;  border-color: #ccc;}.btn-default .badge {  color: #fff;  background-color: #333;}.btn-primary {  color: #fff;  background-color: #337ab7;  border-color: #2e6da4;}.btn-primary:focus,.btn-primary.focus {  color: #fff;  background-color: #286090;  border-color: #122b40;}.btn-primary:hover {  color: #fff;  background-color: #286090;  border-color: #204d74;}.btn-primary:active,.btn-primary.active,.open > .dropdown-toggle.btn-primary {  color: #fff;  background-color: #286090;  border-color: #204d74;}.btn-primary:active:hover,.btn-primary.active:hover,.open > .dropdown-toggle.btn-primary:hover,.btn-primary:active:focus,.btn-primary.active:focus,.open > .dropdown-toggle.btn-primary:focus,.btn-primary:active.focus,.btn-primary.active.focus,.open > .dropdown-toggle.btn-primary.focus {  color: #fff;  background-color: #204d74;  border-color: #122b40;}.btn-primary:active,.btn-primary.active,.open > .dropdown-toggle.btn-primary {  background-image: none;}.btn-primary.disabled,.btn-primary[disabled],fieldset[disabled] .btn-primary,.btn-primary.disabled:hover,.btn-primary[disabled]:hover,fieldset[disabled] .btn-primary:hover,.btn-primary.disabled:focus,.btn-primary[disabled]:focus,fieldset[disabled] .btn-primary:focus,.btn-primary.disabled.focus,.btn-primary[disabled].focus,fieldset[disabled] .btn-primary.focus,.btn-primary.disabled:active,.btn-primary[disabled]:active,fieldset[disabled] .btn-primary:active,.btn-primary.disabled.active,.btn-primary[disabled].active,fieldset[disabled] .btn-primary.active {  background-color: #337ab7;  border-color: #2e6da4;}.btn-primary .badge {  color: #337ab7;  background-color: #fff;}.btn-success {  color: #fff;  background-color: #5cb85c;  border-color: #4cae4c;}.btn-success:focus,.btn-success.focus {  color: #fff;  background-color: #449d44;  border-color: #255625;}.btn-success:hover {  color: #fff;  background-color: #449d44;  border-color: #398439;}.btn-success:active,.btn-success.active,.open > .dropdown-toggle.btn-success {  color: #fff;  background-color: #449d44;  border-color: #398439;}.btn-success:active:hover,.btn-success.active:hover,.open > .dropdown-toggle.btn-success:hover,.btn-success:active:focus,.btn-success.active:focus,.open > .dropdown-toggle.btn-success:focus,.btn-success:active.focus,.btn-success.active.focus,.open > .dropdown-toggle.btn-success.focus {  color: #fff;  background-color: #398439;  border-color: #255625;}.btn-success:active,.btn-success.active,.open > .dropdown-toggle.btn-success {  background-image: none;}.btn-success.disabled,.btn-success[disabled],fieldset[disabled] .btn-success,.btn-success.disabled:hover,.btn-success[disabled]:hover,fieldset[disabled] .btn-success:hover,.btn-success.disabled:focus,.btn-success[disabled]:focus,fieldset[disabled] .btn-success:focus,.btn-success.disabled.focus,.btn-success[disabled].focus,fieldset[disabled] .btn-success.focus,.btn-success.disabled:active,.btn-success[disabled]:active,fieldset[disabled] .btn-success:active,.btn-success.disabled.active,.btn-success[disabled].active,fieldset[disabled] .btn-success.active {  background-color: #5cb85c;  border-color: #4cae4c;}.btn-success .badge {  color: #5cb85c;  background-color: #fff;}.btn-info {  color: #fff;  background-color: #5bc0de;  border-color: #46b8da;}.btn-info:focus,.btn-info.focus {  color: #fff;  background-color: #31b0d5;  border-color: #1b6d85;}.btn-info:hover {  color: #fff;  background-color: #31b0d5;  border-color: #269abc;}.btn-info:active,.btn-info.active,.open > .dropdown-toggle.btn-info {  color: #fff;  background-color: #31b0d5;  border-color: #269abc;}.btn-info:active:hover,.btn-info.active:hover,.open > .dropdown-toggle.btn-info:hover,.btn-info:active:focus,.btn-info.active:focus,.open > .dropdown-toggle.btn-info:focus,.btn-info:active.focus,.btn-info.active.focus,.open > .dropdown-toggle.btn-info.focus {  color: #fff;  background-color: #269abc;  border-color: #1b6d85;}.btn-info:active,.btn-info.active,.open > .dropdown-toggle.btn-info {  background-image: none;}.btn-info.disabled,.btn-info[disabled],fieldset[disabled] .btn-info,.btn-info.disabled:hover,.btn-info[disabled]:hover,fieldset[disabled] .btn-info:hover,.btn-info.disabled:focus,.btn-info[disabled]:focus,fieldset[disabled] .btn-info:focus,.btn-info.disabled.focus,.btn-info[disabled].focus,fieldset[disabled] .btn-info.focus,.btn-info.disabled:active,.btn-info[disabled]:active,fieldset[disabled] .btn-info:active,.btn-info.disabled.active,.btn-info[disabled].active,fieldset[disabled] .btn-info.active {  background-color: #5bc0de;  border-color: #46b8da;}.btn-info .badge {  color: #5bc0de;  background-color: #fff;}.btn-warning {  color: #fff;  background-color: #f0ad4e;  border-color: #eea236;}.btn-warning:focus,.btn-warning.focus {  color: #fff;  background-color: #ec971f;  border-color: #985f0d;}.btn-warning:hover {  color: #fff;  background-color: #ec971f;  border-color: #d58512;}.btn-warning:active,.btn-warning.active,.open > .dropdown-toggle.btn-warning {  color: #fff;  background-color: #ec971f;  border-color: #d58512;}.btn-warning:active:hover,.btn-warning.active:hover,.open > .dropdown-toggle.btn-warning:hover,.btn-warning:active:focus,.btn-warning.active:focus,.open > .dropdown-toggle.btn-warning:focus,.btn-warning:active.focus,.btn-warning.active.focus,.open > .dropdown-toggle.btn-warning.focus {  color: #fff;  background-color: #d58512;  border-color: #985f0d;}.btn-warning:active,.btn-warning.active,.open > .dropdown-toggle.btn-warning {  background-image: none;}.btn-warning.disabled,.btn-warning[disabled],fieldset[disabled] .btn-warning,.btn-warning.disabled:hover,.btn-warning[disabled]:hover,fieldset[disabled] .btn-warning:hover,.btn-warning.disabled:focus,.btn-warning[disabled]:focus,fieldset[disabled] .btn-warning:focus,.btn-warning.disabled.focus,.btn-warning[disabled].focus,fieldset[disabled] .btn-warning.focus,.btn-warning.disabled:active,.btn-warning[disabled]:active,fieldset[disabled] .btn-warning:active,.btn-warning.disabled.active,.btn-warning[disabled].active,fieldset[disabled] .btn-warning.active {  background-color: #f0ad4e;  border-color: #eea236;}.btn-warning .badge {  color: #f0ad4e;  background-color: #fff;}.btn-danger {  color: #fff;  background-color: #d9534f;  border-color: #d43f3a;}.btn-danger:focus,.btn-danger.focus {  color: #fff;  background-color: #c9302c;  border-color: #761c19;}.btn-danger:hover {  color: #fff;  background-color: #c9302c;  border-color: #ac2925;}.btn-danger:active,.btn-danger.active,.open > .dropdown-toggle.btn-danger {  color: #fff;  background-color: #c9302c;  border-color: #ac2925;}.btn-danger:active:hover,.btn-danger.active:hover,.open > .dropdown-toggle.btn-danger:hover,.btn-danger:active:focus,.btn-danger.active:focus,.open > .dropdown-toggle.btn-danger:focus,.btn-danger:active.focus,.btn-danger.active.focus,.open > .dropdown-toggle.btn-danger.focus {  color: #fff;  background-color: #ac2925;  border-color: #761c19;}.btn-danger:active,.btn-danger.active,.open > .dropdown-toggle.btn-danger {  background-image: none;}.btn-danger.disabled,.btn-danger[disabled],fieldset[disabled] .btn-danger,.btn-danger.disabled:hover,.btn-danger[disabled]:hover,fieldset[disabled] .btn-danger:hover,.btn-danger.disabled:focus,.btn-danger[disabled]:focus,fieldset[disabled] .btn-danger:focus,.btn-danger.disabled.focus,.btn-danger[disabled].focus,fieldset[disabled] .btn-danger.focus,.btn-danger.disabled:active,.btn-danger[disabled]:active,fieldset[disabled] .btn-danger:active,.btn-danger.disabled.active,.btn-danger[disabled].active,fieldset[disabled] .btn-danger.active {  background-color: #d9534f;  border-color: #d43f3a;}.btn-danger .badge {  color: #d9534f;  background-color: #fff;}.btn-link {  font-weight: normal;  color: #337ab7;  border-radius: 0;}.btn-link,.btn-link:active,.btn-link.active,.btn-link[disabled],fieldset[disabled] .btn-link {  background-color: transparent;  -webkit-box-shadow: none;          box-shadow: none;}.btn-link,.btn-link:hover,.btn-link:focus,.btn-link:active {  border-color: transparent;}.btn-link:hover,.btn-link:focus {  color: #23527c;  text-decoration: underline;  background-color: transparent;}.btn-link[disabled]:hover,fieldset[disabled] .btn-link:hover,.btn-link[disabled]:focus,fieldset[disabled] .btn-link:focus {  color: #777;  text-decoration: none;}.btn-lg,.btn-group-lg > .btn {  padding: 10px 16px;  font-size: 18px;  line-height: 1.3333333;  border-radius: 6px;}.btn-sm,.btn-group-sm > .btn {  padding: 5px 10px;  font-size: 12px;  line-height: 1.5;  border-radius: 3px;}.btn-xs,.btn-group-xs > .btn {  padding: 1px 5px;  font-size: 12px;  line-height: 1.5;  border-radius: 3px;}.btn-block {  display: block;  width: 100%;}.btn-block + .btn-block {  margin-top: 5px;}input[type="submit"].btn-block,input[type="reset"].btn-block,input[type="button"].btn-block {  width: 100%;}.fade {  opacity: 0;  -webkit-transition: opacity .15s linear;       -o-transition: opacity .15s linear;          transition: opacity .15s linear;}.fade.in {  opacity: 1;}.collapse {  display: none;}.collapse.in {  display: block;}tr.collapse.in {  display: table-row;}tbody.collapse.in {  display: table-row-group;}.collapsing {  position: relative;  height: 0;  overflow: hidden;  -webkit-transition-timing-function: ease;       -o-transition-timing-function: ease;          transition-timing-function: ease;  -webkit-transition-duration: .35s;       -o-transition-duration: .35s;          transition-duration: .35s;  -webkit-transition-property: height, visibility;       -o-transition-property: height, visibility;          transition-property: height, visibility;}.caret {  display: inline-block;  width: 0;  height: 0;  margin-left: 2px;  vertical-align: middle;  border-top: 4px dashed;  border-top: 4px solid \9;  border-right: 4px solid transparent;  border-left: 4px solid transparent;}.dropup,.dropdown {  position: relative;}.dropdown-toggle:focus {  outline: 0;}.dropdown-menu {  position: absolute;  top: 100%;  left: 0;  z-index: 1000;  display: none;  float: left;  min-width: 160px;  padding: 5px 0;  margin: 2px 0 0;  font-size: 14px;  text-align: left;  list-style: none;  background-color: #fff;  -webkit-background-clip: padding-box;          background-clip: padding-box;  border: 1px solid #ccc;  border: 1px solid rgba(0, 0, 0, .15);  border-radius: 4px;  -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, .175);          box-shadow: 0 6px 12px rgba(0, 0, 0, .175);}.dropdown-menu.pull-right {  right: 0;  left: auto;}.dropdown-menu .divider {  height: 1px;  margin: 9px 0;  overflow: hidden;  background-color: #e5e5e5;}.dropdown-menu > li > a {  display: block;  padding: 3px 20px;  clear: both;  font-weight: normal;  line-height: 1.42857143;  color: #333;  white-space: nowrap;}.dropdown-menu > li > a:hover,.dropdown-menu > li > a:focus {  color: #262626;  text-decoration: none;  background-color: #f5f5f5;}.dropdown-menu > .active > a,.dropdown-menu > .active > a:hover,.dropdown-menu > .active > a:focus {  color: #fff;  text-decoration: none;  background-color: #337ab7;  outline: 0;}.dropdown-menu > .disabled > a,.dropdown-menu > .disabled > a:hover,.dropdown-menu > .disabled > a:focus {  color: #777;}.dropdown-menu > .disabled > a:hover,.dropdown-menu > .disabled > a:focus {  text-decoration: none;  cursor: not-allowed;  background-color: transparent;  background-image: none;  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);}.open > .dropdown-menu {  display: block;}.open > a {  outline: 0;}.dropdown-menu-right {  right: 0;  left: auto;}.dropdown-menu-left {  right: auto;  left: 0;}.dropdown-header {  display: block;  padding: 3px 20px;  font-size: 12px;  line-height: 1.42857143;  color: #777;  white-space: nowrap;}.dropdown-backdrop {  position: fixed;  top: 0;  right: 0;  bottom: 0;  left: 0;  z-index: 990;}.pull-right > .dropdown-menu {  right: 0;  left: auto;}.dropup .caret,.navbar-fixed-bottom .dropdown .caret {  content: "";  border-top: 0;  border-bottom: 4px dashed;  border-bottom: 4px solid \9;}.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu {  top: auto;  bottom: 100%;  margin-bottom: 2px;}@media (min-width: 768px) {  .navbar-right .dropdown-menu {    right: 0;    left: auto;  }  .navbar-right .dropdown-menu-left {    right: auto;    left: 0;  }}.btn-group,.btn-group-vertical {  position: relative;  display: inline-block;  vertical-align: middle;}.btn-group > .btn,.btn-group-vertical > .btn {  position: relative;  float: left;}.btn-group > .btn:hover,.btn-group-vertical > .btn:hover,.btn-group > .btn:focus,.btn-group-vertical > .btn:focus,.btn-group > .btn:active,.btn-group-vertical > .btn:active,.btn-group > .btn.active,.btn-group-vertical > .btn.active {  z-index: 2;}.btn-group .btn + .btn,.btn-group .btn + .btn-group,.btn-group .btn-group + .btn,.btn-group .btn-group + .btn-group {  margin-left: -1px;}.btn-toolbar {  margin-left: -5px;}.btn-toolbar .btn,.btn-toolbar .btn-group,.btn-toolbar .input-group {  float: left;}.btn-toolbar > .btn,.btn-toolbar > .btn-group,.btn-toolbar > .input-group {  margin-left: 5px;}.btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {  border-radius: 0;}.btn-group > .btn:first-child {  margin-left: 0;}.btn-group > .btn:first-child:not(:last-child):not(.dropdown-toggle) {  border-top-right-radius: 0;  border-bottom-right-radius: 0;}.btn-group > .btn:last-child:not(:first-child),.btn-group > .dropdown-toggle:not(:first-child) {  border-top-left-radius: 0;  border-bottom-left-radius: 0;}.btn-group > .btn-group {  float: left;}.btn-group > .btn-group:not(:first-child):not(:last-child) > .btn {  border-radius: 0;}.btn-group > .btn-group:first-child:not(:last-child) > .btn:last-child,.btn-group > .btn-group:first-child:not(:last-child) > .dropdown-toggle {  border-top-right-radius: 0;  border-bottom-right-radius: 0;}.btn-group > .btn-group:last-child:not(:first-child) > .btn:first-child {  border-top-left-radius: 0;  border-bottom-left-radius: 0;}.btn-group .dropdown-toggle:active,.btn-group.open .dropdown-toggle {  outline: 0;}.btn-group > .btn + .dropdown-toggle {  padding-right: 8px;  padding-left: 8px;}.btn-group > .btn-lg + .dropdown-toggle {  padding-right: 12px;  padding-left: 12px;}.btn-group.open .dropdown-toggle {  -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);          box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);}.btn-group.open .dropdown-toggle.btn-link {  -webkit-box-shadow: none;          box-shadow: none;}.btn .caret {  margin-left: 0;}.btn-lg .caret {  border-width: 5px 5px 0;  border-bottom-width: 0;}.dropup .btn-lg .caret {  border-width: 0 5px 5px;}.btn-group-vertical > .btn,.btn-group-vertical > .btn-group,.btn-group-vertical > .btn-group > .btn {  display: block;  float: none;  width: 100%;  max-width: 100%;}.btn-group-vertical > .btn-group > .btn {  float: none;}.btn-group-vertical > .btn + .btn,.btn-group-vertical > .btn + .btn-group,.btn-group-vertical > .btn-group + .btn,.btn-group-vertical > .btn-group + .btn-group {  margin-top: -1px;  margin-left: 0;}.btn-group-vertical > .btn:not(:first-child):not(:last-child) {  border-radius: 0;}.btn-group-vertical > .btn:first-child:not(:last-child) {  border-top-right-radius: 4px;  border-bottom-right-radius: 0;  border-bottom-left-radius: 0;}.btn-group-vertical > .btn:last-child:not(:first-child) {  border-top-left-radius: 0;  border-top-right-radius: 0;  border-bottom-left-radius: 4px;}.btn-group-vertical > .btn-group:not(:first-child):not(:last-child) > .btn {  border-radius: 0;}.btn-group-vertical > .btn-group:first-child:not(:last-child) > .btn:last-child,.btn-group-vertical > .btn-group:first-child:not(:last-child) > .dropdown-toggle {  border-bottom-right-radius: 0;  border-bottom-left-radius: 0;}.btn-group-vertical > .btn-group:last-child:not(:first-child) > .btn:first-child {  border-top-left-radius: 0;  border-top-right-radius: 0;}.btn-group-justified {  display: table;  width: 100%;  table-layout: fixed;  border-collapse: separate;}.btn-group-justified > .btn,.btn-group-justified > .btn-group {  display: table-cell;  float: none;  width: 1%;}.btn-group-justified > .btn-group .btn {  width: 100%;}.btn-group-justified > .btn-group .dropdown-menu {  left: auto;}[data-toggle="buttons"] > .btn input[type="radio"],[data-toggle="buttons"] > .btn-group > .btn input[type="radio"],[data-toggle="buttons"] > .btn input[type="checkbox"],[data-toggle="buttons"] > .btn-group > .btn input[type="checkbox"] {  position: absolute;  clip: rect(0, 0, 0, 0);  pointer-events: none;}.input-group {  position: relative;  display: table;  border-collapse: separate;}.input-group[class*="col-"] {  float: none;  padding-right: 0;  padding-left: 0;}.input-group .form-control {  position: relative;  z-index: 2;  float: left;  width: 100%;  margin-bottom: 0;}.input-group-lg > .form-control,.input-group-lg > .input-group-addon,.input-group-lg > .input-group-btn > .btn {  height: 46px;  padding: 10px 16px;  font-size: 18px;  line-height: 1.3333333;  border-radius: 6px;}select.input-group-lg > .form-control,select.input-group-lg > .input-group-addon,select.input-group-lg > .input-group-btn > .btn {  height: 46px;  line-height: 46px;}textarea.input-group-lg > .form-control,textarea.input-group-lg > .input-group-addon,textarea.input-group-lg > .input-group-btn > .btn,select[multiple].input-group-lg > .form-control,select[multiple].input-group-lg > .input-group-addon,select[multiple].input-group-lg > .input-group-btn > .btn {  height: auto;}.input-group-sm > .form-control,.input-group-sm > .input-group-addon,.input-group-sm > .input-group-btn > .btn {  height: 30px;  padding: 5px 10px;  font-size: 12px;  line-height: 1.5;  border-radius: 3px;}select.input-group-sm > .form-control,select.input-group-sm > .input-group-addon,select.input-group-sm > .input-group-btn > .btn {  height: 30px;  line-height: 30px;}textarea.input-group-sm > .form-control,textarea.input-group-sm > .input-group-addon,textarea.input-group-sm > .input-group-btn > .btn,select[multiple].input-group-sm > .form-control,select[multiple].input-group-sm > .input-group-addon,select[multiple].input-group-sm > .input-group-btn > .btn {  height: auto;}.input-group-addon,.input-group-btn,.input-group .form-control {  display: table-cell;}.input-group-addon:not(:first-child):not(:last-child),.input-group-btn:not(:first-child):not(:last-child),.input-group .form-control:not(:first-child):not(:last-child) {  border-radius: 0;}.input-group-addon,.input-group-btn {  width: 1%;  white-space: nowrap;  vertical-align: middle;}.input-group-addon {  padding: 6px 12px;  font-size: 14px;  font-weight: normal;  line-height: 1;  color: #555;  text-align: center;  background-color: #eee;  border: 1px solid #ccc;  border-radius: 4px;}.input-group-addon.input-sm {  padding: 5px 10px;  font-size: 12px;  border-radius: 3px;}.input-group-addon.input-lg {  padding: 10px 16px;  font-size: 18px;  border-radius: 6px;}.input-group-addon input[type="radio"],.input-group-addon input[type="checkbox"] {  margin-top: 0;}.input-group .form-control:first-child,.input-group-addon:first-child,.input-group-btn:first-child > .btn,.input-group-btn:first-child > .btn-group > .btn,.input-group-btn:first-child > .dropdown-toggle,.input-group-btn:last-child > .btn:not(:last-child):not(.dropdown-toggle),.input-group-btn:last-child > .btn-group:not(:last-child) > .btn {  border-top-right-radius: 0;  border-bottom-right-radius: 0;}.input-group-addon:first-child {  border-right: 0;}.input-group .form-control:last-child,.input-group-addon:last-child,.input-group-btn:last-child > .btn,.input-group-btn:last-child > .btn-group > .btn,.input-group-btn:last-child > .dropdown-toggle,.input-group-btn:first-child > .btn:not(:first-child),.input-group-btn:first-child > .btn-group:not(:first-child) > .btn {  border-top-left-radius: 0;  border-bottom-left-radius: 0;}.input-group-addon:last-child {  border-left: 0;}.input-group-btn {  position: relative;  font-size: 0;  white-space: nowrap;}.input-group-btn > .btn {  position: relative;}.input-group-btn > .btn + .btn {  margin-left: -1px;}.input-group-btn > .btn:hover,.input-group-btn > .btn:focus,.input-group-btn > .btn:active {  z-index: 2;}.input-group-btn:first-child > .btn,.input-group-btn:first-child > .btn-group {  margin-right: -1px;}.input-group-btn:last-child > .btn,.input-group-btn:last-child > .btn-group {  z-index: 2;  margin-left: -1px;}.nav {  padding-left: 0;  margin-bottom: 0;  list-style: none;}.nav > li {  position: relative;  display: block;}.nav > li > a {  position: relative;  display: block;  padding: 10px 15px;}.nav > li > a:hover,.nav > li > a:focus {  text-decoration: none;  background-color: #eee;}.nav > li.disabled > a {  color: #777;}.nav > li.disabled > a:hover,.nav > li.disabled > a:focus {  color: #777;  text-decoration: none;  cursor: not-allowed;  background-color: transparent;}.nav .open > a,.nav .open > a:hover,.nav .open > a:focus {  background-color: #eee;  border-color: #337ab7;}.nav .nav-divider {  height: 1px;  margin: 9px 0;  overflow: hidden;  background-color: #e5e5e5;}.nav > li > a > img {  max-width: none;}.nav-tabs {  border-bottom: 1px solid #ddd;}.nav-tabs > li {  float: left;  margin-bottom: -1px;}.nav-tabs > li > a {  margin-right: 2px;  line-height: 1.42857143;  border: 1px solid transparent;  border-radius: 4px 4px 0 0;}.nav-tabs > li > a:hover {  border-color: #eee #eee #ddd;}.nav-tabs > li.active > a,.nav-tabs > li.active > a:hover,.nav-tabs > li.active > a:focus {  color: #555;  cursor: default;  background-color: #fff;  border: 1px solid #ddd;  border-bottom-color: transparent;}.nav-tabs.nav-justified {  width: 100%;  border-bottom: 0;}.nav-tabs.nav-justified > li {  float: none;}.nav-tabs.nav-justified > li > a {  margin-bottom: 5px;  text-align: center;}.nav-tabs.nav-justified > .dropdown .dropdown-menu {  top: auto;  left: auto;}@media (min-width: 768px) {  .nav-tabs.nav-justified > li {    display: table-cell;    width: 1%;  }  .nav-tabs.nav-justified > li > a {    margin-bottom: 0;  }}.nav-tabs.nav-justified > li > a {  margin-right: 0;  border-radius: 4px;}.nav-tabs.nav-justified > .active > a,.nav-tabs.nav-justified > .active > a:hover,.nav-tabs.nav-justified > .active > a:focus {  border: 1px solid #ddd;}@media (min-width: 768px) {  .nav-tabs.nav-justified > li > a {    border-bottom: 1px solid #ddd;    border-radius: 4px 4px 0 0;  }  .nav-tabs.nav-justified > .active > a,  .nav-tabs.nav-justified > .active > a:hover,  .nav-tabs.nav-justified > .active > a:focus {    border-bottom-color: #fff;  }}.nav-pills > li {  float: left;}.nav-pills > li > a {  border-radius: 4px;}.nav-pills > li + li {  margin-left: 2px;}.nav-pills > li.active > a,.nav-pills > li.active > a:hover,.nav-pills > li.active > a:focus {  color: #fff;  background-color: #337ab7;}.nav-stacked > li {  float: none;}.nav-stacked > li + li {  margin-top: 2px;  margin-left: 0;}.nav-justified {  width: 100%;}.nav-justified > li {  float: none;}.nav-justified > li > a {  margin-bottom: 5px;  text-align: center;}.nav-justified > .dropdown .dropdown-menu {  top: auto;  left: auto;}@media (min-width: 768px) {  .nav-justified > li {    display: table-cell;    width: 1%;  }  .nav-justified > li > a {    margin-bottom: 0;  }}.nav-tabs-justified {  border-bottom: 0;}.nav-tabs-justified > li > a {  margin-right: 0;  border-radius: 4px;}.nav-tabs-justified > .active > a,.nav-tabs-justified > .active > a:hover,.nav-tabs-justified > .active > a:focus {  border: 1px solid #ddd;}@media (min-width: 768px) {  .nav-tabs-justified > li > a {    border-bottom: 1px solid #ddd;    border-radius: 4px 4px 0 0;  }  .nav-tabs-justified > .active > a,  .nav-tabs-justified > .active > a:hover,  .nav-tabs-justified > .active > a:focus {    border-bottom-color: #fff;  }}.tab-content > .tab-pane {  display: none;}.tab-content > .active {  display: block;}.nav-tabs .dropdown-menu {  margin-top: -1px;  border-top-left-radius: 0;  border-top-right-radius: 0;}.navbar {  position: relative;  min-height: 50px;  margin-bottom: 20px;  border: 1px solid transparent;}@media (min-width: 768px) {  .navbar {    border-radius: 4px;  }}@media (min-width: 768px) {  .navbar-header {    float: left;  }}.navbar-collapse {  padding-right: 15px;  padding-left: 15px;  overflow-x: visible;  -webkit-overflow-scrolling: touch;  border-top: 1px solid transparent;  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1);          box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1);}.navbar-collapse.in {  overflow-y: auto;}@media (min-width: 768px) {  .navbar-collapse {    width: auto;    border-top: 0;    -webkit-box-shadow: none;            box-shadow: none;  }  .navbar-collapse.collapse {    display: block !important;    height: auto !important;    padding-bottom: 0;    overflow: visible !important;  }  .navbar-collapse.in {    overflow-y: visible;  }  .navbar-fixed-top .navbar-collapse,  .navbar-static-top .navbar-collapse,  .navbar-fixed-bottom .navbar-collapse {    padding-right: 0;    padding-left: 0;  }}.navbar-fixed-top .navbar-collapse,.navbar-fixed-bottom .navbar-collapse {  max-height: 340px;}@media (max-device-width: 480px) and (orientation: landscape) {  .navbar-fixed-top .navbar-collapse,  .navbar-fixed-bottom .navbar-collapse {    max-height: 200px;  }}.container > .navbar-header,.container-fluid > .navbar-header,.container > .navbar-collapse,.container-fluid > .navbar-collapse {  margin-right: -15px;  margin-left: -15px;}@media (min-width: 768px) {  .container > .navbar-header,  .container-fluid > .navbar-header,  .container > .navbar-collapse,  .container-fluid > .navbar-collapse {    margin-right: 0;    margin-left: 0;  }}.navbar-static-top {  z-index: 1000;  border-width: 0 0 1px;}@media (min-width: 768px) {  .navbar-static-top {    border-radius: 0;  }}.navbar-fixed-top,.navbar-fixed-bottom {  position: fixed;  right: 0;  left: 0;  z-index: 1030;}@media (min-width: 768px) {  .navbar-fixed-top,  .navbar-fixed-bottom {    border-radius: 0;  }}.navbar-fixed-top {  top: 0;  border-width: 0 0 1px;}.navbar-fixed-bottom {  bottom: 0;  margin-bottom: 0;  border-width: 1px 0 0;}.navbar-brand {  float: left;  height: 50px;  padding: 15px 15px;  font-size: 18px;  line-height: 20px;}.navbar-brand:hover,.navbar-brand:focus {  text-decoration: none;}.navbar-brand > img {  display: block;}@media (min-width: 768px) {  .navbar > .container .navbar-brand,  .navbar > .container-fluid .navbar-brand {    margin-left: -15px;  }}.navbar-toggle {  position: relative;  float: right;  padding: 9px 10px;  margin-top: 8px;  margin-right: 15px;  margin-bottom: 8px;  background-color: transparent;  background-image: none;  border: 1px solid transparent;  border-radius: 4px;}.navbar-toggle:focus {  outline: 0;}.navbar-toggle .icon-bar {  display: block;  width: 22px;  height: 2px;  border-radius: 1px;}.navbar-toggle .icon-bar + .icon-bar {  margin-top: 4px;}@media (min-width: 768px) {  .navbar-toggle {    display: none;  }}.navbar-nav {  margin: 7.5px -15px;}.navbar-nav > li > a {  padding-top: 10px;  padding-bottom: 10px;  line-height: 20px;}@media (max-width: 767px) {  .navbar-nav .open .dropdown-menu {    position: static;    float: none;    width: auto;    margin-top: 0;    background-color: transparent;    border: 0;    -webkit-box-shadow: none;            box-shadow: none;  }  .navbar-nav .open .dropdown-menu > li > a,  .navbar-nav .open .dropdown-menu .dropdown-header {    padding: 5px 15px 5px 25px;  }  .navbar-nav .open .dropdown-menu > li > a {    line-height: 20px;  }  .navbar-nav .open .dropdown-menu > li > a:hover,  .navbar-nav .open .dropdown-menu > li > a:focus {    background-image: none;  }}@media (min-width: 768px) {  .navbar-nav {    float: left;    margin: 0;  }  .navbar-nav > li {    float: left;  }  .navbar-nav > li > a {    padding-top: 15px;    padding-bottom: 15px;  }}.navbar-form {  padding: 10px 15px;  margin-top: 8px;  margin-right: -15px;  margin-bottom: 8px;  margin-left: -15px;  border-top: 1px solid transparent;  border-bottom: 1px solid transparent;  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1), 0 1px 0 rgba(255, 255, 255, .1);          box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1), 0 1px 0 rgba(255, 255, 255, .1);}@media (min-width: 768px) {  .navbar-form .form-group {    display: inline-block;    margin-bottom: 0;    vertical-align: middle;  }  .navbar-form .form-control {    display: inline-block;    width: auto;    vertical-align: middle;  }  .navbar-form .form-control-static {    display: inline-block;  }  .navbar-form .input-group {    display: inline-table;    vertical-align: middle;  }  .navbar-form .input-group .input-group-addon,  .navbar-form .input-group .input-group-btn,  .navbar-form .input-group .form-control {    width: auto;  }  .navbar-form .input-group > .form-control {    width: 100%;  }  .navbar-form .control-label {    margin-bottom: 0;    vertical-align: middle;  }  .navbar-form .radio,  .navbar-form .checkbox {    display: inline-block;    margin-top: 0;    margin-bottom: 0;    vertical-align: middle;  }  .navbar-form .radio label,  .navbar-form .checkbox label {    padding-left: 0;  }  .navbar-form .radio input[type="radio"],  .navbar-form .checkbox input[type="checkbox"] {    position: relative;    margin-left: 0;  }  .navbar-form .has-feedback .form-control-feedback {    top: 0;  }}@media (max-width: 767px) {  .navbar-form .form-group {    margin-bottom: 5px;  }  .navbar-form .form-group:last-child {    margin-bottom: 0;  }}@media (min-width: 768px) {  .navbar-form {    width: auto;    padding-top: 0;    padding-bottom: 0;    margin-right: 0;    margin-left: 0;    border: 0;    -webkit-box-shadow: none;            box-shadow: none;  }}.navbar-nav > li > .dropdown-menu {  margin-top: 0;  border-top-left-radius: 0;  border-top-right-radius: 0;}.navbar-fixed-bottom .navbar-nav > li > .dropdown-menu {  margin-bottom: 0;  border-top-left-radius: 4px;  border-top-right-radius: 4px;  border-bottom-right-radius: 0;  border-bottom-left-radius: 0;}.navbar-btn {  margin-top: 8px;  margin-bottom: 8px;}.navbar-btn.btn-sm {  margin-top: 10px;  margin-bottom: 10px;}.navbar-btn.btn-xs {  margin-top: 14px;  margin-bottom: 14px;}.navbar-text {  margin-top: 15px;  margin-bottom: 15px;}@media (min-width: 768px) {  .navbar-text {    float: left;    margin-right: 15px;    margin-left: 15px;  }}@media (min-width: 768px) {  .navbar-left {    float: left !important;  }  .navbar-right {    float: right !important;    margin-right: -15px;  }  .navbar-right ~ .navbar-right {    margin-right: 0;  }}.navbar-default {  background-color: #f8f8f8;  border-color: #e7e7e7;}.navbar-default .navbar-brand {  color: #777;}.navbar-default .navbar-brand:hover,.navbar-default .navbar-brand:focus {  color: #5e5e5e;  background-color: transparent;}.navbar-default .navbar-text {  color: #777;}.navbar-default .navbar-nav > li > a {  color: #777;}.navbar-default .navbar-nav > li > a:hover,.navbar-default .navbar-nav > li > a:focus {  color: #333;  background-color: transparent;}.navbar-default .navbar-nav > .active > a,.navbar-default .navbar-nav > .active > a:hover,.navbar-default .navbar-nav > .active > a:focus {  color: #555;  background-color: #e7e7e7;}.navbar-default .navbar-nav > .disabled > a,.navbar-default .navbar-nav > .disabled > a:hover,.navbar-default .navbar-nav > .disabled > a:focus {  color: #ccc;  background-color: transparent;}.navbar-default .navbar-toggle {  border-color: #ddd;}.navbar-default .navbar-toggle:hover,.navbar-default .navbar-toggle:focus {  background-color: #ddd;}.navbar-default .navbar-toggle .icon-bar {  background-color: #888;}.navbar-default .navbar-collapse,.navbar-default .navbar-form {  border-color: #e7e7e7;}.navbar-default .navbar-nav > .open > a,.navbar-default .navbar-nav > .open > a:hover,.navbar-default .navbar-nav > .open > a:focus {  color: #555;  background-color: #e7e7e7;}@media (max-width: 767px) {  .navbar-default .navbar-nav .open .dropdown-menu > li > a {    color: #777;  }  .navbar-default .navbar-nav .open .dropdown-menu > li > a:hover,  .navbar-default .navbar-nav .open .dropdown-menu > li > a:focus {    color: #333;    background-color: transparent;  }  .navbar-default .navbar-nav .open .dropdown-menu > .active > a,  .navbar-default .navbar-nav .open .dropdown-menu > .active > a:hover,  .navbar-default .navbar-nav .open .dropdown-menu > .active > a:focus {    color: #555;    background-color: #e7e7e7;  }  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a,  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:hover,  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:focus {    color: #ccc;    background-color: transparent;  }}.navbar-default .navbar-link {  color: #777;}.navbar-default .navbar-link:hover {  color: #333;}.navbar-default .btn-link {  color: #777;}.navbar-default .btn-link:hover,.navbar-default .btn-link:focus {  color: #333;}.navbar-default .btn-link[disabled]:hover,fieldset[disabled] .navbar-default .btn-link:hover,.navbar-default .btn-link[disabled]:focus,fieldset[disabled] .navbar-default .btn-link:focus {  color: #ccc;}.navbar-inverse {  background-color: #222;  border-color: #080808;}.navbar-inverse .navbar-brand {  color: #9d9d9d;}.navbar-inverse .navbar-brand:hover,.navbar-inverse .navbar-brand:focus {  color: #fff;  background-color: transparent;}.navbar-inverse .navbar-text {  color: #9d9d9d;}.navbar-inverse .navbar-nav > li > a {  color: #9d9d9d;}.navbar-inverse .navbar-nav > li > a:hover,.navbar-inverse .navbar-nav > li > a:focus {  color: #fff;  background-color: transparent;}.navbar-inverse .navbar-nav > .active > a,.navbar-inverse .navbar-nav > .active > a:hover,.navbar-inverse .navbar-nav > .active > a:focus {  color: #fff;  background-color: #080808;}.navbar-inverse .navbar-nav > .disabled > a,.navbar-inverse .navbar-nav > .disabled > a:hover,.navbar-inverse .navbar-nav > .disabled > a:focus {  color: #444;  background-color: transparent;}.navbar-inverse .navbar-toggle {  border-color: #333;}.navbar-inverse .navbar-toggle:hover,.navbar-inverse .navbar-toggle:focus {  background-color: #333;}.navbar-inverse .navbar-toggle .icon-bar {  background-color: #fff;}.navbar-inverse .navbar-collapse,.navbar-inverse .navbar-form {  border-color: #101010;}.navbar-inverse .navbar-nav > .open > a,.navbar-inverse .navbar-nav > .open > a:hover,.navbar-inverse .navbar-nav > .open > a:focus {  color: #fff;  background-color: #080808;}@media (max-width: 767px) {  .navbar-inverse .navbar-nav .open .dropdown-menu > .dropdown-header {    border-color: #080808;  }  .navbar-inverse .navbar-nav .open .dropdown-menu .divider {    background-color: #080808;  }  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a {    color: #9d9d9d;  }  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:hover,  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:focus {    color: #fff;    background-color: transparent;  }  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a,  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:hover,  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:focus {    color: #fff;    background-color: #080808;  }  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a,  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:hover,  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:focus {    color: #444;    background-color: transparent;  }}.navbar-inverse .navbar-link {  color: #9d9d9d;}.navbar-inverse .navbar-link:hover {  color: #fff;}.navbar-inverse .btn-link {  color: #9d9d9d;}.navbar-inverse .btn-link:hover,.navbar-inverse .btn-link:focus {  color: #fff;}.navbar-inverse .btn-link[disabled]:hover,fieldset[disabled] .navbar-inverse .btn-link:hover,.navbar-inverse .btn-link[disabled]:focus,fieldset[disabled] .navbar-inverse .btn-link:focus {  color: #444;}.breadcrumb {  padding: 8px 15px;  margin-bottom: 20px;  list-style: none;  background-color: #f5f5f5;  border-radius: 4px;}.breadcrumb > li {  display: inline-block;}.breadcrumb > li + li:before {  padding: 0 5px;  color: #ccc;  content: "/\00a0";}.breadcrumb > .active {  color: #777;}.pagination {  display: inline-block;  padding-left: 0;  margin: 20px 0;  border-radius: 4px;}.pagination > li {  display: inline;}.pagination > li > a,.pagination > li > span {  position: relative;  float: left;  padding: 6px 12px;  margin-left: -1px;  line-height: 1.42857143;  color: #337ab7;  text-decoration: none;  background-color: #fff;  border: 1px solid #ddd;}.pagination > li:first-child > a,.pagination > li:first-child > span {  margin-left: 0;  border-top-left-radius: 4px;  border-bottom-left-radius: 4px;}.pagination > li:last-child > a,.pagination > li:last-child > span {  border-top-right-radius: 4px;  border-bottom-right-radius: 4px;}.pagination > li > a:hover,.pagination > li > span:hover,.pagination > li > a:focus,.pagination > li > span:focus {  z-index: 3;  color: #23527c;  background-color: #eee;  border-color: #ddd;}.pagination > .active > a,.pagination > .active > span,.pagination > .active > a:hover,.pagination > .active > span:hover,.pagination > .active > a:focus,.pagination > .active > span:focus {  z-index: 2;  color: #fff;  cursor: default;  background-color: #337ab7;  border-color: #337ab7;}.pagination > .disabled > span,.pagination > .disabled > span:hover,.pagination > .disabled > span:focus,.pagination > .disabled > a,.pagination > .disabled > a:hover,.pagination > .disabled > a:focus {  color: #777;  cursor: not-allowed;  background-color: #fff;  border-color: #ddd;}.pagination-lg > li > a,.pagination-lg > li > span {  padding: 10px 16px;  font-size: 18px;  line-height: 1.3333333;}.pagination-lg > li:first-child > a,.pagination-lg > li:first-child > span {  border-top-left-radius: 6px;  border-bottom-left-radius: 6px;}.pagination-lg > li:last-child > a,.pagination-lg > li:last-child > span {  border-top-right-radius: 6px;  border-bottom-right-radius: 6px;}.pagination-sm > li > a,.pagination-sm > li > span {  padding: 5px 10px;  font-size: 12px;  line-height: 1.5;}.pagination-sm > li:first-child > a,.pagination-sm > li:first-child > span {  border-top-left-radius: 3px;  border-bottom-left-radius: 3px;}.pagination-sm > li:last-child > a,.pagination-sm > li:last-child > span {  border-top-right-radius: 3px;  border-bottom-right-radius: 3px;}.pager {  padding-left: 0;  margin: 20px 0;  text-align: center;  list-style: none;}.pager li {  display: inline;}.pager li > a,.pager li > span {  display: inline-block;  padding: 5px 14px;  background-color: #fff;  border: 1px solid #ddd;  border-radius: 15px;}.pager li > a:hover,.pager li > a:focus {  text-decoration: none;  background-color: #eee;}.pager .next > a,.pager .next > span {  float: right;}.pager .previous > a,.pager .previous > span {  float: left;}.pager .disabled > a,.pager .disabled > a:hover,.pager .disabled > a:focus,.pager .disabled > span {  color: #777;  cursor: not-allowed;  background-color: #fff;}.label {  display: inline;  padding: .2em .6em .3em;  font-size: 75%;  font-weight: bold;  line-height: 1;  color: #fff;  text-align: center;  white-space: nowrap;  vertical-align: baseline;  border-radius: .25em;}a.label:hover,a.label:focus {  color: #fff;  text-decoration: none;  cursor: pointer;}.label:empty {  display: none;}.btn .label {  position: relative;  top: -1px;}.label-default {  background-color: #777;}.label-default[href]:hover,.label-default[href]:focus {  background-color: #5e5e5e;}.label-primary {  background-color: #337ab7;}.label-primary[href]:hover,.label-primary[href]:focus {  background-color: #286090;}.label-success {  background-color: #5cb85c;}.label-success[href]:hover,.label-success[href]:focus {  background-color: #449d44;}.label-info {  background-color: #5bc0de;}.label-info[href]:hover,.label-info[href]:focus {  background-color: #31b0d5;}.label-warning {  background-color: #f0ad4e;}.label-warning[href]:hover,.label-warning[href]:focus {  background-color: #ec971f;}.label-danger {  background-color: #d9534f;}.label-danger[href]:hover,.label-danger[href]:focus {  background-color: #c9302c;}.badge {  display: inline-block;  min-width: 10px;  padding: 3px 7px;  font-size: 12px;  font-weight: bold;  line-height: 1;  color: #fff;  text-align: center;  white-space: nowrap;  vertical-align: middle;  background-color: #777;  border-radius: 10px;}.badge:empty {  display: none;}.btn .badge {  position: relative;  top: -1px;}.btn-xs .badge,.btn-group-xs > .btn .badge {  top: 0;  padding: 1px 5px;}a.badge:hover,a.badge:focus {  color: #fff;  text-decoration: none;  cursor: pointer;}.list-group-item.active > .badge,.nav-pills > .active > a > .badge {  color: #337ab7;  background-color: #fff;}.list-group-item > .badge {  float: right;}.list-group-item > .badge + .badge {  margin-right: 5px;}.nav-pills > li > a > .badge {  margin-left: 3px;}.jumbotron {  padding-top: 30px;  padding-bottom: 30px;  margin-bottom: 30px;  color: inherit;  background-color: #eee;}.jumbotron h1,.jumbotron .h1 {  color: inherit;}.jumbotron p {  margin-bottom: 15px;  font-size: 21px;  font-weight: 200;}.jumbotron > hr {  border-top-color: #d5d5d5;}.container .jumbotron,.container-fluid .jumbotron {  border-radius: 6px;}.jumbotron .container {  max-width: 100%;}@media screen and (min-width: 768px) {  .jumbotron {    padding-top: 48px;    padding-bottom: 48px;  }  .container .jumbotron,  .container-fluid .jumbotron {    padding-right: 60px;    padding-left: 60px;  }  .jumbotron h1,  .jumbotron .h1 {    font-size: 63px;  }}.thumbnail {  display: block;  padding: 4px;  margin-bottom: 20px;  line-height: 1.42857143;  background-color: #fff;  border: 1px solid #ddd;  border-radius: 4px;  -webkit-transition: border .2s ease-in-out;       -o-transition: border .2s ease-in-out;          transition: border .2s ease-in-out;}.thumbnail > img,.thumbnail a > img {  margin-right: auto;  margin-left: auto;}a.thumbnail:hover,a.thumbnail:focus,a.thumbnail.active {  border-color: #337ab7;}.thumbnail .caption {  padding: 9px;  color: #333;}.alert {  padding: 15px;  margin-bottom: 20px;  border: 1px solid transparent;  border-radius: 4px;}.alert h4 {  margin-top: 0;  color: inherit;}.alert .alert-link {  font-weight: bold;}.alert > p,.alert > ul {  margin-bottom: 0;}.alert > p + p {  margin-top: 5px;}.alert-dismissable,.alert-dismissible {  padding-right: 35px;}.alert-dismissable .close,.alert-dismissible .close {  position: relative;  top: -2px;  right: -21px;  color: inherit;}.alert-success {  color: #3c763d;  background-color: #dff0d8;  border-color: #d6e9c6;}.alert-success hr {  border-top-color: #c9e2b3;}.alert-success .alert-link {  color: #2b542c;}.alert-info {  color: #31708f;  background-color: #d9edf7;  border-color: #bce8f1;}.alert-info hr {  border-top-color: #a6e1ec;}.alert-info .alert-link {  color: #245269;}.alert-warning {  color: #8a6d3b;  background-color: #fcf8e3;  border-color: #faebcc;}.alert-warning hr {  border-top-color: #f7e1b5;}.alert-warning .alert-link {  color: #66512c;}.alert-danger {  color: #a94442;  background-color: #f2dede;  border-color: #ebccd1;}.alert-danger hr {  border-top-color: #e4b9c0;}.alert-danger .alert-link {  color: #843534;}@-webkit-keyframes progress-bar-stripes {  from {    background-position: 40px 0;  }  to {    background-position: 0 0;  }}@-o-keyframes progress-bar-stripes {  from {    background-position: 40px 0;  }  to {    background-position: 0 0;  }}@keyframes progress-bar-stripes {  from {    background-position: 40px 0;  }  to {    background-position: 0 0;  }}.progress {  height: 20px;  margin-bottom: 20px;  overflow: hidden;  background-color: #f5f5f5;  border-radius: 4px;  -webkit-box-shadow: inset 0 1px 2px rgba(0, 0, 0, .1);          box-shadow: inset 0 1px 2px rgba(0, 0, 0, .1);}.progress-bar {  float: left;  width: 0;  height: 100%;  font-size: 12px;  line-height: 20px;  color: #fff;  text-align: center;  background-color: #337ab7;  -webkit-box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .15);          box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .15);  -webkit-transition: width .6s ease;       -o-transition: width .6s ease;          transition: width .6s ease;}.progress-striped .progress-bar,.progress-bar-striped {  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  -webkit-background-size: 40px 40px;          background-size: 40px 40px;}.progress.active .progress-bar,.progress-bar.active {  -webkit-animation: progress-bar-stripes 2s linear infinite;       -o-animation: progress-bar-stripes 2s linear infinite;          animation: progress-bar-stripes 2s linear infinite;}.progress-bar-success {  background-color: #5cb85c;}.progress-striped .progress-bar-success {  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);}.progress-bar-info {  background-color: #5bc0de;}.progress-striped .progress-bar-info {  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);}.progress-bar-warning {  background-color: #f0ad4e;}.progress-striped .progress-bar-warning {  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);}.progress-bar-danger {  background-color: #d9534f;}.progress-striped .progress-bar-danger {  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);}.media {  margin-top: 15px;}.media:first-child {  margin-top: 0;}.media,.media-body {  overflow: hidden;  zoom: 1;}.media-body {  width: 10000px;}.media-object {  display: block;}.media-object.img-thumbnail {  max-width: none;}.media-right,.media > .pull-right {  padding-left: 10px;}.media-left,.media > .pull-left {  padding-right: 10px;}.media-left,.media-right,.media-body {  display: table-cell;  vertical-align: top;}.media-middle {  vertical-align: middle;}.media-bottom {  vertical-align: bottom;}.media-heading {  margin-top: 0;  margin-bottom: 5px;}.media-list {  padding-left: 0;  list-style: none;}.list-group {  padding-left: 0;  margin-bottom: 20px;}.list-group-item {  position: relative;  display: block;  padding: 10px 15px;  margin-bottom: -1px;  background-color: #fff;  border: 1px solid #ddd;}.list-group-item:first-child {  border-top-left-radius: 4px;  border-top-right-radius: 4px;}.list-group-item:last-child {  margin-bottom: 0;  border-bottom-right-radius: 4px;  border-bottom-left-radius: 4px;}a.list-group-item,button.list-group-item {  color: #555;}a.list-group-item .list-group-item-heading,button.list-group-item .list-group-item-heading {  color: #333;}a.list-group-item:hover,button.list-group-item:hover,a.list-group-item:focus,button.list-group-item:focus {  color: #555;  text-decoration: none;  background-color: #f5f5f5;}button.list-group-item {  width: 100%;  text-align: left;}.list-group-item.disabled,.list-group-item.disabled:hover,.list-group-item.disabled:focus {  color: #777;  cursor: not-allowed;  background-color: #eee;}.list-group-item.disabled .list-group-item-heading,.list-group-item.disabled:hover .list-group-item-heading,.list-group-item.disabled:focus .list-group-item-heading {  color: inherit;}.list-group-item.disabled .list-group-item-text,.list-group-item.disabled:hover .list-group-item-text,.list-group-item.disabled:focus .list-group-item-text {  color: #777;}.list-group-item.active,.list-group-item.active:hover,.list-group-item.active:focus {  z-index: 2;  color: #fff;  background-color: #337ab7;  border-color: #337ab7;}.list-group-item.active .list-group-item-heading,.list-group-item.active:hover .list-group-item-heading,.list-group-item.active:focus .list-group-item-heading,.list-group-item.active .list-group-item-heading > small,.list-group-item.active:hover .list-group-item-heading > small,.list-group-item.active:focus .list-group-item-heading > small,.list-group-item.active .list-group-item-heading > .small,.list-group-item.active:hover .list-group-item-heading > .small,.list-group-item.active:focus .list-group-item-heading > .small {  color: inherit;}.list-group-item.active .list-group-item-text,.list-group-item.active:hover .list-group-item-text,.list-group-item.active:focus .list-group-item-text {  color: #c7ddef;}.list-group-item-success {  color: #3c763d;  background-color: #dff0d8;}a.list-group-item-success,button.list-group-item-success {  color: #3c763d;}a.list-group-item-success .list-group-item-heading,button.list-group-item-success .list-group-item-heading {  color: inherit;}a.list-group-item-success:hover,button.list-group-item-success:hover,a.list-group-item-success:focus,button.list-group-item-success:focus {  color: #3c763d;  background-color: #d0e9c6;}a.list-group-item-success.active,button.list-group-item-success.active,a.list-group-item-success.active:hover,button.list-group-item-success.active:hover,a.list-group-item-success.active:focus,button.list-group-item-success.active:focus {  color: #fff;  background-color: #3c763d;  border-color: #3c763d;}.list-group-item-info {  color: #31708f;  background-color: #d9edf7;}a.list-group-item-info,button.list-group-item-info {  color: #31708f;}a.list-group-item-info .list-group-item-heading,button.list-group-item-info .list-group-item-heading {  color: inherit;}a.list-group-item-info:hover,button.list-group-item-info:hover,a.list-group-item-info:focus,button.list-group-item-info:focus {  color: #31708f;  background-color: #c4e3f3;}a.list-group-item-info.active,button.list-group-item-info.active,a.list-group-item-info.active:hover,button.list-group-item-info.active:hover,a.list-group-item-info.active:focus,button.list-group-item-info.active:focus {  color: #fff;  background-color: #31708f;  border-color: #31708f;}.list-group-item-warning {  color: #8a6d3b;  background-color: #fcf8e3;}a.list-group-item-warning,button.list-group-item-warning {  color: #8a6d3b;}a.list-group-item-warning .list-group-item-heading,button.list-group-item-warning .list-group-item-heading {  color: inherit;}a.list-group-item-warning:hover,button.list-group-item-warning:hover,a.list-group-item-warning:focus,button.list-group-item-warning:focus {  color: #8a6d3b;  background-color: #faf2cc;}a.list-group-item-warning.active,button.list-group-item-warning.active,a.list-group-item-warning.active:hover,button.list-group-item-warning.active:hover,a.list-group-item-warning.active:focus,button.list-group-item-warning.active:focus {  color: #fff;  background-color: #8a6d3b;  border-color: #8a6d3b;}.list-group-item-danger {  color: #a94442;  background-color: #f2dede;}a.list-group-item-danger,button.list-group-item-danger {  color: #a94442;}a.list-group-item-danger .list-group-item-heading,button.list-group-item-danger .list-group-item-heading {  color: inherit;}a.list-group-item-danger:hover,button.list-group-item-danger:hover,a.list-group-item-danger:focus,button.list-group-item-danger:focus {  color: #a94442;  background-color: #ebcccc;}a.list-group-item-danger.active,button.list-group-item-danger.active,a.list-group-item-danger.active:hover,button.list-group-item-danger.active:hover,a.list-group-item-danger.active:focus,button.list-group-item-danger.active:focus {  color: #fff;  background-color: #a94442;  border-color: #a94442;}.list-group-item-heading {  margin-top: 0;  margin-bottom: 5px;}.list-group-item-text {  margin-bottom: 0;  line-height: 1.3;}.panel {  margin-bottom: 20px;  background-color: #fff;  border: 1px solid transparent;  border-radius: 4px;  -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, .05);          box-shadow: 0 1px 1px rgba(0, 0, 0, .05);}.panel-body {  padding: 15px;}.panel-heading {  padding: 10px 15px;  border-bottom: 1px solid transparent;  border-top-left-radius: 3px;  border-top-right-radius: 3px;}.panel-heading > .dropdown .dropdown-toggle {  color: inherit;}.panel-title {  margin-top: 0;  margin-bottom: 0;  font-size: 16px;  color: inherit;}.panel-title > a,.panel-title > small,.panel-title > .small,.panel-title > small > a,.panel-title > .small > a {  color: inherit;}.panel-footer {  padding: 10px 15px;  background-color: #f5f5f5;  border-top: 1px solid #ddd;  border-bottom-right-radius: 3px;  border-bottom-left-radius: 3px;}.panel > .list-group,.panel > .panel-collapse > .list-group {  margin-bottom: 0;}.panel > .list-group .list-group-item,.panel > .panel-collapse > .list-group .list-group-item {  border-width: 1px 0;  border-radius: 0;}.panel > .list-group:first-child .list-group-item:first-child,.panel > .panel-collapse > .list-group:first-child .list-group-item:first-child {  border-top: 0;  border-top-left-radius: 3px;  border-top-right-radius: 3px;}.panel > .list-group:last-child .list-group-item:last-child,.panel > .panel-collapse > .list-group:last-child .list-group-item:last-child {  border-bottom: 0;  border-bottom-right-radius: 3px;  border-bottom-left-radius: 3px;}.panel > .panel-heading + .panel-collapse > .list-group .list-group-item:first-child {  border-top-left-radius: 0;  border-top-right-radius: 0;}.panel-heading + .list-group .list-group-item:first-child {  border-top-width: 0;}.list-group + .panel-footer {  border-top-width: 0;}.panel > .table,.panel > .table-responsive > .table,.panel > .panel-collapse > .table {  margin-bottom: 0;}.panel > .table caption,.panel > .table-responsive > .table caption,.panel > .panel-collapse > .table caption {  padding-right: 15px;  padding-left: 15px;}.panel > .table:first-child,.panel > .table-responsive:first-child > .table:first-child {  border-top-left-radius: 3px;  border-top-right-radius: 3px;}.panel > .table:first-child > thead:first-child > tr:first-child,.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child,.panel > .table:first-child > tbody:first-child > tr:first-child,.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child {  border-top-left-radius: 3px;  border-top-right-radius: 3px;}.panel > .table:first-child > thead:first-child > tr:first-child td:first-child,.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:first-child,.panel > .table:first-child > tbody:first-child > tr:first-child td:first-child,.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:first-child,.panel > .table:first-child > thead:first-child > tr:first-child th:first-child,.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:first-child,.panel > .table:first-child > tbody:first-child > tr:first-child th:first-child,.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:first-child {  border-top-left-radius: 3px;}.panel > .table:first-child > thead:first-child > tr:first-child td:last-child,.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:last-child,.panel > .table:first-child > tbody:first-child > tr:first-child td:last-child,.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:last-child,.panel > .table:first-child > thead:first-child > tr:first-child th:last-child,.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:last-child,.panel > .table:first-child > tbody:first-child > tr:first-child th:last-child,.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:last-child {  border-top-right-radius: 3px;}.panel > .table:last-child,.panel > .table-responsive:last-child > .table:last-child {  border-bottom-right-radius: 3px;  border-bottom-left-radius: 3px;}.panel > .table:last-child > tbody:last-child > tr:last-child,.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child,.panel > .table:last-child > tfoot:last-child > tr:last-child,.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child {  border-bottom-right-radius: 3px;  border-bottom-left-radius: 3px;}.panel > .table:last-child > tbody:last-child > tr:last-child td:first-child,.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:first-child,.panel > .table:last-child > tfoot:last-child > tr:last-child td:first-child,.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:first-child,.panel > .table:last-child > tbody:last-child > tr:last-child th:first-child,.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:first-child,.panel > .table:last-child > tfoot:last-child > tr:last-child th:first-child,.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:first-child {  border-bottom-left-radius: 3px;}.panel > .table:last-child > tbody:last-child > tr:last-child td:last-child,.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:last-child,.panel > .table:last-child > tfoot:last-child > tr:last-child td:last-child,.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:last-child,.panel > .table:last-child > tbody:last-child > tr:last-child th:last-child,.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:last-child,.panel > .table:last-child > tfoot:last-child > tr:last-child th:last-child,.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:last-child {  border-bottom-right-radius: 3px;}.panel > .panel-body + .table,.panel > .panel-body + .table-responsive,.panel > .table + .panel-body,.panel > .table-responsive + .panel-body {  border-top: 1px solid #ddd;}.panel > .table > tbody:first-child > tr:first-child th,.panel > .table > tbody:first-child > tr:first-child td {  border-top: 0;}.panel > .table-bordered,.panel > .table-responsive > .table-bordered {  border: 0;}.panel > .table-bordered > thead > tr > th:first-child,.panel > .table-responsive > .table-bordered > thead > tr > th:first-child,.panel > .table-bordered > tbody > tr > th:first-child,.panel > .table-responsive > .table-bordered > tbody > tr > th:first-child,.panel > .table-bordered > tfoot > tr > th:first-child,.panel > .table-responsive > .table-bordered > tfoot > tr > th:first-child,.panel > .table-bordered > thead > tr > td:first-child,.panel > .table-responsive > .table-bordered > thead > tr > td:first-child,.panel > .table-bordered > tbody > tr > td:first-child,.panel > .table-responsive > .table-bordered > tbody > tr > td:first-child,.panel > .table-bordered > tfoot > tr > td:first-child,.panel > .table-responsive > .table-bordered > tfoot > tr > td:first-child {  border-left: 0;}.panel > .table-bordered > thead > tr > th:last-child,.panel > .table-responsive > .table-bordered > thead > tr > th:last-child,.panel > .table-bordered > tbody > tr > th:last-child,.panel > .table-responsive > .table-bordered > tbody > tr > th:last-child,.panel > .table-bordered > tfoot > tr > th:last-child,.panel > .table-responsive > .table-bordered > tfoot > tr > th:last-child,.panel > .table-bordered > thead > tr > td:last-child,.panel > .table-responsive > .table-bordered > thead > tr > td:last-child,.panel > .table-bordered > tbody > tr > td:last-child,.panel > .table-responsive > .table-bordered > tbody > tr > td:last-child,.panel > .table-bordered > tfoot > tr > td:last-child,.panel > .table-responsive > .table-bordered > tfoot > tr > td:last-child {  border-right: 0;}.panel > .table-bordered > thead > tr:first-child > td,.panel > .table-responsive > .table-bordered > thead > tr:first-child > td,.panel > .table-bordered > tbody > tr:first-child > td,.panel > .table-responsive > .table-bordered > tbody > tr:first-child > td,.panel > .table-bordered > thead > tr:first-child > th,.panel > .table-responsive > .table-bordered > thead > tr:first-child > th,.panel > .table-bordered > tbody > tr:first-child > th,.panel > .table-responsive > .table-bordered > tbody > tr:first-child > th {  border-bottom: 0;}.panel > .table-bordered > tbody > tr:last-child > td,.panel > .table-responsive > .table-bordered > tbody > tr:last-child > td,.panel > .table-bordered > tfoot > tr:last-child > td,.panel > .table-responsive > .table-bordered > tfoot > tr:last-child > td,.panel > .table-bordered > tbody > tr:last-child > th,.panel > .table-responsive > .table-bordered > tbody > tr:last-child > th,.panel > .table-bordered > tfoot > tr:last-child > th,.panel > .table-responsive > .table-bordered > tfoot > tr:last-child > th {  border-bottom: 0;}.panel > .table-responsive {  margin-bottom: 0;  border: 0;}.panel-group {  margin-bottom: 20px;}.panel-group .panel {  margin-bottom: 0;  border-radius: 4px;}.panel-group .panel + .panel {  margin-top: 5px;}.panel-group .panel-heading {  border-bottom: 0;}.panel-group .panel-heading + .panel-collapse > .panel-body,.panel-group .panel-heading + .panel-collapse > .list-group {  border-top: 1px solid #ddd;}.panel-group .panel-footer {  border-top: 0;}.panel-group .panel-footer + .panel-collapse .panel-body {  border-bottom: 1px solid #ddd;}.panel-default {  border-color: #ddd;}.panel-default > .panel-heading {  color: #333;  background-color: #f5f5f5;  border-color: #ddd;}.panel-default > .panel-heading + .panel-collapse > .panel-body {  border-top-color: #ddd;}.panel-default > .panel-heading .badge {  color: #f5f5f5;  background-color: #333;}.panel-default > .panel-footer + .panel-collapse > .panel-body {  border-bottom-color: #ddd;}.panel-primary {  border-color: #337ab7;}.panel-primary > .panel-heading {  color: #fff;  background-color: #337ab7;  border-color: #337ab7;}.panel-primary > .panel-heading + .panel-collapse > .panel-body {  border-top-color: #337ab7;}.panel-primary > .panel-heading .badge {  color: #337ab7;  background-color: #fff;}.panel-primary > .panel-footer + .panel-collapse > .panel-body {  border-bottom-color: #337ab7;}.panel-success {  border-color: #d6e9c6;}.panel-success > .panel-heading {  color: #3c763d;  background-color: #dff0d8;  border-color: #d6e9c6;}.panel-success > .panel-heading + .panel-collapse > .panel-body {  border-top-color: #d6e9c6;}.panel-success > .panel-heading .badge {  color: #dff0d8;  background-color: #3c763d;}.panel-success > .panel-footer + .panel-collapse > .panel-body {  border-bottom-color: #d6e9c6;}.panel-info {  border-color: #bce8f1;}.panel-info > .panel-heading {  color: #31708f;  background-color: #d9edf7;  border-color: #bce8f1;}.panel-info > .panel-heading + .panel-collapse > .panel-body {  border-top-color: #bce8f1;}.panel-info > .panel-heading .badge {  color: #d9edf7;  background-color: #31708f;}.panel-info > .panel-footer + .panel-collapse > .panel-body {  border-bottom-color: #bce8f1;}.panel-warning {  border-color: #faebcc;}.panel-warning > .panel-heading {  color: #8a6d3b;  background-color: #fcf8e3;  border-color: #faebcc;}.panel-warning > .panel-heading + .panel-collapse > .panel-body {  border-top-color: #faebcc;}.panel-warning > .panel-heading .badge {  color: #fcf8e3;  background-color: #8a6d3b;}.panel-warning > .panel-footer + .panel-collapse > .panel-body {  border-bottom-color: #faebcc;}.panel-danger {  border-color: #ebccd1;}.panel-danger > .panel-heading {  color: #a94442;  background-color: #f2dede;  border-color: #ebccd1;}.panel-danger > .panel-heading + .panel-collapse > .panel-body {  border-top-color: #ebccd1;}.panel-danger > .panel-heading .badge {  color: #f2dede;  background-color: #a94442;}.panel-danger > .panel-footer + .panel-collapse > .panel-body {  border-bottom-color: #ebccd1;}.embed-responsive {  position: relative;  display: block;  height: 0;  padding: 0;  overflow: hidden;}.embed-responsive .embed-responsive-item,.embed-responsive iframe,.embed-responsive embed,.embed-responsive object,.embed-responsive video {  position: absolute;  top: 0;  bottom: 0;  left: 0;  width: 100%;  height: 100%;  border: 0;}.embed-responsive-16by9 {  padding-bottom: 56.25%;}.embed-responsive-4by3 {  padding-bottom: 75%;}.well {  min-height: 20px;  padding: 19px;  margin-bottom: 20px;  background-color: #f5f5f5;  border: 1px solid #e3e3e3;  border-radius: 4px;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .05);          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .05);}.well blockquote {  border-color: #ddd;  border-color: rgba(0, 0, 0, .15);}.well-lg {  padding: 24px;  border-radius: 6px;}.well-sm {  padding: 9px;  border-radius: 3px;}.close {  float: right;  font-size: 21px;  font-weight: bold;  line-height: 1;  color: #000;  text-shadow: 0 1px 0 #fff;  filter: alpha(opacity=20);  opacity: .2;}.close:hover,.close:focus {  color: #000;  text-decoration: none;  cursor: pointer;  filter: alpha(opacity=50);  opacity: .5;}button.close {  -webkit-appearance: none;  padding: 0;  cursor: pointer;  background: transparent;  border: 0;}.modal-open {  overflow: hidden;}.modal {  position: fixed;  top: 0;  right: 0;  bottom: 0;  left: 0;  z-index: 1050;  display: none;  overflow: hidden;  -webkit-overflow-scrolling: touch;  outline: 0;}.modal.fade .modal-dialog {  -webkit-transition: -webkit-transform .3s ease-out;       -o-transition:      -o-transform .3s ease-out;          transition:         transform .3s ease-out;  -webkit-transform: translate(0, -25%);      -ms-transform: translate(0, -25%);       -o-transform: translate(0, -25%);          transform: translate(0, -25%);}.modal.in .modal-dialog {  -webkit-transform: translate(0, 0);      -ms-transform: translate(0, 0);       -o-transform: translate(0, 0);          transform: translate(0, 0);}.modal-open .modal {  overflow-x: hidden;  overflow-y: auto;}.modal-dialog {  position: relative;  width: auto;  margin: 10px;}.modal-content {  position: relative;  background-color: #fff;  -webkit-background-clip: padding-box;          background-clip: padding-box;  border: 1px solid #999;  border: 1px solid rgba(0, 0, 0, .2);  border-radius: 6px;  outline: 0;  -webkit-box-shadow: 0 3px 9px rgba(0, 0, 0, .5);          box-shadow: 0 3px 9px rgba(0, 0, 0, .5);}.modal-backdrop {  position: fixed;  top: 0;  right: 0;  bottom: 0;  left: 0;  z-index: 1040;  background-color: #000;}.modal-backdrop.fade {  filter: alpha(opacity=0);  opacity: 0;}.modal-backdrop.in {  filter: alpha(opacity=50);  opacity: .5;}.modal-header {  min-height: 16.42857143px;  padding: 15px;  border-bottom: 1px solid #e5e5e5;}.modal-header .close {  margin-top: -2px;}.modal-title {  margin: 0;  line-height: 1.42857143;}.modal-body {  position: relative;  padding: 15px;}.modal-footer {  padding: 15px;  text-align: right;  border-top: 1px solid #e5e5e5;}.modal-footer .btn + .btn {  margin-bottom: 0;  margin-left: 5px;}.modal-footer .btn-group .btn + .btn {  margin-left: -1px;}.modal-footer .btn-block + .btn-block {  margin-left: 0;}.modal-scrollbar-measure {  position: absolute;  top: -9999px;  width: 50px;  height: 50px;  overflow: scroll;}@media (min-width: 768px) {  .modal-dialog {    width: 600px;    margin: 30px auto;  }  .modal-content {    -webkit-box-shadow: 0 5px 15px rgba(0, 0, 0, .5);            box-shadow: 0 5px 15px rgba(0, 0, 0, .5);  }  .modal-sm {    width: 300px;  }}@media (min-width: 992px) {  .modal-lg {    width: 900px;  }}.tooltip {  position: absolute;  z-index: 1070;  display: block;  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;  font-size: 12px;  font-style: normal;  font-weight: normal;  line-height: 1.42857143;  text-align: left;  text-align: start;  text-decoration: none;  text-shadow: none;  text-transform: none;  letter-spacing: normal;  word-break: normal;  word-spacing: normal;  word-wrap: normal;  white-space: normal;  filter: alpha(opacity=0);  opacity: 0;  line-break: auto;}.tooltip.in {  filter: alpha(opacity=90);  opacity: .9;}.tooltip.top {  padding: 5px 0;  margin-top: -3px;}.tooltip.right {  padding: 0 5px;  margin-left: 3px;}.tooltip.bottom {  padding: 5px 0;  margin-top: 3px;}.tooltip.left {  padding: 0 5px;  margin-left: -3px;}.tooltip-inner {  max-width: 200px;  padding: 3px 8px;  color: #fff;  text-align: center;  background-color: #000;  border-radius: 4px;}.tooltip-arrow {  position: absolute;  width: 0;  height: 0;  border-color: transparent;  border-style: solid;}.tooltip.top .tooltip-arrow {  bottom: 0;  left: 50%;  margin-left: -5px;  border-width: 5px 5px 0;  border-top-color: #000;}.tooltip.top-left .tooltip-arrow {  right: 5px;  bottom: 0;  margin-bottom: -5px;  border-width: 5px 5px 0;  border-top-color: #000;}.tooltip.top-right .tooltip-arrow {  bottom: 0;  left: 5px;  margin-bottom: -5px;  border-width: 5px 5px 0;  border-top-color: #000;}.tooltip.right .tooltip-arrow {  top: 50%;  left: 0;  margin-top: -5px;  border-width: 5px 5px 5px 0;  border-right-color: #000;}.tooltip.left .tooltip-arrow {  top: 50%;  right: 0;  margin-top: -5px;  border-width: 5px 0 5px 5px;  border-left-color: #000;}.tooltip.bottom .tooltip-arrow {  top: 0;  left: 50%;  margin-left: -5px;  border-width: 0 5px 5px;  border-bottom-color: #000;}.tooltip.bottom-left .tooltip-arrow {  top: 0;  right: 5px;  margin-top: -5px;  border-width: 0 5px 5px;  border-bottom-color: #000;}.tooltip.bottom-right .tooltip-arrow {  top: 0;  left: 5px;  margin-top: -5px;  border-width: 0 5px 5px;  border-bottom-color: #000;}.popover {  position: absolute;  top: 0;  left: 0;  z-index: 1060;  display: none;  max-width: 276px;  padding: 1px;  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;  font-size: 14px;  font-style: normal;  font-weight: normal;  line-height: 1.42857143;  text-align: left;  text-align: start;  text-decoration: none;  text-shadow: none;  text-transform: none;  letter-spacing: normal;  word-break: normal;  word-spacing: normal;  word-wrap: normal;  white-space: normal;  background-color: #fff;  -webkit-background-clip: padding-box;          background-clip: padding-box;  border: 1px solid #ccc;  border: 1px solid rgba(0, 0, 0, .2);  border-radius: 6px;  -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, .2);          box-shadow: 0 5px 10px rgba(0, 0, 0, .2);  line-break: auto;}.popover.top {  margin-top: -10px;}.popover.right {  margin-left: 10px;}.popover.bottom {  margin-top: 10px;}.popover.left {  margin-left: -10px;}.popover-title {  padding: 8px 14px;  margin: 0;  font-size: 14px;  background-color: #f7f7f7;  border-bottom: 1px solid #ebebeb;  border-radius: 5px 5px 0 0;}.popover-content {  padding: 9px 14px;}.popover > .arrow,.popover > .arrow:after {  position: absolute;  display: block;  width: 0;  height: 0;  border-color: transparent;  border-style: solid;}.popover > .arrow {  border-width: 11px;}.popover > .arrow:after {  content: "";  border-width: 10px;}.popover.top > .arrow {  bottom: -11px;  left: 50%;  margin-left: -11px;  border-top-color: #999;  border-top-color: rgba(0, 0, 0, .25);  border-bottom-width: 0;}.popover.top > .arrow:after {  bottom: 1px;  margin-left: -10px;  content: " ";  border-top-color: #fff;  border-bottom-width: 0;}.popover.right > .arrow {  top: 50%;  left: -11px;  margin-top: -11px;  border-right-color: #999;  border-right-color: rgba(0, 0, 0, .25);  border-left-width: 0;}.popover.right > .arrow:after {  bottom: -10px;  left: 1px;  content: " ";  border-right-color: #fff;  border-left-width: 0;}.popover.bottom > .arrow {  top: -11px;  left: 50%;  margin-left: -11px;  border-top-width: 0;  border-bottom-color: #999;  border-bottom-color: rgba(0, 0, 0, .25);}.popover.bottom > .arrow:after {  top: 1px;  margin-left: -10px;  content: " ";  border-top-width: 0;  border-bottom-color: #fff;}.popover.left > .arrow {  top: 50%;  right: -11px;  margin-top: -11px;  border-right-width: 0;  border-left-color: #999;  border-left-color: rgba(0, 0, 0, .25);}.popover.left > .arrow:after {  right: 1px;  bottom: -10px;  content: " ";  border-right-width: 0;  border-left-color: #fff;}.carousel {  position: relative;}.carousel-inner {  position: relative;  width: 100%;  overflow: hidden;}.carousel-inner > .item {  position: relative;  display: none;  -webkit-transition: .6s ease-in-out left;       -o-transition: .6s ease-in-out left;          transition: .6s ease-in-out left;}.carousel-inner > .item > img,.carousel-inner > .item > a > img {  line-height: 1;}@media all and (transform-3d), (-webkit-transform-3d) {  .carousel-inner > .item {    -webkit-transition: -webkit-transform .6s ease-in-out;         -o-transition:      -o-transform .6s ease-in-out;            transition:         transform .6s ease-in-out;    -webkit-backface-visibility: hidden;            backface-visibility: hidden;    -webkit-perspective: 1000px;            perspective: 1000px;  }  .carousel-inner > .item.next,  .carousel-inner > .item.active.right {    left: 0;    -webkit-transform: translate3d(100%, 0, 0);            transform: translate3d(100%, 0, 0);  }  .carousel-inner > .item.prev,  .carousel-inner > .item.active.left {    left: 0;    -webkit-transform: translate3d(-100%, 0, 0);            transform: translate3d(-100%, 0, 0);  }  .carousel-inner > .item.next.left,  .carousel-inner > .item.prev.right,  .carousel-inner > .item.active {    left: 0;    -webkit-transform: translate3d(0, 0, 0);            transform: translate3d(0, 0, 0);  }}.carousel-inner > .active,.carousel-inner > .next,.carousel-inner > .prev {  display: block;}.carousel-inner > .active {  left: 0;}.carousel-inner > .next,.carousel-inner > .prev {  position: absolute;  top: 0;  width: 100%;}.carousel-inner > .next {  left: 100%;}.carousel-inner > .prev {  left: -100%;}.carousel-inner > .next.left,.carousel-inner > .prev.right {  left: 0;}.carousel-inner > .active.left {  left: -100%;}.carousel-inner > .active.right {  left: 100%;}.carousel-control {  position: absolute;  top: 0;  bottom: 0;  left: 0;  width: 15%;  font-size: 20px;  color: #fff;  text-align: center;  text-shadow: 0 1px 2px rgba(0, 0, 0, .6);  filter: alpha(opacity=50);  opacity: .5;}.carousel-control.left {  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);  background-image:      -o-linear-gradient(left, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);  background-image: -webkit-gradient(linear, left top, right top, from(rgba(0, 0, 0, .5)), to(rgba(0, 0, 0, .0001)));  background-image:         linear-gradient(to right, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#00000000', GradientType=1);  background-repeat: repeat-x;}.carousel-control.right {  right: 0;  left: auto;  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);  background-image:      -o-linear-gradient(left, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);  background-image: -webkit-gradient(linear, left top, right top, from(rgba(0, 0, 0, .0001)), to(rgba(0, 0, 0, .5)));  background-image:         linear-gradient(to right, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#80000000', GradientType=1);  background-repeat: repeat-x;}.carousel-control:hover,.carousel-control:focus {  color: #fff;  text-decoration: none;  filter: alpha(opacity=90);  outline: 0;  opacity: .9;}.carousel-control .icon-prev,.carousel-control .icon-next,.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right {  position: absolute;  top: 50%;  z-index: 5;  display: inline-block;  margin-top: -10px;}.carousel-control .icon-prev,.carousel-control .glyphicon-chevron-left {  left: 50%;  margin-left: -10px;}.carousel-control .icon-next,.carousel-control .glyphicon-chevron-right {  right: 50%;  margin-right: -10px;}.carousel-control .icon-prev,.carousel-control .icon-next {  width: 20px;  height: 20px;  font-family: serif;  line-height: 1;}.carousel-control .icon-prev:before {  content: '\2039';}.carousel-control .icon-next:before {  content: '\203a';}.carousel-indicators {  position: absolute;  bottom: 10px;  left: 50%;  z-index: 15;  width: 60%;  padding-left: 0;  margin-left: -30%;  text-align: center;  list-style: none;}.carousel-indicators li {  display: inline-block;  width: 10px;  height: 10px;  margin: 1px;  text-indent: -999px;  cursor: pointer;  background-color: #000 \9;  background-color: rgba(0, 0, 0, 0);  border: 1px solid #fff;  border-radius: 10px;}.carousel-indicators .active {  width: 12px;  height: 12px;  margin: 0;  background-color: #fff;}.carousel-caption {  position: absolute;  right: 15%;  bottom: 20px;  left: 15%;  z-index: 10;  padding-top: 20px;  padding-bottom: 20px;  color: #fff;  text-align: center;  text-shadow: 0 1px 2px rgba(0, 0, 0, .6);}.carousel-caption .btn {  text-shadow: none;}@media screen and (min-width: 768px) {  .carousel-control .glyphicon-chevron-left,  .carousel-control .glyphicon-chevron-right,  .carousel-control .icon-prev,  .carousel-control .icon-next {    width: 30px;    height: 30px;    margin-top: -15px;    font-size: 30px;  }  .carousel-control .glyphicon-chevron-left,  .carousel-control .icon-prev {    margin-left: -15px;  }  .carousel-control .glyphicon-chevron-right,  .carousel-control .icon-next {    margin-right: -15px;  }  .carousel-caption {    right: 20%;    left: 20%;    padding-bottom: 30px;  }  .carousel-indicators {    bottom: 20px;  }}.clearfix:before,.clearfix:after,.dl-horizontal dd:before,.dl-horizontal dd:after,.container:before,.container:after,.container-fluid:before,.container-fluid:after,.row:before,.row:after,.form-horizontal .form-group:before,.form-horizontal .form-group:after,.btn-toolbar:before,.btn-toolbar:after,.btn-group-vertical > .btn-group:before,.btn-group-vertical > .btn-group:after,.nav:before,.nav:after,.navbar:before,.navbar:after,.navbar-header:before,.navbar-header:after,.navbar-collapse:before,.navbar-collapse:after,.pager:before,.pager:after,.panel-body:before,.panel-body:after,.modal-footer:before,.modal-footer:after {  display: table;  content: " ";}.clearfix:after,.dl-horizontal dd:after,.container:after,.container-fluid:after,.row:after,.form-horizontal .form-group:after,.btn-toolbar:after,.btn-group-vertical > .btn-group:after,.nav:after,.navbar:after,.navbar-header:after,.navbar-collapse:after,.pager:after,.panel-body:after,.modal-footer:after {  clear: both;}.center-block {  display: block;  margin-right: auto;  margin-left: auto;}.pull-right {  float: right !important;}.pull-left {  float: left !important;}.hide {  display: none !important;}.show {  display: block !important;}.invisible {  visibility: hidden;}.text-hide {  font: 0/0 a;  color: transparent;  text-shadow: none;  background-color: transparent;  border: 0;}.hidden {  display: none !important;}.affix {  position: fixed;}@-ms-viewport {  width: device-width;}.visible-xs,.visible-sm,.visible-md,.visible-lg {  display: none !important;}.visible-xs-block,.visible-xs-inline,.visible-xs-inline-block,.visible-sm-block,.visible-sm-inline,.visible-sm-inline-block,.visible-md-block,.visible-md-inline,.visible-md-inline-block,.visible-lg-block,.visible-lg-inline,.visible-lg-inline-block {  display: none !important;}@media (max-width: 767px) {  .visible-xs {    display: block !important;  }  table.visible-xs {    display: table !important;  }  tr.visible-xs {    display: table-row !important;  }  th.visible-xs,  td.visible-xs {    display: table-cell !important;  }}@media (max-width: 767px) {  .visible-xs-block {    display: block !important;  }}@media (max-width: 767px) {  .visible-xs-inline {    display: inline !important;  }}@media (max-width: 767px) {  .visible-xs-inline-block {    display: inline-block !important;  }}@media (min-width: 768px) and (max-width: 991px) {  .visible-sm {    display: block !important;  }  table.visible-sm {    display: table !important;  }  tr.visible-sm {    display: table-row !important;  }  th.visible-sm,  td.visible-sm {    display: table-cell !important;  }}@media (min-width: 768px) and (max-width: 991px) {  .visible-sm-block {    display: block !important;  }}@media (min-width: 768px) and (max-width: 991px) {  .visible-sm-inline {    display: inline !important;  }}@media (min-width: 768px) and (max-width: 991px) {  .visible-sm-inline-block {    display: inline-block !important;  }}@media (min-width: 992px) and (max-width: 1199px) {  .visible-md {    display: block !important;  }  table.visible-md {    display: table !important;  }  tr.visible-md {    display: table-row !important;  }  th.visible-md,  td.visible-md {    display: table-cell !important;  }}@media (min-width: 992px) and (max-width: 1199px) {  .visible-md-block {    display: block !important;  }}@media (min-width: 992px) and (max-width: 1199px) {  .visible-md-inline {    display: inline !important;  }}@media (min-width: 992px) and (max-width: 1199px) {  .visible-md-inline-block {    display: inline-block !important;  }}@media (min-width: 1200px) {  .visible-lg {    display: block !important;  }  table.visible-lg {    display: table !important;  }  tr.visible-lg {    display: table-row !important;  }  th.visible-lg,  td.visible-lg {    display: table-cell !important;  }}@media (min-width: 1200px) {  .visible-lg-block {    display: block !important;  }}@media (min-width: 1200px) {  .visible-lg-inline {    display: inline !important;  }}@media (min-width: 1200px) {  .visible-lg-inline-block {    display: inline-block !important;  }}@media (max-width: 767px) {  .hidden-xs {    display: none !important;  }}@media (min-width: 768px) and (max-width: 991px) {  .hidden-sm {    display: none !important;  }}@media (min-width: 992px) and (max-width: 1199px) {  .hidden-md {    display: none !important;  }}@media (min-width: 1200px) {  .hidden-lg {    display: none !important;  }}.visible-print {  display: none !important;}@media print {  .visible-print {    display: block !important;  }  table.visible-print {    display: table !important;  }  tr.visible-print {    display: table-row !important;  }  th.visible-print,  td.visible-print {    display: table-cell !important;  }}.visible-print-block {  display: none !important;}@media print {  .visible-print-block {    display: block !important;  }}.visible-print-inline {  display: none !important;}@media print {  .visible-print-inline {    display: inline !important;  }}.visible-print-inline-block {  display: none !important;}@media print {  .visible-print-inline-block {    display: inline-block !important;  }}@media print {  .hidden-print {    display: none !important;  }}/*# sourceMappingURL=bootstrap.css.map */]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/4_route_page2/home-message/"/>
      <url>/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/4_route_page2/home-message/</url>
      
        <content type="html"><![CDATA[<html lang="en"><head>  <meta charset="utf-8">  <title>Vue App</title>  <link rel="stylesheet" href="./css/bootstrap.css"></head><body><div id="root">  <div>    <div class="row">      <div class="col-xs-offset-2 col-xs-8">        <div class="page-header"><h2>Vue Router Demo</h2></div>      </div>    </div>    <div class="row">      <div class="col-xs-2 col-xs-offset-2">        <div class="list-group">          <a class="list-group-item" href="/about">About</a>          <a class="list-group-item active"href="/home" aria-current="page">Home</a>        </div>      </div>      <div class="col-xs-6">        <div class="panel">          <div class="panel-body">            <div>              <h2>Home组件内容</h2>              <div>                <ul class="nav nav-tabs">                  <li>                    <a class="list-group-item" href="./home-news.html">News</a>                  </li>                  <li>                    <a class="list-group-item active" href="./home-message.html">Message</a>                  </li>                </ul>                <div>                  <ul>                    <li>                      <a href="/message1">message001</a>&nbsp;&nbsp;                    </li>                    <li>                      <a href="/message2">message002</a>&nbsp;&nbsp;                    </li>                    <li>                      <a href="/message/3">message003</a>&nbsp;&nbsp;                    </li>                  </ul>                </div>              </div>            </div>          </div>        </div>      </div>    </div>  </div></div></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/4_route_page2/home-news/"/>
      <url>/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/4_route_page2/home-news/</url>
      
        <content type="html"><![CDATA[<html lang="en"><head>  <meta charset="utf-8">  <title>Vue App</title>  <link rel="stylesheet" href="./css/bootstrap.css"></head><body><div id="root">  <div>    <div class="row">      <div class="col-xs-offset-2 col-xs-8">        <div class="page-header"><h2>Vue Router Demo</h2></div>      </div>    </div>    <div class="row">      <div class="col-xs-2 col-xs-offset-2">        <div class="list-group">          <a class="list-group-item" href="/about">About</a>          <a class="list-group-item active"href="/home" aria-current="page">Home</a>        </div>      </div>      <div class="col-xs-6">        <div class="panel">          <div class="panel-body">            <div>              <h2>Home组件内容</h2>              <div>                <ul class="nav nav-tabs">                  <li>                    <a class="list-group-item active" href="./home-news.html">News</a>                  </li>                  <li>                    <a class="list-group-item " href="./home-message.html">Message</a>                  </li>                </ul>                <ul>                  <li>news001</li>                  <li>news002</li>                  <li>news003</li>                </ul>              </div>            </div>          </div>        </div>      </div>    </div>  </div></div></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/3_route_page1/home/"/>
      <url>/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/3_route_page1/home/</url>
      
        <content type="html"><![CDATA[<html lang="en"><head>  <meta charset="utf-8">  <title>Vue App</title>  <link rel="stylesheet" href="./css/bootstrap.css"></head><body>  <div>    <div class="row">      <div class="col-xs-offset-2 col-xs-8">        <div class="page-header"><h2>Vue Router Demo</h2></div>      </div>    </div>    <div class="row">      <div class="col-xs-2 col-xs-offset-2">        <div class="list-group">          <a class="list-group-item" href="./about.html">About</a>          <a class="list-group-item active" href="./home.html">Home</a>        </div>      </div>      <div class="col-xs-6">        <div class="panel">          <div class="panel-body">            <h2>我是Home的内容</h2>          </div>        </div>      </div>    </div>  </div></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/3_route_page1/about/"/>
      <url>/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/3_route_page1/about/</url>
      
        <content type="html"><![CDATA[<html lang="en"><head>  <meta charset="utf-8">  <title>Vue App</title>  <link rel="stylesheet" href="./css/bootstrap.css"></head><body>  <div>    <div class="row">      <div class="col-xs-offset-2 col-xs-8">        <div class="page-header"><h2>Vue Router Demo</h2></div>      </div>    </div>    <div class="row">      <div class="col-xs-2 col-xs-offset-2">        <div class="list-group">          <a class="list-group-item active" href="./about.html">About</a>          <a class="list-group-item" href="./home.html">Home</a>        </div>      </div>      <div class="col-xs-6">        <div class="panel">          <div class="panel-body">            <h2>我是About的内容</h2>          </div>        </div>      </div>    </div>  </div></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/3_route_page1/css/bootstrap/"/>
      <url>/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/3_route_page1/css/bootstrap/</url>
      
        <content type="html"><![CDATA[/*! * Bootstrap v3.3.5 (http://getbootstrap.com) * Copyright 2011-2015 Twitter, Inc. * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE) *//*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html {  font-family: sans-serif;  -webkit-text-size-adjust: 100%;      -ms-text-size-adjust: 100%;}body {  margin: 0;}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary {  display: block;}audio,canvas,progress,video {  display: inline-block;  vertical-align: baseline;}audio:not([controls]) {  display: none;  height: 0;}[hidden],template {  display: none;}a {  background-color: transparent;}a:active,a:hover {  outline: 0;}abbr[title] {  border-bottom: 1px dotted;}b,strong {  font-weight: bold;}dfn {  font-style: italic;}h1 {  margin: .67em 0;  font-size: 2em;}mark {  color: #000;  background: #ff0;}small {  font-size: 80%;}sub,sup {  position: relative;  font-size: 75%;  line-height: 0;  vertical-align: baseline;}sup {  top: -.5em;}sub {  bottom: -.25em;}img {  border: 0;}svg:not(:root) {  overflow: hidden;}figure {  margin: 1em 40px;}hr {  height: 0;  -webkit-box-sizing: content-box;     -moz-box-sizing: content-box;          box-sizing: content-box;}pre {  overflow: auto;}code,kbd,pre,samp {  font-family: monospace, monospace;  font-size: 1em;}button,input,optgroup,select,textarea {  margin: 0;  font: inherit;  color: inherit;}button {  overflow: visible;}button,select {  text-transform: none;}button,html input[type="button"],input[type="reset"],input[type="submit"] {  -webkit-appearance: button;  cursor: pointer;}button[disabled],html input[disabled] {  cursor: default;}button::-moz-focus-inner,input::-moz-focus-inner {  padding: 0;  border: 0;}input {  line-height: normal;}input[type="checkbox"],input[type="radio"] {  -webkit-box-sizing: border-box;     -moz-box-sizing: border-box;          box-sizing: border-box;  padding: 0;}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button {  height: auto;}input[type="search"] {  -webkit-box-sizing: content-box;     -moz-box-sizing: content-box;          box-sizing: content-box;  -webkit-appearance: textfield;}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration {  -webkit-appearance: none;}fieldset {  padding: .35em .625em .75em;  margin: 0 2px;  border: 1px solid #c0c0c0;}legend {  padding: 0;  border: 0;}textarea {  overflow: auto;}optgroup {  font-weight: bold;}table {  border-spacing: 0;  border-collapse: collapse;}td,th {  padding: 0;}/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */@media print {  *,  *:before,  *:after {    color: #000 !important;    text-shadow: none !important;    background: transparent !important;    -webkit-box-shadow: none !important;            box-shadow: none !important;  }  a,  a:visited {    text-decoration: underline;  }  a[href]:after {    content: " (" attr(href) ")";  }  abbr[title]:after {    content: " (" attr(title) ")";  }  a[href^="#"]:after,  a[href^="javascript:"]:after {    content: "";  }  pre,  blockquote {    border: 1px solid #999;    page-break-inside: avoid;  }  thead {    display: table-header-group;  }  tr,  img {    page-break-inside: avoid;  }  img {    max-width: 100% !important;  }  p,  h2,  h3 {    orphans: 3;    widows: 3;  }  h2,  h3 {    page-break-after: avoid;  }  .navbar {    display: none;  }  .btn > .caret,  .dropup > .btn > .caret {    border-top-color: #000 !important;  }  .label {    border: 1px solid #000;  }  .table {    border-collapse: collapse !important;  }  .table td,  .table th {    background-color: #fff !important;  }  .table-bordered th,  .table-bordered td {    border: 1px solid #ddd !important;  }}@font-face {  font-family: 'Glyphicons Halflings';  src: url('../fonts/glyphicons-halflings-regular.eot');  src: url('../fonts/glyphicons-halflings-regular.eot?#iefix') format('embedded-opentype'), url('../fonts/glyphicons-halflings-regular.woff2') format('woff2'), url('../fonts/glyphicons-halflings-regular.woff') format('woff'), url('../fonts/glyphicons-halflings-regular.ttf') format('truetype'), url('../fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular') format('svg');}.glyphicon {  position: relative;  top: 1px;  display: inline-block;  font-family: 'Glyphicons Halflings';  font-style: normal;  font-weight: normal;  line-height: 1;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.glyphicon-asterisk:before {  content: "\2a";}.glyphicon-plus:before {  content: "\2b";}.glyphicon-euro:before,.glyphicon-eur:before {  content: "\20ac";}.glyphicon-minus:before {  content: "\2212";}.glyphicon-cloud:before {  content: "\2601";}.glyphicon-envelope:before {  content: "\2709";}.glyphicon-pencil:before {  content: "\270f";}.glyphicon-glass:before {  content: "\e001";}.glyphicon-music:before {  content: "\e002";}.glyphicon-search:before {  content: "\e003";}.glyphicon-heart:before {  content: "\e005";}.glyphicon-star:before {  content: "\e006";}.glyphicon-star-empty:before {  content: "\e007";}.glyphicon-user:before {  content: "\e008";}.glyphicon-film:before {  content: "\e009";}.glyphicon-th-large:before {  content: "\e010";}.glyphicon-th:before {  content: "\e011";}.glyphicon-th-list:before {  content: "\e012";}.glyphicon-ok:before {  content: "\e013";}.glyphicon-remove:before {  content: "\e014";}.glyphicon-zoom-in:before {  content: "\e015";}.glyphicon-zoom-out:before {  content: "\e016";}.glyphicon-off:before {  content: "\e017";}.glyphicon-signal:before {  content: "\e018";}.glyphicon-cog:before {  content: "\e019";}.glyphicon-trash:before {  content: "\e020";}.glyphicon-home:before {  content: "\e021";}.glyphicon-file:before {  content: "\e022";}.glyphicon-time:before {  content: "\e023";}.glyphicon-road:before {  content: "\e024";}.glyphicon-download-alt:before {  content: "\e025";}.glyphicon-download:before {  content: "\e026";}.glyphicon-upload:before {  content: "\e027";}.glyphicon-inbox:before {  content: "\e028";}.glyphicon-play-circle:before {  content: "\e029";}.glyphicon-repeat:before {  content: "\e030";}.glyphicon-refresh:before {  content: "\e031";}.glyphicon-list-alt:before {  content: "\e032";}.glyphicon-lock:before {  content: "\e033";}.glyphicon-flag:before {  content: "\e034";}.glyphicon-headphones:before {  content: "\e035";}.glyphicon-volume-off:before {  content: "\e036";}.glyphicon-volume-down:before {  content: "\e037";}.glyphicon-volume-up:before {  content: "\e038";}.glyphicon-qrcode:before {  content: "\e039";}.glyphicon-barcode:before {  content: "\e040";}.glyphicon-tag:before {  content: "\e041";}.glyphicon-tags:before {  content: "\e042";}.glyphicon-book:before {  content: "\e043";}.glyphicon-bookmark:before {  content: "\e044";}.glyphicon-print:before {  content: "\e045";}.glyphicon-camera:before {  content: "\e046";}.glyphicon-font:before {  content: "\e047";}.glyphicon-bold:before {  content: "\e048";}.glyphicon-italic:before {  content: "\e049";}.glyphicon-text-height:before {  content: "\e050";}.glyphicon-text-width:before {  content: "\e051";}.glyphicon-align-left:before {  content: "\e052";}.glyphicon-align-center:before {  content: "\e053";}.glyphicon-align-right:before {  content: "\e054";}.glyphicon-align-justify:before {  content: "\e055";}.glyphicon-list:before {  content: "\e056";}.glyphicon-indent-left:before {  content: "\e057";}.glyphicon-indent-right:before {  content: "\e058";}.glyphicon-facetime-video:before {  content: "\e059";}.glyphicon-picture:before {  content: "\e060";}.glyphicon-map-marker:before {  content: "\e062";}.glyphicon-adjust:before {  content: "\e063";}.glyphicon-tint:before {  content: "\e064";}.glyphicon-edit:before {  content: "\e065";}.glyphicon-share:before {  content: "\e066";}.glyphicon-check:before {  content: "\e067";}.glyphicon-move:before {  content: "\e068";}.glyphicon-step-backward:before {  content: "\e069";}.glyphicon-fast-backward:before {  content: "\e070";}.glyphicon-backward:before {  content: "\e071";}.glyphicon-play:before {  content: "\e072";}.glyphicon-pause:before {  content: "\e073";}.glyphicon-stop:before {  content: "\e074";}.glyphicon-forward:before {  content: "\e075";}.glyphicon-fast-forward:before {  content: "\e076";}.glyphicon-step-forward:before {  content: "\e077";}.glyphicon-eject:before {  content: "\e078";}.glyphicon-chevron-left:before {  content: "\e079";}.glyphicon-chevron-right:before {  content: "\e080";}.glyphicon-plus-sign:before {  content: "\e081";}.glyphicon-minus-sign:before {  content: "\e082";}.glyphicon-remove-sign:before {  content: "\e083";}.glyphicon-ok-sign:before {  content: "\e084";}.glyphicon-question-sign:before {  content: "\e085";}.glyphicon-info-sign:before {  content: "\e086";}.glyphicon-screenshot:before {  content: "\e087";}.glyphicon-remove-circle:before {  content: "\e088";}.glyphicon-ok-circle:before {  content: "\e089";}.glyphicon-ban-circle:before {  content: "\e090";}.glyphicon-arrow-left:before {  content: "\e091";}.glyphicon-arrow-right:before {  content: "\e092";}.glyphicon-arrow-up:before {  content: "\e093";}.glyphicon-arrow-down:before {  content: "\e094";}.glyphicon-share-alt:before {  content: "\e095";}.glyphicon-resize-full:before {  content: "\e096";}.glyphicon-resize-small:before {  content: "\e097";}.glyphicon-exclamation-sign:before {  content: "\e101";}.glyphicon-gift:before {  content: "\e102";}.glyphicon-leaf:before {  content: "\e103";}.glyphicon-fire:before {  content: "\e104";}.glyphicon-eye-open:before {  content: "\e105";}.glyphicon-eye-close:before {  content: "\e106";}.glyphicon-warning-sign:before {  content: "\e107";}.glyphicon-plane:before {  content: "\e108";}.glyphicon-calendar:before {  content: "\e109";}.glyphicon-random:before {  content: "\e110";}.glyphicon-comment:before {  content: "\e111";}.glyphicon-magnet:before {  content: "\e112";}.glyphicon-chevron-up:before {  content: "\e113";}.glyphicon-chevron-down:before {  content: "\e114";}.glyphicon-retweet:before {  content: "\e115";}.glyphicon-shopping-cart:before {  content: "\e116";}.glyphicon-folder-close:before {  content: "\e117";}.glyphicon-folder-open:before {  content: "\e118";}.glyphicon-resize-vertical:before {  content: "\e119";}.glyphicon-resize-horizontal:before {  content: "\e120";}.glyphicon-hdd:before {  content: "\e121";}.glyphicon-bullhorn:before {  content: "\e122";}.glyphicon-bell:before {  content: "\e123";}.glyphicon-certificate:before {  content: "\e124";}.glyphicon-thumbs-up:before {  content: "\e125";}.glyphicon-thumbs-down:before {  content: "\e126";}.glyphicon-hand-right:before {  content: "\e127";}.glyphicon-hand-left:before {  content: "\e128";}.glyphicon-hand-up:before {  content: "\e129";}.glyphicon-hand-down:before {  content: "\e130";}.glyphicon-circle-arrow-right:before {  content: "\e131";}.glyphicon-circle-arrow-left:before {  content: "\e132";}.glyphicon-circle-arrow-up:before {  content: "\e133";}.glyphicon-circle-arrow-down:before {  content: "\e134";}.glyphicon-globe:before {  content: "\e135";}.glyphicon-wrench:before {  content: "\e136";}.glyphicon-tasks:before {  content: "\e137";}.glyphicon-filter:before {  content: "\e138";}.glyphicon-briefcase:before {  content: "\e139";}.glyphicon-fullscreen:before {  content: "\e140";}.glyphicon-dashboard:before {  content: "\e141";}.glyphicon-paperclip:before {  content: "\e142";}.glyphicon-heart-empty:before {  content: "\e143";}.glyphicon-link:before {  content: "\e144";}.glyphicon-phone:before {  content: "\e145";}.glyphicon-pushpin:before {  content: "\e146";}.glyphicon-usd:before {  content: "\e148";}.glyphicon-gbp:before {  content: "\e149";}.glyphicon-sort:before {  content: "\e150";}.glyphicon-sort-by-alphabet:before {  content: "\e151";}.glyphicon-sort-by-alphabet-alt:before {  content: "\e152";}.glyphicon-sort-by-order:before {  content: "\e153";}.glyphicon-sort-by-order-alt:before {  content: "\e154";}.glyphicon-sort-by-attributes:before {  content: "\e155";}.glyphicon-sort-by-attributes-alt:before {  content: "\e156";}.glyphicon-unchecked:before {  content: "\e157";}.glyphicon-expand:before {  content: "\e158";}.glyphicon-collapse-down:before {  content: "\e159";}.glyphicon-collapse-up:before {  content: "\e160";}.glyphicon-log-in:before {  content: "\e161";}.glyphicon-flash:before {  content: "\e162";}.glyphicon-log-out:before {  content: "\e163";}.glyphicon-new-window:before {  content: "\e164";}.glyphicon-record:before {  content: "\e165";}.glyphicon-save:before {  content: "\e166";}.glyphicon-open:before {  content: "\e167";}.glyphicon-saved:before {  content: "\e168";}.glyphicon-import:before {  content: "\e169";}.glyphicon-export:before {  content: "\e170";}.glyphicon-send:before {  content: "\e171";}.glyphicon-floppy-disk:before {  content: "\e172";}.glyphicon-floppy-saved:before {  content: "\e173";}.glyphicon-floppy-remove:before {  content: "\e174";}.glyphicon-floppy-save:before {  content: "\e175";}.glyphicon-floppy-open:before {  content: "\e176";}.glyphicon-credit-card:before {  content: "\e177";}.glyphicon-transfer:before {  content: "\e178";}.glyphicon-cutlery:before {  content: "\e179";}.glyphicon-header:before {  content: "\e180";}.glyphicon-compressed:before {  content: "\e181";}.glyphicon-earphone:before {  content: "\e182";}.glyphicon-phone-alt:before {  content: "\e183";}.glyphicon-tower:before {  content: "\e184";}.glyphicon-stats:before {  content: "\e185";}.glyphicon-sd-video:before {  content: "\e186";}.glyphicon-hd-video:before {  content: "\e187";}.glyphicon-subtitles:before {  content: "\e188";}.glyphicon-sound-stereo:before {  content: "\e189";}.glyphicon-sound-dolby:before {  content: "\e190";}.glyphicon-sound-5-1:before {  content: "\e191";}.glyphicon-sound-6-1:before {  content: "\e192";}.glyphicon-sound-7-1:before {  content: "\e193";}.glyphicon-copyright-mark:before {  content: "\e194";}.glyphicon-registration-mark:before {  content: "\e195";}.glyphicon-cloud-download:before {  content: "\e197";}.glyphicon-cloud-upload:before {  content: "\e198";}.glyphicon-tree-conifer:before {  content: "\e199";}.glyphicon-tree-deciduous:before {  content: "\e200";}.glyphicon-cd:before {  content: "\e201";}.glyphicon-save-file:before {  content: "\e202";}.glyphicon-open-file:before {  content: "\e203";}.glyphicon-level-up:before {  content: "\e204";}.glyphicon-copy:before {  content: "\e205";}.glyphicon-paste:before {  content: "\e206";}.glyphicon-alert:before {  content: "\e209";}.glyphicon-equalizer:before {  content: "\e210";}.glyphicon-king:before {  content: "\e211";}.glyphicon-queen:before {  content: "\e212";}.glyphicon-pawn:before {  content: "\e213";}.glyphicon-bishop:before {  content: "\e214";}.glyphicon-knight:before {  content: "\e215";}.glyphicon-baby-formula:before {  content: "\e216";}.glyphicon-tent:before {  content: "\26fa";}.glyphicon-blackboard:before {  content: "\e218";}.glyphicon-bed:before {  content: "\e219";}.glyphicon-apple:before {  content: "\f8ff";}.glyphicon-erase:before {  content: "\e221";}.glyphicon-hourglass:before {  content: "\231b";}.glyphicon-lamp:before {  content: "\e223";}.glyphicon-duplicate:before {  content: "\e224";}.glyphicon-piggy-bank:before {  content: "\e225";}.glyphicon-scissors:before {  content: "\e226";}.glyphicon-bitcoin:before {  content: "\e227";}.glyphicon-btc:before {  content: "\e227";}.glyphicon-xbt:before {  content: "\e227";}.glyphicon-yen:before {  content: "\00a5";}.glyphicon-jpy:before {  content: "\00a5";}.glyphicon-ruble:before {  content: "\20bd";}.glyphicon-rub:before {  content: "\20bd";}.glyphicon-scale:before {  content: "\e230";}.glyphicon-ice-lolly:before {  content: "\e231";}.glyphicon-ice-lolly-tasted:before {  content: "\e232";}.glyphicon-education:before {  content: "\e233";}.glyphicon-option-horizontal:before {  content: "\e234";}.glyphicon-option-vertical:before {  content: "\e235";}.glyphicon-menu-hamburger:before {  content: "\e236";}.glyphicon-modal-window:before {  content: "\e237";}.glyphicon-oil:before {  content: "\e238";}.glyphicon-grain:before {  content: "\e239";}.glyphicon-sunglasses:before {  content: "\e240";}.glyphicon-text-size:before {  content: "\e241";}.glyphicon-text-color:before {  content: "\e242";}.glyphicon-text-background:before {  content: "\e243";}.glyphicon-object-align-top:before {  content: "\e244";}.glyphicon-object-align-bottom:before {  content: "\e245";}.glyphicon-object-align-horizontal:before {  content: "\e246";}.glyphicon-object-align-left:before {  content: "\e247";}.glyphicon-object-align-vertical:before {  content: "\e248";}.glyphicon-object-align-right:before {  content: "\e249";}.glyphicon-triangle-right:before {  content: "\e250";}.glyphicon-triangle-left:before {  content: "\e251";}.glyphicon-triangle-bottom:before {  content: "\e252";}.glyphicon-triangle-top:before {  content: "\e253";}.glyphicon-console:before {  content: "\e254";}.glyphicon-superscript:before {  content: "\e255";}.glyphicon-subscript:before {  content: "\e256";}.glyphicon-menu-left:before {  content: "\e257";}.glyphicon-menu-right:before {  content: "\e258";}.glyphicon-menu-down:before {  content: "\e259";}.glyphicon-menu-up:before {  content: "\e260";}* {  -webkit-box-sizing: border-box;     -moz-box-sizing: border-box;          box-sizing: border-box;}*:before,*:after {  -webkit-box-sizing: border-box;     -moz-box-sizing: border-box;          box-sizing: border-box;}html {  font-size: 10px;  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);}body {  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;  font-size: 14px;  line-height: 1.42857143;  color: #333;  background-color: #fff;}input,button,select,textarea {  font-family: inherit;  font-size: inherit;  line-height: inherit;}a {  color: #337ab7;  text-decoration: none;}a:hover,a:focus {  color: #23527c;  text-decoration: underline;}a:focus {  outline: thin dotted;  outline: 5px auto -webkit-focus-ring-color;  outline-offset: -2px;}figure {  margin: 0;}img {  vertical-align: middle;}.img-responsive,.thumbnail > img,.thumbnail a > img,.carousel-inner > .item > img,.carousel-inner > .item > a > img {  display: block;  max-width: 100%;  height: auto;}.img-rounded {  border-radius: 6px;}.img-thumbnail {  display: inline-block;  max-width: 100%;  height: auto;  padding: 4px;  line-height: 1.42857143;  background-color: #fff;  border: 1px solid #ddd;  border-radius: 4px;  -webkit-transition: all .2s ease-in-out;       -o-transition: all .2s ease-in-out;          transition: all .2s ease-in-out;}.img-circle {  border-radius: 50%;}hr {  margin-top: 20px;  margin-bottom: 20px;  border: 0;  border-top: 1px solid #eee;}.sr-only {  position: absolute;  width: 1px;  height: 1px;  padding: 0;  margin: -1px;  overflow: hidden;  clip: rect(0, 0, 0, 0);  border: 0;}.sr-only-focusable:active,.sr-only-focusable:focus {  position: static;  width: auto;  height: auto;  margin: 0;  overflow: visible;  clip: auto;}[role="button"] {  cursor: pointer;}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6 {  font-family: inherit;  font-weight: 500;  line-height: 1.1;  color: inherit;}h1 small,h2 small,h3 small,h4 small,h5 small,h6 small,.h1 small,.h2 small,.h3 small,.h4 small,.h5 small,.h6 small,h1 .small,h2 .small,h3 .small,h4 .small,h5 .small,h6 .small,.h1 .small,.h2 .small,.h3 .small,.h4 .small,.h5 .small,.h6 .small {  font-weight: normal;  line-height: 1;  color: #777;}h1,.h1,h2,.h2,h3,.h3 {  margin-top: 20px;  margin-bottom: 10px;}h1 small,.h1 small,h2 small,.h2 small,h3 small,.h3 small,h1 .small,.h1 .small,h2 .small,.h2 .small,h3 .small,.h3 .small {  font-size: 65%;}h4,.h4,h5,.h5,h6,.h6 {  margin-top: 10px;  margin-bottom: 10px;}h4 small,.h4 small,h5 small,.h5 small,h6 small,.h6 small,h4 .small,.h4 .small,h5 .small,.h5 .small,h6 .small,.h6 .small {  font-size: 75%;}h1,.h1 {  font-size: 36px;}h2,.h2 {  font-size: 30px;}h3,.h3 {  font-size: 24px;}h4,.h4 {  font-size: 18px;}h5,.h5 {  font-size: 14px;}h6,.h6 {  font-size: 12px;}p {  margin: 0 0 10px;}.lead {  margin-bottom: 20px;  font-size: 16px;  font-weight: 300;  line-height: 1.4;}@media (min-width: 768px) {  .lead {    font-size: 21px;  }}small,.small {  font-size: 85%;}mark,.mark {  padding: .2em;  background-color: #fcf8e3;}.text-left {  text-align: left;}.text-right {  text-align: right;}.text-center {  text-align: center;}.text-justify {  text-align: justify;}.text-nowrap {  white-space: nowrap;}.text-lowercase {  text-transform: lowercase;}.text-uppercase {  text-transform: uppercase;}.text-capitalize {  text-transform: capitalize;}.text-muted {  color: #777;}.text-primary {  color: #337ab7;}a.text-primary:hover,a.text-primary:focus {  color: #286090;}.text-success {  color: #3c763d;}a.text-success:hover,a.text-success:focus {  color: #2b542c;}.text-info {  color: #31708f;}a.text-info:hover,a.text-info:focus {  color: #245269;}.text-warning {  color: #8a6d3b;}a.text-warning:hover,a.text-warning:focus {  color: #66512c;}.text-danger {  color: #a94442;}a.text-danger:hover,a.text-danger:focus {  color: #843534;}.bg-primary {  color: #fff;  background-color: #337ab7;}a.bg-primary:hover,a.bg-primary:focus {  background-color: #286090;}.bg-success {  background-color: #dff0d8;}a.bg-success:hover,a.bg-success:focus {  background-color: #c1e2b3;}.bg-info {  background-color: #d9edf7;}a.bg-info:hover,a.bg-info:focus {  background-color: #afd9ee;}.bg-warning {  background-color: #fcf8e3;}a.bg-warning:hover,a.bg-warning:focus {  background-color: #f7ecb5;}.bg-danger {  background-color: #f2dede;}a.bg-danger:hover,a.bg-danger:focus {  background-color: #e4b9b9;}.page-header {  padding-bottom: 9px;  margin: 40px 0 20px;  border-bottom: 1px solid #eee;}ul,ol {  margin-top: 0;  margin-bottom: 10px;}ul ul,ol ul,ul ol,ol ol {  margin-bottom: 0;}.list-unstyled {  padding-left: 0;  list-style: none;}.list-inline {  padding-left: 0;  margin-left: -5px;  list-style: none;}.list-inline > li {  display: inline-block;  padding-right: 5px;  padding-left: 5px;}dl {  margin-top: 0;  margin-bottom: 20px;}dt,dd {  line-height: 1.42857143;}dt {  font-weight: bold;}dd {  margin-left: 0;}@media (min-width: 768px) {  .dl-horizontal dt {    float: left;    width: 160px;    overflow: hidden;    clear: left;    text-align: right;    text-overflow: ellipsis;    white-space: nowrap;  }  .dl-horizontal dd {    margin-left: 180px;  }}abbr[title],abbr[data-original-title] {  cursor: help;  border-bottom: 1px dotted #777;}.initialism {  font-size: 90%;  text-transform: uppercase;}blockquote {  padding: 10px 20px;  margin: 0 0 20px;  font-size: 17.5px;  border-left: 5px solid #eee;}blockquote p:last-child,blockquote ul:last-child,blockquote ol:last-child {  margin-bottom: 0;}blockquote footer,blockquote small,blockquote .small {  display: block;  font-size: 80%;  line-height: 1.42857143;  color: #777;}blockquote footer:before,blockquote small:before,blockquote .small:before {  content: '\2014 \00A0';}.blockquote-reverse,blockquote.pull-right {  padding-right: 15px;  padding-left: 0;  text-align: right;  border-right: 5px solid #eee;  border-left: 0;}.blockquote-reverse footer:before,blockquote.pull-right footer:before,.blockquote-reverse small:before,blockquote.pull-right small:before,.blockquote-reverse .small:before,blockquote.pull-right .small:before {  content: '';}.blockquote-reverse footer:after,blockquote.pull-right footer:after,.blockquote-reverse small:after,blockquote.pull-right small:after,.blockquote-reverse .small:after,blockquote.pull-right .small:after {  content: '\00A0 \2014';}address {  margin-bottom: 20px;  font-style: normal;  line-height: 1.42857143;}code,kbd,pre,samp {  font-family: Menlo, Monaco, Consolas, "Courier New", monospace;}code {  padding: 2px 4px;  font-size: 90%;  color: #c7254e;  background-color: #f9f2f4;  border-radius: 4px;}kbd {  padding: 2px 4px;  font-size: 90%;  color: #fff;  background-color: #333;  border-radius: 3px;  -webkit-box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .25);          box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .25);}kbd kbd {  padding: 0;  font-size: 100%;  font-weight: bold;  -webkit-box-shadow: none;          box-shadow: none;}pre {  display: block;  padding: 9.5px;  margin: 0 0 10px;  font-size: 13px;  line-height: 1.42857143;  color: #333;  word-break: break-all;  word-wrap: break-word;  background-color: #f5f5f5;  border: 1px solid #ccc;  border-radius: 4px;}pre code {  padding: 0;  font-size: inherit;  color: inherit;  white-space: pre-wrap;  background-color: transparent;  border-radius: 0;}.pre-scrollable {  max-height: 340px;  overflow-y: scroll;}.container {  padding-right: 15px;  padding-left: 15px;  margin-right: auto;  margin-left: auto;}@media (min-width: 768px) {  .container {    width: 750px;  }}@media (min-width: 992px) {  .container {    width: 970px;  }}@media (min-width: 1200px) {  .container {    width: 1170px;  }}.container-fluid {  padding-right: 15px;  padding-left: 15px;  margin-right: auto;  margin-left: auto;}.row {  margin-right: -15px;  margin-left: -15px;}.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 {  position: relative;  min-height: 1px;  padding-right: 15px;  padding-left: 15px;}.col-xs-1, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9, .col-xs-10, .col-xs-11, .col-xs-12 {  float: left;}.col-xs-12 {  width: 100%;}.col-xs-11 {  width: 91.66666667%;}.col-xs-10 {  width: 83.33333333%;}.col-xs-9 {  width: 75%;}.col-xs-8 {  width: 66.66666667%;}.col-xs-7 {  width: 58.33333333%;}.col-xs-6 {  width: 50%;}.col-xs-5 {  width: 41.66666667%;}.col-xs-4 {  width: 33.33333333%;}.col-xs-3 {  width: 25%;}.col-xs-2 {  width: 16.66666667%;}.col-xs-1 {  width: 8.33333333%;}.col-xs-pull-12 {  right: 100%;}.col-xs-pull-11 {  right: 91.66666667%;}.col-xs-pull-10 {  right: 83.33333333%;}.col-xs-pull-9 {  right: 75%;}.col-xs-pull-8 {  right: 66.66666667%;}.col-xs-pull-7 {  right: 58.33333333%;}.col-xs-pull-6 {  right: 50%;}.col-xs-pull-5 {  right: 41.66666667%;}.col-xs-pull-4 {  right: 33.33333333%;}.col-xs-pull-3 {  right: 25%;}.col-xs-pull-2 {  right: 16.66666667%;}.col-xs-pull-1 {  right: 8.33333333%;}.col-xs-pull-0 {  right: auto;}.col-xs-push-12 {  left: 100%;}.col-xs-push-11 {  left: 91.66666667%;}.col-xs-push-10 {  left: 83.33333333%;}.col-xs-push-9 {  left: 75%;}.col-xs-push-8 {  left: 66.66666667%;}.col-xs-push-7 {  left: 58.33333333%;}.col-xs-push-6 {  left: 50%;}.col-xs-push-5 {  left: 41.66666667%;}.col-xs-push-4 {  left: 33.33333333%;}.col-xs-push-3 {  left: 25%;}.col-xs-push-2 {  left: 16.66666667%;}.col-xs-push-1 {  left: 8.33333333%;}.col-xs-push-0 {  left: auto;}.col-xs-offset-12 {  margin-left: 100%;}.col-xs-offset-11 {  margin-left: 91.66666667%;}.col-xs-offset-10 {  margin-left: 83.33333333%;}.col-xs-offset-9 {  margin-left: 75%;}.col-xs-offset-8 {  margin-left: 66.66666667%;}.col-xs-offset-7 {  margin-left: 58.33333333%;}.col-xs-offset-6 {  margin-left: 50%;}.col-xs-offset-5 {  margin-left: 41.66666667%;}.col-xs-offset-4 {  margin-left: 33.33333333%;}.col-xs-offset-3 {  margin-left: 25%;}.col-xs-offset-2 {  margin-left: 16.66666667%;}.col-xs-offset-1 {  margin-left: 8.33333333%;}.col-xs-offset-0 {  margin-left: 0;}@media (min-width: 768px) {  .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12 {    float: left;  }  .col-sm-12 {    width: 100%;  }  .col-sm-11 {    width: 91.66666667%;  }  .col-sm-10 {    width: 83.33333333%;  }  .col-sm-9 {    width: 75%;  }  .col-sm-8 {    width: 66.66666667%;  }  .col-sm-7 {    width: 58.33333333%;  }  .col-sm-6 {    width: 50%;  }  .col-sm-5 {    width: 41.66666667%;  }  .col-sm-4 {    width: 33.33333333%;  }  .col-sm-3 {    width: 25%;  }  .col-sm-2 {    width: 16.66666667%;  }  .col-sm-1 {    width: 8.33333333%;  }  .col-sm-pull-12 {    right: 100%;  }  .col-sm-pull-11 {    right: 91.66666667%;  }  .col-sm-pull-10 {    right: 83.33333333%;  }  .col-sm-pull-9 {    right: 75%;  }  .col-sm-pull-8 {    right: 66.66666667%;  }  .col-sm-pull-7 {    right: 58.33333333%;  }  .col-sm-pull-6 {    right: 50%;  }  .col-sm-pull-5 {    right: 41.66666667%;  }  .col-sm-pull-4 {    right: 33.33333333%;  }  .col-sm-pull-3 {    right: 25%;  }  .col-sm-pull-2 {    right: 16.66666667%;  }  .col-sm-pull-1 {    right: 8.33333333%;  }  .col-sm-pull-0 {    right: auto;  }  .col-sm-push-12 {    left: 100%;  }  .col-sm-push-11 {    left: 91.66666667%;  }  .col-sm-push-10 {    left: 83.33333333%;  }  .col-sm-push-9 {    left: 75%;  }  .col-sm-push-8 {    left: 66.66666667%;  }  .col-sm-push-7 {    left: 58.33333333%;  }  .col-sm-push-6 {    left: 50%;  }  .col-sm-push-5 {    left: 41.66666667%;  }  .col-sm-push-4 {    left: 33.33333333%;  }  .col-sm-push-3 {    left: 25%;  }  .col-sm-push-2 {    left: 16.66666667%;  }  .col-sm-push-1 {    left: 8.33333333%;  }  .col-sm-push-0 {    left: auto;  }  .col-sm-offset-12 {    margin-left: 100%;  }  .col-sm-offset-11 {    margin-left: 91.66666667%;  }  .col-sm-offset-10 {    margin-left: 83.33333333%;  }  .col-sm-offset-9 {    margin-left: 75%;  }  .col-sm-offset-8 {    margin-left: 66.66666667%;  }  .col-sm-offset-7 {    margin-left: 58.33333333%;  }  .col-sm-offset-6 {    margin-left: 50%;  }  .col-sm-offset-5 {    margin-left: 41.66666667%;  }  .col-sm-offset-4 {    margin-left: 33.33333333%;  }  .col-sm-offset-3 {    margin-left: 25%;  }  .col-sm-offset-2 {    margin-left: 16.66666667%;  }  .col-sm-offset-1 {    margin-left: 8.33333333%;  }  .col-sm-offset-0 {    margin-left: 0;  }}@media (min-width: 992px) {  .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 {    float: left;  }  .col-md-12 {    width: 100%;  }  .col-md-11 {    width: 91.66666667%;  }  .col-md-10 {    width: 83.33333333%;  }  .col-md-9 {    width: 75%;  }  .col-md-8 {    width: 66.66666667%;  }  .col-md-7 {    width: 58.33333333%;  }  .col-md-6 {    width: 50%;  }  .col-md-5 {    width: 41.66666667%;  }  .col-md-4 {    width: 33.33333333%;  }  .col-md-3 {    width: 25%;  }  .col-md-2 {    width: 16.66666667%;  }  .col-md-1 {    width: 8.33333333%;  }  .col-md-pull-12 {    right: 100%;  }  .col-md-pull-11 {    right: 91.66666667%;  }  .col-md-pull-10 {    right: 83.33333333%;  }  .col-md-pull-9 {    right: 75%;  }  .col-md-pull-8 {    right: 66.66666667%;  }  .col-md-pull-7 {    right: 58.33333333%;  }  .col-md-pull-6 {    right: 50%;  }  .col-md-pull-5 {    right: 41.66666667%;  }  .col-md-pull-4 {    right: 33.33333333%;  }  .col-md-pull-3 {    right: 25%;  }  .col-md-pull-2 {    right: 16.66666667%;  }  .col-md-pull-1 {    right: 8.33333333%;  }  .col-md-pull-0 {    right: auto;  }  .col-md-push-12 {    left: 100%;  }  .col-md-push-11 {    left: 91.66666667%;  }  .col-md-push-10 {    left: 83.33333333%;  }  .col-md-push-9 {    left: 75%;  }  .col-md-push-8 {    left: 66.66666667%;  }  .col-md-push-7 {    left: 58.33333333%;  }  .col-md-push-6 {    left: 50%;  }  .col-md-push-5 {    left: 41.66666667%;  }  .col-md-push-4 {    left: 33.33333333%;  }  .col-md-push-3 {    left: 25%;  }  .col-md-push-2 {    left: 16.66666667%;  }  .col-md-push-1 {    left: 8.33333333%;  }  .col-md-push-0 {    left: auto;  }  .col-md-offset-12 {    margin-left: 100%;  }  .col-md-offset-11 {    margin-left: 91.66666667%;  }  .col-md-offset-10 {    margin-left: 83.33333333%;  }  .col-md-offset-9 {    margin-left: 75%;  }  .col-md-offset-8 {    margin-left: 66.66666667%;  }  .col-md-offset-7 {    margin-left: 58.33333333%;  }  .col-md-offset-6 {    margin-left: 50%;  }  .col-md-offset-5 {    margin-left: 41.66666667%;  }  .col-md-offset-4 {    margin-left: 33.33333333%;  }  .col-md-offset-3 {    margin-left: 25%;  }  .col-md-offset-2 {    margin-left: 16.66666667%;  }  .col-md-offset-1 {    margin-left: 8.33333333%;  }  .col-md-offset-0 {    margin-left: 0;  }}@media (min-width: 1200px) {  .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12 {    float: left;  }  .col-lg-12 {    width: 100%;  }  .col-lg-11 {    width: 91.66666667%;  }  .col-lg-10 {    width: 83.33333333%;  }  .col-lg-9 {    width: 75%;  }  .col-lg-8 {    width: 66.66666667%;  }  .col-lg-7 {    width: 58.33333333%;  }  .col-lg-6 {    width: 50%;  }  .col-lg-5 {    width: 41.66666667%;  }  .col-lg-4 {    width: 33.33333333%;  }  .col-lg-3 {    width: 25%;  }  .col-lg-2 {    width: 16.66666667%;  }  .col-lg-1 {    width: 8.33333333%;  }  .col-lg-pull-12 {    right: 100%;  }  .col-lg-pull-11 {    right: 91.66666667%;  }  .col-lg-pull-10 {    right: 83.33333333%;  }  .col-lg-pull-9 {    right: 75%;  }  .col-lg-pull-8 {    right: 66.66666667%;  }  .col-lg-pull-7 {    right: 58.33333333%;  }  .col-lg-pull-6 {    right: 50%;  }  .col-lg-pull-5 {    right: 41.66666667%;  }  .col-lg-pull-4 {    right: 33.33333333%;  }  .col-lg-pull-3 {    right: 25%;  }  .col-lg-pull-2 {    right: 16.66666667%;  }  .col-lg-pull-1 {    right: 8.33333333%;  }  .col-lg-pull-0 {    right: auto;  }  .col-lg-push-12 {    left: 100%;  }  .col-lg-push-11 {    left: 91.66666667%;  }  .col-lg-push-10 {    left: 83.33333333%;  }  .col-lg-push-9 {    left: 75%;  }  .col-lg-push-8 {    left: 66.66666667%;  }  .col-lg-push-7 {    left: 58.33333333%;  }  .col-lg-push-6 {    left: 50%;  }  .col-lg-push-5 {    left: 41.66666667%;  }  .col-lg-push-4 {    left: 33.33333333%;  }  .col-lg-push-3 {    left: 25%;  }  .col-lg-push-2 {    left: 16.66666667%;  }  .col-lg-push-1 {    left: 8.33333333%;  }  .col-lg-push-0 {    left: auto;  }  .col-lg-offset-12 {    margin-left: 100%;  }  .col-lg-offset-11 {    margin-left: 91.66666667%;  }  .col-lg-offset-10 {    margin-left: 83.33333333%;  }  .col-lg-offset-9 {    margin-left: 75%;  }  .col-lg-offset-8 {    margin-left: 66.66666667%;  }  .col-lg-offset-7 {    margin-left: 58.33333333%;  }  .col-lg-offset-6 {    margin-left: 50%;  }  .col-lg-offset-5 {    margin-left: 41.66666667%;  }  .col-lg-offset-4 {    margin-left: 33.33333333%;  }  .col-lg-offset-3 {    margin-left: 25%;  }  .col-lg-offset-2 {    margin-left: 16.66666667%;  }  .col-lg-offset-1 {    margin-left: 8.33333333%;  }  .col-lg-offset-0 {    margin-left: 0;  }}table {  background-color: transparent;}caption {  padding-top: 8px;  padding-bottom: 8px;  color: #777;  text-align: left;}th {  text-align: left;}.table {  width: 100%;  max-width: 100%;  margin-bottom: 20px;}.table > thead > tr > th,.table > tbody > tr > th,.table > tfoot > tr > th,.table > thead > tr > td,.table > tbody > tr > td,.table > tfoot > tr > td {  padding: 8px;  line-height: 1.42857143;  vertical-align: top;  border-top: 1px solid #ddd;}.table > thead > tr > th {  vertical-align: bottom;  border-bottom: 2px solid #ddd;}.table > caption + thead > tr:first-child > th,.table > colgroup + thead > tr:first-child > th,.table > thead:first-child > tr:first-child > th,.table > caption + thead > tr:first-child > td,.table > colgroup + thead > tr:first-child > td,.table > thead:first-child > tr:first-child > td {  border-top: 0;}.table > tbody + tbody {  border-top: 2px solid #ddd;}.table .table {  background-color: #fff;}.table-condensed > thead > tr > th,.table-condensed > tbody > tr > th,.table-condensed > tfoot > tr > th,.table-condensed > thead > tr > td,.table-condensed > tbody > tr > td,.table-condensed > tfoot > tr > td {  padding: 5px;}.table-bordered {  border: 1px solid #ddd;}.table-bordered > thead > tr > th,.table-bordered > tbody > tr > th,.table-bordered > tfoot > tr > th,.table-bordered > thead > tr > td,.table-bordered > tbody > tr > td,.table-bordered > tfoot > tr > td {  border: 1px solid #ddd;}.table-bordered > thead > tr > th,.table-bordered > thead > tr > td {  border-bottom-width: 2px;}.table-striped > tbody > tr:nth-of-type(odd) {  background-color: #f9f9f9;}.table-hover > tbody > tr:hover {  background-color: #f5f5f5;}table col[class*="col-"] {  position: static;  display: table-column;  float: none;}table td[class*="col-"],table th[class*="col-"] {  position: static;  display: table-cell;  float: none;}.table > thead > tr > td.active,.table > tbody > tr > td.active,.table > tfoot > tr > td.active,.table > thead > tr > th.active,.table > tbody > tr > th.active,.table > tfoot > tr > th.active,.table > thead > tr.active > td,.table > tbody > tr.active > td,.table > tfoot > tr.active > td,.table > thead > tr.active > th,.table > tbody > tr.active > th,.table > tfoot > tr.active > th {  background-color: #f5f5f5;}.table-hover > tbody > tr > td.active:hover,.table-hover > tbody > tr > th.active:hover,.table-hover > tbody > tr.active:hover > td,.table-hover > tbody > tr:hover > .active,.table-hover > tbody > tr.active:hover > th {  background-color: #e8e8e8;}.table > thead > tr > td.success,.table > tbody > tr > td.success,.table > tfoot > tr > td.success,.table > thead > tr > th.success,.table > tbody > tr > th.success,.table > tfoot > tr > th.success,.table > thead > tr.success > td,.table > tbody > tr.success > td,.table > tfoot > tr.success > td,.table > thead > tr.success > th,.table > tbody > tr.success > th,.table > tfoot > tr.success > th {  background-color: #dff0d8;}.table-hover > tbody > tr > td.success:hover,.table-hover > tbody > tr > th.success:hover,.table-hover > tbody > tr.success:hover > td,.table-hover > tbody > tr:hover > .success,.table-hover > tbody > tr.success:hover > th {  background-color: #d0e9c6;}.table > thead > tr > td.info,.table > tbody > tr > td.info,.table > tfoot > tr > td.info,.table > thead > tr > th.info,.table > tbody > tr > th.info,.table > tfoot > tr > th.info,.table > thead > tr.info > td,.table > tbody > tr.info > td,.table > tfoot > tr.info > td,.table > thead > tr.info > th,.table > tbody > tr.info > th,.table > tfoot > tr.info > th {  background-color: #d9edf7;}.table-hover > tbody > tr > td.info:hover,.table-hover > tbody > tr > th.info:hover,.table-hover > tbody > tr.info:hover > td,.table-hover > tbody > tr:hover > .info,.table-hover > tbody > tr.info:hover > th {  background-color: #c4e3f3;}.table > thead > tr > td.warning,.table > tbody > tr > td.warning,.table > tfoot > tr > td.warning,.table > thead > tr > th.warning,.table > tbody > tr > th.warning,.table > tfoot > tr > th.warning,.table > thead > tr.warning > td,.table > tbody > tr.warning > td,.table > tfoot > tr.warning > td,.table > thead > tr.warning > th,.table > tbody > tr.warning > th,.table > tfoot > tr.warning > th {  background-color: #fcf8e3;}.table-hover > tbody > tr > td.warning:hover,.table-hover > tbody > tr > th.warning:hover,.table-hover > tbody > tr.warning:hover > td,.table-hover > tbody > tr:hover > .warning,.table-hover > tbody > tr.warning:hover > th {  background-color: #faf2cc;}.table > thead > tr > td.danger,.table > tbody > tr > td.danger,.table > tfoot > tr > td.danger,.table > thead > tr > th.danger,.table > tbody > tr > th.danger,.table > tfoot > tr > th.danger,.table > thead > tr.danger > td,.table > tbody > tr.danger > td,.table > tfoot > tr.danger > td,.table > thead > tr.danger > th,.table > tbody > tr.danger > th,.table > tfoot > tr.danger > th {  background-color: #f2dede;}.table-hover > tbody > tr > td.danger:hover,.table-hover > tbody > tr > th.danger:hover,.table-hover > tbody > tr.danger:hover > td,.table-hover > tbody > tr:hover > .danger,.table-hover > tbody > tr.danger:hover > th {  background-color: #ebcccc;}.table-responsive {  min-height: .01%;  overflow-x: auto;}@media screen and (max-width: 767px) {  .table-responsive {    width: 100%;    margin-bottom: 15px;    overflow-y: hidden;    -ms-overflow-style: -ms-autohiding-scrollbar;    border: 1px solid #ddd;  }  .table-responsive > .table {    margin-bottom: 0;  }  .table-responsive > .table > thead > tr > th,  .table-responsive > .table > tbody > tr > th,  .table-responsive > .table > tfoot > tr > th,  .table-responsive > .table > thead > tr > td,  .table-responsive > .table > tbody > tr > td,  .table-responsive > .table > tfoot > tr > td {    white-space: nowrap;  }  .table-responsive > .table-bordered {    border: 0;  }  .table-responsive > .table-bordered > thead > tr > th:first-child,  .table-responsive > .table-bordered > tbody > tr > th:first-child,  .table-responsive > .table-bordered > tfoot > tr > th:first-child,  .table-responsive > .table-bordered > thead > tr > td:first-child,  .table-responsive > .table-bordered > tbody > tr > td:first-child,  .table-responsive > .table-bordered > tfoot > tr > td:first-child {    border-left: 0;  }  .table-responsive > .table-bordered > thead > tr > th:last-child,  .table-responsive > .table-bordered > tbody > tr > th:last-child,  .table-responsive > .table-bordered > tfoot > tr > th:last-child,  .table-responsive > .table-bordered > thead > tr > td:last-child,  .table-responsive > .table-bordered > tbody > tr > td:last-child,  .table-responsive > .table-bordered > tfoot > tr > td:last-child {    border-right: 0;  }  .table-responsive > .table-bordered > tbody > tr:last-child > th,  .table-responsive > .table-bordered > tfoot > tr:last-child > th,  .table-responsive > .table-bordered > tbody > tr:last-child > td,  .table-responsive > .table-bordered > tfoot > tr:last-child > td {    border-bottom: 0;  }}fieldset {  min-width: 0;  padding: 0;  margin: 0;  border: 0;}legend {  display: block;  width: 100%;  padding: 0;  margin-bottom: 20px;  font-size: 21px;  line-height: inherit;  color: #333;  border: 0;  border-bottom: 1px solid #e5e5e5;}label {  display: inline-block;  max-width: 100%;  margin-bottom: 5px;  font-weight: bold;}input[type="search"] {  -webkit-box-sizing: border-box;     -moz-box-sizing: border-box;          box-sizing: border-box;}input[type="radio"],input[type="checkbox"] {  margin: 4px 0 0;  margin-top: 1px \9;  line-height: normal;}input[type="file"] {  display: block;}input[type="range"] {  display: block;  width: 100%;}select[multiple],select[size] {  height: auto;}input[type="file"]:focus,input[type="radio"]:focus,input[type="checkbox"]:focus {  outline: thin dotted;  outline: 5px auto -webkit-focus-ring-color;  outline-offset: -2px;}output {  display: block;  padding-top: 7px;  font-size: 14px;  line-height: 1.42857143;  color: #555;}.form-control {  display: block;  width: 100%;  height: 34px;  padding: 6px 12px;  font-size: 14px;  line-height: 1.42857143;  color: #555;  background-color: #fff;  background-image: none;  border: 1px solid #ccc;  border-radius: 4px;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);  -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;       -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;          transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;}.form-control:focus {  border-color: #66afe9;  outline: 0;  -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, .6);          box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, .6);}.form-control::-moz-placeholder {  color: #999;  opacity: 1;}.form-control:-ms-input-placeholder {  color: #999;}.form-control::-webkit-input-placeholder {  color: #999;}.form-control[disabled],.form-control[readonly],fieldset[disabled] .form-control {  background-color: #eee;  opacity: 1;}.form-control[disabled],fieldset[disabled] .form-control {  cursor: not-allowed;}textarea.form-control {  height: auto;}input[type="search"] {  -webkit-appearance: none;}@media screen and (-webkit-min-device-pixel-ratio: 0) {  input[type="date"].form-control,  input[type="time"].form-control,  input[type="datetime-local"].form-control,  input[type="month"].form-control {    line-height: 34px;  }  input[type="date"].input-sm,  input[type="time"].input-sm,  input[type="datetime-local"].input-sm,  input[type="month"].input-sm,  .input-group-sm input[type="date"],  .input-group-sm input[type="time"],  .input-group-sm input[type="datetime-local"],  .input-group-sm input[type="month"] {    line-height: 30px;  }  input[type="date"].input-lg,  input[type="time"].input-lg,  input[type="datetime-local"].input-lg,  input[type="month"].input-lg,  .input-group-lg input[type="date"],  .input-group-lg input[type="time"],  .input-group-lg input[type="datetime-local"],  .input-group-lg input[type="month"] {    line-height: 46px;  }}.form-group {  margin-bottom: 15px;}.radio,.checkbox {  position: relative;  display: block;  margin-top: 10px;  margin-bottom: 10px;}.radio label,.checkbox label {  min-height: 20px;  padding-left: 20px;  margin-bottom: 0;  font-weight: normal;  cursor: pointer;}.radio input[type="radio"],.radio-inline input[type="radio"],.checkbox input[type="checkbox"],.checkbox-inline input[type="checkbox"] {  position: absolute;  margin-top: 4px \9;  margin-left: -20px;}.radio + .radio,.checkbox + .checkbox {  margin-top: -5px;}.radio-inline,.checkbox-inline {  position: relative;  display: inline-block;  padding-left: 20px;  margin-bottom: 0;  font-weight: normal;  vertical-align: middle;  cursor: pointer;}.radio-inline + .radio-inline,.checkbox-inline + .checkbox-inline {  margin-top: 0;  margin-left: 10px;}input[type="radio"][disabled],input[type="checkbox"][disabled],input[type="radio"].disabled,input[type="checkbox"].disabled,fieldset[disabled] input[type="radio"],fieldset[disabled] input[type="checkbox"] {  cursor: not-allowed;}.radio-inline.disabled,.checkbox-inline.disabled,fieldset[disabled] .radio-inline,fieldset[disabled] .checkbox-inline {  cursor: not-allowed;}.radio.disabled label,.checkbox.disabled label,fieldset[disabled] .radio label,fieldset[disabled] .checkbox label {  cursor: not-allowed;}.form-control-static {  min-height: 34px;  padding-top: 7px;  padding-bottom: 7px;  margin-bottom: 0;}.form-control-static.input-lg,.form-control-static.input-sm {  padding-right: 0;  padding-left: 0;}.input-sm {  height: 30px;  padding: 5px 10px;  font-size: 12px;  line-height: 1.5;  border-radius: 3px;}select.input-sm {  height: 30px;  line-height: 30px;}textarea.input-sm,select[multiple].input-sm {  height: auto;}.form-group-sm .form-control {  height: 30px;  padding: 5px 10px;  font-size: 12px;  line-height: 1.5;  border-radius: 3px;}.form-group-sm select.form-control {  height: 30px;  line-height: 30px;}.form-group-sm textarea.form-control,.form-group-sm select[multiple].form-control {  height: auto;}.form-group-sm .form-control-static {  height: 30px;  min-height: 32px;  padding: 6px 10px;  font-size: 12px;  line-height: 1.5;}.input-lg {  height: 46px;  padding: 10px 16px;  font-size: 18px;  line-height: 1.3333333;  border-radius: 6px;}select.input-lg {  height: 46px;  line-height: 46px;}textarea.input-lg,select[multiple].input-lg {  height: auto;}.form-group-lg .form-control {  height: 46px;  padding: 10px 16px;  font-size: 18px;  line-height: 1.3333333;  border-radius: 6px;}.form-group-lg select.form-control {  height: 46px;  line-height: 46px;}.form-group-lg textarea.form-control,.form-group-lg select[multiple].form-control {  height: auto;}.form-group-lg .form-control-static {  height: 46px;  min-height: 38px;  padding: 11px 16px;  font-size: 18px;  line-height: 1.3333333;}.has-feedback {  position: relative;}.has-feedback .form-control {  padding-right: 42.5px;}.form-control-feedback {  position: absolute;  top: 0;  right: 0;  z-index: 2;  display: block;  width: 34px;  height: 34px;  line-height: 34px;  text-align: center;  pointer-events: none;}.input-lg + .form-control-feedback,.input-group-lg + .form-control-feedback,.form-group-lg .form-control + .form-control-feedback {  width: 46px;  height: 46px;  line-height: 46px;}.input-sm + .form-control-feedback,.input-group-sm + .form-control-feedback,.form-group-sm .form-control + .form-control-feedback {  width: 30px;  height: 30px;  line-height: 30px;}.has-success .help-block,.has-success .control-label,.has-success .radio,.has-success .checkbox,.has-success .radio-inline,.has-success .checkbox-inline,.has-success.radio label,.has-success.checkbox label,.has-success.radio-inline label,.has-success.checkbox-inline label {  color: #3c763d;}.has-success .form-control {  border-color: #3c763d;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);}.has-success .form-control:focus {  border-color: #2b542c;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #67b168;          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #67b168;}.has-success .input-group-addon {  color: #3c763d;  background-color: #dff0d8;  border-color: #3c763d;}.has-success .form-control-feedback {  color: #3c763d;}.has-warning .help-block,.has-warning .control-label,.has-warning .radio,.has-warning .checkbox,.has-warning .radio-inline,.has-warning .checkbox-inline,.has-warning.radio label,.has-warning.checkbox label,.has-warning.radio-inline label,.has-warning.checkbox-inline label {  color: #8a6d3b;}.has-warning .form-control {  border-color: #8a6d3b;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);}.has-warning .form-control:focus {  border-color: #66512c;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #c0a16b;          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #c0a16b;}.has-warning .input-group-addon {  color: #8a6d3b;  background-color: #fcf8e3;  border-color: #8a6d3b;}.has-warning .form-control-feedback {  color: #8a6d3b;}.has-error .help-block,.has-error .control-label,.has-error .radio,.has-error .checkbox,.has-error .radio-inline,.has-error .checkbox-inline,.has-error.radio label,.has-error.checkbox label,.has-error.radio-inline label,.has-error.checkbox-inline label {  color: #a94442;}.has-error .form-control {  border-color: #a94442;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);}.has-error .form-control:focus {  border-color: #843534;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #ce8483;          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #ce8483;}.has-error .input-group-addon {  color: #a94442;  background-color: #f2dede;  border-color: #a94442;}.has-error .form-control-feedback {  color: #a94442;}.has-feedback label ~ .form-control-feedback {  top: 25px;}.has-feedback label.sr-only ~ .form-control-feedback {  top: 0;}.help-block {  display: block;  margin-top: 5px;  margin-bottom: 10px;  color: #737373;}@media (min-width: 768px) {  .form-inline .form-group {    display: inline-block;    margin-bottom: 0;    vertical-align: middle;  }  .form-inline .form-control {    display: inline-block;    width: auto;    vertical-align: middle;  }  .form-inline .form-control-static {    display: inline-block;  }  .form-inline .input-group {    display: inline-table;    vertical-align: middle;  }  .form-inline .input-group .input-group-addon,  .form-inline .input-group .input-group-btn,  .form-inline .input-group .form-control {    width: auto;  }  .form-inline .input-group > .form-control {    width: 100%;  }  .form-inline .control-label {    margin-bottom: 0;    vertical-align: middle;  }  .form-inline .radio,  .form-inline .checkbox {    display: inline-block;    margin-top: 0;    margin-bottom: 0;    vertical-align: middle;  }  .form-inline .radio label,  .form-inline .checkbox label {    padding-left: 0;  }  .form-inline .radio input[type="radio"],  .form-inline .checkbox input[type="checkbox"] {    position: relative;    margin-left: 0;  }  .form-inline .has-feedback .form-control-feedback {    top: 0;  }}.form-horizontal .radio,.form-horizontal .checkbox,.form-horizontal .radio-inline,.form-horizontal .checkbox-inline {  padding-top: 7px;  margin-top: 0;  margin-bottom: 0;}.form-horizontal .radio,.form-horizontal .checkbox {  min-height: 27px;}.form-horizontal .form-group {  margin-right: -15px;  margin-left: -15px;}@media (min-width: 768px) {  .form-horizontal .control-label {    padding-top: 7px;    margin-bottom: 0;    text-align: right;  }}.form-horizontal .has-feedback .form-control-feedback {  right: 15px;}@media (min-width: 768px) {  .form-horizontal .form-group-lg .control-label {    padding-top: 14.333333px;    font-size: 18px;  }}@media (min-width: 768px) {  .form-horizontal .form-group-sm .control-label {    padding-top: 6px;    font-size: 12px;  }}.btn {  display: inline-block;  padding: 6px 12px;  margin-bottom: 0;  font-size: 14px;  font-weight: normal;  line-height: 1.42857143;  text-align: center;  white-space: nowrap;  vertical-align: middle;  -ms-touch-action: manipulation;      touch-action: manipulation;  cursor: pointer;  -webkit-user-select: none;     -moz-user-select: none;      -ms-user-select: none;          user-select: none;  background-image: none;  border: 1px solid transparent;  border-radius: 4px;}.btn:focus,.btn:active:focus,.btn.active:focus,.btn.focus,.btn:active.focus,.btn.active.focus {  outline: thin dotted;  outline: 5px auto -webkit-focus-ring-color;  outline-offset: -2px;}.btn:hover,.btn:focus,.btn.focus {  color: #333;  text-decoration: none;}.btn:active,.btn.active {  background-image: none;  outline: 0;  -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);          box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);}.btn.disabled,.btn[disabled],fieldset[disabled] .btn {  cursor: not-allowed;  filter: alpha(opacity=65);  -webkit-box-shadow: none;          box-shadow: none;  opacity: .65;}a.btn.disabled,fieldset[disabled] a.btn {  pointer-events: none;}.btn-default {  color: #333;  background-color: #fff;  border-color: #ccc;}.btn-default:focus,.btn-default.focus {  color: #333;  background-color: #e6e6e6;  border-color: #8c8c8c;}.btn-default:hover {  color: #333;  background-color: #e6e6e6;  border-color: #adadad;}.btn-default:active,.btn-default.active,.open > .dropdown-toggle.btn-default {  color: #333;  background-color: #e6e6e6;  border-color: #adadad;}.btn-default:active:hover,.btn-default.active:hover,.open > .dropdown-toggle.btn-default:hover,.btn-default:active:focus,.btn-default.active:focus,.open > .dropdown-toggle.btn-default:focus,.btn-default:active.focus,.btn-default.active.focus,.open > .dropdown-toggle.btn-default.focus {  color: #333;  background-color: #d4d4d4;  border-color: #8c8c8c;}.btn-default:active,.btn-default.active,.open > .dropdown-toggle.btn-default {  background-image: none;}.btn-default.disabled,.btn-default[disabled],fieldset[disabled] .btn-default,.btn-default.disabled:hover,.btn-default[disabled]:hover,fieldset[disabled] .btn-default:hover,.btn-default.disabled:focus,.btn-default[disabled]:focus,fieldset[disabled] .btn-default:focus,.btn-default.disabled.focus,.btn-default[disabled].focus,fieldset[disabled] .btn-default.focus,.btn-default.disabled:active,.btn-default[disabled]:active,fieldset[disabled] .btn-default:active,.btn-default.disabled.active,.btn-default[disabled].active,fieldset[disabled] .btn-default.active {  background-color: #fff;  border-color: #ccc;}.btn-default .badge {  color: #fff;  background-color: #333;}.btn-primary {  color: #fff;  background-color: #337ab7;  border-color: #2e6da4;}.btn-primary:focus,.btn-primary.focus {  color: #fff;  background-color: #286090;  border-color: #122b40;}.btn-primary:hover {  color: #fff;  background-color: #286090;  border-color: #204d74;}.btn-primary:active,.btn-primary.active,.open > .dropdown-toggle.btn-primary {  color: #fff;  background-color: #286090;  border-color: #204d74;}.btn-primary:active:hover,.btn-primary.active:hover,.open > .dropdown-toggle.btn-primary:hover,.btn-primary:active:focus,.btn-primary.active:focus,.open > .dropdown-toggle.btn-primary:focus,.btn-primary:active.focus,.btn-primary.active.focus,.open > .dropdown-toggle.btn-primary.focus {  color: #fff;  background-color: #204d74;  border-color: #122b40;}.btn-primary:active,.btn-primary.active,.open > .dropdown-toggle.btn-primary {  background-image: none;}.btn-primary.disabled,.btn-primary[disabled],fieldset[disabled] .btn-primary,.btn-primary.disabled:hover,.btn-primary[disabled]:hover,fieldset[disabled] .btn-primary:hover,.btn-primary.disabled:focus,.btn-primary[disabled]:focus,fieldset[disabled] .btn-primary:focus,.btn-primary.disabled.focus,.btn-primary[disabled].focus,fieldset[disabled] .btn-primary.focus,.btn-primary.disabled:active,.btn-primary[disabled]:active,fieldset[disabled] .btn-primary:active,.btn-primary.disabled.active,.btn-primary[disabled].active,fieldset[disabled] .btn-primary.active {  background-color: #337ab7;  border-color: #2e6da4;}.btn-primary .badge {  color: #337ab7;  background-color: #fff;}.btn-success {  color: #fff;  background-color: #5cb85c;  border-color: #4cae4c;}.btn-success:focus,.btn-success.focus {  color: #fff;  background-color: #449d44;  border-color: #255625;}.btn-success:hover {  color: #fff;  background-color: #449d44;  border-color: #398439;}.btn-success:active,.btn-success.active,.open > .dropdown-toggle.btn-success {  color: #fff;  background-color: #449d44;  border-color: #398439;}.btn-success:active:hover,.btn-success.active:hover,.open > .dropdown-toggle.btn-success:hover,.btn-success:active:focus,.btn-success.active:focus,.open > .dropdown-toggle.btn-success:focus,.btn-success:active.focus,.btn-success.active.focus,.open > .dropdown-toggle.btn-success.focus {  color: #fff;  background-color: #398439;  border-color: #255625;}.btn-success:active,.btn-success.active,.open > .dropdown-toggle.btn-success {  background-image: none;}.btn-success.disabled,.btn-success[disabled],fieldset[disabled] .btn-success,.btn-success.disabled:hover,.btn-success[disabled]:hover,fieldset[disabled] .btn-success:hover,.btn-success.disabled:focus,.btn-success[disabled]:focus,fieldset[disabled] .btn-success:focus,.btn-success.disabled.focus,.btn-success[disabled].focus,fieldset[disabled] .btn-success.focus,.btn-success.disabled:active,.btn-success[disabled]:active,fieldset[disabled] .btn-success:active,.btn-success.disabled.active,.btn-success[disabled].active,fieldset[disabled] .btn-success.active {  background-color: #5cb85c;  border-color: #4cae4c;}.btn-success .badge {  color: #5cb85c;  background-color: #fff;}.btn-info {  color: #fff;  background-color: #5bc0de;  border-color: #46b8da;}.btn-info:focus,.btn-info.focus {  color: #fff;  background-color: #31b0d5;  border-color: #1b6d85;}.btn-info:hover {  color: #fff;  background-color: #31b0d5;  border-color: #269abc;}.btn-info:active,.btn-info.active,.open > .dropdown-toggle.btn-info {  color: #fff;  background-color: #31b0d5;  border-color: #269abc;}.btn-info:active:hover,.btn-info.active:hover,.open > .dropdown-toggle.btn-info:hover,.btn-info:active:focus,.btn-info.active:focus,.open > .dropdown-toggle.btn-info:focus,.btn-info:active.focus,.btn-info.active.focus,.open > .dropdown-toggle.btn-info.focus {  color: #fff;  background-color: #269abc;  border-color: #1b6d85;}.btn-info:active,.btn-info.active,.open > .dropdown-toggle.btn-info {  background-image: none;}.btn-info.disabled,.btn-info[disabled],fieldset[disabled] .btn-info,.btn-info.disabled:hover,.btn-info[disabled]:hover,fieldset[disabled] .btn-info:hover,.btn-info.disabled:focus,.btn-info[disabled]:focus,fieldset[disabled] .btn-info:focus,.btn-info.disabled.focus,.btn-info[disabled].focus,fieldset[disabled] .btn-info.focus,.btn-info.disabled:active,.btn-info[disabled]:active,fieldset[disabled] .btn-info:active,.btn-info.disabled.active,.btn-info[disabled].active,fieldset[disabled] .btn-info.active {  background-color: #5bc0de;  border-color: #46b8da;}.btn-info .badge {  color: #5bc0de;  background-color: #fff;}.btn-warning {  color: #fff;  background-color: #f0ad4e;  border-color: #eea236;}.btn-warning:focus,.btn-warning.focus {  color: #fff;  background-color: #ec971f;  border-color: #985f0d;}.btn-warning:hover {  color: #fff;  background-color: #ec971f;  border-color: #d58512;}.btn-warning:active,.btn-warning.active,.open > .dropdown-toggle.btn-warning {  color: #fff;  background-color: #ec971f;  border-color: #d58512;}.btn-warning:active:hover,.btn-warning.active:hover,.open > .dropdown-toggle.btn-warning:hover,.btn-warning:active:focus,.btn-warning.active:focus,.open > .dropdown-toggle.btn-warning:focus,.btn-warning:active.focus,.btn-warning.active.focus,.open > .dropdown-toggle.btn-warning.focus {  color: #fff;  background-color: #d58512;  border-color: #985f0d;}.btn-warning:active,.btn-warning.active,.open > .dropdown-toggle.btn-warning {  background-image: none;}.btn-warning.disabled,.btn-warning[disabled],fieldset[disabled] .btn-warning,.btn-warning.disabled:hover,.btn-warning[disabled]:hover,fieldset[disabled] .btn-warning:hover,.btn-warning.disabled:focus,.btn-warning[disabled]:focus,fieldset[disabled] .btn-warning:focus,.btn-warning.disabled.focus,.btn-warning[disabled].focus,fieldset[disabled] .btn-warning.focus,.btn-warning.disabled:active,.btn-warning[disabled]:active,fieldset[disabled] .btn-warning:active,.btn-warning.disabled.active,.btn-warning[disabled].active,fieldset[disabled] .btn-warning.active {  background-color: #f0ad4e;  border-color: #eea236;}.btn-warning .badge {  color: #f0ad4e;  background-color: #fff;}.btn-danger {  color: #fff;  background-color: #d9534f;  border-color: #d43f3a;}.btn-danger:focus,.btn-danger.focus {  color: #fff;  background-color: #c9302c;  border-color: #761c19;}.btn-danger:hover {  color: #fff;  background-color: #c9302c;  border-color: #ac2925;}.btn-danger:active,.btn-danger.active,.open > .dropdown-toggle.btn-danger {  color: #fff;  background-color: #c9302c;  border-color: #ac2925;}.btn-danger:active:hover,.btn-danger.active:hover,.open > .dropdown-toggle.btn-danger:hover,.btn-danger:active:focus,.btn-danger.active:focus,.open > .dropdown-toggle.btn-danger:focus,.btn-danger:active.focus,.btn-danger.active.focus,.open > .dropdown-toggle.btn-danger.focus {  color: #fff;  background-color: #ac2925;  border-color: #761c19;}.btn-danger:active,.btn-danger.active,.open > .dropdown-toggle.btn-danger {  background-image: none;}.btn-danger.disabled,.btn-danger[disabled],fieldset[disabled] .btn-danger,.btn-danger.disabled:hover,.btn-danger[disabled]:hover,fieldset[disabled] .btn-danger:hover,.btn-danger.disabled:focus,.btn-danger[disabled]:focus,fieldset[disabled] .btn-danger:focus,.btn-danger.disabled.focus,.btn-danger[disabled].focus,fieldset[disabled] .btn-danger.focus,.btn-danger.disabled:active,.btn-danger[disabled]:active,fieldset[disabled] .btn-danger:active,.btn-danger.disabled.active,.btn-danger[disabled].active,fieldset[disabled] .btn-danger.active {  background-color: #d9534f;  border-color: #d43f3a;}.btn-danger .badge {  color: #d9534f;  background-color: #fff;}.btn-link {  font-weight: normal;  color: #337ab7;  border-radius: 0;}.btn-link,.btn-link:active,.btn-link.active,.btn-link[disabled],fieldset[disabled] .btn-link {  background-color: transparent;  -webkit-box-shadow: none;          box-shadow: none;}.btn-link,.btn-link:hover,.btn-link:focus,.btn-link:active {  border-color: transparent;}.btn-link:hover,.btn-link:focus {  color: #23527c;  text-decoration: underline;  background-color: transparent;}.btn-link[disabled]:hover,fieldset[disabled] .btn-link:hover,.btn-link[disabled]:focus,fieldset[disabled] .btn-link:focus {  color: #777;  text-decoration: none;}.btn-lg,.btn-group-lg > .btn {  padding: 10px 16px;  font-size: 18px;  line-height: 1.3333333;  border-radius: 6px;}.btn-sm,.btn-group-sm > .btn {  padding: 5px 10px;  font-size: 12px;  line-height: 1.5;  border-radius: 3px;}.btn-xs,.btn-group-xs > .btn {  padding: 1px 5px;  font-size: 12px;  line-height: 1.5;  border-radius: 3px;}.btn-block {  display: block;  width: 100%;}.btn-block + .btn-block {  margin-top: 5px;}input[type="submit"].btn-block,input[type="reset"].btn-block,input[type="button"].btn-block {  width: 100%;}.fade {  opacity: 0;  -webkit-transition: opacity .15s linear;       -o-transition: opacity .15s linear;          transition: opacity .15s linear;}.fade.in {  opacity: 1;}.collapse {  display: none;}.collapse.in {  display: block;}tr.collapse.in {  display: table-row;}tbody.collapse.in {  display: table-row-group;}.collapsing {  position: relative;  height: 0;  overflow: hidden;  -webkit-transition-timing-function: ease;       -o-transition-timing-function: ease;          transition-timing-function: ease;  -webkit-transition-duration: .35s;       -o-transition-duration: .35s;          transition-duration: .35s;  -webkit-transition-property: height, visibility;       -o-transition-property: height, visibility;          transition-property: height, visibility;}.caret {  display: inline-block;  width: 0;  height: 0;  margin-left: 2px;  vertical-align: middle;  border-top: 4px dashed;  border-top: 4px solid \9;  border-right: 4px solid transparent;  border-left: 4px solid transparent;}.dropup,.dropdown {  position: relative;}.dropdown-toggle:focus {  outline: 0;}.dropdown-menu {  position: absolute;  top: 100%;  left: 0;  z-index: 1000;  display: none;  float: left;  min-width: 160px;  padding: 5px 0;  margin: 2px 0 0;  font-size: 14px;  text-align: left;  list-style: none;  background-color: #fff;  -webkit-background-clip: padding-box;          background-clip: padding-box;  border: 1px solid #ccc;  border: 1px solid rgba(0, 0, 0, .15);  border-radius: 4px;  -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, .175);          box-shadow: 0 6px 12px rgba(0, 0, 0, .175);}.dropdown-menu.pull-right {  right: 0;  left: auto;}.dropdown-menu .divider {  height: 1px;  margin: 9px 0;  overflow: hidden;  background-color: #e5e5e5;}.dropdown-menu > li > a {  display: block;  padding: 3px 20px;  clear: both;  font-weight: normal;  line-height: 1.42857143;  color: #333;  white-space: nowrap;}.dropdown-menu > li > a:hover,.dropdown-menu > li > a:focus {  color: #262626;  text-decoration: none;  background-color: #f5f5f5;}.dropdown-menu > .active > a,.dropdown-menu > .active > a:hover,.dropdown-menu > .active > a:focus {  color: #fff;  text-decoration: none;  background-color: #337ab7;  outline: 0;}.dropdown-menu > .disabled > a,.dropdown-menu > .disabled > a:hover,.dropdown-menu > .disabled > a:focus {  color: #777;}.dropdown-menu > .disabled > a:hover,.dropdown-menu > .disabled > a:focus {  text-decoration: none;  cursor: not-allowed;  background-color: transparent;  background-image: none;  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);}.open > .dropdown-menu {  display: block;}.open > a {  outline: 0;}.dropdown-menu-right {  right: 0;  left: auto;}.dropdown-menu-left {  right: auto;  left: 0;}.dropdown-header {  display: block;  padding: 3px 20px;  font-size: 12px;  line-height: 1.42857143;  color: #777;  white-space: nowrap;}.dropdown-backdrop {  position: fixed;  top: 0;  right: 0;  bottom: 0;  left: 0;  z-index: 990;}.pull-right > .dropdown-menu {  right: 0;  left: auto;}.dropup .caret,.navbar-fixed-bottom .dropdown .caret {  content: "";  border-top: 0;  border-bottom: 4px dashed;  border-bottom: 4px solid \9;}.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu {  top: auto;  bottom: 100%;  margin-bottom: 2px;}@media (min-width: 768px) {  .navbar-right .dropdown-menu {    right: 0;    left: auto;  }  .navbar-right .dropdown-menu-left {    right: auto;    left: 0;  }}.btn-group,.btn-group-vertical {  position: relative;  display: inline-block;  vertical-align: middle;}.btn-group > .btn,.btn-group-vertical > .btn {  position: relative;  float: left;}.btn-group > .btn:hover,.btn-group-vertical > .btn:hover,.btn-group > .btn:focus,.btn-group-vertical > .btn:focus,.btn-group > .btn:active,.btn-group-vertical > .btn:active,.btn-group > .btn.active,.btn-group-vertical > .btn.active {  z-index: 2;}.btn-group .btn + .btn,.btn-group .btn + .btn-group,.btn-group .btn-group + .btn,.btn-group .btn-group + .btn-group {  margin-left: -1px;}.btn-toolbar {  margin-left: -5px;}.btn-toolbar .btn,.btn-toolbar .btn-group,.btn-toolbar .input-group {  float: left;}.btn-toolbar > .btn,.btn-toolbar > .btn-group,.btn-toolbar > .input-group {  margin-left: 5px;}.btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {  border-radius: 0;}.btn-group > .btn:first-child {  margin-left: 0;}.btn-group > .btn:first-child:not(:last-child):not(.dropdown-toggle) {  border-top-right-radius: 0;  border-bottom-right-radius: 0;}.btn-group > .btn:last-child:not(:first-child),.btn-group > .dropdown-toggle:not(:first-child) {  border-top-left-radius: 0;  border-bottom-left-radius: 0;}.btn-group > .btn-group {  float: left;}.btn-group > .btn-group:not(:first-child):not(:last-child) > .btn {  border-radius: 0;}.btn-group > .btn-group:first-child:not(:last-child) > .btn:last-child,.btn-group > .btn-group:first-child:not(:last-child) > .dropdown-toggle {  border-top-right-radius: 0;  border-bottom-right-radius: 0;}.btn-group > .btn-group:last-child:not(:first-child) > .btn:first-child {  border-top-left-radius: 0;  border-bottom-left-radius: 0;}.btn-group .dropdown-toggle:active,.btn-group.open .dropdown-toggle {  outline: 0;}.btn-group > .btn + .dropdown-toggle {  padding-right: 8px;  padding-left: 8px;}.btn-group > .btn-lg + .dropdown-toggle {  padding-right: 12px;  padding-left: 12px;}.btn-group.open .dropdown-toggle {  -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);          box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);}.btn-group.open .dropdown-toggle.btn-link {  -webkit-box-shadow: none;          box-shadow: none;}.btn .caret {  margin-left: 0;}.btn-lg .caret {  border-width: 5px 5px 0;  border-bottom-width: 0;}.dropup .btn-lg .caret {  border-width: 0 5px 5px;}.btn-group-vertical > .btn,.btn-group-vertical > .btn-group,.btn-group-vertical > .btn-group > .btn {  display: block;  float: none;  width: 100%;  max-width: 100%;}.btn-group-vertical > .btn-group > .btn {  float: none;}.btn-group-vertical > .btn + .btn,.btn-group-vertical > .btn + .btn-group,.btn-group-vertical > .btn-group + .btn,.btn-group-vertical > .btn-group + .btn-group {  margin-top: -1px;  margin-left: 0;}.btn-group-vertical > .btn:not(:first-child):not(:last-child) {  border-radius: 0;}.btn-group-vertical > .btn:first-child:not(:last-child) {  border-top-right-radius: 4px;  border-bottom-right-radius: 0;  border-bottom-left-radius: 0;}.btn-group-vertical > .btn:last-child:not(:first-child) {  border-top-left-radius: 0;  border-top-right-radius: 0;  border-bottom-left-radius: 4px;}.btn-group-vertical > .btn-group:not(:first-child):not(:last-child) > .btn {  border-radius: 0;}.btn-group-vertical > .btn-group:first-child:not(:last-child) > .btn:last-child,.btn-group-vertical > .btn-group:first-child:not(:last-child) > .dropdown-toggle {  border-bottom-right-radius: 0;  border-bottom-left-radius: 0;}.btn-group-vertical > .btn-group:last-child:not(:first-child) > .btn:first-child {  border-top-left-radius: 0;  border-top-right-radius: 0;}.btn-group-justified {  display: table;  width: 100%;  table-layout: fixed;  border-collapse: separate;}.btn-group-justified > .btn,.btn-group-justified > .btn-group {  display: table-cell;  float: none;  width: 1%;}.btn-group-justified > .btn-group .btn {  width: 100%;}.btn-group-justified > .btn-group .dropdown-menu {  left: auto;}[data-toggle="buttons"] > .btn input[type="radio"],[data-toggle="buttons"] > .btn-group > .btn input[type="radio"],[data-toggle="buttons"] > .btn input[type="checkbox"],[data-toggle="buttons"] > .btn-group > .btn input[type="checkbox"] {  position: absolute;  clip: rect(0, 0, 0, 0);  pointer-events: none;}.input-group {  position: relative;  display: table;  border-collapse: separate;}.input-group[class*="col-"] {  float: none;  padding-right: 0;  padding-left: 0;}.input-group .form-control {  position: relative;  z-index: 2;  float: left;  width: 100%;  margin-bottom: 0;}.input-group-lg > .form-control,.input-group-lg > .input-group-addon,.input-group-lg > .input-group-btn > .btn {  height: 46px;  padding: 10px 16px;  font-size: 18px;  line-height: 1.3333333;  border-radius: 6px;}select.input-group-lg > .form-control,select.input-group-lg > .input-group-addon,select.input-group-lg > .input-group-btn > .btn {  height: 46px;  line-height: 46px;}textarea.input-group-lg > .form-control,textarea.input-group-lg > .input-group-addon,textarea.input-group-lg > .input-group-btn > .btn,select[multiple].input-group-lg > .form-control,select[multiple].input-group-lg > .input-group-addon,select[multiple].input-group-lg > .input-group-btn > .btn {  height: auto;}.input-group-sm > .form-control,.input-group-sm > .input-group-addon,.input-group-sm > .input-group-btn > .btn {  height: 30px;  padding: 5px 10px;  font-size: 12px;  line-height: 1.5;  border-radius: 3px;}select.input-group-sm > .form-control,select.input-group-sm > .input-group-addon,select.input-group-sm > .input-group-btn > .btn {  height: 30px;  line-height: 30px;}textarea.input-group-sm > .form-control,textarea.input-group-sm > .input-group-addon,textarea.input-group-sm > .input-group-btn > .btn,select[multiple].input-group-sm > .form-control,select[multiple].input-group-sm > .input-group-addon,select[multiple].input-group-sm > .input-group-btn > .btn {  height: auto;}.input-group-addon,.input-group-btn,.input-group .form-control {  display: table-cell;}.input-group-addon:not(:first-child):not(:last-child),.input-group-btn:not(:first-child):not(:last-child),.input-group .form-control:not(:first-child):not(:last-child) {  border-radius: 0;}.input-group-addon,.input-group-btn {  width: 1%;  white-space: nowrap;  vertical-align: middle;}.input-group-addon {  padding: 6px 12px;  font-size: 14px;  font-weight: normal;  line-height: 1;  color: #555;  text-align: center;  background-color: #eee;  border: 1px solid #ccc;  border-radius: 4px;}.input-group-addon.input-sm {  padding: 5px 10px;  font-size: 12px;  border-radius: 3px;}.input-group-addon.input-lg {  padding: 10px 16px;  font-size: 18px;  border-radius: 6px;}.input-group-addon input[type="radio"],.input-group-addon input[type="checkbox"] {  margin-top: 0;}.input-group .form-control:first-child,.input-group-addon:first-child,.input-group-btn:first-child > .btn,.input-group-btn:first-child > .btn-group > .btn,.input-group-btn:first-child > .dropdown-toggle,.input-group-btn:last-child > .btn:not(:last-child):not(.dropdown-toggle),.input-group-btn:last-child > .btn-group:not(:last-child) > .btn {  border-top-right-radius: 0;  border-bottom-right-radius: 0;}.input-group-addon:first-child {  border-right: 0;}.input-group .form-control:last-child,.input-group-addon:last-child,.input-group-btn:last-child > .btn,.input-group-btn:last-child > .btn-group > .btn,.input-group-btn:last-child > .dropdown-toggle,.input-group-btn:first-child > .btn:not(:first-child),.input-group-btn:first-child > .btn-group:not(:first-child) > .btn {  border-top-left-radius: 0;  border-bottom-left-radius: 0;}.input-group-addon:last-child {  border-left: 0;}.input-group-btn {  position: relative;  font-size: 0;  white-space: nowrap;}.input-group-btn > .btn {  position: relative;}.input-group-btn > .btn + .btn {  margin-left: -1px;}.input-group-btn > .btn:hover,.input-group-btn > .btn:focus,.input-group-btn > .btn:active {  z-index: 2;}.input-group-btn:first-child > .btn,.input-group-btn:first-child > .btn-group {  margin-right: -1px;}.input-group-btn:last-child > .btn,.input-group-btn:last-child > .btn-group {  z-index: 2;  margin-left: -1px;}.nav {  padding-left: 0;  margin-bottom: 0;  list-style: none;}.nav > li {  position: relative;  display: block;}.nav > li > a {  position: relative;  display: block;  padding: 10px 15px;}.nav > li > a:hover,.nav > li > a:focus {  text-decoration: none;  background-color: #eee;}.nav > li.disabled > a {  color: #777;}.nav > li.disabled > a:hover,.nav > li.disabled > a:focus {  color: #777;  text-decoration: none;  cursor: not-allowed;  background-color: transparent;}.nav .open > a,.nav .open > a:hover,.nav .open > a:focus {  background-color: #eee;  border-color: #337ab7;}.nav .nav-divider {  height: 1px;  margin: 9px 0;  overflow: hidden;  background-color: #e5e5e5;}.nav > li > a > img {  max-width: none;}.nav-tabs {  border-bottom: 1px solid #ddd;}.nav-tabs > li {  float: left;  margin-bottom: -1px;}.nav-tabs > li > a {  margin-right: 2px;  line-height: 1.42857143;  border: 1px solid transparent;  border-radius: 4px 4px 0 0;}.nav-tabs > li > a:hover {  border-color: #eee #eee #ddd;}.nav-tabs > li.active > a,.nav-tabs > li.active > a:hover,.nav-tabs > li.active > a:focus {  color: #555;  cursor: default;  background-color: #fff;  border: 1px solid #ddd;  border-bottom-color: transparent;}.nav-tabs.nav-justified {  width: 100%;  border-bottom: 0;}.nav-tabs.nav-justified > li {  float: none;}.nav-tabs.nav-justified > li > a {  margin-bottom: 5px;  text-align: center;}.nav-tabs.nav-justified > .dropdown .dropdown-menu {  top: auto;  left: auto;}@media (min-width: 768px) {  .nav-tabs.nav-justified > li {    display: table-cell;    width: 1%;  }  .nav-tabs.nav-justified > li > a {    margin-bottom: 0;  }}.nav-tabs.nav-justified > li > a {  margin-right: 0;  border-radius: 4px;}.nav-tabs.nav-justified > .active > a,.nav-tabs.nav-justified > .active > a:hover,.nav-tabs.nav-justified > .active > a:focus {  border: 1px solid #ddd;}@media (min-width: 768px) {  .nav-tabs.nav-justified > li > a {    border-bottom: 1px solid #ddd;    border-radius: 4px 4px 0 0;  }  .nav-tabs.nav-justified > .active > a,  .nav-tabs.nav-justified > .active > a:hover,  .nav-tabs.nav-justified > .active > a:focus {    border-bottom-color: #fff;  }}.nav-pills > li {  float: left;}.nav-pills > li > a {  border-radius: 4px;}.nav-pills > li + li {  margin-left: 2px;}.nav-pills > li.active > a,.nav-pills > li.active > a:hover,.nav-pills > li.active > a:focus {  color: #fff;  background-color: #337ab7;}.nav-stacked > li {  float: none;}.nav-stacked > li + li {  margin-top: 2px;  margin-left: 0;}.nav-justified {  width: 100%;}.nav-justified > li {  float: none;}.nav-justified > li > a {  margin-bottom: 5px;  text-align: center;}.nav-justified > .dropdown .dropdown-menu {  top: auto;  left: auto;}@media (min-width: 768px) {  .nav-justified > li {    display: table-cell;    width: 1%;  }  .nav-justified > li > a {    margin-bottom: 0;  }}.nav-tabs-justified {  border-bottom: 0;}.nav-tabs-justified > li > a {  margin-right: 0;  border-radius: 4px;}.nav-tabs-justified > .active > a,.nav-tabs-justified > .active > a:hover,.nav-tabs-justified > .active > a:focus {  border: 1px solid #ddd;}@media (min-width: 768px) {  .nav-tabs-justified > li > a {    border-bottom: 1px solid #ddd;    border-radius: 4px 4px 0 0;  }  .nav-tabs-justified > .active > a,  .nav-tabs-justified > .active > a:hover,  .nav-tabs-justified > .active > a:focus {    border-bottom-color: #fff;  }}.tab-content > .tab-pane {  display: none;}.tab-content > .active {  display: block;}.nav-tabs .dropdown-menu {  margin-top: -1px;  border-top-left-radius: 0;  border-top-right-radius: 0;}.navbar {  position: relative;  min-height: 50px;  margin-bottom: 20px;  border: 1px solid transparent;}@media (min-width: 768px) {  .navbar {    border-radius: 4px;  }}@media (min-width: 768px) {  .navbar-header {    float: left;  }}.navbar-collapse {  padding-right: 15px;  padding-left: 15px;  overflow-x: visible;  -webkit-overflow-scrolling: touch;  border-top: 1px solid transparent;  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1);          box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1);}.navbar-collapse.in {  overflow-y: auto;}@media (min-width: 768px) {  .navbar-collapse {    width: auto;    border-top: 0;    -webkit-box-shadow: none;            box-shadow: none;  }  .navbar-collapse.collapse {    display: block !important;    height: auto !important;    padding-bottom: 0;    overflow: visible !important;  }  .navbar-collapse.in {    overflow-y: visible;  }  .navbar-fixed-top .navbar-collapse,  .navbar-static-top .navbar-collapse,  .navbar-fixed-bottom .navbar-collapse {    padding-right: 0;    padding-left: 0;  }}.navbar-fixed-top .navbar-collapse,.navbar-fixed-bottom .navbar-collapse {  max-height: 340px;}@media (max-device-width: 480px) and (orientation: landscape) {  .navbar-fixed-top .navbar-collapse,  .navbar-fixed-bottom .navbar-collapse {    max-height: 200px;  }}.container > .navbar-header,.container-fluid > .navbar-header,.container > .navbar-collapse,.container-fluid > .navbar-collapse {  margin-right: -15px;  margin-left: -15px;}@media (min-width: 768px) {  .container > .navbar-header,  .container-fluid > .navbar-header,  .container > .navbar-collapse,  .container-fluid > .navbar-collapse {    margin-right: 0;    margin-left: 0;  }}.navbar-static-top {  z-index: 1000;  border-width: 0 0 1px;}@media (min-width: 768px) {  .navbar-static-top {    border-radius: 0;  }}.navbar-fixed-top,.navbar-fixed-bottom {  position: fixed;  right: 0;  left: 0;  z-index: 1030;}@media (min-width: 768px) {  .navbar-fixed-top,  .navbar-fixed-bottom {    border-radius: 0;  }}.navbar-fixed-top {  top: 0;  border-width: 0 0 1px;}.navbar-fixed-bottom {  bottom: 0;  margin-bottom: 0;  border-width: 1px 0 0;}.navbar-brand {  float: left;  height: 50px;  padding: 15px 15px;  font-size: 18px;  line-height: 20px;}.navbar-brand:hover,.navbar-brand:focus {  text-decoration: none;}.navbar-brand > img {  display: block;}@media (min-width: 768px) {  .navbar > .container .navbar-brand,  .navbar > .container-fluid .navbar-brand {    margin-left: -15px;  }}.navbar-toggle {  position: relative;  float: right;  padding: 9px 10px;  margin-top: 8px;  margin-right: 15px;  margin-bottom: 8px;  background-color: transparent;  background-image: none;  border: 1px solid transparent;  border-radius: 4px;}.navbar-toggle:focus {  outline: 0;}.navbar-toggle .icon-bar {  display: block;  width: 22px;  height: 2px;  border-radius: 1px;}.navbar-toggle .icon-bar + .icon-bar {  margin-top: 4px;}@media (min-width: 768px) {  .navbar-toggle {    display: none;  }}.navbar-nav {  margin: 7.5px -15px;}.navbar-nav > li > a {  padding-top: 10px;  padding-bottom: 10px;  line-height: 20px;}@media (max-width: 767px) {  .navbar-nav .open .dropdown-menu {    position: static;    float: none;    width: auto;    margin-top: 0;    background-color: transparent;    border: 0;    -webkit-box-shadow: none;            box-shadow: none;  }  .navbar-nav .open .dropdown-menu > li > a,  .navbar-nav .open .dropdown-menu .dropdown-header {    padding: 5px 15px 5px 25px;  }  .navbar-nav .open .dropdown-menu > li > a {    line-height: 20px;  }  .navbar-nav .open .dropdown-menu > li > a:hover,  .navbar-nav .open .dropdown-menu > li > a:focus {    background-image: none;  }}@media (min-width: 768px) {  .navbar-nav {    float: left;    margin: 0;  }  .navbar-nav > li {    float: left;  }  .navbar-nav > li > a {    padding-top: 15px;    padding-bottom: 15px;  }}.navbar-form {  padding: 10px 15px;  margin-top: 8px;  margin-right: -15px;  margin-bottom: 8px;  margin-left: -15px;  border-top: 1px solid transparent;  border-bottom: 1px solid transparent;  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1), 0 1px 0 rgba(255, 255, 255, .1);          box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1), 0 1px 0 rgba(255, 255, 255, .1);}@media (min-width: 768px) {  .navbar-form .form-group {    display: inline-block;    margin-bottom: 0;    vertical-align: middle;  }  .navbar-form .form-control {    display: inline-block;    width: auto;    vertical-align: middle;  }  .navbar-form .form-control-static {    display: inline-block;  }  .navbar-form .input-group {    display: inline-table;    vertical-align: middle;  }  .navbar-form .input-group .input-group-addon,  .navbar-form .input-group .input-group-btn,  .navbar-form .input-group .form-control {    width: auto;  }  .navbar-form .input-group > .form-control {    width: 100%;  }  .navbar-form .control-label {    margin-bottom: 0;    vertical-align: middle;  }  .navbar-form .radio,  .navbar-form .checkbox {    display: inline-block;    margin-top: 0;    margin-bottom: 0;    vertical-align: middle;  }  .navbar-form .radio label,  .navbar-form .checkbox label {    padding-left: 0;  }  .navbar-form .radio input[type="radio"],  .navbar-form .checkbox input[type="checkbox"] {    position: relative;    margin-left: 0;  }  .navbar-form .has-feedback .form-control-feedback {    top: 0;  }}@media (max-width: 767px) {  .navbar-form .form-group {    margin-bottom: 5px;  }  .navbar-form .form-group:last-child {    margin-bottom: 0;  }}@media (min-width: 768px) {  .navbar-form {    width: auto;    padding-top: 0;    padding-bottom: 0;    margin-right: 0;    margin-left: 0;    border: 0;    -webkit-box-shadow: none;            box-shadow: none;  }}.navbar-nav > li > .dropdown-menu {  margin-top: 0;  border-top-left-radius: 0;  border-top-right-radius: 0;}.navbar-fixed-bottom .navbar-nav > li > .dropdown-menu {  margin-bottom: 0;  border-top-left-radius: 4px;  border-top-right-radius: 4px;  border-bottom-right-radius: 0;  border-bottom-left-radius: 0;}.navbar-btn {  margin-top: 8px;  margin-bottom: 8px;}.navbar-btn.btn-sm {  margin-top: 10px;  margin-bottom: 10px;}.navbar-btn.btn-xs {  margin-top: 14px;  margin-bottom: 14px;}.navbar-text {  margin-top: 15px;  margin-bottom: 15px;}@media (min-width: 768px) {  .navbar-text {    float: left;    margin-right: 15px;    margin-left: 15px;  }}@media (min-width: 768px) {  .navbar-left {    float: left !important;  }  .navbar-right {    float: right !important;    margin-right: -15px;  }  .navbar-right ~ .navbar-right {    margin-right: 0;  }}.navbar-default {  background-color: #f8f8f8;  border-color: #e7e7e7;}.navbar-default .navbar-brand {  color: #777;}.navbar-default .navbar-brand:hover,.navbar-default .navbar-brand:focus {  color: #5e5e5e;  background-color: transparent;}.navbar-default .navbar-text {  color: #777;}.navbar-default .navbar-nav > li > a {  color: #777;}.navbar-default .navbar-nav > li > a:hover,.navbar-default .navbar-nav > li > a:focus {  color: #333;  background-color: transparent;}.navbar-default .navbar-nav > .active > a,.navbar-default .navbar-nav > .active > a:hover,.navbar-default .navbar-nav > .active > a:focus {  color: #555;  background-color: #e7e7e7;}.navbar-default .navbar-nav > .disabled > a,.navbar-default .navbar-nav > .disabled > a:hover,.navbar-default .navbar-nav > .disabled > a:focus {  color: #ccc;  background-color: transparent;}.navbar-default .navbar-toggle {  border-color: #ddd;}.navbar-default .navbar-toggle:hover,.navbar-default .navbar-toggle:focus {  background-color: #ddd;}.navbar-default .navbar-toggle .icon-bar {  background-color: #888;}.navbar-default .navbar-collapse,.navbar-default .navbar-form {  border-color: #e7e7e7;}.navbar-default .navbar-nav > .open > a,.navbar-default .navbar-nav > .open > a:hover,.navbar-default .navbar-nav > .open > a:focus {  color: #555;  background-color: #e7e7e7;}@media (max-width: 767px) {  .navbar-default .navbar-nav .open .dropdown-menu > li > a {    color: #777;  }  .navbar-default .navbar-nav .open .dropdown-menu > li > a:hover,  .navbar-default .navbar-nav .open .dropdown-menu > li > a:focus {    color: #333;    background-color: transparent;  }  .navbar-default .navbar-nav .open .dropdown-menu > .active > a,  .navbar-default .navbar-nav .open .dropdown-menu > .active > a:hover,  .navbar-default .navbar-nav .open .dropdown-menu > .active > a:focus {    color: #555;    background-color: #e7e7e7;  }  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a,  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:hover,  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:focus {    color: #ccc;    background-color: transparent;  }}.navbar-default .navbar-link {  color: #777;}.navbar-default .navbar-link:hover {  color: #333;}.navbar-default .btn-link {  color: #777;}.navbar-default .btn-link:hover,.navbar-default .btn-link:focus {  color: #333;}.navbar-default .btn-link[disabled]:hover,fieldset[disabled] .navbar-default .btn-link:hover,.navbar-default .btn-link[disabled]:focus,fieldset[disabled] .navbar-default .btn-link:focus {  color: #ccc;}.navbar-inverse {  background-color: #222;  border-color: #080808;}.navbar-inverse .navbar-brand {  color: #9d9d9d;}.navbar-inverse .navbar-brand:hover,.navbar-inverse .navbar-brand:focus {  color: #fff;  background-color: transparent;}.navbar-inverse .navbar-text {  color: #9d9d9d;}.navbar-inverse .navbar-nav > li > a {  color: #9d9d9d;}.navbar-inverse .navbar-nav > li > a:hover,.navbar-inverse .navbar-nav > li > a:focus {  color: #fff;  background-color: transparent;}.navbar-inverse .navbar-nav > .active > a,.navbar-inverse .navbar-nav > .active > a:hover,.navbar-inverse .navbar-nav > .active > a:focus {  color: #fff;  background-color: #080808;}.navbar-inverse .navbar-nav > .disabled > a,.navbar-inverse .navbar-nav > .disabled > a:hover,.navbar-inverse .navbar-nav > .disabled > a:focus {  color: #444;  background-color: transparent;}.navbar-inverse .navbar-toggle {  border-color: #333;}.navbar-inverse .navbar-toggle:hover,.navbar-inverse .navbar-toggle:focus {  background-color: #333;}.navbar-inverse .navbar-toggle .icon-bar {  background-color: #fff;}.navbar-inverse .navbar-collapse,.navbar-inverse .navbar-form {  border-color: #101010;}.navbar-inverse .navbar-nav > .open > a,.navbar-inverse .navbar-nav > .open > a:hover,.navbar-inverse .navbar-nav > .open > a:focus {  color: #fff;  background-color: #080808;}@media (max-width: 767px) {  .navbar-inverse .navbar-nav .open .dropdown-menu > .dropdown-header {    border-color: #080808;  }  .navbar-inverse .navbar-nav .open .dropdown-menu .divider {    background-color: #080808;  }  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a {    color: #9d9d9d;  }  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:hover,  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:focus {    color: #fff;    background-color: transparent;  }  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a,  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:hover,  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:focus {    color: #fff;    background-color: #080808;  }  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a,  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:hover,  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:focus {    color: #444;    background-color: transparent;  }}.navbar-inverse .navbar-link {  color: #9d9d9d;}.navbar-inverse .navbar-link:hover {  color: #fff;}.navbar-inverse .btn-link {  color: #9d9d9d;}.navbar-inverse .btn-link:hover,.navbar-inverse .btn-link:focus {  color: #fff;}.navbar-inverse .btn-link[disabled]:hover,fieldset[disabled] .navbar-inverse .btn-link:hover,.navbar-inverse .btn-link[disabled]:focus,fieldset[disabled] .navbar-inverse .btn-link:focus {  color: #444;}.breadcrumb {  padding: 8px 15px;  margin-bottom: 20px;  list-style: none;  background-color: #f5f5f5;  border-radius: 4px;}.breadcrumb > li {  display: inline-block;}.breadcrumb > li + li:before {  padding: 0 5px;  color: #ccc;  content: "/\00a0";}.breadcrumb > .active {  color: #777;}.pagination {  display: inline-block;  padding-left: 0;  margin: 20px 0;  border-radius: 4px;}.pagination > li {  display: inline;}.pagination > li > a,.pagination > li > span {  position: relative;  float: left;  padding: 6px 12px;  margin-left: -1px;  line-height: 1.42857143;  color: #337ab7;  text-decoration: none;  background-color: #fff;  border: 1px solid #ddd;}.pagination > li:first-child > a,.pagination > li:first-child > span {  margin-left: 0;  border-top-left-radius: 4px;  border-bottom-left-radius: 4px;}.pagination > li:last-child > a,.pagination > li:last-child > span {  border-top-right-radius: 4px;  border-bottom-right-radius: 4px;}.pagination > li > a:hover,.pagination > li > span:hover,.pagination > li > a:focus,.pagination > li > span:focus {  z-index: 3;  color: #23527c;  background-color: #eee;  border-color: #ddd;}.pagination > .active > a,.pagination > .active > span,.pagination > .active > a:hover,.pagination > .active > span:hover,.pagination > .active > a:focus,.pagination > .active > span:focus {  z-index: 2;  color: #fff;  cursor: default;  background-color: #337ab7;  border-color: #337ab7;}.pagination > .disabled > span,.pagination > .disabled > span:hover,.pagination > .disabled > span:focus,.pagination > .disabled > a,.pagination > .disabled > a:hover,.pagination > .disabled > a:focus {  color: #777;  cursor: not-allowed;  background-color: #fff;  border-color: #ddd;}.pagination-lg > li > a,.pagination-lg > li > span {  padding: 10px 16px;  font-size: 18px;  line-height: 1.3333333;}.pagination-lg > li:first-child > a,.pagination-lg > li:first-child > span {  border-top-left-radius: 6px;  border-bottom-left-radius: 6px;}.pagination-lg > li:last-child > a,.pagination-lg > li:last-child > span {  border-top-right-radius: 6px;  border-bottom-right-radius: 6px;}.pagination-sm > li > a,.pagination-sm > li > span {  padding: 5px 10px;  font-size: 12px;  line-height: 1.5;}.pagination-sm > li:first-child > a,.pagination-sm > li:first-child > span {  border-top-left-radius: 3px;  border-bottom-left-radius: 3px;}.pagination-sm > li:last-child > a,.pagination-sm > li:last-child > span {  border-top-right-radius: 3px;  border-bottom-right-radius: 3px;}.pager {  padding-left: 0;  margin: 20px 0;  text-align: center;  list-style: none;}.pager li {  display: inline;}.pager li > a,.pager li > span {  display: inline-block;  padding: 5px 14px;  background-color: #fff;  border: 1px solid #ddd;  border-radius: 15px;}.pager li > a:hover,.pager li > a:focus {  text-decoration: none;  background-color: #eee;}.pager .next > a,.pager .next > span {  float: right;}.pager .previous > a,.pager .previous > span {  float: left;}.pager .disabled > a,.pager .disabled > a:hover,.pager .disabled > a:focus,.pager .disabled > span {  color: #777;  cursor: not-allowed;  background-color: #fff;}.label {  display: inline;  padding: .2em .6em .3em;  font-size: 75%;  font-weight: bold;  line-height: 1;  color: #fff;  text-align: center;  white-space: nowrap;  vertical-align: baseline;  border-radius: .25em;}a.label:hover,a.label:focus {  color: #fff;  text-decoration: none;  cursor: pointer;}.label:empty {  display: none;}.btn .label {  position: relative;  top: -1px;}.label-default {  background-color: #777;}.label-default[href]:hover,.label-default[href]:focus {  background-color: #5e5e5e;}.label-primary {  background-color: #337ab7;}.label-primary[href]:hover,.label-primary[href]:focus {  background-color: #286090;}.label-success {  background-color: #5cb85c;}.label-success[href]:hover,.label-success[href]:focus {  background-color: #449d44;}.label-info {  background-color: #5bc0de;}.label-info[href]:hover,.label-info[href]:focus {  background-color: #31b0d5;}.label-warning {  background-color: #f0ad4e;}.label-warning[href]:hover,.label-warning[href]:focus {  background-color: #ec971f;}.label-danger {  background-color: #d9534f;}.label-danger[href]:hover,.label-danger[href]:focus {  background-color: #c9302c;}.badge {  display: inline-block;  min-width: 10px;  padding: 3px 7px;  font-size: 12px;  font-weight: bold;  line-height: 1;  color: #fff;  text-align: center;  white-space: nowrap;  vertical-align: middle;  background-color: #777;  border-radius: 10px;}.badge:empty {  display: none;}.btn .badge {  position: relative;  top: -1px;}.btn-xs .badge,.btn-group-xs > .btn .badge {  top: 0;  padding: 1px 5px;}a.badge:hover,a.badge:focus {  color: #fff;  text-decoration: none;  cursor: pointer;}.list-group-item.active > .badge,.nav-pills > .active > a > .badge {  color: #337ab7;  background-color: #fff;}.list-group-item > .badge {  float: right;}.list-group-item > .badge + .badge {  margin-right: 5px;}.nav-pills > li > a > .badge {  margin-left: 3px;}.jumbotron {  padding-top: 30px;  padding-bottom: 30px;  margin-bottom: 30px;  color: inherit;  background-color: #eee;}.jumbotron h1,.jumbotron .h1 {  color: inherit;}.jumbotron p {  margin-bottom: 15px;  font-size: 21px;  font-weight: 200;}.jumbotron > hr {  border-top-color: #d5d5d5;}.container .jumbotron,.container-fluid .jumbotron {  border-radius: 6px;}.jumbotron .container {  max-width: 100%;}@media screen and (min-width: 768px) {  .jumbotron {    padding-top: 48px;    padding-bottom: 48px;  }  .container .jumbotron,  .container-fluid .jumbotron {    padding-right: 60px;    padding-left: 60px;  }  .jumbotron h1,  .jumbotron .h1 {    font-size: 63px;  }}.thumbnail {  display: block;  padding: 4px;  margin-bottom: 20px;  line-height: 1.42857143;  background-color: #fff;  border: 1px solid #ddd;  border-radius: 4px;  -webkit-transition: border .2s ease-in-out;       -o-transition: border .2s ease-in-out;          transition: border .2s ease-in-out;}.thumbnail > img,.thumbnail a > img {  margin-right: auto;  margin-left: auto;}a.thumbnail:hover,a.thumbnail:focus,a.thumbnail.active {  border-color: #337ab7;}.thumbnail .caption {  padding: 9px;  color: #333;}.alert {  padding: 15px;  margin-bottom: 20px;  border: 1px solid transparent;  border-radius: 4px;}.alert h4 {  margin-top: 0;  color: inherit;}.alert .alert-link {  font-weight: bold;}.alert > p,.alert > ul {  margin-bottom: 0;}.alert > p + p {  margin-top: 5px;}.alert-dismissable,.alert-dismissible {  padding-right: 35px;}.alert-dismissable .close,.alert-dismissible .close {  position: relative;  top: -2px;  right: -21px;  color: inherit;}.alert-success {  color: #3c763d;  background-color: #dff0d8;  border-color: #d6e9c6;}.alert-success hr {  border-top-color: #c9e2b3;}.alert-success .alert-link {  color: #2b542c;}.alert-info {  color: #31708f;  background-color: #d9edf7;  border-color: #bce8f1;}.alert-info hr {  border-top-color: #a6e1ec;}.alert-info .alert-link {  color: #245269;}.alert-warning {  color: #8a6d3b;  background-color: #fcf8e3;  border-color: #faebcc;}.alert-warning hr {  border-top-color: #f7e1b5;}.alert-warning .alert-link {  color: #66512c;}.alert-danger {  color: #a94442;  background-color: #f2dede;  border-color: #ebccd1;}.alert-danger hr {  border-top-color: #e4b9c0;}.alert-danger .alert-link {  color: #843534;}@-webkit-keyframes progress-bar-stripes {  from {    background-position: 40px 0;  }  to {    background-position: 0 0;  }}@-o-keyframes progress-bar-stripes {  from {    background-position: 40px 0;  }  to {    background-position: 0 0;  }}@keyframes progress-bar-stripes {  from {    background-position: 40px 0;  }  to {    background-position: 0 0;  }}.progress {  height: 20px;  margin-bottom: 20px;  overflow: hidden;  background-color: #f5f5f5;  border-radius: 4px;  -webkit-box-shadow: inset 0 1px 2px rgba(0, 0, 0, .1);          box-shadow: inset 0 1px 2px rgba(0, 0, 0, .1);}.progress-bar {  float: left;  width: 0;  height: 100%;  font-size: 12px;  line-height: 20px;  color: #fff;  text-align: center;  background-color: #337ab7;  -webkit-box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .15);          box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .15);  -webkit-transition: width .6s ease;       -o-transition: width .6s ease;          transition: width .6s ease;}.progress-striped .progress-bar,.progress-bar-striped {  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  -webkit-background-size: 40px 40px;          background-size: 40px 40px;}.progress.active .progress-bar,.progress-bar.active {  -webkit-animation: progress-bar-stripes 2s linear infinite;       -o-animation: progress-bar-stripes 2s linear infinite;          animation: progress-bar-stripes 2s linear infinite;}.progress-bar-success {  background-color: #5cb85c;}.progress-striped .progress-bar-success {  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);}.progress-bar-info {  background-color: #5bc0de;}.progress-striped .progress-bar-info {  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);}.progress-bar-warning {  background-color: #f0ad4e;}.progress-striped .progress-bar-warning {  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);}.progress-bar-danger {  background-color: #d9534f;}.progress-striped .progress-bar-danger {  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);}.media {  margin-top: 15px;}.media:first-child {  margin-top: 0;}.media,.media-body {  overflow: hidden;  zoom: 1;}.media-body {  width: 10000px;}.media-object {  display: block;}.media-object.img-thumbnail {  max-width: none;}.media-right,.media > .pull-right {  padding-left: 10px;}.media-left,.media > .pull-left {  padding-right: 10px;}.media-left,.media-right,.media-body {  display: table-cell;  vertical-align: top;}.media-middle {  vertical-align: middle;}.media-bottom {  vertical-align: bottom;}.media-heading {  margin-top: 0;  margin-bottom: 5px;}.media-list {  padding-left: 0;  list-style: none;}.list-group {  padding-left: 0;  margin-bottom: 20px;}.list-group-item {  position: relative;  display: block;  padding: 10px 15px;  margin-bottom: -1px;  background-color: #fff;  border: 1px solid #ddd;}.list-group-item:first-child {  border-top-left-radius: 4px;  border-top-right-radius: 4px;}.list-group-item:last-child {  margin-bottom: 0;  border-bottom-right-radius: 4px;  border-bottom-left-radius: 4px;}a.list-group-item,button.list-group-item {  color: #555;}a.list-group-item .list-group-item-heading,button.list-group-item .list-group-item-heading {  color: #333;}a.list-group-item:hover,button.list-group-item:hover,a.list-group-item:focus,button.list-group-item:focus {  color: #555;  text-decoration: none;  background-color: #f5f5f5;}button.list-group-item {  width: 100%;  text-align: left;}.list-group-item.disabled,.list-group-item.disabled:hover,.list-group-item.disabled:focus {  color: #777;  cursor: not-allowed;  background-color: #eee;}.list-group-item.disabled .list-group-item-heading,.list-group-item.disabled:hover .list-group-item-heading,.list-group-item.disabled:focus .list-group-item-heading {  color: inherit;}.list-group-item.disabled .list-group-item-text,.list-group-item.disabled:hover .list-group-item-text,.list-group-item.disabled:focus .list-group-item-text {  color: #777;}.list-group-item.active,.list-group-item.active:hover,.list-group-item.active:focus {  z-index: 2;  color: #fff;  background-color: #337ab7;  border-color: #337ab7;}.list-group-item.active .list-group-item-heading,.list-group-item.active:hover .list-group-item-heading,.list-group-item.active:focus .list-group-item-heading,.list-group-item.active .list-group-item-heading > small,.list-group-item.active:hover .list-group-item-heading > small,.list-group-item.active:focus .list-group-item-heading > small,.list-group-item.active .list-group-item-heading > .small,.list-group-item.active:hover .list-group-item-heading > .small,.list-group-item.active:focus .list-group-item-heading > .small {  color: inherit;}.list-group-item.active .list-group-item-text,.list-group-item.active:hover .list-group-item-text,.list-group-item.active:focus .list-group-item-text {  color: #c7ddef;}.list-group-item-success {  color: #3c763d;  background-color: #dff0d8;}a.list-group-item-success,button.list-group-item-success {  color: #3c763d;}a.list-group-item-success .list-group-item-heading,button.list-group-item-success .list-group-item-heading {  color: inherit;}a.list-group-item-success:hover,button.list-group-item-success:hover,a.list-group-item-success:focus,button.list-group-item-success:focus {  color: #3c763d;  background-color: #d0e9c6;}a.list-group-item-success.active,button.list-group-item-success.active,a.list-group-item-success.active:hover,button.list-group-item-success.active:hover,a.list-group-item-success.active:focus,button.list-group-item-success.active:focus {  color: #fff;  background-color: #3c763d;  border-color: #3c763d;}.list-group-item-info {  color: #31708f;  background-color: #d9edf7;}a.list-group-item-info,button.list-group-item-info {  color: #31708f;}a.list-group-item-info .list-group-item-heading,button.list-group-item-info .list-group-item-heading {  color: inherit;}a.list-group-item-info:hover,button.list-group-item-info:hover,a.list-group-item-info:focus,button.list-group-item-info:focus {  color: #31708f;  background-color: #c4e3f3;}a.list-group-item-info.active,button.list-group-item-info.active,a.list-group-item-info.active:hover,button.list-group-item-info.active:hover,a.list-group-item-info.active:focus,button.list-group-item-info.active:focus {  color: #fff;  background-color: #31708f;  border-color: #31708f;}.list-group-item-warning {  color: #8a6d3b;  background-color: #fcf8e3;}a.list-group-item-warning,button.list-group-item-warning {  color: #8a6d3b;}a.list-group-item-warning .list-group-item-heading,button.list-group-item-warning .list-group-item-heading {  color: inherit;}a.list-group-item-warning:hover,button.list-group-item-warning:hover,a.list-group-item-warning:focus,button.list-group-item-warning:focus {  color: #8a6d3b;  background-color: #faf2cc;}a.list-group-item-warning.active,button.list-group-item-warning.active,a.list-group-item-warning.active:hover,button.list-group-item-warning.active:hover,a.list-group-item-warning.active:focus,button.list-group-item-warning.active:focus {  color: #fff;  background-color: #8a6d3b;  border-color: #8a6d3b;}.list-group-item-danger {  color: #a94442;  background-color: #f2dede;}a.list-group-item-danger,button.list-group-item-danger {  color: #a94442;}a.list-group-item-danger .list-group-item-heading,button.list-group-item-danger .list-group-item-heading {  color: inherit;}a.list-group-item-danger:hover,button.list-group-item-danger:hover,a.list-group-item-danger:focus,button.list-group-item-danger:focus {  color: #a94442;  background-color: #ebcccc;}a.list-group-item-danger.active,button.list-group-item-danger.active,a.list-group-item-danger.active:hover,button.list-group-item-danger.active:hover,a.list-group-item-danger.active:focus,button.list-group-item-danger.active:focus {  color: #fff;  background-color: #a94442;  border-color: #a94442;}.list-group-item-heading {  margin-top: 0;  margin-bottom: 5px;}.list-group-item-text {  margin-bottom: 0;  line-height: 1.3;}.panel {  margin-bottom: 20px;  background-color: #fff;  border: 1px solid transparent;  border-radius: 4px;  -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, .05);          box-shadow: 0 1px 1px rgba(0, 0, 0, .05);}.panel-body {  padding: 15px;}.panel-heading {  padding: 10px 15px;  border-bottom: 1px solid transparent;  border-top-left-radius: 3px;  border-top-right-radius: 3px;}.panel-heading > .dropdown .dropdown-toggle {  color: inherit;}.panel-title {  margin-top: 0;  margin-bottom: 0;  font-size: 16px;  color: inherit;}.panel-title > a,.panel-title > small,.panel-title > .small,.panel-title > small > a,.panel-title > .small > a {  color: inherit;}.panel-footer {  padding: 10px 15px;  background-color: #f5f5f5;  border-top: 1px solid #ddd;  border-bottom-right-radius: 3px;  border-bottom-left-radius: 3px;}.panel > .list-group,.panel > .panel-collapse > .list-group {  margin-bottom: 0;}.panel > .list-group .list-group-item,.panel > .panel-collapse > .list-group .list-group-item {  border-width: 1px 0;  border-radius: 0;}.panel > .list-group:first-child .list-group-item:first-child,.panel > .panel-collapse > .list-group:first-child .list-group-item:first-child {  border-top: 0;  border-top-left-radius: 3px;  border-top-right-radius: 3px;}.panel > .list-group:last-child .list-group-item:last-child,.panel > .panel-collapse > .list-group:last-child .list-group-item:last-child {  border-bottom: 0;  border-bottom-right-radius: 3px;  border-bottom-left-radius: 3px;}.panel > .panel-heading + .panel-collapse > .list-group .list-group-item:first-child {  border-top-left-radius: 0;  border-top-right-radius: 0;}.panel-heading + .list-group .list-group-item:first-child {  border-top-width: 0;}.list-group + .panel-footer {  border-top-width: 0;}.panel > .table,.panel > .table-responsive > .table,.panel > .panel-collapse > .table {  margin-bottom: 0;}.panel > .table caption,.panel > .table-responsive > .table caption,.panel > .panel-collapse > .table caption {  padding-right: 15px;  padding-left: 15px;}.panel > .table:first-child,.panel > .table-responsive:first-child > .table:first-child {  border-top-left-radius: 3px;  border-top-right-radius: 3px;}.panel > .table:first-child > thead:first-child > tr:first-child,.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child,.panel > .table:first-child > tbody:first-child > tr:first-child,.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child {  border-top-left-radius: 3px;  border-top-right-radius: 3px;}.panel > .table:first-child > thead:first-child > tr:first-child td:first-child,.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:first-child,.panel > .table:first-child > tbody:first-child > tr:first-child td:first-child,.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:first-child,.panel > .table:first-child > thead:first-child > tr:first-child th:first-child,.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:first-child,.panel > .table:first-child > tbody:first-child > tr:first-child th:first-child,.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:first-child {  border-top-left-radius: 3px;}.panel > .table:first-child > thead:first-child > tr:first-child td:last-child,.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:last-child,.panel > .table:first-child > tbody:first-child > tr:first-child td:last-child,.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:last-child,.panel > .table:first-child > thead:first-child > tr:first-child th:last-child,.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:last-child,.panel > .table:first-child > tbody:first-child > tr:first-child th:last-child,.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:last-child {  border-top-right-radius: 3px;}.panel > .table:last-child,.panel > .table-responsive:last-child > .table:last-child {  border-bottom-right-radius: 3px;  border-bottom-left-radius: 3px;}.panel > .table:last-child > tbody:last-child > tr:last-child,.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child,.panel > .table:last-child > tfoot:last-child > tr:last-child,.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child {  border-bottom-right-radius: 3px;  border-bottom-left-radius: 3px;}.panel > .table:last-child > tbody:last-child > tr:last-child td:first-child,.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:first-child,.panel > .table:last-child > tfoot:last-child > tr:last-child td:first-child,.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:first-child,.panel > .table:last-child > tbody:last-child > tr:last-child th:first-child,.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:first-child,.panel > .table:last-child > tfoot:last-child > tr:last-child th:first-child,.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:first-child {  border-bottom-left-radius: 3px;}.panel > .table:last-child > tbody:last-child > tr:last-child td:last-child,.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:last-child,.panel > .table:last-child > tfoot:last-child > tr:last-child td:last-child,.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:last-child,.panel > .table:last-child > tbody:last-child > tr:last-child th:last-child,.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:last-child,.panel > .table:last-child > tfoot:last-child > tr:last-child th:last-child,.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:last-child {  border-bottom-right-radius: 3px;}.panel > .panel-body + .table,.panel > .panel-body + .table-responsive,.panel > .table + .panel-body,.panel > .table-responsive + .panel-body {  border-top: 1px solid #ddd;}.panel > .table > tbody:first-child > tr:first-child th,.panel > .table > tbody:first-child > tr:first-child td {  border-top: 0;}.panel > .table-bordered,.panel > .table-responsive > .table-bordered {  border: 0;}.panel > .table-bordered > thead > tr > th:first-child,.panel > .table-responsive > .table-bordered > thead > tr > th:first-child,.panel > .table-bordered > tbody > tr > th:first-child,.panel > .table-responsive > .table-bordered > tbody > tr > th:first-child,.panel > .table-bordered > tfoot > tr > th:first-child,.panel > .table-responsive > .table-bordered > tfoot > tr > th:first-child,.panel > .table-bordered > thead > tr > td:first-child,.panel > .table-responsive > .table-bordered > thead > tr > td:first-child,.panel > .table-bordered > tbody > tr > td:first-child,.panel > .table-responsive > .table-bordered > tbody > tr > td:first-child,.panel > .table-bordered > tfoot > tr > td:first-child,.panel > .table-responsive > .table-bordered > tfoot > tr > td:first-child {  border-left: 0;}.panel > .table-bordered > thead > tr > th:last-child,.panel > .table-responsive > .table-bordered > thead > tr > th:last-child,.panel > .table-bordered > tbody > tr > th:last-child,.panel > .table-responsive > .table-bordered > tbody > tr > th:last-child,.panel > .table-bordered > tfoot > tr > th:last-child,.panel > .table-responsive > .table-bordered > tfoot > tr > th:last-child,.panel > .table-bordered > thead > tr > td:last-child,.panel > .table-responsive > .table-bordered > thead > tr > td:last-child,.panel > .table-bordered > tbody > tr > td:last-child,.panel > .table-responsive > .table-bordered > tbody > tr > td:last-child,.panel > .table-bordered > tfoot > tr > td:last-child,.panel > .table-responsive > .table-bordered > tfoot > tr > td:last-child {  border-right: 0;}.panel > .table-bordered > thead > tr:first-child > td,.panel > .table-responsive > .table-bordered > thead > tr:first-child > td,.panel > .table-bordered > tbody > tr:first-child > td,.panel > .table-responsive > .table-bordered > tbody > tr:first-child > td,.panel > .table-bordered > thead > tr:first-child > th,.panel > .table-responsive > .table-bordered > thead > tr:first-child > th,.panel > .table-bordered > tbody > tr:first-child > th,.panel > .table-responsive > .table-bordered > tbody > tr:first-child > th {  border-bottom: 0;}.panel > .table-bordered > tbody > tr:last-child > td,.panel > .table-responsive > .table-bordered > tbody > tr:last-child > td,.panel > .table-bordered > tfoot > tr:last-child > td,.panel > .table-responsive > .table-bordered > tfoot > tr:last-child > td,.panel > .table-bordered > tbody > tr:last-child > th,.panel > .table-responsive > .table-bordered > tbody > tr:last-child > th,.panel > .table-bordered > tfoot > tr:last-child > th,.panel > .table-responsive > .table-bordered > tfoot > tr:last-child > th {  border-bottom: 0;}.panel > .table-responsive {  margin-bottom: 0;  border: 0;}.panel-group {  margin-bottom: 20px;}.panel-group .panel {  margin-bottom: 0;  border-radius: 4px;}.panel-group .panel + .panel {  margin-top: 5px;}.panel-group .panel-heading {  border-bottom: 0;}.panel-group .panel-heading + .panel-collapse > .panel-body,.panel-group .panel-heading + .panel-collapse > .list-group {  border-top: 1px solid #ddd;}.panel-group .panel-footer {  border-top: 0;}.panel-group .panel-footer + .panel-collapse .panel-body {  border-bottom: 1px solid #ddd;}.panel-default {  border-color: #ddd;}.panel-default > .panel-heading {  color: #333;  background-color: #f5f5f5;  border-color: #ddd;}.panel-default > .panel-heading + .panel-collapse > .panel-body {  border-top-color: #ddd;}.panel-default > .panel-heading .badge {  color: #f5f5f5;  background-color: #333;}.panel-default > .panel-footer + .panel-collapse > .panel-body {  border-bottom-color: #ddd;}.panel-primary {  border-color: #337ab7;}.panel-primary > .panel-heading {  color: #fff;  background-color: #337ab7;  border-color: #337ab7;}.panel-primary > .panel-heading + .panel-collapse > .panel-body {  border-top-color: #337ab7;}.panel-primary > .panel-heading .badge {  color: #337ab7;  background-color: #fff;}.panel-primary > .panel-footer + .panel-collapse > .panel-body {  border-bottom-color: #337ab7;}.panel-success {  border-color: #d6e9c6;}.panel-success > .panel-heading {  color: #3c763d;  background-color: #dff0d8;  border-color: #d6e9c6;}.panel-success > .panel-heading + .panel-collapse > .panel-body {  border-top-color: #d6e9c6;}.panel-success > .panel-heading .badge {  color: #dff0d8;  background-color: #3c763d;}.panel-success > .panel-footer + .panel-collapse > .panel-body {  border-bottom-color: #d6e9c6;}.panel-info {  border-color: #bce8f1;}.panel-info > .panel-heading {  color: #31708f;  background-color: #d9edf7;  border-color: #bce8f1;}.panel-info > .panel-heading + .panel-collapse > .panel-body {  border-top-color: #bce8f1;}.panel-info > .panel-heading .badge {  color: #d9edf7;  background-color: #31708f;}.panel-info > .panel-footer + .panel-collapse > .panel-body {  border-bottom-color: #bce8f1;}.panel-warning {  border-color: #faebcc;}.panel-warning > .panel-heading {  color: #8a6d3b;  background-color: #fcf8e3;  border-color: #faebcc;}.panel-warning > .panel-heading + .panel-collapse > .panel-body {  border-top-color: #faebcc;}.panel-warning > .panel-heading .badge {  color: #fcf8e3;  background-color: #8a6d3b;}.panel-warning > .panel-footer + .panel-collapse > .panel-body {  border-bottom-color: #faebcc;}.panel-danger {  border-color: #ebccd1;}.panel-danger > .panel-heading {  color: #a94442;  background-color: #f2dede;  border-color: #ebccd1;}.panel-danger > .panel-heading + .panel-collapse > .panel-body {  border-top-color: #ebccd1;}.panel-danger > .panel-heading .badge {  color: #f2dede;  background-color: #a94442;}.panel-danger > .panel-footer + .panel-collapse > .panel-body {  border-bottom-color: #ebccd1;}.embed-responsive {  position: relative;  display: block;  height: 0;  padding: 0;  overflow: hidden;}.embed-responsive .embed-responsive-item,.embed-responsive iframe,.embed-responsive embed,.embed-responsive object,.embed-responsive video {  position: absolute;  top: 0;  bottom: 0;  left: 0;  width: 100%;  height: 100%;  border: 0;}.embed-responsive-16by9 {  padding-bottom: 56.25%;}.embed-responsive-4by3 {  padding-bottom: 75%;}.well {  min-height: 20px;  padding: 19px;  margin-bottom: 20px;  background-color: #f5f5f5;  border: 1px solid #e3e3e3;  border-radius: 4px;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .05);          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .05);}.well blockquote {  border-color: #ddd;  border-color: rgba(0, 0, 0, .15);}.well-lg {  padding: 24px;  border-radius: 6px;}.well-sm {  padding: 9px;  border-radius: 3px;}.close {  float: right;  font-size: 21px;  font-weight: bold;  line-height: 1;  color: #000;  text-shadow: 0 1px 0 #fff;  filter: alpha(opacity=20);  opacity: .2;}.close:hover,.close:focus {  color: #000;  text-decoration: none;  cursor: pointer;  filter: alpha(opacity=50);  opacity: .5;}button.close {  -webkit-appearance: none;  padding: 0;  cursor: pointer;  background: transparent;  border: 0;}.modal-open {  overflow: hidden;}.modal {  position: fixed;  top: 0;  right: 0;  bottom: 0;  left: 0;  z-index: 1050;  display: none;  overflow: hidden;  -webkit-overflow-scrolling: touch;  outline: 0;}.modal.fade .modal-dialog {  -webkit-transition: -webkit-transform .3s ease-out;       -o-transition:      -o-transform .3s ease-out;          transition:         transform .3s ease-out;  -webkit-transform: translate(0, -25%);      -ms-transform: translate(0, -25%);       -o-transform: translate(0, -25%);          transform: translate(0, -25%);}.modal.in .modal-dialog {  -webkit-transform: translate(0, 0);      -ms-transform: translate(0, 0);       -o-transform: translate(0, 0);          transform: translate(0, 0);}.modal-open .modal {  overflow-x: hidden;  overflow-y: auto;}.modal-dialog {  position: relative;  width: auto;  margin: 10px;}.modal-content {  position: relative;  background-color: #fff;  -webkit-background-clip: padding-box;          background-clip: padding-box;  border: 1px solid #999;  border: 1px solid rgba(0, 0, 0, .2);  border-radius: 6px;  outline: 0;  -webkit-box-shadow: 0 3px 9px rgba(0, 0, 0, .5);          box-shadow: 0 3px 9px rgba(0, 0, 0, .5);}.modal-backdrop {  position: fixed;  top: 0;  right: 0;  bottom: 0;  left: 0;  z-index: 1040;  background-color: #000;}.modal-backdrop.fade {  filter: alpha(opacity=0);  opacity: 0;}.modal-backdrop.in {  filter: alpha(opacity=50);  opacity: .5;}.modal-header {  min-height: 16.42857143px;  padding: 15px;  border-bottom: 1px solid #e5e5e5;}.modal-header .close {  margin-top: -2px;}.modal-title {  margin: 0;  line-height: 1.42857143;}.modal-body {  position: relative;  padding: 15px;}.modal-footer {  padding: 15px;  text-align: right;  border-top: 1px solid #e5e5e5;}.modal-footer .btn + .btn {  margin-bottom: 0;  margin-left: 5px;}.modal-footer .btn-group .btn + .btn {  margin-left: -1px;}.modal-footer .btn-block + .btn-block {  margin-left: 0;}.modal-scrollbar-measure {  position: absolute;  top: -9999px;  width: 50px;  height: 50px;  overflow: scroll;}@media (min-width: 768px) {  .modal-dialog {    width: 600px;    margin: 30px auto;  }  .modal-content {    -webkit-box-shadow: 0 5px 15px rgba(0, 0, 0, .5);            box-shadow: 0 5px 15px rgba(0, 0, 0, .5);  }  .modal-sm {    width: 300px;  }}@media (min-width: 992px) {  .modal-lg {    width: 900px;  }}.tooltip {  position: absolute;  z-index: 1070;  display: block;  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;  font-size: 12px;  font-style: normal;  font-weight: normal;  line-height: 1.42857143;  text-align: left;  text-align: start;  text-decoration: none;  text-shadow: none;  text-transform: none;  letter-spacing: normal;  word-break: normal;  word-spacing: normal;  word-wrap: normal;  white-space: normal;  filter: alpha(opacity=0);  opacity: 0;  line-break: auto;}.tooltip.in {  filter: alpha(opacity=90);  opacity: .9;}.tooltip.top {  padding: 5px 0;  margin-top: -3px;}.tooltip.right {  padding: 0 5px;  margin-left: 3px;}.tooltip.bottom {  padding: 5px 0;  margin-top: 3px;}.tooltip.left {  padding: 0 5px;  margin-left: -3px;}.tooltip-inner {  max-width: 200px;  padding: 3px 8px;  color: #fff;  text-align: center;  background-color: #000;  border-radius: 4px;}.tooltip-arrow {  position: absolute;  width: 0;  height: 0;  border-color: transparent;  border-style: solid;}.tooltip.top .tooltip-arrow {  bottom: 0;  left: 50%;  margin-left: -5px;  border-width: 5px 5px 0;  border-top-color: #000;}.tooltip.top-left .tooltip-arrow {  right: 5px;  bottom: 0;  margin-bottom: -5px;  border-width: 5px 5px 0;  border-top-color: #000;}.tooltip.top-right .tooltip-arrow {  bottom: 0;  left: 5px;  margin-bottom: -5px;  border-width: 5px 5px 0;  border-top-color: #000;}.tooltip.right .tooltip-arrow {  top: 50%;  left: 0;  margin-top: -5px;  border-width: 5px 5px 5px 0;  border-right-color: #000;}.tooltip.left .tooltip-arrow {  top: 50%;  right: 0;  margin-top: -5px;  border-width: 5px 0 5px 5px;  border-left-color: #000;}.tooltip.bottom .tooltip-arrow {  top: 0;  left: 50%;  margin-left: -5px;  border-width: 0 5px 5px;  border-bottom-color: #000;}.tooltip.bottom-left .tooltip-arrow {  top: 0;  right: 5px;  margin-top: -5px;  border-width: 0 5px 5px;  border-bottom-color: #000;}.tooltip.bottom-right .tooltip-arrow {  top: 0;  left: 5px;  margin-top: -5px;  border-width: 0 5px 5px;  border-bottom-color: #000;}.popover {  position: absolute;  top: 0;  left: 0;  z-index: 1060;  display: none;  max-width: 276px;  padding: 1px;  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;  font-size: 14px;  font-style: normal;  font-weight: normal;  line-height: 1.42857143;  text-align: left;  text-align: start;  text-decoration: none;  text-shadow: none;  text-transform: none;  letter-spacing: normal;  word-break: normal;  word-spacing: normal;  word-wrap: normal;  white-space: normal;  background-color: #fff;  -webkit-background-clip: padding-box;          background-clip: padding-box;  border: 1px solid #ccc;  border: 1px solid rgba(0, 0, 0, .2);  border-radius: 6px;  -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, .2);          box-shadow: 0 5px 10px rgba(0, 0, 0, .2);  line-break: auto;}.popover.top {  margin-top: -10px;}.popover.right {  margin-left: 10px;}.popover.bottom {  margin-top: 10px;}.popover.left {  margin-left: -10px;}.popover-title {  padding: 8px 14px;  margin: 0;  font-size: 14px;  background-color: #f7f7f7;  border-bottom: 1px solid #ebebeb;  border-radius: 5px 5px 0 0;}.popover-content {  padding: 9px 14px;}.popover > .arrow,.popover > .arrow:after {  position: absolute;  display: block;  width: 0;  height: 0;  border-color: transparent;  border-style: solid;}.popover > .arrow {  border-width: 11px;}.popover > .arrow:after {  content: "";  border-width: 10px;}.popover.top > .arrow {  bottom: -11px;  left: 50%;  margin-left: -11px;  border-top-color: #999;  border-top-color: rgba(0, 0, 0, .25);  border-bottom-width: 0;}.popover.top > .arrow:after {  bottom: 1px;  margin-left: -10px;  content: " ";  border-top-color: #fff;  border-bottom-width: 0;}.popover.right > .arrow {  top: 50%;  left: -11px;  margin-top: -11px;  border-right-color: #999;  border-right-color: rgba(0, 0, 0, .25);  border-left-width: 0;}.popover.right > .arrow:after {  bottom: -10px;  left: 1px;  content: " ";  border-right-color: #fff;  border-left-width: 0;}.popover.bottom > .arrow {  top: -11px;  left: 50%;  margin-left: -11px;  border-top-width: 0;  border-bottom-color: #999;  border-bottom-color: rgba(0, 0, 0, .25);}.popover.bottom > .arrow:after {  top: 1px;  margin-left: -10px;  content: " ";  border-top-width: 0;  border-bottom-color: #fff;}.popover.left > .arrow {  top: 50%;  right: -11px;  margin-top: -11px;  border-right-width: 0;  border-left-color: #999;  border-left-color: rgba(0, 0, 0, .25);}.popover.left > .arrow:after {  right: 1px;  bottom: -10px;  content: " ";  border-right-width: 0;  border-left-color: #fff;}.carousel {  position: relative;}.carousel-inner {  position: relative;  width: 100%;  overflow: hidden;}.carousel-inner > .item {  position: relative;  display: none;  -webkit-transition: .6s ease-in-out left;       -o-transition: .6s ease-in-out left;          transition: .6s ease-in-out left;}.carousel-inner > .item > img,.carousel-inner > .item > a > img {  line-height: 1;}@media all and (transform-3d), (-webkit-transform-3d) {  .carousel-inner > .item {    -webkit-transition: -webkit-transform .6s ease-in-out;         -o-transition:      -o-transform .6s ease-in-out;            transition:         transform .6s ease-in-out;    -webkit-backface-visibility: hidden;            backface-visibility: hidden;    -webkit-perspective: 1000px;            perspective: 1000px;  }  .carousel-inner > .item.next,  .carousel-inner > .item.active.right {    left: 0;    -webkit-transform: translate3d(100%, 0, 0);            transform: translate3d(100%, 0, 0);  }  .carousel-inner > .item.prev,  .carousel-inner > .item.active.left {    left: 0;    -webkit-transform: translate3d(-100%, 0, 0);            transform: translate3d(-100%, 0, 0);  }  .carousel-inner > .item.next.left,  .carousel-inner > .item.prev.right,  .carousel-inner > .item.active {    left: 0;    -webkit-transform: translate3d(0, 0, 0);            transform: translate3d(0, 0, 0);  }}.carousel-inner > .active,.carousel-inner > .next,.carousel-inner > .prev {  display: block;}.carousel-inner > .active {  left: 0;}.carousel-inner > .next,.carousel-inner > .prev {  position: absolute;  top: 0;  width: 100%;}.carousel-inner > .next {  left: 100%;}.carousel-inner > .prev {  left: -100%;}.carousel-inner > .next.left,.carousel-inner > .prev.right {  left: 0;}.carousel-inner > .active.left {  left: -100%;}.carousel-inner > .active.right {  left: 100%;}.carousel-control {  position: absolute;  top: 0;  bottom: 0;  left: 0;  width: 15%;  font-size: 20px;  color: #fff;  text-align: center;  text-shadow: 0 1px 2px rgba(0, 0, 0, .6);  filter: alpha(opacity=50);  opacity: .5;}.carousel-control.left {  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);  background-image:      -o-linear-gradient(left, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);  background-image: -webkit-gradient(linear, left top, right top, from(rgba(0, 0, 0, .5)), to(rgba(0, 0, 0, .0001)));  background-image:         linear-gradient(to right, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#00000000', GradientType=1);  background-repeat: repeat-x;}.carousel-control.right {  right: 0;  left: auto;  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);  background-image:      -o-linear-gradient(left, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);  background-image: -webkit-gradient(linear, left top, right top, from(rgba(0, 0, 0, .0001)), to(rgba(0, 0, 0, .5)));  background-image:         linear-gradient(to right, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#80000000', GradientType=1);  background-repeat: repeat-x;}.carousel-control:hover,.carousel-control:focus {  color: #fff;  text-decoration: none;  filter: alpha(opacity=90);  outline: 0;  opacity: .9;}.carousel-control .icon-prev,.carousel-control .icon-next,.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right {  position: absolute;  top: 50%;  z-index: 5;  display: inline-block;  margin-top: -10px;}.carousel-control .icon-prev,.carousel-control .glyphicon-chevron-left {  left: 50%;  margin-left: -10px;}.carousel-control .icon-next,.carousel-control .glyphicon-chevron-right {  right: 50%;  margin-right: -10px;}.carousel-control .icon-prev,.carousel-control .icon-next {  width: 20px;  height: 20px;  font-family: serif;  line-height: 1;}.carousel-control .icon-prev:before {  content: '\2039';}.carousel-control .icon-next:before {  content: '\203a';}.carousel-indicators {  position: absolute;  bottom: 10px;  left: 50%;  z-index: 15;  width: 60%;  padding-left: 0;  margin-left: -30%;  text-align: center;  list-style: none;}.carousel-indicators li {  display: inline-block;  width: 10px;  height: 10px;  margin: 1px;  text-indent: -999px;  cursor: pointer;  background-color: #000 \9;  background-color: rgba(0, 0, 0, 0);  border: 1px solid #fff;  border-radius: 10px;}.carousel-indicators .active {  width: 12px;  height: 12px;  margin: 0;  background-color: #fff;}.carousel-caption {  position: absolute;  right: 15%;  bottom: 20px;  left: 15%;  z-index: 10;  padding-top: 20px;  padding-bottom: 20px;  color: #fff;  text-align: center;  text-shadow: 0 1px 2px rgba(0, 0, 0, .6);}.carousel-caption .btn {  text-shadow: none;}@media screen and (min-width: 768px) {  .carousel-control .glyphicon-chevron-left,  .carousel-control .glyphicon-chevron-right,  .carousel-control .icon-prev,  .carousel-control .icon-next {    width: 30px;    height: 30px;    margin-top: -15px;    font-size: 30px;  }  .carousel-control .glyphicon-chevron-left,  .carousel-control .icon-prev {    margin-left: -15px;  }  .carousel-control .glyphicon-chevron-right,  .carousel-control .icon-next {    margin-right: -15px;  }  .carousel-caption {    right: 20%;    left: 20%;    padding-bottom: 30px;  }  .carousel-indicators {    bottom: 20px;  }}.clearfix:before,.clearfix:after,.dl-horizontal dd:before,.dl-horizontal dd:after,.container:before,.container:after,.container-fluid:before,.container-fluid:after,.row:before,.row:after,.form-horizontal .form-group:before,.form-horizontal .form-group:after,.btn-toolbar:before,.btn-toolbar:after,.btn-group-vertical > .btn-group:before,.btn-group-vertical > .btn-group:after,.nav:before,.nav:after,.navbar:before,.navbar:after,.navbar-header:before,.navbar-header:after,.navbar-collapse:before,.navbar-collapse:after,.pager:before,.pager:after,.panel-body:before,.panel-body:after,.modal-footer:before,.modal-footer:after {  display: table;  content: " ";}.clearfix:after,.dl-horizontal dd:after,.container:after,.container-fluid:after,.row:after,.form-horizontal .form-group:after,.btn-toolbar:after,.btn-group-vertical > .btn-group:after,.nav:after,.navbar:after,.navbar-header:after,.navbar-collapse:after,.pager:after,.panel-body:after,.modal-footer:after {  clear: both;}.center-block {  display: block;  margin-right: auto;  margin-left: auto;}.pull-right {  float: right !important;}.pull-left {  float: left !important;}.hide {  display: none !important;}.show {  display: block !important;}.invisible {  visibility: hidden;}.text-hide {  font: 0/0 a;  color: transparent;  text-shadow: none;  background-color: transparent;  border: 0;}.hidden {  display: none !important;}.affix {  position: fixed;}@-ms-viewport {  width: device-width;}.visible-xs,.visible-sm,.visible-md,.visible-lg {  display: none !important;}.visible-xs-block,.visible-xs-inline,.visible-xs-inline-block,.visible-sm-block,.visible-sm-inline,.visible-sm-inline-block,.visible-md-block,.visible-md-inline,.visible-md-inline-block,.visible-lg-block,.visible-lg-inline,.visible-lg-inline-block {  display: none !important;}@media (max-width: 767px) {  .visible-xs {    display: block !important;  }  table.visible-xs {    display: table !important;  }  tr.visible-xs {    display: table-row !important;  }  th.visible-xs,  td.visible-xs {    display: table-cell !important;  }}@media (max-width: 767px) {  .visible-xs-block {    display: block !important;  }}@media (max-width: 767px) {  .visible-xs-inline {    display: inline !important;  }}@media (max-width: 767px) {  .visible-xs-inline-block {    display: inline-block !important;  }}@media (min-width: 768px) and (max-width: 991px) {  .visible-sm {    display: block !important;  }  table.visible-sm {    display: table !important;  }  tr.visible-sm {    display: table-row !important;  }  th.visible-sm,  td.visible-sm {    display: table-cell !important;  }}@media (min-width: 768px) and (max-width: 991px) {  .visible-sm-block {    display: block !important;  }}@media (min-width: 768px) and (max-width: 991px) {  .visible-sm-inline {    display: inline !important;  }}@media (min-width: 768px) and (max-width: 991px) {  .visible-sm-inline-block {    display: inline-block !important;  }}@media (min-width: 992px) and (max-width: 1199px) {  .visible-md {    display: block !important;  }  table.visible-md {    display: table !important;  }  tr.visible-md {    display: table-row !important;  }  th.visible-md,  td.visible-md {    display: table-cell !important;  }}@media (min-width: 992px) and (max-width: 1199px) {  .visible-md-block {    display: block !important;  }}@media (min-width: 992px) and (max-width: 1199px) {  .visible-md-inline {    display: inline !important;  }}@media (min-width: 992px) and (max-width: 1199px) {  .visible-md-inline-block {    display: inline-block !important;  }}@media (min-width: 1200px) {  .visible-lg {    display: block !important;  }  table.visible-lg {    display: table !important;  }  tr.visible-lg {    display: table-row !important;  }  th.visible-lg,  td.visible-lg {    display: table-cell !important;  }}@media (min-width: 1200px) {  .visible-lg-block {    display: block !important;  }}@media (min-width: 1200px) {  .visible-lg-inline {    display: inline !important;  }}@media (min-width: 1200px) {  .visible-lg-inline-block {    display: inline-block !important;  }}@media (max-width: 767px) {  .hidden-xs {    display: none !important;  }}@media (min-width: 768px) and (max-width: 991px) {  .hidden-sm {    display: none !important;  }}@media (min-width: 992px) and (max-width: 1199px) {  .hidden-md {    display: none !important;  }}@media (min-width: 1200px) {  .hidden-lg {    display: none !important;  }}.visible-print {  display: none !important;}@media print {  .visible-print {    display: block !important;  }  table.visible-print {    display: table !important;  }  tr.visible-print {    display: table-row !important;  }  th.visible-print,  td.visible-print {    display: table-cell !important;  }}.visible-print-block {  display: none !important;}@media print {  .visible-print-block {    display: block !important;  }}.visible-print-inline {  display: none !important;}@media print {  .visible-print-inline {    display: inline !important;  }}.visible-print-inline-block {  display: none !important;}@media print {  .visible-print-inline-block {    display: inline-block !important;  }}@media print {  .hidden-print {    display: none !important;  }}/*# sourceMappingURL=bootstrap.css.map */]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/2_users_page/index/"/>
      <url>/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/2_users_page/index/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>  <meta charset="UTF-8">  <title>Title</title>  <link rel="stylesheet" href="./bootstrap.css">  <link rel="stylesheet" href="./index.css"></head><body><div id="app">  <div class="container">    <section class="jumbotron">      <h3 class="jumbotron-heading">Search Github Users</h3>      <div>        <input type="text" placeholder="enter the name you search"/>&nbsp;<button>Search</button>      </div>    </section>    <div class="row">      <div class="card">        <a href="https://github.com/xxxxxx" target="_blank">          <img src="https://cn.vuejs.org/images/logo.svg" style='width: 100px'/>        </a>        <p class="card-text">xxxxxx</p>      </div>      <div class="card">        <a href="https://github.com/xxxxxx" target="_blank">          <img src="https://cn.vuejs.org/images/logo.svg" style='width: 100px'/>        </a>        <p class="card-text">xxxxxx</p>      </div>      <div class="card">        <a href="https://github.com/xxxxxx" target="_blank">          <img src="https://cn.vuejs.org/images/logo.svg" style='width: 100px'/>        </a>        <p class="card-text">xxxxxx</p>      </div>      <div class="card">        <a href="https://github.com/xxxxxx" target="_blank">          <img src="https://cn.vuejs.org/images/logo.svg" style='width: 100px'/>        </a>        <p class="card-text">xxxxxx</p>      </div>      <div class="card">        <a href="https://github.com/xxxxxx" target="_blank">          <img src="https://cn.vuejs.org/images/logo.svg" style='width: 100px'/>        </a>        <p class="card-text">xxxxxx</p>      </div>    </div>  </div></div></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/2_users_page/index/"/>
      <url>/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/2_users_page/index/</url>
      
        <content type="html"><![CDATA[.album {  min-height: 50rem; /* Can be removed; just added for demo purposes */  padding-top: 3rem;  padding-bottom: 3rem;  background-color: #f7f7f7;}.card {  float: left;  width: 33.333%;  padding: .75rem;  margin-bottom: 2rem;  border: 1px solid #efefef;  text-align: center;}.card > img {  margin-bottom: .75rem;  border-radius: 100px;}.card-text {  font-size: 85%;}]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/2_users_page/bootstrap/"/>
      <url>/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/2_users_page/bootstrap/</url>
      
        <content type="html"><![CDATA[/*! * Bootstrap v3.3.5 (http://getbootstrap.com) * Copyright 2011-2015 Twitter, Inc. * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE) *//*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html {  font-family: sans-serif;  -webkit-text-size-adjust: 100%;      -ms-text-size-adjust: 100%;}body {  margin: 0;}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary {  display: block;}audio,canvas,progress,video {  display: inline-block;  vertical-align: baseline;}audio:not([controls]) {  display: none;  height: 0;}[hidden],template {  display: none;}a {  background-color: transparent;}a:active,a:hover {  outline: 0;}abbr[title] {  border-bottom: 1px dotted;}b,strong {  font-weight: bold;}dfn {  font-style: italic;}h1 {  margin: .67em 0;  font-size: 2em;}mark {  color: #000;  background: #ff0;}small {  font-size: 80%;}sub,sup {  position: relative;  font-size: 75%;  line-height: 0;  vertical-align: baseline;}sup {  top: -.5em;}sub {  bottom: -.25em;}img {  border: 0;}svg:not(:root) {  overflow: hidden;}figure {  margin: 1em 40px;}hr {  height: 0;  -webkit-box-sizing: content-box;     -moz-box-sizing: content-box;          box-sizing: content-box;}pre {  overflow: auto;}code,kbd,pre,samp {  font-family: monospace, monospace;  font-size: 1em;}button,input,optgroup,select,textarea {  margin: 0;  font: inherit;  color: inherit;}button {  overflow: visible;}button,select {  text-transform: none;}button,html input[type="button"],input[type="reset"],input[type="submit"] {  -webkit-appearance: button;  cursor: pointer;}button[disabled],html input[disabled] {  cursor: default;}button::-moz-focus-inner,input::-moz-focus-inner {  padding: 0;  border: 0;}input {  line-height: normal;}input[type="checkbox"],input[type="radio"] {  -webkit-box-sizing: border-box;     -moz-box-sizing: border-box;          box-sizing: border-box;  padding: 0;}input[type="number"]::-webkit-inner-spin-button,input[type="number"]::-webkit-outer-spin-button {  height: auto;}input[type="search"] {  -webkit-box-sizing: content-box;     -moz-box-sizing: content-box;          box-sizing: content-box;  -webkit-appearance: textfield;}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration {  -webkit-appearance: none;}fieldset {  padding: .35em .625em .75em;  margin: 0 2px;  border: 1px solid #c0c0c0;}legend {  padding: 0;  border: 0;}textarea {  overflow: auto;}optgroup {  font-weight: bold;}table {  border-spacing: 0;  border-collapse: collapse;}td,th {  padding: 0;}/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */@media print {  *,  *:before,  *:after {    color: #000 !important;    text-shadow: none !important;    background: transparent !important;    -webkit-box-shadow: none !important;            box-shadow: none !important;  }  a,  a:visited {    text-decoration: underline;  }  a[href]:after {    content: " (" attr(href) ")";  }  abbr[title]:after {    content: " (" attr(title) ")";  }  a[href^="#"]:after,  a[href^="javascript:"]:after {    content: "";  }  pre,  blockquote {    border: 1px solid #999;    page-break-inside: avoid;  }  thead {    display: table-header-group;  }  tr,  img {    page-break-inside: avoid;  }  img {    max-width: 100% !important;  }  p,  h2,  h3 {    orphans: 3;    widows: 3;  }  h2,  h3 {    page-break-after: avoid;  }  .navbar {    display: none;  }  .btn > .caret,  .dropup > .btn > .caret {    border-top-color: #000 !important;  }  .label {    border: 1px solid #000;  }  .table {    border-collapse: collapse !important;  }  .table td,  .table th {    background-color: #fff !important;  }  .table-bordered th,  .table-bordered td {    border: 1px solid #ddd !important;  }}@font-face {  font-family: 'Glyphicons Halflings';  src: url('../fonts/glyphicons-halflings-regular.eot');  src: url('../fonts/glyphicons-halflings-regular.eot?#iefix') format('embedded-opentype'), url('../fonts/glyphicons-halflings-regular.woff2') format('woff2'), url('../fonts/glyphicons-halflings-regular.woff') format('woff'), url('../fonts/glyphicons-halflings-regular.ttf') format('truetype'), url('../fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular') format('svg');}.glyphicon {  position: relative;  top: 1px;  display: inline-block;  font-family: 'Glyphicons Halflings';  font-style: normal;  font-weight: normal;  line-height: 1;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.glyphicon-asterisk:before {  content: "\2a";}.glyphicon-plus:before {  content: "\2b";}.glyphicon-euro:before,.glyphicon-eur:before {  content: "\20ac";}.glyphicon-minus:before {  content: "\2212";}.glyphicon-cloud:before {  content: "\2601";}.glyphicon-envelope:before {  content: "\2709";}.glyphicon-pencil:before {  content: "\270f";}.glyphicon-glass:before {  content: "\e001";}.glyphicon-music:before {  content: "\e002";}.glyphicon-search:before {  content: "\e003";}.glyphicon-heart:before {  content: "\e005";}.glyphicon-star:before {  content: "\e006";}.glyphicon-star-empty:before {  content: "\e007";}.glyphicon-user:before {  content: "\e008";}.glyphicon-film:before {  content: "\e009";}.glyphicon-th-large:before {  content: "\e010";}.glyphicon-th:before {  content: "\e011";}.glyphicon-th-list:before {  content: "\e012";}.glyphicon-ok:before {  content: "\e013";}.glyphicon-remove:before {  content: "\e014";}.glyphicon-zoom-in:before {  content: "\e015";}.glyphicon-zoom-out:before {  content: "\e016";}.glyphicon-off:before {  content: "\e017";}.glyphicon-signal:before {  content: "\e018";}.glyphicon-cog:before {  content: "\e019";}.glyphicon-trash:before {  content: "\e020";}.glyphicon-home:before {  content: "\e021";}.glyphicon-file:before {  content: "\e022";}.glyphicon-time:before {  content: "\e023";}.glyphicon-road:before {  content: "\e024";}.glyphicon-download-alt:before {  content: "\e025";}.glyphicon-download:before {  content: "\e026";}.glyphicon-upload:before {  content: "\e027";}.glyphicon-inbox:before {  content: "\e028";}.glyphicon-play-circle:before {  content: "\e029";}.glyphicon-repeat:before {  content: "\e030";}.glyphicon-refresh:before {  content: "\e031";}.glyphicon-list-alt:before {  content: "\e032";}.glyphicon-lock:before {  content: "\e033";}.glyphicon-flag:before {  content: "\e034";}.glyphicon-headphones:before {  content: "\e035";}.glyphicon-volume-off:before {  content: "\e036";}.glyphicon-volume-down:before {  content: "\e037";}.glyphicon-volume-up:before {  content: "\e038";}.glyphicon-qrcode:before {  content: "\e039";}.glyphicon-barcode:before {  content: "\e040";}.glyphicon-tag:before {  content: "\e041";}.glyphicon-tags:before {  content: "\e042";}.glyphicon-book:before {  content: "\e043";}.glyphicon-bookmark:before {  content: "\e044";}.glyphicon-print:before {  content: "\e045";}.glyphicon-camera:before {  content: "\e046";}.glyphicon-font:before {  content: "\e047";}.glyphicon-bold:before {  content: "\e048";}.glyphicon-italic:before {  content: "\e049";}.glyphicon-text-height:before {  content: "\e050";}.glyphicon-text-width:before {  content: "\e051";}.glyphicon-align-left:before {  content: "\e052";}.glyphicon-align-center:before {  content: "\e053";}.glyphicon-align-right:before {  content: "\e054";}.glyphicon-align-justify:before {  content: "\e055";}.glyphicon-list:before {  content: "\e056";}.glyphicon-indent-left:before {  content: "\e057";}.glyphicon-indent-right:before {  content: "\e058";}.glyphicon-facetime-video:before {  content: "\e059";}.glyphicon-picture:before {  content: "\e060";}.glyphicon-map-marker:before {  content: "\e062";}.glyphicon-adjust:before {  content: "\e063";}.glyphicon-tint:before {  content: "\e064";}.glyphicon-edit:before {  content: "\e065";}.glyphicon-share:before {  content: "\e066";}.glyphicon-check:before {  content: "\e067";}.glyphicon-move:before {  content: "\e068";}.glyphicon-step-backward:before {  content: "\e069";}.glyphicon-fast-backward:before {  content: "\e070";}.glyphicon-backward:before {  content: "\e071";}.glyphicon-play:before {  content: "\e072";}.glyphicon-pause:before {  content: "\e073";}.glyphicon-stop:before {  content: "\e074";}.glyphicon-forward:before {  content: "\e075";}.glyphicon-fast-forward:before {  content: "\e076";}.glyphicon-step-forward:before {  content: "\e077";}.glyphicon-eject:before {  content: "\e078";}.glyphicon-chevron-left:before {  content: "\e079";}.glyphicon-chevron-right:before {  content: "\e080";}.glyphicon-plus-sign:before {  content: "\e081";}.glyphicon-minus-sign:before {  content: "\e082";}.glyphicon-remove-sign:before {  content: "\e083";}.glyphicon-ok-sign:before {  content: "\e084";}.glyphicon-question-sign:before {  content: "\e085";}.glyphicon-info-sign:before {  content: "\e086";}.glyphicon-screenshot:before {  content: "\e087";}.glyphicon-remove-circle:before {  content: "\e088";}.glyphicon-ok-circle:before {  content: "\e089";}.glyphicon-ban-circle:before {  content: "\e090";}.glyphicon-arrow-left:before {  content: "\e091";}.glyphicon-arrow-right:before {  content: "\e092";}.glyphicon-arrow-up:before {  content: "\e093";}.glyphicon-arrow-down:before {  content: "\e094";}.glyphicon-share-alt:before {  content: "\e095";}.glyphicon-resize-full:before {  content: "\e096";}.glyphicon-resize-small:before {  content: "\e097";}.glyphicon-exclamation-sign:before {  content: "\e101";}.glyphicon-gift:before {  content: "\e102";}.glyphicon-leaf:before {  content: "\e103";}.glyphicon-fire:before {  content: "\e104";}.glyphicon-eye-open:before {  content: "\e105";}.glyphicon-eye-close:before {  content: "\e106";}.glyphicon-warning-sign:before {  content: "\e107";}.glyphicon-plane:before {  content: "\e108";}.glyphicon-calendar:before {  content: "\e109";}.glyphicon-random:before {  content: "\e110";}.glyphicon-comment:before {  content: "\e111";}.glyphicon-magnet:before {  content: "\e112";}.glyphicon-chevron-up:before {  content: "\e113";}.glyphicon-chevron-down:before {  content: "\e114";}.glyphicon-retweet:before {  content: "\e115";}.glyphicon-shopping-cart:before {  content: "\e116";}.glyphicon-folder-close:before {  content: "\e117";}.glyphicon-folder-open:before {  content: "\e118";}.glyphicon-resize-vertical:before {  content: "\e119";}.glyphicon-resize-horizontal:before {  content: "\e120";}.glyphicon-hdd:before {  content: "\e121";}.glyphicon-bullhorn:before {  content: "\e122";}.glyphicon-bell:before {  content: "\e123";}.glyphicon-certificate:before {  content: "\e124";}.glyphicon-thumbs-up:before {  content: "\e125";}.glyphicon-thumbs-down:before {  content: "\e126";}.glyphicon-hand-right:before {  content: "\e127";}.glyphicon-hand-left:before {  content: "\e128";}.glyphicon-hand-up:before {  content: "\e129";}.glyphicon-hand-down:before {  content: "\e130";}.glyphicon-circle-arrow-right:before {  content: "\e131";}.glyphicon-circle-arrow-left:before {  content: "\e132";}.glyphicon-circle-arrow-up:before {  content: "\e133";}.glyphicon-circle-arrow-down:before {  content: "\e134";}.glyphicon-globe:before {  content: "\e135";}.glyphicon-wrench:before {  content: "\e136";}.glyphicon-tasks:before {  content: "\e137";}.glyphicon-filter:before {  content: "\e138";}.glyphicon-briefcase:before {  content: "\e139";}.glyphicon-fullscreen:before {  content: "\e140";}.glyphicon-dashboard:before {  content: "\e141";}.glyphicon-paperclip:before {  content: "\e142";}.glyphicon-heart-empty:before {  content: "\e143";}.glyphicon-link:before {  content: "\e144";}.glyphicon-phone:before {  content: "\e145";}.glyphicon-pushpin:before {  content: "\e146";}.glyphicon-usd:before {  content: "\e148";}.glyphicon-gbp:before {  content: "\e149";}.glyphicon-sort:before {  content: "\e150";}.glyphicon-sort-by-alphabet:before {  content: "\e151";}.glyphicon-sort-by-alphabet-alt:before {  content: "\e152";}.glyphicon-sort-by-order:before {  content: "\e153";}.glyphicon-sort-by-order-alt:before {  content: "\e154";}.glyphicon-sort-by-attributes:before {  content: "\e155";}.glyphicon-sort-by-attributes-alt:before {  content: "\e156";}.glyphicon-unchecked:before {  content: "\e157";}.glyphicon-expand:before {  content: "\e158";}.glyphicon-collapse-down:before {  content: "\e159";}.glyphicon-collapse-up:before {  content: "\e160";}.glyphicon-log-in:before {  content: "\e161";}.glyphicon-flash:before {  content: "\e162";}.glyphicon-log-out:before {  content: "\e163";}.glyphicon-new-window:before {  content: "\e164";}.glyphicon-record:before {  content: "\e165";}.glyphicon-save:before {  content: "\e166";}.glyphicon-open:before {  content: "\e167";}.glyphicon-saved:before {  content: "\e168";}.glyphicon-import:before {  content: "\e169";}.glyphicon-export:before {  content: "\e170";}.glyphicon-send:before {  content: "\e171";}.glyphicon-floppy-disk:before {  content: "\e172";}.glyphicon-floppy-saved:before {  content: "\e173";}.glyphicon-floppy-remove:before {  content: "\e174";}.glyphicon-floppy-save:before {  content: "\e175";}.glyphicon-floppy-open:before {  content: "\e176";}.glyphicon-credit-card:before {  content: "\e177";}.glyphicon-transfer:before {  content: "\e178";}.glyphicon-cutlery:before {  content: "\e179";}.glyphicon-header:before {  content: "\e180";}.glyphicon-compressed:before {  content: "\e181";}.glyphicon-earphone:before {  content: "\e182";}.glyphicon-phone-alt:before {  content: "\e183";}.glyphicon-tower:before {  content: "\e184";}.glyphicon-stats:before {  content: "\e185";}.glyphicon-sd-video:before {  content: "\e186";}.glyphicon-hd-video:before {  content: "\e187";}.glyphicon-subtitles:before {  content: "\e188";}.glyphicon-sound-stereo:before {  content: "\e189";}.glyphicon-sound-dolby:before {  content: "\e190";}.glyphicon-sound-5-1:before {  content: "\e191";}.glyphicon-sound-6-1:before {  content: "\e192";}.glyphicon-sound-7-1:before {  content: "\e193";}.glyphicon-copyright-mark:before {  content: "\e194";}.glyphicon-registration-mark:before {  content: "\e195";}.glyphicon-cloud-download:before {  content: "\e197";}.glyphicon-cloud-upload:before {  content: "\e198";}.glyphicon-tree-conifer:before {  content: "\e199";}.glyphicon-tree-deciduous:before {  content: "\e200";}.glyphicon-cd:before {  content: "\e201";}.glyphicon-save-file:before {  content: "\e202";}.glyphicon-open-file:before {  content: "\e203";}.glyphicon-level-up:before {  content: "\e204";}.glyphicon-copy:before {  content: "\e205";}.glyphicon-paste:before {  content: "\e206";}.glyphicon-alert:before {  content: "\e209";}.glyphicon-equalizer:before {  content: "\e210";}.glyphicon-king:before {  content: "\e211";}.glyphicon-queen:before {  content: "\e212";}.glyphicon-pawn:before {  content: "\e213";}.glyphicon-bishop:before {  content: "\e214";}.glyphicon-knight:before {  content: "\e215";}.glyphicon-baby-formula:before {  content: "\e216";}.glyphicon-tent:before {  content: "\26fa";}.glyphicon-blackboard:before {  content: "\e218";}.glyphicon-bed:before {  content: "\e219";}.glyphicon-apple:before {  content: "\f8ff";}.glyphicon-erase:before {  content: "\e221";}.glyphicon-hourglass:before {  content: "\231b";}.glyphicon-lamp:before {  content: "\e223";}.glyphicon-duplicate:before {  content: "\e224";}.glyphicon-piggy-bank:before {  content: "\e225";}.glyphicon-scissors:before {  content: "\e226";}.glyphicon-bitcoin:before {  content: "\e227";}.glyphicon-btc:before {  content: "\e227";}.glyphicon-xbt:before {  content: "\e227";}.glyphicon-yen:before {  content: "\00a5";}.glyphicon-jpy:before {  content: "\00a5";}.glyphicon-ruble:before {  content: "\20bd";}.glyphicon-rub:before {  content: "\20bd";}.glyphicon-scale:before {  content: "\e230";}.glyphicon-ice-lolly:before {  content: "\e231";}.glyphicon-ice-lolly-tasted:before {  content: "\e232";}.glyphicon-education:before {  content: "\e233";}.glyphicon-option-horizontal:before {  content: "\e234";}.glyphicon-option-vertical:before {  content: "\e235";}.glyphicon-menu-hamburger:before {  content: "\e236";}.glyphicon-modal-window:before {  content: "\e237";}.glyphicon-oil:before {  content: "\e238";}.glyphicon-grain:before {  content: "\e239";}.glyphicon-sunglasses:before {  content: "\e240";}.glyphicon-text-size:before {  content: "\e241";}.glyphicon-text-color:before {  content: "\e242";}.glyphicon-text-background:before {  content: "\e243";}.glyphicon-object-align-top:before {  content: "\e244";}.glyphicon-object-align-bottom:before {  content: "\e245";}.glyphicon-object-align-horizontal:before {  content: "\e246";}.glyphicon-object-align-left:before {  content: "\e247";}.glyphicon-object-align-vertical:before {  content: "\e248";}.glyphicon-object-align-right:before {  content: "\e249";}.glyphicon-triangle-right:before {  content: "\e250";}.glyphicon-triangle-left:before {  content: "\e251";}.glyphicon-triangle-bottom:before {  content: "\e252";}.glyphicon-triangle-top:before {  content: "\e253";}.glyphicon-console:before {  content: "\e254";}.glyphicon-superscript:before {  content: "\e255";}.glyphicon-subscript:before {  content: "\e256";}.glyphicon-menu-left:before {  content: "\e257";}.glyphicon-menu-right:before {  content: "\e258";}.glyphicon-menu-down:before {  content: "\e259";}.glyphicon-menu-up:before {  content: "\e260";}* {  -webkit-box-sizing: border-box;     -moz-box-sizing: border-box;          box-sizing: border-box;}*:before,*:after {  -webkit-box-sizing: border-box;     -moz-box-sizing: border-box;          box-sizing: border-box;}html {  font-size: 10px;  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);}body {  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;  font-size: 14px;  line-height: 1.42857143;  color: #333;  background-color: #fff;}input,button,select,textarea {  font-family: inherit;  font-size: inherit;  line-height: inherit;}a {  color: #337ab7;  text-decoration: none;}a:hover,a:focus {  color: #23527c;  text-decoration: underline;}a:focus {  outline: thin dotted;  outline: 5px auto -webkit-focus-ring-color;  outline-offset: -2px;}figure {  margin: 0;}img {  vertical-align: middle;}.img-responsive,.thumbnail > img,.thumbnail a > img,.carousel-inner > .item > img,.carousel-inner > .item > a > img {  display: block;  max-width: 100%;  height: auto;}.img-rounded {  border-radius: 6px;}.img-thumbnail {  display: inline-block;  max-width: 100%;  height: auto;  padding: 4px;  line-height: 1.42857143;  background-color: #fff;  border: 1px solid #ddd;  border-radius: 4px;  -webkit-transition: all .2s ease-in-out;       -o-transition: all .2s ease-in-out;          transition: all .2s ease-in-out;}.img-circle {  border-radius: 50%;}hr {  margin-top: 20px;  margin-bottom: 20px;  border: 0;  border-top: 1px solid #eee;}.sr-only {  position: absolute;  width: 1px;  height: 1px;  padding: 0;  margin: -1px;  overflow: hidden;  clip: rect(0, 0, 0, 0);  border: 0;}.sr-only-focusable:active,.sr-only-focusable:focus {  position: static;  width: auto;  height: auto;  margin: 0;  overflow: visible;  clip: auto;}[role="button"] {  cursor: pointer;}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6 {  font-family: inherit;  font-weight: 500;  line-height: 1.1;  color: inherit;}h1 small,h2 small,h3 small,h4 small,h5 small,h6 small,.h1 small,.h2 small,.h3 small,.h4 small,.h5 small,.h6 small,h1 .small,h2 .small,h3 .small,h4 .small,h5 .small,h6 .small,.h1 .small,.h2 .small,.h3 .small,.h4 .small,.h5 .small,.h6 .small {  font-weight: normal;  line-height: 1;  color: #777;}h1,.h1,h2,.h2,h3,.h3 {  margin-top: 20px;  margin-bottom: 10px;}h1 small,.h1 small,h2 small,.h2 small,h3 small,.h3 small,h1 .small,.h1 .small,h2 .small,.h2 .small,h3 .small,.h3 .small {  font-size: 65%;}h4,.h4,h5,.h5,h6,.h6 {  margin-top: 10px;  margin-bottom: 10px;}h4 small,.h4 small,h5 small,.h5 small,h6 small,.h6 small,h4 .small,.h4 .small,h5 .small,.h5 .small,h6 .small,.h6 .small {  font-size: 75%;}h1,.h1 {  font-size: 36px;}h2,.h2 {  font-size: 30px;}h3,.h3 {  font-size: 24px;}h4,.h4 {  font-size: 18px;}h5,.h5 {  font-size: 14px;}h6,.h6 {  font-size: 12px;}p {  margin: 0 0 10px;}.lead {  margin-bottom: 20px;  font-size: 16px;  font-weight: 300;  line-height: 1.4;}@media (min-width: 768px) {  .lead {    font-size: 21px;  }}small,.small {  font-size: 85%;}mark,.mark {  padding: .2em;  background-color: #fcf8e3;}.text-left {  text-align: left;}.text-right {  text-align: right;}.text-center {  text-align: center;}.text-justify {  text-align: justify;}.text-nowrap {  white-space: nowrap;}.text-lowercase {  text-transform: lowercase;}.text-uppercase {  text-transform: uppercase;}.text-capitalize {  text-transform: capitalize;}.text-muted {  color: #777;}.text-primary {  color: #337ab7;}a.text-primary:hover,a.text-primary:focus {  color: #286090;}.text-success {  color: #3c763d;}a.text-success:hover,a.text-success:focus {  color: #2b542c;}.text-info {  color: #31708f;}a.text-info:hover,a.text-info:focus {  color: #245269;}.text-warning {  color: #8a6d3b;}a.text-warning:hover,a.text-warning:focus {  color: #66512c;}.text-danger {  color: #a94442;}a.text-danger:hover,a.text-danger:focus {  color: #843534;}.bg-primary {  color: #fff;  background-color: #337ab7;}a.bg-primary:hover,a.bg-primary:focus {  background-color: #286090;}.bg-success {  background-color: #dff0d8;}a.bg-success:hover,a.bg-success:focus {  background-color: #c1e2b3;}.bg-info {  background-color: #d9edf7;}a.bg-info:hover,a.bg-info:focus {  background-color: #afd9ee;}.bg-warning {  background-color: #fcf8e3;}a.bg-warning:hover,a.bg-warning:focus {  background-color: #f7ecb5;}.bg-danger {  background-color: #f2dede;}a.bg-danger:hover,a.bg-danger:focus {  background-color: #e4b9b9;}.page-header {  padding-bottom: 9px;  margin: 40px 0 20px;  border-bottom: 1px solid #eee;}ul,ol {  margin-top: 0;  margin-bottom: 10px;}ul ul,ol ul,ul ol,ol ol {  margin-bottom: 0;}.list-unstyled {  padding-left: 0;  list-style: none;}.list-inline {  padding-left: 0;  margin-left: -5px;  list-style: none;}.list-inline > li {  display: inline-block;  padding-right: 5px;  padding-left: 5px;}dl {  margin-top: 0;  margin-bottom: 20px;}dt,dd {  line-height: 1.42857143;}dt {  font-weight: bold;}dd {  margin-left: 0;}@media (min-width: 768px) {  .dl-horizontal dt {    float: left;    width: 160px;    overflow: hidden;    clear: left;    text-align: right;    text-overflow: ellipsis;    white-space: nowrap;  }  .dl-horizontal dd {    margin-left: 180px;  }}abbr[title],abbr[data-original-title] {  cursor: help;  border-bottom: 1px dotted #777;}.initialism {  font-size: 90%;  text-transform: uppercase;}blockquote {  padding: 10px 20px;  margin: 0 0 20px;  font-size: 17.5px;  border-left: 5px solid #eee;}blockquote p:last-child,blockquote ul:last-child,blockquote ol:last-child {  margin-bottom: 0;}blockquote footer,blockquote small,blockquote .small {  display: block;  font-size: 80%;  line-height: 1.42857143;  color: #777;}blockquote footer:before,blockquote small:before,blockquote .small:before {  content: '\2014 \00A0';}.blockquote-reverse,blockquote.pull-right {  padding-right: 15px;  padding-left: 0;  text-align: right;  border-right: 5px solid #eee;  border-left: 0;}.blockquote-reverse footer:before,blockquote.pull-right footer:before,.blockquote-reverse small:before,blockquote.pull-right small:before,.blockquote-reverse .small:before,blockquote.pull-right .small:before {  content: '';}.blockquote-reverse footer:after,blockquote.pull-right footer:after,.blockquote-reverse small:after,blockquote.pull-right small:after,.blockquote-reverse .small:after,blockquote.pull-right .small:after {  content: '\00A0 \2014';}address {  margin-bottom: 20px;  font-style: normal;  line-height: 1.42857143;}code,kbd,pre,samp {  font-family: Menlo, Monaco, Consolas, "Courier New", monospace;}code {  padding: 2px 4px;  font-size: 90%;  color: #c7254e;  background-color: #f9f2f4;  border-radius: 4px;}kbd {  padding: 2px 4px;  font-size: 90%;  color: #fff;  background-color: #333;  border-radius: 3px;  -webkit-box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .25);          box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .25);}kbd kbd {  padding: 0;  font-size: 100%;  font-weight: bold;  -webkit-box-shadow: none;          box-shadow: none;}pre {  display: block;  padding: 9.5px;  margin: 0 0 10px;  font-size: 13px;  line-height: 1.42857143;  color: #333;  word-break: break-all;  word-wrap: break-word;  background-color: #f5f5f5;  border: 1px solid #ccc;  border-radius: 4px;}pre code {  padding: 0;  font-size: inherit;  color: inherit;  white-space: pre-wrap;  background-color: transparent;  border-radius: 0;}.pre-scrollable {  max-height: 340px;  overflow-y: scroll;}.container {  padding-right: 15px;  padding-left: 15px;  margin-right: auto;  margin-left: auto;}@media (min-width: 768px) {  .container {    width: 750px;  }}@media (min-width: 992px) {  .container {    width: 970px;  }}@media (min-width: 1200px) {  .container {    width: 1170px;  }}.container-fluid {  padding-right: 15px;  padding-left: 15px;  margin-right: auto;  margin-left: auto;}.row {  margin-right: -15px;  margin-left: -15px;}.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 {  position: relative;  min-height: 1px;  padding-right: 15px;  padding-left: 15px;}.col-xs-1, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9, .col-xs-10, .col-xs-11, .col-xs-12 {  float: left;}.col-xs-12 {  width: 100%;}.col-xs-11 {  width: 91.66666667%;}.col-xs-10 {  width: 83.33333333%;}.col-xs-9 {  width: 75%;}.col-xs-8 {  width: 66.66666667%;}.col-xs-7 {  width: 58.33333333%;}.col-xs-6 {  width: 50%;}.col-xs-5 {  width: 41.66666667%;}.col-xs-4 {  width: 33.33333333%;}.col-xs-3 {  width: 25%;}.col-xs-2 {  width: 16.66666667%;}.col-xs-1 {  width: 8.33333333%;}.col-xs-pull-12 {  right: 100%;}.col-xs-pull-11 {  right: 91.66666667%;}.col-xs-pull-10 {  right: 83.33333333%;}.col-xs-pull-9 {  right: 75%;}.col-xs-pull-8 {  right: 66.66666667%;}.col-xs-pull-7 {  right: 58.33333333%;}.col-xs-pull-6 {  right: 50%;}.col-xs-pull-5 {  right: 41.66666667%;}.col-xs-pull-4 {  right: 33.33333333%;}.col-xs-pull-3 {  right: 25%;}.col-xs-pull-2 {  right: 16.66666667%;}.col-xs-pull-1 {  right: 8.33333333%;}.col-xs-pull-0 {  right: auto;}.col-xs-push-12 {  left: 100%;}.col-xs-push-11 {  left: 91.66666667%;}.col-xs-push-10 {  left: 83.33333333%;}.col-xs-push-9 {  left: 75%;}.col-xs-push-8 {  left: 66.66666667%;}.col-xs-push-7 {  left: 58.33333333%;}.col-xs-push-6 {  left: 50%;}.col-xs-push-5 {  left: 41.66666667%;}.col-xs-push-4 {  left: 33.33333333%;}.col-xs-push-3 {  left: 25%;}.col-xs-push-2 {  left: 16.66666667%;}.col-xs-push-1 {  left: 8.33333333%;}.col-xs-push-0 {  left: auto;}.col-xs-offset-12 {  margin-left: 100%;}.col-xs-offset-11 {  margin-left: 91.66666667%;}.col-xs-offset-10 {  margin-left: 83.33333333%;}.col-xs-offset-9 {  margin-left: 75%;}.col-xs-offset-8 {  margin-left: 66.66666667%;}.col-xs-offset-7 {  margin-left: 58.33333333%;}.col-xs-offset-6 {  margin-left: 50%;}.col-xs-offset-5 {  margin-left: 41.66666667%;}.col-xs-offset-4 {  margin-left: 33.33333333%;}.col-xs-offset-3 {  margin-left: 25%;}.col-xs-offset-2 {  margin-left: 16.66666667%;}.col-xs-offset-1 {  margin-left: 8.33333333%;}.col-xs-offset-0 {  margin-left: 0;}@media (min-width: 768px) {  .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12 {    float: left;  }  .col-sm-12 {    width: 100%;  }  .col-sm-11 {    width: 91.66666667%;  }  .col-sm-10 {    width: 83.33333333%;  }  .col-sm-9 {    width: 75%;  }  .col-sm-8 {    width: 66.66666667%;  }  .col-sm-7 {    width: 58.33333333%;  }  .col-sm-6 {    width: 50%;  }  .col-sm-5 {    width: 41.66666667%;  }  .col-sm-4 {    width: 33.33333333%;  }  .col-sm-3 {    width: 25%;  }  .col-sm-2 {    width: 16.66666667%;  }  .col-sm-1 {    width: 8.33333333%;  }  .col-sm-pull-12 {    right: 100%;  }  .col-sm-pull-11 {    right: 91.66666667%;  }  .col-sm-pull-10 {    right: 83.33333333%;  }  .col-sm-pull-9 {    right: 75%;  }  .col-sm-pull-8 {    right: 66.66666667%;  }  .col-sm-pull-7 {    right: 58.33333333%;  }  .col-sm-pull-6 {    right: 50%;  }  .col-sm-pull-5 {    right: 41.66666667%;  }  .col-sm-pull-4 {    right: 33.33333333%;  }  .col-sm-pull-3 {    right: 25%;  }  .col-sm-pull-2 {    right: 16.66666667%;  }  .col-sm-pull-1 {    right: 8.33333333%;  }  .col-sm-pull-0 {    right: auto;  }  .col-sm-push-12 {    left: 100%;  }  .col-sm-push-11 {    left: 91.66666667%;  }  .col-sm-push-10 {    left: 83.33333333%;  }  .col-sm-push-9 {    left: 75%;  }  .col-sm-push-8 {    left: 66.66666667%;  }  .col-sm-push-7 {    left: 58.33333333%;  }  .col-sm-push-6 {    left: 50%;  }  .col-sm-push-5 {    left: 41.66666667%;  }  .col-sm-push-4 {    left: 33.33333333%;  }  .col-sm-push-3 {    left: 25%;  }  .col-sm-push-2 {    left: 16.66666667%;  }  .col-sm-push-1 {    left: 8.33333333%;  }  .col-sm-push-0 {    left: auto;  }  .col-sm-offset-12 {    margin-left: 100%;  }  .col-sm-offset-11 {    margin-left: 91.66666667%;  }  .col-sm-offset-10 {    margin-left: 83.33333333%;  }  .col-sm-offset-9 {    margin-left: 75%;  }  .col-sm-offset-8 {    margin-left: 66.66666667%;  }  .col-sm-offset-7 {    margin-left: 58.33333333%;  }  .col-sm-offset-6 {    margin-left: 50%;  }  .col-sm-offset-5 {    margin-left: 41.66666667%;  }  .col-sm-offset-4 {    margin-left: 33.33333333%;  }  .col-sm-offset-3 {    margin-left: 25%;  }  .col-sm-offset-2 {    margin-left: 16.66666667%;  }  .col-sm-offset-1 {    margin-left: 8.33333333%;  }  .col-sm-offset-0 {    margin-left: 0;  }}@media (min-width: 992px) {  .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 {    float: left;  }  .col-md-12 {    width: 100%;  }  .col-md-11 {    width: 91.66666667%;  }  .col-md-10 {    width: 83.33333333%;  }  .col-md-9 {    width: 75%;  }  .col-md-8 {    width: 66.66666667%;  }  .col-md-7 {    width: 58.33333333%;  }  .col-md-6 {    width: 50%;  }  .col-md-5 {    width: 41.66666667%;  }  .col-md-4 {    width: 33.33333333%;  }  .col-md-3 {    width: 25%;  }  .col-md-2 {    width: 16.66666667%;  }  .col-md-1 {    width: 8.33333333%;  }  .col-md-pull-12 {    right: 100%;  }  .col-md-pull-11 {    right: 91.66666667%;  }  .col-md-pull-10 {    right: 83.33333333%;  }  .col-md-pull-9 {    right: 75%;  }  .col-md-pull-8 {    right: 66.66666667%;  }  .col-md-pull-7 {    right: 58.33333333%;  }  .col-md-pull-6 {    right: 50%;  }  .col-md-pull-5 {    right: 41.66666667%;  }  .col-md-pull-4 {    right: 33.33333333%;  }  .col-md-pull-3 {    right: 25%;  }  .col-md-pull-2 {    right: 16.66666667%;  }  .col-md-pull-1 {    right: 8.33333333%;  }  .col-md-pull-0 {    right: auto;  }  .col-md-push-12 {    left: 100%;  }  .col-md-push-11 {    left: 91.66666667%;  }  .col-md-push-10 {    left: 83.33333333%;  }  .col-md-push-9 {    left: 75%;  }  .col-md-push-8 {    left: 66.66666667%;  }  .col-md-push-7 {    left: 58.33333333%;  }  .col-md-push-6 {    left: 50%;  }  .col-md-push-5 {    left: 41.66666667%;  }  .col-md-push-4 {    left: 33.33333333%;  }  .col-md-push-3 {    left: 25%;  }  .col-md-push-2 {    left: 16.66666667%;  }  .col-md-push-1 {    left: 8.33333333%;  }  .col-md-push-0 {    left: auto;  }  .col-md-offset-12 {    margin-left: 100%;  }  .col-md-offset-11 {    margin-left: 91.66666667%;  }  .col-md-offset-10 {    margin-left: 83.33333333%;  }  .col-md-offset-9 {    margin-left: 75%;  }  .col-md-offset-8 {    margin-left: 66.66666667%;  }  .col-md-offset-7 {    margin-left: 58.33333333%;  }  .col-md-offset-6 {    margin-left: 50%;  }  .col-md-offset-5 {    margin-left: 41.66666667%;  }  .col-md-offset-4 {    margin-left: 33.33333333%;  }  .col-md-offset-3 {    margin-left: 25%;  }  .col-md-offset-2 {    margin-left: 16.66666667%;  }  .col-md-offset-1 {    margin-left: 8.33333333%;  }  .col-md-offset-0 {    margin-left: 0;  }}@media (min-width: 1200px) {  .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12 {    float: left;  }  .col-lg-12 {    width: 100%;  }  .col-lg-11 {    width: 91.66666667%;  }  .col-lg-10 {    width: 83.33333333%;  }  .col-lg-9 {    width: 75%;  }  .col-lg-8 {    width: 66.66666667%;  }  .col-lg-7 {    width: 58.33333333%;  }  .col-lg-6 {    width: 50%;  }  .col-lg-5 {    width: 41.66666667%;  }  .col-lg-4 {    width: 33.33333333%;  }  .col-lg-3 {    width: 25%;  }  .col-lg-2 {    width: 16.66666667%;  }  .col-lg-1 {    width: 8.33333333%;  }  .col-lg-pull-12 {    right: 100%;  }  .col-lg-pull-11 {    right: 91.66666667%;  }  .col-lg-pull-10 {    right: 83.33333333%;  }  .col-lg-pull-9 {    right: 75%;  }  .col-lg-pull-8 {    right: 66.66666667%;  }  .col-lg-pull-7 {    right: 58.33333333%;  }  .col-lg-pull-6 {    right: 50%;  }  .col-lg-pull-5 {    right: 41.66666667%;  }  .col-lg-pull-4 {    right: 33.33333333%;  }  .col-lg-pull-3 {    right: 25%;  }  .col-lg-pull-2 {    right: 16.66666667%;  }  .col-lg-pull-1 {    right: 8.33333333%;  }  .col-lg-pull-0 {    right: auto;  }  .col-lg-push-12 {    left: 100%;  }  .col-lg-push-11 {    left: 91.66666667%;  }  .col-lg-push-10 {    left: 83.33333333%;  }  .col-lg-push-9 {    left: 75%;  }  .col-lg-push-8 {    left: 66.66666667%;  }  .col-lg-push-7 {    left: 58.33333333%;  }  .col-lg-push-6 {    left: 50%;  }  .col-lg-push-5 {    left: 41.66666667%;  }  .col-lg-push-4 {    left: 33.33333333%;  }  .col-lg-push-3 {    left: 25%;  }  .col-lg-push-2 {    left: 16.66666667%;  }  .col-lg-push-1 {    left: 8.33333333%;  }  .col-lg-push-0 {    left: auto;  }  .col-lg-offset-12 {    margin-left: 100%;  }  .col-lg-offset-11 {    margin-left: 91.66666667%;  }  .col-lg-offset-10 {    margin-left: 83.33333333%;  }  .col-lg-offset-9 {    margin-left: 75%;  }  .col-lg-offset-8 {    margin-left: 66.66666667%;  }  .col-lg-offset-7 {    margin-left: 58.33333333%;  }  .col-lg-offset-6 {    margin-left: 50%;  }  .col-lg-offset-5 {    margin-left: 41.66666667%;  }  .col-lg-offset-4 {    margin-left: 33.33333333%;  }  .col-lg-offset-3 {    margin-left: 25%;  }  .col-lg-offset-2 {    margin-left: 16.66666667%;  }  .col-lg-offset-1 {    margin-left: 8.33333333%;  }  .col-lg-offset-0 {    margin-left: 0;  }}table {  background-color: transparent;}caption {  padding-top: 8px;  padding-bottom: 8px;  color: #777;  text-align: left;}th {  text-align: left;}.table {  width: 100%;  max-width: 100%;  margin-bottom: 20px;}.table > thead > tr > th,.table > tbody > tr > th,.table > tfoot > tr > th,.table > thead > tr > td,.table > tbody > tr > td,.table > tfoot > tr > td {  padding: 8px;  line-height: 1.42857143;  vertical-align: top;  border-top: 1px solid #ddd;}.table > thead > tr > th {  vertical-align: bottom;  border-bottom: 2px solid #ddd;}.table > caption + thead > tr:first-child > th,.table > colgroup + thead > tr:first-child > th,.table > thead:first-child > tr:first-child > th,.table > caption + thead > tr:first-child > td,.table > colgroup + thead > tr:first-child > td,.table > thead:first-child > tr:first-child > td {  border-top: 0;}.table > tbody + tbody {  border-top: 2px solid #ddd;}.table .table {  background-color: #fff;}.table-condensed > thead > tr > th,.table-condensed > tbody > tr > th,.table-condensed > tfoot > tr > th,.table-condensed > thead > tr > td,.table-condensed > tbody > tr > td,.table-condensed > tfoot > tr > td {  padding: 5px;}.table-bordered {  border: 1px solid #ddd;}.table-bordered > thead > tr > th,.table-bordered > tbody > tr > th,.table-bordered > tfoot > tr > th,.table-bordered > thead > tr > td,.table-bordered > tbody > tr > td,.table-bordered > tfoot > tr > td {  border: 1px solid #ddd;}.table-bordered > thead > tr > th,.table-bordered > thead > tr > td {  border-bottom-width: 2px;}.table-striped > tbody > tr:nth-of-type(odd) {  background-color: #f9f9f9;}.table-hover > tbody > tr:hover {  background-color: #f5f5f5;}table col[class*="col-"] {  position: static;  display: table-column;  float: none;}table td[class*="col-"],table th[class*="col-"] {  position: static;  display: table-cell;  float: none;}.table > thead > tr > td.active,.table > tbody > tr > td.active,.table > tfoot > tr > td.active,.table > thead > tr > th.active,.table > tbody > tr > th.active,.table > tfoot > tr > th.active,.table > thead > tr.active > td,.table > tbody > tr.active > td,.table > tfoot > tr.active > td,.table > thead > tr.active > th,.table > tbody > tr.active > th,.table > tfoot > tr.active > th {  background-color: #f5f5f5;}.table-hover > tbody > tr > td.active:hover,.table-hover > tbody > tr > th.active:hover,.table-hover > tbody > tr.active:hover > td,.table-hover > tbody > tr:hover > .active,.table-hover > tbody > tr.active:hover > th {  background-color: #e8e8e8;}.table > thead > tr > td.success,.table > tbody > tr > td.success,.table > tfoot > tr > td.success,.table > thead > tr > th.success,.table > tbody > tr > th.success,.table > tfoot > tr > th.success,.table > thead > tr.success > td,.table > tbody > tr.success > td,.table > tfoot > tr.success > td,.table > thead > tr.success > th,.table > tbody > tr.success > th,.table > tfoot > tr.success > th {  background-color: #dff0d8;}.table-hover > tbody > tr > td.success:hover,.table-hover > tbody > tr > th.success:hover,.table-hover > tbody > tr.success:hover > td,.table-hover > tbody > tr:hover > .success,.table-hover > tbody > tr.success:hover > th {  background-color: #d0e9c6;}.table > thead > tr > td.info,.table > tbody > tr > td.info,.table > tfoot > tr > td.info,.table > thead > tr > th.info,.table > tbody > tr > th.info,.table > tfoot > tr > th.info,.table > thead > tr.info > td,.table > tbody > tr.info > td,.table > tfoot > tr.info > td,.table > thead > tr.info > th,.table > tbody > tr.info > th,.table > tfoot > tr.info > th {  background-color: #d9edf7;}.table-hover > tbody > tr > td.info:hover,.table-hover > tbody > tr > th.info:hover,.table-hover > tbody > tr.info:hover > td,.table-hover > tbody > tr:hover > .info,.table-hover > tbody > tr.info:hover > th {  background-color: #c4e3f3;}.table > thead > tr > td.warning,.table > tbody > tr > td.warning,.table > tfoot > tr > td.warning,.table > thead > tr > th.warning,.table > tbody > tr > th.warning,.table > tfoot > tr > th.warning,.table > thead > tr.warning > td,.table > tbody > tr.warning > td,.table > tfoot > tr.warning > td,.table > thead > tr.warning > th,.table > tbody > tr.warning > th,.table > tfoot > tr.warning > th {  background-color: #fcf8e3;}.table-hover > tbody > tr > td.warning:hover,.table-hover > tbody > tr > th.warning:hover,.table-hover > tbody > tr.warning:hover > td,.table-hover > tbody > tr:hover > .warning,.table-hover > tbody > tr.warning:hover > th {  background-color: #faf2cc;}.table > thead > tr > td.danger,.table > tbody > tr > td.danger,.table > tfoot > tr > td.danger,.table > thead > tr > th.danger,.table > tbody > tr > th.danger,.table > tfoot > tr > th.danger,.table > thead > tr.danger > td,.table > tbody > tr.danger > td,.table > tfoot > tr.danger > td,.table > thead > tr.danger > th,.table > tbody > tr.danger > th,.table > tfoot > tr.danger > th {  background-color: #f2dede;}.table-hover > tbody > tr > td.danger:hover,.table-hover > tbody > tr > th.danger:hover,.table-hover > tbody > tr.danger:hover > td,.table-hover > tbody > tr:hover > .danger,.table-hover > tbody > tr.danger:hover > th {  background-color: #ebcccc;}.table-responsive {  min-height: .01%;  overflow-x: auto;}@media screen and (max-width: 767px) {  .table-responsive {    width: 100%;    margin-bottom: 15px;    overflow-y: hidden;    -ms-overflow-style: -ms-autohiding-scrollbar;    border: 1px solid #ddd;  }  .table-responsive > .table {    margin-bottom: 0;  }  .table-responsive > .table > thead > tr > th,  .table-responsive > .table > tbody > tr > th,  .table-responsive > .table > tfoot > tr > th,  .table-responsive > .table > thead > tr > td,  .table-responsive > .table > tbody > tr > td,  .table-responsive > .table > tfoot > tr > td {    white-space: nowrap;  }  .table-responsive > .table-bordered {    border: 0;  }  .table-responsive > .table-bordered > thead > tr > th:first-child,  .table-responsive > .table-bordered > tbody > tr > th:first-child,  .table-responsive > .table-bordered > tfoot > tr > th:first-child,  .table-responsive > .table-bordered > thead > tr > td:first-child,  .table-responsive > .table-bordered > tbody > tr > td:first-child,  .table-responsive > .table-bordered > tfoot > tr > td:first-child {    border-left: 0;  }  .table-responsive > .table-bordered > thead > tr > th:last-child,  .table-responsive > .table-bordered > tbody > tr > th:last-child,  .table-responsive > .table-bordered > tfoot > tr > th:last-child,  .table-responsive > .table-bordered > thead > tr > td:last-child,  .table-responsive > .table-bordered > tbody > tr > td:last-child,  .table-responsive > .table-bordered > tfoot > tr > td:last-child {    border-right: 0;  }  .table-responsive > .table-bordered > tbody > tr:last-child > th,  .table-responsive > .table-bordered > tfoot > tr:last-child > th,  .table-responsive > .table-bordered > tbody > tr:last-child > td,  .table-responsive > .table-bordered > tfoot > tr:last-child > td {    border-bottom: 0;  }}fieldset {  min-width: 0;  padding: 0;  margin: 0;  border: 0;}legend {  display: block;  width: 100%;  padding: 0;  margin-bottom: 20px;  font-size: 21px;  line-height: inherit;  color: #333;  border: 0;  border-bottom: 1px solid #e5e5e5;}label {  display: inline-block;  max-width: 100%;  margin-bottom: 5px;  font-weight: bold;}input[type="search"] {  -webkit-box-sizing: border-box;     -moz-box-sizing: border-box;          box-sizing: border-box;}input[type="radio"],input[type="checkbox"] {  margin: 4px 0 0;  margin-top: 1px \9;  line-height: normal;}input[type="file"] {  display: block;}input[type="range"] {  display: block;  width: 100%;}select[multiple],select[size] {  height: auto;}input[type="file"]:focus,input[type="radio"]:focus,input[type="checkbox"]:focus {  outline: thin dotted;  outline: 5px auto -webkit-focus-ring-color;  outline-offset: -2px;}output {  display: block;  padding-top: 7px;  font-size: 14px;  line-height: 1.42857143;  color: #555;}.form-control {  display: block;  width: 100%;  height: 34px;  padding: 6px 12px;  font-size: 14px;  line-height: 1.42857143;  color: #555;  background-color: #fff;  background-image: none;  border: 1px solid #ccc;  border-radius: 4px;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);  -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;       -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;          transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;}.form-control:focus {  border-color: #66afe9;  outline: 0;  -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, .6);          box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, .6);}.form-control::-moz-placeholder {  color: #999;  opacity: 1;}.form-control:-ms-input-placeholder {  color: #999;}.form-control::-webkit-input-placeholder {  color: #999;}.form-control[disabled],.form-control[readonly],fieldset[disabled] .form-control {  background-color: #eee;  opacity: 1;}.form-control[disabled],fieldset[disabled] .form-control {  cursor: not-allowed;}textarea.form-control {  height: auto;}input[type="search"] {  -webkit-appearance: none;}@media screen and (-webkit-min-device-pixel-ratio: 0) {  input[type="date"].form-control,  input[type="time"].form-control,  input[type="datetime-local"].form-control,  input[type="month"].form-control {    line-height: 34px;  }  input[type="date"].input-sm,  input[type="time"].input-sm,  input[type="datetime-local"].input-sm,  input[type="month"].input-sm,  .input-group-sm input[type="date"],  .input-group-sm input[type="time"],  .input-group-sm input[type="datetime-local"],  .input-group-sm input[type="month"] {    line-height: 30px;  }  input[type="date"].input-lg,  input[type="time"].input-lg,  input[type="datetime-local"].input-lg,  input[type="month"].input-lg,  .input-group-lg input[type="date"],  .input-group-lg input[type="time"],  .input-group-lg input[type="datetime-local"],  .input-group-lg input[type="month"] {    line-height: 46px;  }}.form-group {  margin-bottom: 15px;}.radio,.checkbox {  position: relative;  display: block;  margin-top: 10px;  margin-bottom: 10px;}.radio label,.checkbox label {  min-height: 20px;  padding-left: 20px;  margin-bottom: 0;  font-weight: normal;  cursor: pointer;}.radio input[type="radio"],.radio-inline input[type="radio"],.checkbox input[type="checkbox"],.checkbox-inline input[type="checkbox"] {  position: absolute;  margin-top: 4px \9;  margin-left: -20px;}.radio + .radio,.checkbox + .checkbox {  margin-top: -5px;}.radio-inline,.checkbox-inline {  position: relative;  display: inline-block;  padding-left: 20px;  margin-bottom: 0;  font-weight: normal;  vertical-align: middle;  cursor: pointer;}.radio-inline + .radio-inline,.checkbox-inline + .checkbox-inline {  margin-top: 0;  margin-left: 10px;}input[type="radio"][disabled],input[type="checkbox"][disabled],input[type="radio"].disabled,input[type="checkbox"].disabled,fieldset[disabled] input[type="radio"],fieldset[disabled] input[type="checkbox"] {  cursor: not-allowed;}.radio-inline.disabled,.checkbox-inline.disabled,fieldset[disabled] .radio-inline,fieldset[disabled] .checkbox-inline {  cursor: not-allowed;}.radio.disabled label,.checkbox.disabled label,fieldset[disabled] .radio label,fieldset[disabled] .checkbox label {  cursor: not-allowed;}.form-control-static {  min-height: 34px;  padding-top: 7px;  padding-bottom: 7px;  margin-bottom: 0;}.form-control-static.input-lg,.form-control-static.input-sm {  padding-right: 0;  padding-left: 0;}.input-sm {  height: 30px;  padding: 5px 10px;  font-size: 12px;  line-height: 1.5;  border-radius: 3px;}select.input-sm {  height: 30px;  line-height: 30px;}textarea.input-sm,select[multiple].input-sm {  height: auto;}.form-group-sm .form-control {  height: 30px;  padding: 5px 10px;  font-size: 12px;  line-height: 1.5;  border-radius: 3px;}.form-group-sm select.form-control {  height: 30px;  line-height: 30px;}.form-group-sm textarea.form-control,.form-group-sm select[multiple].form-control {  height: auto;}.form-group-sm .form-control-static {  height: 30px;  min-height: 32px;  padding: 6px 10px;  font-size: 12px;  line-height: 1.5;}.input-lg {  height: 46px;  padding: 10px 16px;  font-size: 18px;  line-height: 1.3333333;  border-radius: 6px;}select.input-lg {  height: 46px;  line-height: 46px;}textarea.input-lg,select[multiple].input-lg {  height: auto;}.form-group-lg .form-control {  height: 46px;  padding: 10px 16px;  font-size: 18px;  line-height: 1.3333333;  border-radius: 6px;}.form-group-lg select.form-control {  height: 46px;  line-height: 46px;}.form-group-lg textarea.form-control,.form-group-lg select[multiple].form-control {  height: auto;}.form-group-lg .form-control-static {  height: 46px;  min-height: 38px;  padding: 11px 16px;  font-size: 18px;  line-height: 1.3333333;}.has-feedback {  position: relative;}.has-feedback .form-control {  padding-right: 42.5px;}.form-control-feedback {  position: absolute;  top: 0;  right: 0;  z-index: 2;  display: block;  width: 34px;  height: 34px;  line-height: 34px;  text-align: center;  pointer-events: none;}.input-lg + .form-control-feedback,.input-group-lg + .form-control-feedback,.form-group-lg .form-control + .form-control-feedback {  width: 46px;  height: 46px;  line-height: 46px;}.input-sm + .form-control-feedback,.input-group-sm + .form-control-feedback,.form-group-sm .form-control + .form-control-feedback {  width: 30px;  height: 30px;  line-height: 30px;}.has-success .help-block,.has-success .control-label,.has-success .radio,.has-success .checkbox,.has-success .radio-inline,.has-success .checkbox-inline,.has-success.radio label,.has-success.checkbox label,.has-success.radio-inline label,.has-success.checkbox-inline label {  color: #3c763d;}.has-success .form-control {  border-color: #3c763d;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);}.has-success .form-control:focus {  border-color: #2b542c;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #67b168;          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #67b168;}.has-success .input-group-addon {  color: #3c763d;  background-color: #dff0d8;  border-color: #3c763d;}.has-success .form-control-feedback {  color: #3c763d;}.has-warning .help-block,.has-warning .control-label,.has-warning .radio,.has-warning .checkbox,.has-warning .radio-inline,.has-warning .checkbox-inline,.has-warning.radio label,.has-warning.checkbox label,.has-warning.radio-inline label,.has-warning.checkbox-inline label {  color: #8a6d3b;}.has-warning .form-control {  border-color: #8a6d3b;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);}.has-warning .form-control:focus {  border-color: #66512c;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #c0a16b;          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #c0a16b;}.has-warning .input-group-addon {  color: #8a6d3b;  background-color: #fcf8e3;  border-color: #8a6d3b;}.has-warning .form-control-feedback {  color: #8a6d3b;}.has-error .help-block,.has-error .control-label,.has-error .radio,.has-error .checkbox,.has-error .radio-inline,.has-error .checkbox-inline,.has-error.radio label,.has-error.checkbox label,.has-error.radio-inline label,.has-error.checkbox-inline label {  color: #a94442;}.has-error .form-control {  border-color: #a94442;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);}.has-error .form-control:focus {  border-color: #843534;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #ce8483;          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #ce8483;}.has-error .input-group-addon {  color: #a94442;  background-color: #f2dede;  border-color: #a94442;}.has-error .form-control-feedback {  color: #a94442;}.has-feedback label ~ .form-control-feedback {  top: 25px;}.has-feedback label.sr-only ~ .form-control-feedback {  top: 0;}.help-block {  display: block;  margin-top: 5px;  margin-bottom: 10px;  color: #737373;}@media (min-width: 768px) {  .form-inline .form-group {    display: inline-block;    margin-bottom: 0;    vertical-align: middle;  }  .form-inline .form-control {    display: inline-block;    width: auto;    vertical-align: middle;  }  .form-inline .form-control-static {    display: inline-block;  }  .form-inline .input-group {    display: inline-table;    vertical-align: middle;  }  .form-inline .input-group .input-group-addon,  .form-inline .input-group .input-group-btn,  .form-inline .input-group .form-control {    width: auto;  }  .form-inline .input-group > .form-control {    width: 100%;  }  .form-inline .control-label {    margin-bottom: 0;    vertical-align: middle;  }  .form-inline .radio,  .form-inline .checkbox {    display: inline-block;    margin-top: 0;    margin-bottom: 0;    vertical-align: middle;  }  .form-inline .radio label,  .form-inline .checkbox label {    padding-left: 0;  }  .form-inline .radio input[type="radio"],  .form-inline .checkbox input[type="checkbox"] {    position: relative;    margin-left: 0;  }  .form-inline .has-feedback .form-control-feedback {    top: 0;  }}.form-horizontal .radio,.form-horizontal .checkbox,.form-horizontal .radio-inline,.form-horizontal .checkbox-inline {  padding-top: 7px;  margin-top: 0;  margin-bottom: 0;}.form-horizontal .radio,.form-horizontal .checkbox {  min-height: 27px;}.form-horizontal .form-group {  margin-right: -15px;  margin-left: -15px;}@media (min-width: 768px) {  .form-horizontal .control-label {    padding-top: 7px;    margin-bottom: 0;    text-align: right;  }}.form-horizontal .has-feedback .form-control-feedback {  right: 15px;}@media (min-width: 768px) {  .form-horizontal .form-group-lg .control-label {    padding-top: 14.333333px;    font-size: 18px;  }}@media (min-width: 768px) {  .form-horizontal .form-group-sm .control-label {    padding-top: 6px;    font-size: 12px;  }}.btn {  display: inline-block;  padding: 6px 12px;  margin-bottom: 0;  font-size: 14px;  font-weight: normal;  line-height: 1.42857143;  text-align: center;  white-space: nowrap;  vertical-align: middle;  -ms-touch-action: manipulation;      touch-action: manipulation;  cursor: pointer;  -webkit-user-select: none;     -moz-user-select: none;      -ms-user-select: none;          user-select: none;  background-image: none;  border: 1px solid transparent;  border-radius: 4px;}.btn:focus,.btn:active:focus,.btn.active:focus,.btn.focus,.btn:active.focus,.btn.active.focus {  outline: thin dotted;  outline: 5px auto -webkit-focus-ring-color;  outline-offset: -2px;}.btn:hover,.btn:focus,.btn.focus {  color: #333;  text-decoration: none;}.btn:active,.btn.active {  background-image: none;  outline: 0;  -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);          box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);}.btn.disabled,.btn[disabled],fieldset[disabled] .btn {  cursor: not-allowed;  filter: alpha(opacity=65);  -webkit-box-shadow: none;          box-shadow: none;  opacity: .65;}a.btn.disabled,fieldset[disabled] a.btn {  pointer-events: none;}.btn-default {  color: #333;  background-color: #fff;  border-color: #ccc;}.btn-default:focus,.btn-default.focus {  color: #333;  background-color: #e6e6e6;  border-color: #8c8c8c;}.btn-default:hover {  color: #333;  background-color: #e6e6e6;  border-color: #adadad;}.btn-default:active,.btn-default.active,.open > .dropdown-toggle.btn-default {  color: #333;  background-color: #e6e6e6;  border-color: #adadad;}.btn-default:active:hover,.btn-default.active:hover,.open > .dropdown-toggle.btn-default:hover,.btn-default:active:focus,.btn-default.active:focus,.open > .dropdown-toggle.btn-default:focus,.btn-default:active.focus,.btn-default.active.focus,.open > .dropdown-toggle.btn-default.focus {  color: #333;  background-color: #d4d4d4;  border-color: #8c8c8c;}.btn-default:active,.btn-default.active,.open > .dropdown-toggle.btn-default {  background-image: none;}.btn-default.disabled,.btn-default[disabled],fieldset[disabled] .btn-default,.btn-default.disabled:hover,.btn-default[disabled]:hover,fieldset[disabled] .btn-default:hover,.btn-default.disabled:focus,.btn-default[disabled]:focus,fieldset[disabled] .btn-default:focus,.btn-default.disabled.focus,.btn-default[disabled].focus,fieldset[disabled] .btn-default.focus,.btn-default.disabled:active,.btn-default[disabled]:active,fieldset[disabled] .btn-default:active,.btn-default.disabled.active,.btn-default[disabled].active,fieldset[disabled] .btn-default.active {  background-color: #fff;  border-color: #ccc;}.btn-default .badge {  color: #fff;  background-color: #333;}.btn-primary {  color: #fff;  background-color: #337ab7;  border-color: #2e6da4;}.btn-primary:focus,.btn-primary.focus {  color: #fff;  background-color: #286090;  border-color: #122b40;}.btn-primary:hover {  color: #fff;  background-color: #286090;  border-color: #204d74;}.btn-primary:active,.btn-primary.active,.open > .dropdown-toggle.btn-primary {  color: #fff;  background-color: #286090;  border-color: #204d74;}.btn-primary:active:hover,.btn-primary.active:hover,.open > .dropdown-toggle.btn-primary:hover,.btn-primary:active:focus,.btn-primary.active:focus,.open > .dropdown-toggle.btn-primary:focus,.btn-primary:active.focus,.btn-primary.active.focus,.open > .dropdown-toggle.btn-primary.focus {  color: #fff;  background-color: #204d74;  border-color: #122b40;}.btn-primary:active,.btn-primary.active,.open > .dropdown-toggle.btn-primary {  background-image: none;}.btn-primary.disabled,.btn-primary[disabled],fieldset[disabled] .btn-primary,.btn-primary.disabled:hover,.btn-primary[disabled]:hover,fieldset[disabled] .btn-primary:hover,.btn-primary.disabled:focus,.btn-primary[disabled]:focus,fieldset[disabled] .btn-primary:focus,.btn-primary.disabled.focus,.btn-primary[disabled].focus,fieldset[disabled] .btn-primary.focus,.btn-primary.disabled:active,.btn-primary[disabled]:active,fieldset[disabled] .btn-primary:active,.btn-primary.disabled.active,.btn-primary[disabled].active,fieldset[disabled] .btn-primary.active {  background-color: #337ab7;  border-color: #2e6da4;}.btn-primary .badge {  color: #337ab7;  background-color: #fff;}.btn-success {  color: #fff;  background-color: #5cb85c;  border-color: #4cae4c;}.btn-success:focus,.btn-success.focus {  color: #fff;  background-color: #449d44;  border-color: #255625;}.btn-success:hover {  color: #fff;  background-color: #449d44;  border-color: #398439;}.btn-success:active,.btn-success.active,.open > .dropdown-toggle.btn-success {  color: #fff;  background-color: #449d44;  border-color: #398439;}.btn-success:active:hover,.btn-success.active:hover,.open > .dropdown-toggle.btn-success:hover,.btn-success:active:focus,.btn-success.active:focus,.open > .dropdown-toggle.btn-success:focus,.btn-success:active.focus,.btn-success.active.focus,.open > .dropdown-toggle.btn-success.focus {  color: #fff;  background-color: #398439;  border-color: #255625;}.btn-success:active,.btn-success.active,.open > .dropdown-toggle.btn-success {  background-image: none;}.btn-success.disabled,.btn-success[disabled],fieldset[disabled] .btn-success,.btn-success.disabled:hover,.btn-success[disabled]:hover,fieldset[disabled] .btn-success:hover,.btn-success.disabled:focus,.btn-success[disabled]:focus,fieldset[disabled] .btn-success:focus,.btn-success.disabled.focus,.btn-success[disabled].focus,fieldset[disabled] .btn-success.focus,.btn-success.disabled:active,.btn-success[disabled]:active,fieldset[disabled] .btn-success:active,.btn-success.disabled.active,.btn-success[disabled].active,fieldset[disabled] .btn-success.active {  background-color: #5cb85c;  border-color: #4cae4c;}.btn-success .badge {  color: #5cb85c;  background-color: #fff;}.btn-info {  color: #fff;  background-color: #5bc0de;  border-color: #46b8da;}.btn-info:focus,.btn-info.focus {  color: #fff;  background-color: #31b0d5;  border-color: #1b6d85;}.btn-info:hover {  color: #fff;  background-color: #31b0d5;  border-color: #269abc;}.btn-info:active,.btn-info.active,.open > .dropdown-toggle.btn-info {  color: #fff;  background-color: #31b0d5;  border-color: #269abc;}.btn-info:active:hover,.btn-info.active:hover,.open > .dropdown-toggle.btn-info:hover,.btn-info:active:focus,.btn-info.active:focus,.open > .dropdown-toggle.btn-info:focus,.btn-info:active.focus,.btn-info.active.focus,.open > .dropdown-toggle.btn-info.focus {  color: #fff;  background-color: #269abc;  border-color: #1b6d85;}.btn-info:active,.btn-info.active,.open > .dropdown-toggle.btn-info {  background-image: none;}.btn-info.disabled,.btn-info[disabled],fieldset[disabled] .btn-info,.btn-info.disabled:hover,.btn-info[disabled]:hover,fieldset[disabled] .btn-info:hover,.btn-info.disabled:focus,.btn-info[disabled]:focus,fieldset[disabled] .btn-info:focus,.btn-info.disabled.focus,.btn-info[disabled].focus,fieldset[disabled] .btn-info.focus,.btn-info.disabled:active,.btn-info[disabled]:active,fieldset[disabled] .btn-info:active,.btn-info.disabled.active,.btn-info[disabled].active,fieldset[disabled] .btn-info.active {  background-color: #5bc0de;  border-color: #46b8da;}.btn-info .badge {  color: #5bc0de;  background-color: #fff;}.btn-warning {  color: #fff;  background-color: #f0ad4e;  border-color: #eea236;}.btn-warning:focus,.btn-warning.focus {  color: #fff;  background-color: #ec971f;  border-color: #985f0d;}.btn-warning:hover {  color: #fff;  background-color: #ec971f;  border-color: #d58512;}.btn-warning:active,.btn-warning.active,.open > .dropdown-toggle.btn-warning {  color: #fff;  background-color: #ec971f;  border-color: #d58512;}.btn-warning:active:hover,.btn-warning.active:hover,.open > .dropdown-toggle.btn-warning:hover,.btn-warning:active:focus,.btn-warning.active:focus,.open > .dropdown-toggle.btn-warning:focus,.btn-warning:active.focus,.btn-warning.active.focus,.open > .dropdown-toggle.btn-warning.focus {  color: #fff;  background-color: #d58512;  border-color: #985f0d;}.btn-warning:active,.btn-warning.active,.open > .dropdown-toggle.btn-warning {  background-image: none;}.btn-warning.disabled,.btn-warning[disabled],fieldset[disabled] .btn-warning,.btn-warning.disabled:hover,.btn-warning[disabled]:hover,fieldset[disabled] .btn-warning:hover,.btn-warning.disabled:focus,.btn-warning[disabled]:focus,fieldset[disabled] .btn-warning:focus,.btn-warning.disabled.focus,.btn-warning[disabled].focus,fieldset[disabled] .btn-warning.focus,.btn-warning.disabled:active,.btn-warning[disabled]:active,fieldset[disabled] .btn-warning:active,.btn-warning.disabled.active,.btn-warning[disabled].active,fieldset[disabled] .btn-warning.active {  background-color: #f0ad4e;  border-color: #eea236;}.btn-warning .badge {  color: #f0ad4e;  background-color: #fff;}.btn-danger {  color: #fff;  background-color: #d9534f;  border-color: #d43f3a;}.btn-danger:focus,.btn-danger.focus {  color: #fff;  background-color: #c9302c;  border-color: #761c19;}.btn-danger:hover {  color: #fff;  background-color: #c9302c;  border-color: #ac2925;}.btn-danger:active,.btn-danger.active,.open > .dropdown-toggle.btn-danger {  color: #fff;  background-color: #c9302c;  border-color: #ac2925;}.btn-danger:active:hover,.btn-danger.active:hover,.open > .dropdown-toggle.btn-danger:hover,.btn-danger:active:focus,.btn-danger.active:focus,.open > .dropdown-toggle.btn-danger:focus,.btn-danger:active.focus,.btn-danger.active.focus,.open > .dropdown-toggle.btn-danger.focus {  color: #fff;  background-color: #ac2925;  border-color: #761c19;}.btn-danger:active,.btn-danger.active,.open > .dropdown-toggle.btn-danger {  background-image: none;}.btn-danger.disabled,.btn-danger[disabled],fieldset[disabled] .btn-danger,.btn-danger.disabled:hover,.btn-danger[disabled]:hover,fieldset[disabled] .btn-danger:hover,.btn-danger.disabled:focus,.btn-danger[disabled]:focus,fieldset[disabled] .btn-danger:focus,.btn-danger.disabled.focus,.btn-danger[disabled].focus,fieldset[disabled] .btn-danger.focus,.btn-danger.disabled:active,.btn-danger[disabled]:active,fieldset[disabled] .btn-danger:active,.btn-danger.disabled.active,.btn-danger[disabled].active,fieldset[disabled] .btn-danger.active {  background-color: #d9534f;  border-color: #d43f3a;}.btn-danger .badge {  color: #d9534f;  background-color: #fff;}.btn-link {  font-weight: normal;  color: #337ab7;  border-radius: 0;}.btn-link,.btn-link:active,.btn-link.active,.btn-link[disabled],fieldset[disabled] .btn-link {  background-color: transparent;  -webkit-box-shadow: none;          box-shadow: none;}.btn-link,.btn-link:hover,.btn-link:focus,.btn-link:active {  border-color: transparent;}.btn-link:hover,.btn-link:focus {  color: #23527c;  text-decoration: underline;  background-color: transparent;}.btn-link[disabled]:hover,fieldset[disabled] .btn-link:hover,.btn-link[disabled]:focus,fieldset[disabled] .btn-link:focus {  color: #777;  text-decoration: none;}.btn-lg,.btn-group-lg > .btn {  padding: 10px 16px;  font-size: 18px;  line-height: 1.3333333;  border-radius: 6px;}.btn-sm,.btn-group-sm > .btn {  padding: 5px 10px;  font-size: 12px;  line-height: 1.5;  border-radius: 3px;}.btn-xs,.btn-group-xs > .btn {  padding: 1px 5px;  font-size: 12px;  line-height: 1.5;  border-radius: 3px;}.btn-block {  display: block;  width: 100%;}.btn-block + .btn-block {  margin-top: 5px;}input[type="submit"].btn-block,input[type="reset"].btn-block,input[type="button"].btn-block {  width: 100%;}.fade {  opacity: 0;  -webkit-transition: opacity .15s linear;       -o-transition: opacity .15s linear;          transition: opacity .15s linear;}.fade.in {  opacity: 1;}.collapse {  display: none;}.collapse.in {  display: block;}tr.collapse.in {  display: table-row;}tbody.collapse.in {  display: table-row-group;}.collapsing {  position: relative;  height: 0;  overflow: hidden;  -webkit-transition-timing-function: ease;       -o-transition-timing-function: ease;          transition-timing-function: ease;  -webkit-transition-duration: .35s;       -o-transition-duration: .35s;          transition-duration: .35s;  -webkit-transition-property: height, visibility;       -o-transition-property: height, visibility;          transition-property: height, visibility;}.caret {  display: inline-block;  width: 0;  height: 0;  margin-left: 2px;  vertical-align: middle;  border-top: 4px dashed;  border-top: 4px solid \9;  border-right: 4px solid transparent;  border-left: 4px solid transparent;}.dropup,.dropdown {  position: relative;}.dropdown-toggle:focus {  outline: 0;}.dropdown-menu {  position: absolute;  top: 100%;  left: 0;  z-index: 1000;  display: none;  float: left;  min-width: 160px;  padding: 5px 0;  margin: 2px 0 0;  font-size: 14px;  text-align: left;  list-style: none;  background-color: #fff;  -webkit-background-clip: padding-box;          background-clip: padding-box;  border: 1px solid #ccc;  border: 1px solid rgba(0, 0, 0, .15);  border-radius: 4px;  -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, .175);          box-shadow: 0 6px 12px rgba(0, 0, 0, .175);}.dropdown-menu.pull-right {  right: 0;  left: auto;}.dropdown-menu .divider {  height: 1px;  margin: 9px 0;  overflow: hidden;  background-color: #e5e5e5;}.dropdown-menu > li > a {  display: block;  padding: 3px 20px;  clear: both;  font-weight: normal;  line-height: 1.42857143;  color: #333;  white-space: nowrap;}.dropdown-menu > li > a:hover,.dropdown-menu > li > a:focus {  color: #262626;  text-decoration: none;  background-color: #f5f5f5;}.dropdown-menu > .active > a,.dropdown-menu > .active > a:hover,.dropdown-menu > .active > a:focus {  color: #fff;  text-decoration: none;  background-color: #337ab7;  outline: 0;}.dropdown-menu > .disabled > a,.dropdown-menu > .disabled > a:hover,.dropdown-menu > .disabled > a:focus {  color: #777;}.dropdown-menu > .disabled > a:hover,.dropdown-menu > .disabled > a:focus {  text-decoration: none;  cursor: not-allowed;  background-color: transparent;  background-image: none;  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);}.open > .dropdown-menu {  display: block;}.open > a {  outline: 0;}.dropdown-menu-right {  right: 0;  left: auto;}.dropdown-menu-left {  right: auto;  left: 0;}.dropdown-header {  display: block;  padding: 3px 20px;  font-size: 12px;  line-height: 1.42857143;  color: #777;  white-space: nowrap;}.dropdown-backdrop {  position: fixed;  top: 0;  right: 0;  bottom: 0;  left: 0;  z-index: 990;}.pull-right > .dropdown-menu {  right: 0;  left: auto;}.dropup .caret,.navbar-fixed-bottom .dropdown .caret {  content: "";  border-top: 0;  border-bottom: 4px dashed;  border-bottom: 4px solid \9;}.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu {  top: auto;  bottom: 100%;  margin-bottom: 2px;}@media (min-width: 768px) {  .navbar-right .dropdown-menu {    right: 0;    left: auto;  }  .navbar-right .dropdown-menu-left {    right: auto;    left: 0;  }}.btn-group,.btn-group-vertical {  position: relative;  display: inline-block;  vertical-align: middle;}.btn-group > .btn,.btn-group-vertical > .btn {  position: relative;  float: left;}.btn-group > .btn:hover,.btn-group-vertical > .btn:hover,.btn-group > .btn:focus,.btn-group-vertical > .btn:focus,.btn-group > .btn:active,.btn-group-vertical > .btn:active,.btn-group > .btn.active,.btn-group-vertical > .btn.active {  z-index: 2;}.btn-group .btn + .btn,.btn-group .btn + .btn-group,.btn-group .btn-group + .btn,.btn-group .btn-group + .btn-group {  margin-left: -1px;}.btn-toolbar {  margin-left: -5px;}.btn-toolbar .btn,.btn-toolbar .btn-group,.btn-toolbar .input-group {  float: left;}.btn-toolbar > .btn,.btn-toolbar > .btn-group,.btn-toolbar > .input-group {  margin-left: 5px;}.btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {  border-radius: 0;}.btn-group > .btn:first-child {  margin-left: 0;}.btn-group > .btn:first-child:not(:last-child):not(.dropdown-toggle) {  border-top-right-radius: 0;  border-bottom-right-radius: 0;}.btn-group > .btn:last-child:not(:first-child),.btn-group > .dropdown-toggle:not(:first-child) {  border-top-left-radius: 0;  border-bottom-left-radius: 0;}.btn-group > .btn-group {  float: left;}.btn-group > .btn-group:not(:first-child):not(:last-child) > .btn {  border-radius: 0;}.btn-group > .btn-group:first-child:not(:last-child) > .btn:last-child,.btn-group > .btn-group:first-child:not(:last-child) > .dropdown-toggle {  border-top-right-radius: 0;  border-bottom-right-radius: 0;}.btn-group > .btn-group:last-child:not(:first-child) > .btn:first-child {  border-top-left-radius: 0;  border-bottom-left-radius: 0;}.btn-group .dropdown-toggle:active,.btn-group.open .dropdown-toggle {  outline: 0;}.btn-group > .btn + .dropdown-toggle {  padding-right: 8px;  padding-left: 8px;}.btn-group > .btn-lg + .dropdown-toggle {  padding-right: 12px;  padding-left: 12px;}.btn-group.open .dropdown-toggle {  -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);          box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);}.btn-group.open .dropdown-toggle.btn-link {  -webkit-box-shadow: none;          box-shadow: none;}.btn .caret {  margin-left: 0;}.btn-lg .caret {  border-width: 5px 5px 0;  border-bottom-width: 0;}.dropup .btn-lg .caret {  border-width: 0 5px 5px;}.btn-group-vertical > .btn,.btn-group-vertical > .btn-group,.btn-group-vertical > .btn-group > .btn {  display: block;  float: none;  width: 100%;  max-width: 100%;}.btn-group-vertical > .btn-group > .btn {  float: none;}.btn-group-vertical > .btn + .btn,.btn-group-vertical > .btn + .btn-group,.btn-group-vertical > .btn-group + .btn,.btn-group-vertical > .btn-group + .btn-group {  margin-top: -1px;  margin-left: 0;}.btn-group-vertical > .btn:not(:first-child):not(:last-child) {  border-radius: 0;}.btn-group-vertical > .btn:first-child:not(:last-child) {  border-top-right-radius: 4px;  border-bottom-right-radius: 0;  border-bottom-left-radius: 0;}.btn-group-vertical > .btn:last-child:not(:first-child) {  border-top-left-radius: 0;  border-top-right-radius: 0;  border-bottom-left-radius: 4px;}.btn-group-vertical > .btn-group:not(:first-child):not(:last-child) > .btn {  border-radius: 0;}.btn-group-vertical > .btn-group:first-child:not(:last-child) > .btn:last-child,.btn-group-vertical > .btn-group:first-child:not(:last-child) > .dropdown-toggle {  border-bottom-right-radius: 0;  border-bottom-left-radius: 0;}.btn-group-vertical > .btn-group:last-child:not(:first-child) > .btn:first-child {  border-top-left-radius: 0;  border-top-right-radius: 0;}.btn-group-justified {  display: table;  width: 100%;  table-layout: fixed;  border-collapse: separate;}.btn-group-justified > .btn,.btn-group-justified > .btn-group {  display: table-cell;  float: none;  width: 1%;}.btn-group-justified > .btn-group .btn {  width: 100%;}.btn-group-justified > .btn-group .dropdown-menu {  left: auto;}[data-toggle="buttons"] > .btn input[type="radio"],[data-toggle="buttons"] > .btn-group > .btn input[type="radio"],[data-toggle="buttons"] > .btn input[type="checkbox"],[data-toggle="buttons"] > .btn-group > .btn input[type="checkbox"] {  position: absolute;  clip: rect(0, 0, 0, 0);  pointer-events: none;}.input-group {  position: relative;  display: table;  border-collapse: separate;}.input-group[class*="col-"] {  float: none;  padding-right: 0;  padding-left: 0;}.input-group .form-control {  position: relative;  z-index: 2;  float: left;  width: 100%;  margin-bottom: 0;}.input-group-lg > .form-control,.input-group-lg > .input-group-addon,.input-group-lg > .input-group-btn > .btn {  height: 46px;  padding: 10px 16px;  font-size: 18px;  line-height: 1.3333333;  border-radius: 6px;}select.input-group-lg > .form-control,select.input-group-lg > .input-group-addon,select.input-group-lg > .input-group-btn > .btn {  height: 46px;  line-height: 46px;}textarea.input-group-lg > .form-control,textarea.input-group-lg > .input-group-addon,textarea.input-group-lg > .input-group-btn > .btn,select[multiple].input-group-lg > .form-control,select[multiple].input-group-lg > .input-group-addon,select[multiple].input-group-lg > .input-group-btn > .btn {  height: auto;}.input-group-sm > .form-control,.input-group-sm > .input-group-addon,.input-group-sm > .input-group-btn > .btn {  height: 30px;  padding: 5px 10px;  font-size: 12px;  line-height: 1.5;  border-radius: 3px;}select.input-group-sm > .form-control,select.input-group-sm > .input-group-addon,select.input-group-sm > .input-group-btn > .btn {  height: 30px;  line-height: 30px;}textarea.input-group-sm > .form-control,textarea.input-group-sm > .input-group-addon,textarea.input-group-sm > .input-group-btn > .btn,select[multiple].input-group-sm > .form-control,select[multiple].input-group-sm > .input-group-addon,select[multiple].input-group-sm > .input-group-btn > .btn {  height: auto;}.input-group-addon,.input-group-btn,.input-group .form-control {  display: table-cell;}.input-group-addon:not(:first-child):not(:last-child),.input-group-btn:not(:first-child):not(:last-child),.input-group .form-control:not(:first-child):not(:last-child) {  border-radius: 0;}.input-group-addon,.input-group-btn {  width: 1%;  white-space: nowrap;  vertical-align: middle;}.input-group-addon {  padding: 6px 12px;  font-size: 14px;  font-weight: normal;  line-height: 1;  color: #555;  text-align: center;  background-color: #eee;  border: 1px solid #ccc;  border-radius: 4px;}.input-group-addon.input-sm {  padding: 5px 10px;  font-size: 12px;  border-radius: 3px;}.input-group-addon.input-lg {  padding: 10px 16px;  font-size: 18px;  border-radius: 6px;}.input-group-addon input[type="radio"],.input-group-addon input[type="checkbox"] {  margin-top: 0;}.input-group .form-control:first-child,.input-group-addon:first-child,.input-group-btn:first-child > .btn,.input-group-btn:first-child > .btn-group > .btn,.input-group-btn:first-child > .dropdown-toggle,.input-group-btn:last-child > .btn:not(:last-child):not(.dropdown-toggle),.input-group-btn:last-child > .btn-group:not(:last-child) > .btn {  border-top-right-radius: 0;  border-bottom-right-radius: 0;}.input-group-addon:first-child {  border-right: 0;}.input-group .form-control:last-child,.input-group-addon:last-child,.input-group-btn:last-child > .btn,.input-group-btn:last-child > .btn-group > .btn,.input-group-btn:last-child > .dropdown-toggle,.input-group-btn:first-child > .btn:not(:first-child),.input-group-btn:first-child > .btn-group:not(:first-child) > .btn {  border-top-left-radius: 0;  border-bottom-left-radius: 0;}.input-group-addon:last-child {  border-left: 0;}.input-group-btn {  position: relative;  font-size: 0;  white-space: nowrap;}.input-group-btn > .btn {  position: relative;}.input-group-btn > .btn + .btn {  margin-left: -1px;}.input-group-btn > .btn:hover,.input-group-btn > .btn:focus,.input-group-btn > .btn:active {  z-index: 2;}.input-group-btn:first-child > .btn,.input-group-btn:first-child > .btn-group {  margin-right: -1px;}.input-group-btn:last-child > .btn,.input-group-btn:last-child > .btn-group {  z-index: 2;  margin-left: -1px;}.nav {  padding-left: 0;  margin-bottom: 0;  list-style: none;}.nav > li {  position: relative;  display: block;}.nav > li > a {  position: relative;  display: block;  padding: 10px 15px;}.nav > li > a:hover,.nav > li > a:focus {  text-decoration: none;  background-color: #eee;}.nav > li.disabled > a {  color: #777;}.nav > li.disabled > a:hover,.nav > li.disabled > a:focus {  color: #777;  text-decoration: none;  cursor: not-allowed;  background-color: transparent;}.nav .open > a,.nav .open > a:hover,.nav .open > a:focus {  background-color: #eee;  border-color: #337ab7;}.nav .nav-divider {  height: 1px;  margin: 9px 0;  overflow: hidden;  background-color: #e5e5e5;}.nav > li > a > img {  max-width: none;}.nav-tabs {  border-bottom: 1px solid #ddd;}.nav-tabs > li {  float: left;  margin-bottom: -1px;}.nav-tabs > li > a {  margin-right: 2px;  line-height: 1.42857143;  border: 1px solid transparent;  border-radius: 4px 4px 0 0;}.nav-tabs > li > a:hover {  border-color: #eee #eee #ddd;}.nav-tabs > li.active > a,.nav-tabs > li.active > a:hover,.nav-tabs > li.active > a:focus {  color: #555;  cursor: default;  background-color: #fff;  border: 1px solid #ddd;  border-bottom-color: transparent;}.nav-tabs.nav-justified {  width: 100%;  border-bottom: 0;}.nav-tabs.nav-justified > li {  float: none;}.nav-tabs.nav-justified > li > a {  margin-bottom: 5px;  text-align: center;}.nav-tabs.nav-justified > .dropdown .dropdown-menu {  top: auto;  left: auto;}@media (min-width: 768px) {  .nav-tabs.nav-justified > li {    display: table-cell;    width: 1%;  }  .nav-tabs.nav-justified > li > a {    margin-bottom: 0;  }}.nav-tabs.nav-justified > li > a {  margin-right: 0;  border-radius: 4px;}.nav-tabs.nav-justified > .active > a,.nav-tabs.nav-justified > .active > a:hover,.nav-tabs.nav-justified > .active > a:focus {  border: 1px solid #ddd;}@media (min-width: 768px) {  .nav-tabs.nav-justified > li > a {    border-bottom: 1px solid #ddd;    border-radius: 4px 4px 0 0;  }  .nav-tabs.nav-justified > .active > a,  .nav-tabs.nav-justified > .active > a:hover,  .nav-tabs.nav-justified > .active > a:focus {    border-bottom-color: #fff;  }}.nav-pills > li {  float: left;}.nav-pills > li > a {  border-radius: 4px;}.nav-pills > li + li {  margin-left: 2px;}.nav-pills > li.active > a,.nav-pills > li.active > a:hover,.nav-pills > li.active > a:focus {  color: #fff;  background-color: #337ab7;}.nav-stacked > li {  float: none;}.nav-stacked > li + li {  margin-top: 2px;  margin-left: 0;}.nav-justified {  width: 100%;}.nav-justified > li {  float: none;}.nav-justified > li > a {  margin-bottom: 5px;  text-align: center;}.nav-justified > .dropdown .dropdown-menu {  top: auto;  left: auto;}@media (min-width: 768px) {  .nav-justified > li {    display: table-cell;    width: 1%;  }  .nav-justified > li > a {    margin-bottom: 0;  }}.nav-tabs-justified {  border-bottom: 0;}.nav-tabs-justified > li > a {  margin-right: 0;  border-radius: 4px;}.nav-tabs-justified > .active > a,.nav-tabs-justified > .active > a:hover,.nav-tabs-justified > .active > a:focus {  border: 1px solid #ddd;}@media (min-width: 768px) {  .nav-tabs-justified > li > a {    border-bottom: 1px solid #ddd;    border-radius: 4px 4px 0 0;  }  .nav-tabs-justified > .active > a,  .nav-tabs-justified > .active > a:hover,  .nav-tabs-justified > .active > a:focus {    border-bottom-color: #fff;  }}.tab-content > .tab-pane {  display: none;}.tab-content > .active {  display: block;}.nav-tabs .dropdown-menu {  margin-top: -1px;  border-top-left-radius: 0;  border-top-right-radius: 0;}.navbar {  position: relative;  min-height: 50px;  margin-bottom: 20px;  border: 1px solid transparent;}@media (min-width: 768px) {  .navbar {    border-radius: 4px;  }}@media (min-width: 768px) {  .navbar-header {    float: left;  }}.navbar-collapse {  padding-right: 15px;  padding-left: 15px;  overflow-x: visible;  -webkit-overflow-scrolling: touch;  border-top: 1px solid transparent;  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1);          box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1);}.navbar-collapse.in {  overflow-y: auto;}@media (min-width: 768px) {  .navbar-collapse {    width: auto;    border-top: 0;    -webkit-box-shadow: none;            box-shadow: none;  }  .navbar-collapse.collapse {    display: block !important;    height: auto !important;    padding-bottom: 0;    overflow: visible !important;  }  .navbar-collapse.in {    overflow-y: visible;  }  .navbar-fixed-top .navbar-collapse,  .navbar-static-top .navbar-collapse,  .navbar-fixed-bottom .navbar-collapse {    padding-right: 0;    padding-left: 0;  }}.navbar-fixed-top .navbar-collapse,.navbar-fixed-bottom .navbar-collapse {  max-height: 340px;}@media (max-device-width: 480px) and (orientation: landscape) {  .navbar-fixed-top .navbar-collapse,  .navbar-fixed-bottom .navbar-collapse {    max-height: 200px;  }}.container > .navbar-header,.container-fluid > .navbar-header,.container > .navbar-collapse,.container-fluid > .navbar-collapse {  margin-right: -15px;  margin-left: -15px;}@media (min-width: 768px) {  .container > .navbar-header,  .container-fluid > .navbar-header,  .container > .navbar-collapse,  .container-fluid > .navbar-collapse {    margin-right: 0;    margin-left: 0;  }}.navbar-static-top {  z-index: 1000;  border-width: 0 0 1px;}@media (min-width: 768px) {  .navbar-static-top {    border-radius: 0;  }}.navbar-fixed-top,.navbar-fixed-bottom {  position: fixed;  right: 0;  left: 0;  z-index: 1030;}@media (min-width: 768px) {  .navbar-fixed-top,  .navbar-fixed-bottom {    border-radius: 0;  }}.navbar-fixed-top {  top: 0;  border-width: 0 0 1px;}.navbar-fixed-bottom {  bottom: 0;  margin-bottom: 0;  border-width: 1px 0 0;}.navbar-brand {  float: left;  height: 50px;  padding: 15px 15px;  font-size: 18px;  line-height: 20px;}.navbar-brand:hover,.navbar-brand:focus {  text-decoration: none;}.navbar-brand > img {  display: block;}@media (min-width: 768px) {  .navbar > .container .navbar-brand,  .navbar > .container-fluid .navbar-brand {    margin-left: -15px;  }}.navbar-toggle {  position: relative;  float: right;  padding: 9px 10px;  margin-top: 8px;  margin-right: 15px;  margin-bottom: 8px;  background-color: transparent;  background-image: none;  border: 1px solid transparent;  border-radius: 4px;}.navbar-toggle:focus {  outline: 0;}.navbar-toggle .icon-bar {  display: block;  width: 22px;  height: 2px;  border-radius: 1px;}.navbar-toggle .icon-bar + .icon-bar {  margin-top: 4px;}@media (min-width: 768px) {  .navbar-toggle {    display: none;  }}.navbar-nav {  margin: 7.5px -15px;}.navbar-nav > li > a {  padding-top: 10px;  padding-bottom: 10px;  line-height: 20px;}@media (max-width: 767px) {  .navbar-nav .open .dropdown-menu {    position: static;    float: none;    width: auto;    margin-top: 0;    background-color: transparent;    border: 0;    -webkit-box-shadow: none;            box-shadow: none;  }  .navbar-nav .open .dropdown-menu > li > a,  .navbar-nav .open .dropdown-menu .dropdown-header {    padding: 5px 15px 5px 25px;  }  .navbar-nav .open .dropdown-menu > li > a {    line-height: 20px;  }  .navbar-nav .open .dropdown-menu > li > a:hover,  .navbar-nav .open .dropdown-menu > li > a:focus {    background-image: none;  }}@media (min-width: 768px) {  .navbar-nav {    float: left;    margin: 0;  }  .navbar-nav > li {    float: left;  }  .navbar-nav > li > a {    padding-top: 15px;    padding-bottom: 15px;  }}.navbar-form {  padding: 10px 15px;  margin-top: 8px;  margin-right: -15px;  margin-bottom: 8px;  margin-left: -15px;  border-top: 1px solid transparent;  border-bottom: 1px solid transparent;  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1), 0 1px 0 rgba(255, 255, 255, .1);          box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1), 0 1px 0 rgba(255, 255, 255, .1);}@media (min-width: 768px) {  .navbar-form .form-group {    display: inline-block;    margin-bottom: 0;    vertical-align: middle;  }  .navbar-form .form-control {    display: inline-block;    width: auto;    vertical-align: middle;  }  .navbar-form .form-control-static {    display: inline-block;  }  .navbar-form .input-group {    display: inline-table;    vertical-align: middle;  }  .navbar-form .input-group .input-group-addon,  .navbar-form .input-group .input-group-btn,  .navbar-form .input-group .form-control {    width: auto;  }  .navbar-form .input-group > .form-control {    width: 100%;  }  .navbar-form .control-label {    margin-bottom: 0;    vertical-align: middle;  }  .navbar-form .radio,  .navbar-form .checkbox {    display: inline-block;    margin-top: 0;    margin-bottom: 0;    vertical-align: middle;  }  .navbar-form .radio label,  .navbar-form .checkbox label {    padding-left: 0;  }  .navbar-form .radio input[type="radio"],  .navbar-form .checkbox input[type="checkbox"] {    position: relative;    margin-left: 0;  }  .navbar-form .has-feedback .form-control-feedback {    top: 0;  }}@media (max-width: 767px) {  .navbar-form .form-group {    margin-bottom: 5px;  }  .navbar-form .form-group:last-child {    margin-bottom: 0;  }}@media (min-width: 768px) {  .navbar-form {    width: auto;    padding-top: 0;    padding-bottom: 0;    margin-right: 0;    margin-left: 0;    border: 0;    -webkit-box-shadow: none;            box-shadow: none;  }}.navbar-nav > li > .dropdown-menu {  margin-top: 0;  border-top-left-radius: 0;  border-top-right-radius: 0;}.navbar-fixed-bottom .navbar-nav > li > .dropdown-menu {  margin-bottom: 0;  border-top-left-radius: 4px;  border-top-right-radius: 4px;  border-bottom-right-radius: 0;  border-bottom-left-radius: 0;}.navbar-btn {  margin-top: 8px;  margin-bottom: 8px;}.navbar-btn.btn-sm {  margin-top: 10px;  margin-bottom: 10px;}.navbar-btn.btn-xs {  margin-top: 14px;  margin-bottom: 14px;}.navbar-text {  margin-top: 15px;  margin-bottom: 15px;}@media (min-width: 768px) {  .navbar-text {    float: left;    margin-right: 15px;    margin-left: 15px;  }}@media (min-width: 768px) {  .navbar-left {    float: left !important;  }  .navbar-right {    float: right !important;    margin-right: -15px;  }  .navbar-right ~ .navbar-right {    margin-right: 0;  }}.navbar-default {  background-color: #f8f8f8;  border-color: #e7e7e7;}.navbar-default .navbar-brand {  color: #777;}.navbar-default .navbar-brand:hover,.navbar-default .navbar-brand:focus {  color: #5e5e5e;  background-color: transparent;}.navbar-default .navbar-text {  color: #777;}.navbar-default .navbar-nav > li > a {  color: #777;}.navbar-default .navbar-nav > li > a:hover,.navbar-default .navbar-nav > li > a:focus {  color: #333;  background-color: transparent;}.navbar-default .navbar-nav > .active > a,.navbar-default .navbar-nav > .active > a:hover,.navbar-default .navbar-nav > .active > a:focus {  color: #555;  background-color: #e7e7e7;}.navbar-default .navbar-nav > .disabled > a,.navbar-default .navbar-nav > .disabled > a:hover,.navbar-default .navbar-nav > .disabled > a:focus {  color: #ccc;  background-color: transparent;}.navbar-default .navbar-toggle {  border-color: #ddd;}.navbar-default .navbar-toggle:hover,.navbar-default .navbar-toggle:focus {  background-color: #ddd;}.navbar-default .navbar-toggle .icon-bar {  background-color: #888;}.navbar-default .navbar-collapse,.navbar-default .navbar-form {  border-color: #e7e7e7;}.navbar-default .navbar-nav > .open > a,.navbar-default .navbar-nav > .open > a:hover,.navbar-default .navbar-nav > .open > a:focus {  color: #555;  background-color: #e7e7e7;}@media (max-width: 767px) {  .navbar-default .navbar-nav .open .dropdown-menu > li > a {    color: #777;  }  .navbar-default .navbar-nav .open .dropdown-menu > li > a:hover,  .navbar-default .navbar-nav .open .dropdown-menu > li > a:focus {    color: #333;    background-color: transparent;  }  .navbar-default .navbar-nav .open .dropdown-menu > .active > a,  .navbar-default .navbar-nav .open .dropdown-menu > .active > a:hover,  .navbar-default .navbar-nav .open .dropdown-menu > .active > a:focus {    color: #555;    background-color: #e7e7e7;  }  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a,  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:hover,  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:focus {    color: #ccc;    background-color: transparent;  }}.navbar-default .navbar-link {  color: #777;}.navbar-default .navbar-link:hover {  color: #333;}.navbar-default .btn-link {  color: #777;}.navbar-default .btn-link:hover,.navbar-default .btn-link:focus {  color: #333;}.navbar-default .btn-link[disabled]:hover,fieldset[disabled] .navbar-default .btn-link:hover,.navbar-default .btn-link[disabled]:focus,fieldset[disabled] .navbar-default .btn-link:focus {  color: #ccc;}.navbar-inverse {  background-color: #222;  border-color: #080808;}.navbar-inverse .navbar-brand {  color: #9d9d9d;}.navbar-inverse .navbar-brand:hover,.navbar-inverse .navbar-brand:focus {  color: #fff;  background-color: transparent;}.navbar-inverse .navbar-text {  color: #9d9d9d;}.navbar-inverse .navbar-nav > li > a {  color: #9d9d9d;}.navbar-inverse .navbar-nav > li > a:hover,.navbar-inverse .navbar-nav > li > a:focus {  color: #fff;  background-color: transparent;}.navbar-inverse .navbar-nav > .active > a,.navbar-inverse .navbar-nav > .active > a:hover,.navbar-inverse .navbar-nav > .active > a:focus {  color: #fff;  background-color: #080808;}.navbar-inverse .navbar-nav > .disabled > a,.navbar-inverse .navbar-nav > .disabled > a:hover,.navbar-inverse .navbar-nav > .disabled > a:focus {  color: #444;  background-color: transparent;}.navbar-inverse .navbar-toggle {  border-color: #333;}.navbar-inverse .navbar-toggle:hover,.navbar-inverse .navbar-toggle:focus {  background-color: #333;}.navbar-inverse .navbar-toggle .icon-bar {  background-color: #fff;}.navbar-inverse .navbar-collapse,.navbar-inverse .navbar-form {  border-color: #101010;}.navbar-inverse .navbar-nav > .open > a,.navbar-inverse .navbar-nav > .open > a:hover,.navbar-inverse .navbar-nav > .open > a:focus {  color: #fff;  background-color: #080808;}@media (max-width: 767px) {  .navbar-inverse .navbar-nav .open .dropdown-menu > .dropdown-header {    border-color: #080808;  }  .navbar-inverse .navbar-nav .open .dropdown-menu .divider {    background-color: #080808;  }  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a {    color: #9d9d9d;  }  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:hover,  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:focus {    color: #fff;    background-color: transparent;  }  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a,  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:hover,  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:focus {    color: #fff;    background-color: #080808;  }  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a,  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:hover,  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:focus {    color: #444;    background-color: transparent;  }}.navbar-inverse .navbar-link {  color: #9d9d9d;}.navbar-inverse .navbar-link:hover {  color: #fff;}.navbar-inverse .btn-link {  color: #9d9d9d;}.navbar-inverse .btn-link:hover,.navbar-inverse .btn-link:focus {  color: #fff;}.navbar-inverse .btn-link[disabled]:hover,fieldset[disabled] .navbar-inverse .btn-link:hover,.navbar-inverse .btn-link[disabled]:focus,fieldset[disabled] .navbar-inverse .btn-link:focus {  color: #444;}.breadcrumb {  padding: 8px 15px;  margin-bottom: 20px;  list-style: none;  background-color: #f5f5f5;  border-radius: 4px;}.breadcrumb > li {  display: inline-block;}.breadcrumb > li + li:before {  padding: 0 5px;  color: #ccc;  content: "/\00a0";}.breadcrumb > .active {  color: #777;}.pagination {  display: inline-block;  padding-left: 0;  margin: 20px 0;  border-radius: 4px;}.pagination > li {  display: inline;}.pagination > li > a,.pagination > li > span {  position: relative;  float: left;  padding: 6px 12px;  margin-left: -1px;  line-height: 1.42857143;  color: #337ab7;  text-decoration: none;  background-color: #fff;  border: 1px solid #ddd;}.pagination > li:first-child > a,.pagination > li:first-child > span {  margin-left: 0;  border-top-left-radius: 4px;  border-bottom-left-radius: 4px;}.pagination > li:last-child > a,.pagination > li:last-child > span {  border-top-right-radius: 4px;  border-bottom-right-radius: 4px;}.pagination > li > a:hover,.pagination > li > span:hover,.pagination > li > a:focus,.pagination > li > span:focus {  z-index: 3;  color: #23527c;  background-color: #eee;  border-color: #ddd;}.pagination > .active > a,.pagination > .active > span,.pagination > .active > a:hover,.pagination > .active > span:hover,.pagination > .active > a:focus,.pagination > .active > span:focus {  z-index: 2;  color: #fff;  cursor: default;  background-color: #337ab7;  border-color: #337ab7;}.pagination > .disabled > span,.pagination > .disabled > span:hover,.pagination > .disabled > span:focus,.pagination > .disabled > a,.pagination > .disabled > a:hover,.pagination > .disabled > a:focus {  color: #777;  cursor: not-allowed;  background-color: #fff;  border-color: #ddd;}.pagination-lg > li > a,.pagination-lg > li > span {  padding: 10px 16px;  font-size: 18px;  line-height: 1.3333333;}.pagination-lg > li:first-child > a,.pagination-lg > li:first-child > span {  border-top-left-radius: 6px;  border-bottom-left-radius: 6px;}.pagination-lg > li:last-child > a,.pagination-lg > li:last-child > span {  border-top-right-radius: 6px;  border-bottom-right-radius: 6px;}.pagination-sm > li > a,.pagination-sm > li > span {  padding: 5px 10px;  font-size: 12px;  line-height: 1.5;}.pagination-sm > li:first-child > a,.pagination-sm > li:first-child > span {  border-top-left-radius: 3px;  border-bottom-left-radius: 3px;}.pagination-sm > li:last-child > a,.pagination-sm > li:last-child > span {  border-top-right-radius: 3px;  border-bottom-right-radius: 3px;}.pager {  padding-left: 0;  margin: 20px 0;  text-align: center;  list-style: none;}.pager li {  display: inline;}.pager li > a,.pager li > span {  display: inline-block;  padding: 5px 14px;  background-color: #fff;  border: 1px solid #ddd;  border-radius: 15px;}.pager li > a:hover,.pager li > a:focus {  text-decoration: none;  background-color: #eee;}.pager .next > a,.pager .next > span {  float: right;}.pager .previous > a,.pager .previous > span {  float: left;}.pager .disabled > a,.pager .disabled > a:hover,.pager .disabled > a:focus,.pager .disabled > span {  color: #777;  cursor: not-allowed;  background-color: #fff;}.label {  display: inline;  padding: .2em .6em .3em;  font-size: 75%;  font-weight: bold;  line-height: 1;  color: #fff;  text-align: center;  white-space: nowrap;  vertical-align: baseline;  border-radius: .25em;}a.label:hover,a.label:focus {  color: #fff;  text-decoration: none;  cursor: pointer;}.label:empty {  display: none;}.btn .label {  position: relative;  top: -1px;}.label-default {  background-color: #777;}.label-default[href]:hover,.label-default[href]:focus {  background-color: #5e5e5e;}.label-primary {  background-color: #337ab7;}.label-primary[href]:hover,.label-primary[href]:focus {  background-color: #286090;}.label-success {  background-color: #5cb85c;}.label-success[href]:hover,.label-success[href]:focus {  background-color: #449d44;}.label-info {  background-color: #5bc0de;}.label-info[href]:hover,.label-info[href]:focus {  background-color: #31b0d5;}.label-warning {  background-color: #f0ad4e;}.label-warning[href]:hover,.label-warning[href]:focus {  background-color: #ec971f;}.label-danger {  background-color: #d9534f;}.label-danger[href]:hover,.label-danger[href]:focus {  background-color: #c9302c;}.badge {  display: inline-block;  min-width: 10px;  padding: 3px 7px;  font-size: 12px;  font-weight: bold;  line-height: 1;  color: #fff;  text-align: center;  white-space: nowrap;  vertical-align: middle;  background-color: #777;  border-radius: 10px;}.badge:empty {  display: none;}.btn .badge {  position: relative;  top: -1px;}.btn-xs .badge,.btn-group-xs > .btn .badge {  top: 0;  padding: 1px 5px;}a.badge:hover,a.badge:focus {  color: #fff;  text-decoration: none;  cursor: pointer;}.list-group-item.active > .badge,.nav-pills > .active > a > .badge {  color: #337ab7;  background-color: #fff;}.list-group-item > .badge {  float: right;}.list-group-item > .badge + .badge {  margin-right: 5px;}.nav-pills > li > a > .badge {  margin-left: 3px;}.jumbotron {  padding-top: 30px;  padding-bottom: 30px;  margin-bottom: 30px;  color: inherit;  background-color: #eee;}.jumbotron h1,.jumbotron .h1 {  color: inherit;}.jumbotron p {  margin-bottom: 15px;  font-size: 21px;  font-weight: 200;}.jumbotron > hr {  border-top-color: #d5d5d5;}.container .jumbotron,.container-fluid .jumbotron {  border-radius: 6px;}.jumbotron .container {  max-width: 100%;}@media screen and (min-width: 768px) {  .jumbotron {    padding-top: 48px;    padding-bottom: 48px;  }  .container .jumbotron,  .container-fluid .jumbotron {    padding-right: 60px;    padding-left: 60px;  }  .jumbotron h1,  .jumbotron .h1 {    font-size: 63px;  }}.thumbnail {  display: block;  padding: 4px;  margin-bottom: 20px;  line-height: 1.42857143;  background-color: #fff;  border: 1px solid #ddd;  border-radius: 4px;  -webkit-transition: border .2s ease-in-out;       -o-transition: border .2s ease-in-out;          transition: border .2s ease-in-out;}.thumbnail > img,.thumbnail a > img {  margin-right: auto;  margin-left: auto;}a.thumbnail:hover,a.thumbnail:focus,a.thumbnail.active {  border-color: #337ab7;}.thumbnail .caption {  padding: 9px;  color: #333;}.alert {  padding: 15px;  margin-bottom: 20px;  border: 1px solid transparent;  border-radius: 4px;}.alert h4 {  margin-top: 0;  color: inherit;}.alert .alert-link {  font-weight: bold;}.alert > p,.alert > ul {  margin-bottom: 0;}.alert > p + p {  margin-top: 5px;}.alert-dismissable,.alert-dismissible {  padding-right: 35px;}.alert-dismissable .close,.alert-dismissible .close {  position: relative;  top: -2px;  right: -21px;  color: inherit;}.alert-success {  color: #3c763d;  background-color: #dff0d8;  border-color: #d6e9c6;}.alert-success hr {  border-top-color: #c9e2b3;}.alert-success .alert-link {  color: #2b542c;}.alert-info {  color: #31708f;  background-color: #d9edf7;  border-color: #bce8f1;}.alert-info hr {  border-top-color: #a6e1ec;}.alert-info .alert-link {  color: #245269;}.alert-warning {  color: #8a6d3b;  background-color: #fcf8e3;  border-color: #faebcc;}.alert-warning hr {  border-top-color: #f7e1b5;}.alert-warning .alert-link {  color: #66512c;}.alert-danger {  color: #a94442;  background-color: #f2dede;  border-color: #ebccd1;}.alert-danger hr {  border-top-color: #e4b9c0;}.alert-danger .alert-link {  color: #843534;}@-webkit-keyframes progress-bar-stripes {  from {    background-position: 40px 0;  }  to {    background-position: 0 0;  }}@-o-keyframes progress-bar-stripes {  from {    background-position: 40px 0;  }  to {    background-position: 0 0;  }}@keyframes progress-bar-stripes {  from {    background-position: 40px 0;  }  to {    background-position: 0 0;  }}.progress {  height: 20px;  margin-bottom: 20px;  overflow: hidden;  background-color: #f5f5f5;  border-radius: 4px;  -webkit-box-shadow: inset 0 1px 2px rgba(0, 0, 0, .1);          box-shadow: inset 0 1px 2px rgba(0, 0, 0, .1);}.progress-bar {  float: left;  width: 0;  height: 100%;  font-size: 12px;  line-height: 20px;  color: #fff;  text-align: center;  background-color: #337ab7;  -webkit-box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .15);          box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .15);  -webkit-transition: width .6s ease;       -o-transition: width .6s ease;          transition: width .6s ease;}.progress-striped .progress-bar,.progress-bar-striped {  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  -webkit-background-size: 40px 40px;          background-size: 40px 40px;}.progress.active .progress-bar,.progress-bar.active {  -webkit-animation: progress-bar-stripes 2s linear infinite;       -o-animation: progress-bar-stripes 2s linear infinite;          animation: progress-bar-stripes 2s linear infinite;}.progress-bar-success {  background-color: #5cb85c;}.progress-striped .progress-bar-success {  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);}.progress-bar-info {  background-color: #5bc0de;}.progress-striped .progress-bar-info {  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);}.progress-bar-warning {  background-color: #f0ad4e;}.progress-striped .progress-bar-warning {  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);}.progress-bar-danger {  background-color: #d9534f;}.progress-striped .progress-bar-danger {  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);}.media {  margin-top: 15px;}.media:first-child {  margin-top: 0;}.media,.media-body {  overflow: hidden;  zoom: 1;}.media-body {  width: 10000px;}.media-object {  display: block;}.media-object.img-thumbnail {  max-width: none;}.media-right,.media > .pull-right {  padding-left: 10px;}.media-left,.media > .pull-left {  padding-right: 10px;}.media-left,.media-right,.media-body {  display: table-cell;  vertical-align: top;}.media-middle {  vertical-align: middle;}.media-bottom {  vertical-align: bottom;}.media-heading {  margin-top: 0;  margin-bottom: 5px;}.media-list {  padding-left: 0;  list-style: none;}.list-group {  padding-left: 0;  margin-bottom: 20px;}.list-group-item {  position: relative;  display: block;  padding: 10px 15px;  margin-bottom: -1px;  background-color: #fff;  border: 1px solid #ddd;}.list-group-item:first-child {  border-top-left-radius: 4px;  border-top-right-radius: 4px;}.list-group-item:last-child {  margin-bottom: 0;  border-bottom-right-radius: 4px;  border-bottom-left-radius: 4px;}a.list-group-item,button.list-group-item {  color: #555;}a.list-group-item .list-group-item-heading,button.list-group-item .list-group-item-heading {  color: #333;}a.list-group-item:hover,button.list-group-item:hover,a.list-group-item:focus,button.list-group-item:focus {  color: #555;  text-decoration: none;  background-color: #f5f5f5;}button.list-group-item {  width: 100%;  text-align: left;}.list-group-item.disabled,.list-group-item.disabled:hover,.list-group-item.disabled:focus {  color: #777;  cursor: not-allowed;  background-color: #eee;}.list-group-item.disabled .list-group-item-heading,.list-group-item.disabled:hover .list-group-item-heading,.list-group-item.disabled:focus .list-group-item-heading {  color: inherit;}.list-group-item.disabled .list-group-item-text,.list-group-item.disabled:hover .list-group-item-text,.list-group-item.disabled:focus .list-group-item-text {  color: #777;}.list-group-item.active,.list-group-item.active:hover,.list-group-item.active:focus {  z-index: 2;  color: #fff;  background-color: #337ab7;  border-color: #337ab7;}.list-group-item.active .list-group-item-heading,.list-group-item.active:hover .list-group-item-heading,.list-group-item.active:focus .list-group-item-heading,.list-group-item.active .list-group-item-heading > small,.list-group-item.active:hover .list-group-item-heading > small,.list-group-item.active:focus .list-group-item-heading > small,.list-group-item.active .list-group-item-heading > .small,.list-group-item.active:hover .list-group-item-heading > .small,.list-group-item.active:focus .list-group-item-heading > .small {  color: inherit;}.list-group-item.active .list-group-item-text,.list-group-item.active:hover .list-group-item-text,.list-group-item.active:focus .list-group-item-text {  color: #c7ddef;}.list-group-item-success {  color: #3c763d;  background-color: #dff0d8;}a.list-group-item-success,button.list-group-item-success {  color: #3c763d;}a.list-group-item-success .list-group-item-heading,button.list-group-item-success .list-group-item-heading {  color: inherit;}a.list-group-item-success:hover,button.list-group-item-success:hover,a.list-group-item-success:focus,button.list-group-item-success:focus {  color: #3c763d;  background-color: #d0e9c6;}a.list-group-item-success.active,button.list-group-item-success.active,a.list-group-item-success.active:hover,button.list-group-item-success.active:hover,a.list-group-item-success.active:focus,button.list-group-item-success.active:focus {  color: #fff;  background-color: #3c763d;  border-color: #3c763d;}.list-group-item-info {  color: #31708f;  background-color: #d9edf7;}a.list-group-item-info,button.list-group-item-info {  color: #31708f;}a.list-group-item-info .list-group-item-heading,button.list-group-item-info .list-group-item-heading {  color: inherit;}a.list-group-item-info:hover,button.list-group-item-info:hover,a.list-group-item-info:focus,button.list-group-item-info:focus {  color: #31708f;  background-color: #c4e3f3;}a.list-group-item-info.active,button.list-group-item-info.active,a.list-group-item-info.active:hover,button.list-group-item-info.active:hover,a.list-group-item-info.active:focus,button.list-group-item-info.active:focus {  color: #fff;  background-color: #31708f;  border-color: #31708f;}.list-group-item-warning {  color: #8a6d3b;  background-color: #fcf8e3;}a.list-group-item-warning,button.list-group-item-warning {  color: #8a6d3b;}a.list-group-item-warning .list-group-item-heading,button.list-group-item-warning .list-group-item-heading {  color: inherit;}a.list-group-item-warning:hover,button.list-group-item-warning:hover,a.list-group-item-warning:focus,button.list-group-item-warning:focus {  color: #8a6d3b;  background-color: #faf2cc;}a.list-group-item-warning.active,button.list-group-item-warning.active,a.list-group-item-warning.active:hover,button.list-group-item-warning.active:hover,a.list-group-item-warning.active:focus,button.list-group-item-warning.active:focus {  color: #fff;  background-color: #8a6d3b;  border-color: #8a6d3b;}.list-group-item-danger {  color: #a94442;  background-color: #f2dede;}a.list-group-item-danger,button.list-group-item-danger {  color: #a94442;}a.list-group-item-danger .list-group-item-heading,button.list-group-item-danger .list-group-item-heading {  color: inherit;}a.list-group-item-danger:hover,button.list-group-item-danger:hover,a.list-group-item-danger:focus,button.list-group-item-danger:focus {  color: #a94442;  background-color: #ebcccc;}a.list-group-item-danger.active,button.list-group-item-danger.active,a.list-group-item-danger.active:hover,button.list-group-item-danger.active:hover,a.list-group-item-danger.active:focus,button.list-group-item-danger.active:focus {  color: #fff;  background-color: #a94442;  border-color: #a94442;}.list-group-item-heading {  margin-top: 0;  margin-bottom: 5px;}.list-group-item-text {  margin-bottom: 0;  line-height: 1.3;}.panel {  margin-bottom: 20px;  background-color: #fff;  border: 1px solid transparent;  border-radius: 4px;  -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, .05);          box-shadow: 0 1px 1px rgba(0, 0, 0, .05);}.panel-body {  padding: 15px;}.panel-heading {  padding: 10px 15px;  border-bottom: 1px solid transparent;  border-top-left-radius: 3px;  border-top-right-radius: 3px;}.panel-heading > .dropdown .dropdown-toggle {  color: inherit;}.panel-title {  margin-top: 0;  margin-bottom: 0;  font-size: 16px;  color: inherit;}.panel-title > a,.panel-title > small,.panel-title > .small,.panel-title > small > a,.panel-title > .small > a {  color: inherit;}.panel-footer {  padding: 10px 15px;  background-color: #f5f5f5;  border-top: 1px solid #ddd;  border-bottom-right-radius: 3px;  border-bottom-left-radius: 3px;}.panel > .list-group,.panel > .panel-collapse > .list-group {  margin-bottom: 0;}.panel > .list-group .list-group-item,.panel > .panel-collapse > .list-group .list-group-item {  border-width: 1px 0;  border-radius: 0;}.panel > .list-group:first-child .list-group-item:first-child,.panel > .panel-collapse > .list-group:first-child .list-group-item:first-child {  border-top: 0;  border-top-left-radius: 3px;  border-top-right-radius: 3px;}.panel > .list-group:last-child .list-group-item:last-child,.panel > .panel-collapse > .list-group:last-child .list-group-item:last-child {  border-bottom: 0;  border-bottom-right-radius: 3px;  border-bottom-left-radius: 3px;}.panel > .panel-heading + .panel-collapse > .list-group .list-group-item:first-child {  border-top-left-radius: 0;  border-top-right-radius: 0;}.panel-heading + .list-group .list-group-item:first-child {  border-top-width: 0;}.list-group + .panel-footer {  border-top-width: 0;}.panel > .table,.panel > .table-responsive > .table,.panel > .panel-collapse > .table {  margin-bottom: 0;}.panel > .table caption,.panel > .table-responsive > .table caption,.panel > .panel-collapse > .table caption {  padding-right: 15px;  padding-left: 15px;}.panel > .table:first-child,.panel > .table-responsive:first-child > .table:first-child {  border-top-left-radius: 3px;  border-top-right-radius: 3px;}.panel > .table:first-child > thead:first-child > tr:first-child,.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child,.panel > .table:first-child > tbody:first-child > tr:first-child,.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child {  border-top-left-radius: 3px;  border-top-right-radius: 3px;}.panel > .table:first-child > thead:first-child > tr:first-child td:first-child,.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:first-child,.panel > .table:first-child > tbody:first-child > tr:first-child td:first-child,.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:first-child,.panel > .table:first-child > thead:first-child > tr:first-child th:first-child,.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:first-child,.panel > .table:first-child > tbody:first-child > tr:first-child th:first-child,.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:first-child {  border-top-left-radius: 3px;}.panel > .table:first-child > thead:first-child > tr:first-child td:last-child,.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:last-child,.panel > .table:first-child > tbody:first-child > tr:first-child td:last-child,.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:last-child,.panel > .table:first-child > thead:first-child > tr:first-child th:last-child,.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:last-child,.panel > .table:first-child > tbody:first-child > tr:first-child th:last-child,.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:last-child {  border-top-right-radius: 3px;}.panel > .table:last-child,.panel > .table-responsive:last-child > .table:last-child {  border-bottom-right-radius: 3px;  border-bottom-left-radius: 3px;}.panel > .table:last-child > tbody:last-child > tr:last-child,.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child,.panel > .table:last-child > tfoot:last-child > tr:last-child,.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child {  border-bottom-right-radius: 3px;  border-bottom-left-radius: 3px;}.panel > .table:last-child > tbody:last-child > tr:last-child td:first-child,.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:first-child,.panel > .table:last-child > tfoot:last-child > tr:last-child td:first-child,.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:first-child,.panel > .table:last-child > tbody:last-child > tr:last-child th:first-child,.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:first-child,.panel > .table:last-child > tfoot:last-child > tr:last-child th:first-child,.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:first-child {  border-bottom-left-radius: 3px;}.panel > .table:last-child > tbody:last-child > tr:last-child td:last-child,.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:last-child,.panel > .table:last-child > tfoot:last-child > tr:last-child td:last-child,.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:last-child,.panel > .table:last-child > tbody:last-child > tr:last-child th:last-child,.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:last-child,.panel > .table:last-child > tfoot:last-child > tr:last-child th:last-child,.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:last-child {  border-bottom-right-radius: 3px;}.panel > .panel-body + .table,.panel > .panel-body + .table-responsive,.panel > .table + .panel-body,.panel > .table-responsive + .panel-body {  border-top: 1px solid #ddd;}.panel > .table > tbody:first-child > tr:first-child th,.panel > .table > tbody:first-child > tr:first-child td {  border-top: 0;}.panel > .table-bordered,.panel > .table-responsive > .table-bordered {  border: 0;}.panel > .table-bordered > thead > tr > th:first-child,.panel > .table-responsive > .table-bordered > thead > tr > th:first-child,.panel > .table-bordered > tbody > tr > th:first-child,.panel > .table-responsive > .table-bordered > tbody > tr > th:first-child,.panel > .table-bordered > tfoot > tr > th:first-child,.panel > .table-responsive > .table-bordered > tfoot > tr > th:first-child,.panel > .table-bordered > thead > tr > td:first-child,.panel > .table-responsive > .table-bordered > thead > tr > td:first-child,.panel > .table-bordered > tbody > tr > td:first-child,.panel > .table-responsive > .table-bordered > tbody > tr > td:first-child,.panel > .table-bordered > tfoot > tr > td:first-child,.panel > .table-responsive > .table-bordered > tfoot > tr > td:first-child {  border-left: 0;}.panel > .table-bordered > thead > tr > th:last-child,.panel > .table-responsive > .table-bordered > thead > tr > th:last-child,.panel > .table-bordered > tbody > tr > th:last-child,.panel > .table-responsive > .table-bordered > tbody > tr > th:last-child,.panel > .table-bordered > tfoot > tr > th:last-child,.panel > .table-responsive > .table-bordered > tfoot > tr > th:last-child,.panel > .table-bordered > thead > tr > td:last-child,.panel > .table-responsive > .table-bordered > thead > tr > td:last-child,.panel > .table-bordered > tbody > tr > td:last-child,.panel > .table-responsive > .table-bordered > tbody > tr > td:last-child,.panel > .table-bordered > tfoot > tr > td:last-child,.panel > .table-responsive > .table-bordered > tfoot > tr > td:last-child {  border-right: 0;}.panel > .table-bordered > thead > tr:first-child > td,.panel > .table-responsive > .table-bordered > thead > tr:first-child > td,.panel > .table-bordered > tbody > tr:first-child > td,.panel > .table-responsive > .table-bordered > tbody > tr:first-child > td,.panel > .table-bordered > thead > tr:first-child > th,.panel > .table-responsive > .table-bordered > thead > tr:first-child > th,.panel > .table-bordered > tbody > tr:first-child > th,.panel > .table-responsive > .table-bordered > tbody > tr:first-child > th {  border-bottom: 0;}.panel > .table-bordered > tbody > tr:last-child > td,.panel > .table-responsive > .table-bordered > tbody > tr:last-child > td,.panel > .table-bordered > tfoot > tr:last-child > td,.panel > .table-responsive > .table-bordered > tfoot > tr:last-child > td,.panel > .table-bordered > tbody > tr:last-child > th,.panel > .table-responsive > .table-bordered > tbody > tr:last-child > th,.panel > .table-bordered > tfoot > tr:last-child > th,.panel > .table-responsive > .table-bordered > tfoot > tr:last-child > th {  border-bottom: 0;}.panel > .table-responsive {  margin-bottom: 0;  border: 0;}.panel-group {  margin-bottom: 20px;}.panel-group .panel {  margin-bottom: 0;  border-radius: 4px;}.panel-group .panel + .panel {  margin-top: 5px;}.panel-group .panel-heading {  border-bottom: 0;}.panel-group .panel-heading + .panel-collapse > .panel-body,.panel-group .panel-heading + .panel-collapse > .list-group {  border-top: 1px solid #ddd;}.panel-group .panel-footer {  border-top: 0;}.panel-group .panel-footer + .panel-collapse .panel-body {  border-bottom: 1px solid #ddd;}.panel-default {  border-color: #ddd;}.panel-default > .panel-heading {  color: #333;  background-color: #f5f5f5;  border-color: #ddd;}.panel-default > .panel-heading + .panel-collapse > .panel-body {  border-top-color: #ddd;}.panel-default > .panel-heading .badge {  color: #f5f5f5;  background-color: #333;}.panel-default > .panel-footer + .panel-collapse > .panel-body {  border-bottom-color: #ddd;}.panel-primary {  border-color: #337ab7;}.panel-primary > .panel-heading {  color: #fff;  background-color: #337ab7;  border-color: #337ab7;}.panel-primary > .panel-heading + .panel-collapse > .panel-body {  border-top-color: #337ab7;}.panel-primary > .panel-heading .badge {  color: #337ab7;  background-color: #fff;}.panel-primary > .panel-footer + .panel-collapse > .panel-body {  border-bottom-color: #337ab7;}.panel-success {  border-color: #d6e9c6;}.panel-success > .panel-heading {  color: #3c763d;  background-color: #dff0d8;  border-color: #d6e9c6;}.panel-success > .panel-heading + .panel-collapse > .panel-body {  border-top-color: #d6e9c6;}.panel-success > .panel-heading .badge {  color: #dff0d8;  background-color: #3c763d;}.panel-success > .panel-footer + .panel-collapse > .panel-body {  border-bottom-color: #d6e9c6;}.panel-info {  border-color: #bce8f1;}.panel-info > .panel-heading {  color: #31708f;  background-color: #d9edf7;  border-color: #bce8f1;}.panel-info > .panel-heading + .panel-collapse > .panel-body {  border-top-color: #bce8f1;}.panel-info > .panel-heading .badge {  color: #d9edf7;  background-color: #31708f;}.panel-info > .panel-footer + .panel-collapse > .panel-body {  border-bottom-color: #bce8f1;}.panel-warning {  border-color: #faebcc;}.panel-warning > .panel-heading {  color: #8a6d3b;  background-color: #fcf8e3;  border-color: #faebcc;}.panel-warning > .panel-heading + .panel-collapse > .panel-body {  border-top-color: #faebcc;}.panel-warning > .panel-heading .badge {  color: #fcf8e3;  background-color: #8a6d3b;}.panel-warning > .panel-footer + .panel-collapse > .panel-body {  border-bottom-color: #faebcc;}.panel-danger {  border-color: #ebccd1;}.panel-danger > .panel-heading {  color: #a94442;  background-color: #f2dede;  border-color: #ebccd1;}.panel-danger > .panel-heading + .panel-collapse > .panel-body {  border-top-color: #ebccd1;}.panel-danger > .panel-heading .badge {  color: #f2dede;  background-color: #a94442;}.panel-danger > .panel-footer + .panel-collapse > .panel-body {  border-bottom-color: #ebccd1;}.embed-responsive {  position: relative;  display: block;  height: 0;  padding: 0;  overflow: hidden;}.embed-responsive .embed-responsive-item,.embed-responsive iframe,.embed-responsive embed,.embed-responsive object,.embed-responsive video {  position: absolute;  top: 0;  bottom: 0;  left: 0;  width: 100%;  height: 100%;  border: 0;}.embed-responsive-16by9 {  padding-bottom: 56.25%;}.embed-responsive-4by3 {  padding-bottom: 75%;}.well {  min-height: 20px;  padding: 19px;  margin-bottom: 20px;  background-color: #f5f5f5;  border: 1px solid #e3e3e3;  border-radius: 4px;  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .05);          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .05);}.well blockquote {  border-color: #ddd;  border-color: rgba(0, 0, 0, .15);}.well-lg {  padding: 24px;  border-radius: 6px;}.well-sm {  padding: 9px;  border-radius: 3px;}.close {  float: right;  font-size: 21px;  font-weight: bold;  line-height: 1;  color: #000;  text-shadow: 0 1px 0 #fff;  filter: alpha(opacity=20);  opacity: .2;}.close:hover,.close:focus {  color: #000;  text-decoration: none;  cursor: pointer;  filter: alpha(opacity=50);  opacity: .5;}button.close {  -webkit-appearance: none;  padding: 0;  cursor: pointer;  background: transparent;  border: 0;}.modal-open {  overflow: hidden;}.modal {  position: fixed;  top: 0;  right: 0;  bottom: 0;  left: 0;  z-index: 1050;  display: none;  overflow: hidden;  -webkit-overflow-scrolling: touch;  outline: 0;}.modal.fade .modal-dialog {  -webkit-transition: -webkit-transform .3s ease-out;       -o-transition:      -o-transform .3s ease-out;          transition:         transform .3s ease-out;  -webkit-transform: translate(0, -25%);      -ms-transform: translate(0, -25%);       -o-transform: translate(0, -25%);          transform: translate(0, -25%);}.modal.in .modal-dialog {  -webkit-transform: translate(0, 0);      -ms-transform: translate(0, 0);       -o-transform: translate(0, 0);          transform: translate(0, 0);}.modal-open .modal {  overflow-x: hidden;  overflow-y: auto;}.modal-dialog {  position: relative;  width: auto;  margin: 10px;}.modal-content {  position: relative;  background-color: #fff;  -webkit-background-clip: padding-box;          background-clip: padding-box;  border: 1px solid #999;  border: 1px solid rgba(0, 0, 0, .2);  border-radius: 6px;  outline: 0;  -webkit-box-shadow: 0 3px 9px rgba(0, 0, 0, .5);          box-shadow: 0 3px 9px rgba(0, 0, 0, .5);}.modal-backdrop {  position: fixed;  top: 0;  right: 0;  bottom: 0;  left: 0;  z-index: 1040;  background-color: #000;}.modal-backdrop.fade {  filter: alpha(opacity=0);  opacity: 0;}.modal-backdrop.in {  filter: alpha(opacity=50);  opacity: .5;}.modal-header {  min-height: 16.42857143px;  padding: 15px;  border-bottom: 1px solid #e5e5e5;}.modal-header .close {  margin-top: -2px;}.modal-title {  margin: 0;  line-height: 1.42857143;}.modal-body {  position: relative;  padding: 15px;}.modal-footer {  padding: 15px;  text-align: right;  border-top: 1px solid #e5e5e5;}.modal-footer .btn + .btn {  margin-bottom: 0;  margin-left: 5px;}.modal-footer .btn-group .btn + .btn {  margin-left: -1px;}.modal-footer .btn-block + .btn-block {  margin-left: 0;}.modal-scrollbar-measure {  position: absolute;  top: -9999px;  width: 50px;  height: 50px;  overflow: scroll;}@media (min-width: 768px) {  .modal-dialog {    width: 600px;    margin: 30px auto;  }  .modal-content {    -webkit-box-shadow: 0 5px 15px rgba(0, 0, 0, .5);            box-shadow: 0 5px 15px rgba(0, 0, 0, .5);  }  .modal-sm {    width: 300px;  }}@media (min-width: 992px) {  .modal-lg {    width: 900px;  }}.tooltip {  position: absolute;  z-index: 1070;  display: block;  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;  font-size: 12px;  font-style: normal;  font-weight: normal;  line-height: 1.42857143;  text-align: left;  text-align: start;  text-decoration: none;  text-shadow: none;  text-transform: none;  letter-spacing: normal;  word-break: normal;  word-spacing: normal;  word-wrap: normal;  white-space: normal;  filter: alpha(opacity=0);  opacity: 0;  line-break: auto;}.tooltip.in {  filter: alpha(opacity=90);  opacity: .9;}.tooltip.top {  padding: 5px 0;  margin-top: -3px;}.tooltip.right {  padding: 0 5px;  margin-left: 3px;}.tooltip.bottom {  padding: 5px 0;  margin-top: 3px;}.tooltip.left {  padding: 0 5px;  margin-left: -3px;}.tooltip-inner {  max-width: 200px;  padding: 3px 8px;  color: #fff;  text-align: center;  background-color: #000;  border-radius: 4px;}.tooltip-arrow {  position: absolute;  width: 0;  height: 0;  border-color: transparent;  border-style: solid;}.tooltip.top .tooltip-arrow {  bottom: 0;  left: 50%;  margin-left: -5px;  border-width: 5px 5px 0;  border-top-color: #000;}.tooltip.top-left .tooltip-arrow {  right: 5px;  bottom: 0;  margin-bottom: -5px;  border-width: 5px 5px 0;  border-top-color: #000;}.tooltip.top-right .tooltip-arrow {  bottom: 0;  left: 5px;  margin-bottom: -5px;  border-width: 5px 5px 0;  border-top-color: #000;}.tooltip.right .tooltip-arrow {  top: 50%;  left: 0;  margin-top: -5px;  border-width: 5px 5px 5px 0;  border-right-color: #000;}.tooltip.left .tooltip-arrow {  top: 50%;  right: 0;  margin-top: -5px;  border-width: 5px 0 5px 5px;  border-left-color: #000;}.tooltip.bottom .tooltip-arrow {  top: 0;  left: 50%;  margin-left: -5px;  border-width: 0 5px 5px;  border-bottom-color: #000;}.tooltip.bottom-left .tooltip-arrow {  top: 0;  right: 5px;  margin-top: -5px;  border-width: 0 5px 5px;  border-bottom-color: #000;}.tooltip.bottom-right .tooltip-arrow {  top: 0;  left: 5px;  margin-top: -5px;  border-width: 0 5px 5px;  border-bottom-color: #000;}.popover {  position: absolute;  top: 0;  left: 0;  z-index: 1060;  display: none;  max-width: 276px;  padding: 1px;  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;  font-size: 14px;  font-style: normal;  font-weight: normal;  line-height: 1.42857143;  text-align: left;  text-align: start;  text-decoration: none;  text-shadow: none;  text-transform: none;  letter-spacing: normal;  word-break: normal;  word-spacing: normal;  word-wrap: normal;  white-space: normal;  background-color: #fff;  -webkit-background-clip: padding-box;          background-clip: padding-box;  border: 1px solid #ccc;  border: 1px solid rgba(0, 0, 0, .2);  border-radius: 6px;  -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, .2);          box-shadow: 0 5px 10px rgba(0, 0, 0, .2);  line-break: auto;}.popover.top {  margin-top: -10px;}.popover.right {  margin-left: 10px;}.popover.bottom {  margin-top: 10px;}.popover.left {  margin-left: -10px;}.popover-title {  padding: 8px 14px;  margin: 0;  font-size: 14px;  background-color: #f7f7f7;  border-bottom: 1px solid #ebebeb;  border-radius: 5px 5px 0 0;}.popover-content {  padding: 9px 14px;}.popover > .arrow,.popover > .arrow:after {  position: absolute;  display: block;  width: 0;  height: 0;  border-color: transparent;  border-style: solid;}.popover > .arrow {  border-width: 11px;}.popover > .arrow:after {  content: "";  border-width: 10px;}.popover.top > .arrow {  bottom: -11px;  left: 50%;  margin-left: -11px;  border-top-color: #999;  border-top-color: rgba(0, 0, 0, .25);  border-bottom-width: 0;}.popover.top > .arrow:after {  bottom: 1px;  margin-left: -10px;  content: " ";  border-top-color: #fff;  border-bottom-width: 0;}.popover.right > .arrow {  top: 50%;  left: -11px;  margin-top: -11px;  border-right-color: #999;  border-right-color: rgba(0, 0, 0, .25);  border-left-width: 0;}.popover.right > .arrow:after {  bottom: -10px;  left: 1px;  content: " ";  border-right-color: #fff;  border-left-width: 0;}.popover.bottom > .arrow {  top: -11px;  left: 50%;  margin-left: -11px;  border-top-width: 0;  border-bottom-color: #999;  border-bottom-color: rgba(0, 0, 0, .25);}.popover.bottom > .arrow:after {  top: 1px;  margin-left: -10px;  content: " ";  border-top-width: 0;  border-bottom-color: #fff;}.popover.left > .arrow {  top: 50%;  right: -11px;  margin-top: -11px;  border-right-width: 0;  border-left-color: #999;  border-left-color: rgba(0, 0, 0, .25);}.popover.left > .arrow:after {  right: 1px;  bottom: -10px;  content: " ";  border-right-width: 0;  border-left-color: #fff;}.carousel {  position: relative;}.carousel-inner {  position: relative;  width: 100%;  overflow: hidden;}.carousel-inner > .item {  position: relative;  display: none;  -webkit-transition: .6s ease-in-out left;       -o-transition: .6s ease-in-out left;          transition: .6s ease-in-out left;}.carousel-inner > .item > img,.carousel-inner > .item > a > img {  line-height: 1;}@media all and (transform-3d), (-webkit-transform-3d) {  .carousel-inner > .item {    -webkit-transition: -webkit-transform .6s ease-in-out;         -o-transition:      -o-transform .6s ease-in-out;            transition:         transform .6s ease-in-out;    -webkit-backface-visibility: hidden;            backface-visibility: hidden;    -webkit-perspective: 1000px;            perspective: 1000px;  }  .carousel-inner > .item.next,  .carousel-inner > .item.active.right {    left: 0;    -webkit-transform: translate3d(100%, 0, 0);            transform: translate3d(100%, 0, 0);  }  .carousel-inner > .item.prev,  .carousel-inner > .item.active.left {    left: 0;    -webkit-transform: translate3d(-100%, 0, 0);            transform: translate3d(-100%, 0, 0);  }  .carousel-inner > .item.next.left,  .carousel-inner > .item.prev.right,  .carousel-inner > .item.active {    left: 0;    -webkit-transform: translate3d(0, 0, 0);            transform: translate3d(0, 0, 0);  }}.carousel-inner > .active,.carousel-inner > .next,.carousel-inner > .prev {  display: block;}.carousel-inner > .active {  left: 0;}.carousel-inner > .next,.carousel-inner > .prev {  position: absolute;  top: 0;  width: 100%;}.carousel-inner > .next {  left: 100%;}.carousel-inner > .prev {  left: -100%;}.carousel-inner > .next.left,.carousel-inner > .prev.right {  left: 0;}.carousel-inner > .active.left {  left: -100%;}.carousel-inner > .active.right {  left: 100%;}.carousel-control {  position: absolute;  top: 0;  bottom: 0;  left: 0;  width: 15%;  font-size: 20px;  color: #fff;  text-align: center;  text-shadow: 0 1px 2px rgba(0, 0, 0, .6);  filter: alpha(opacity=50);  opacity: .5;}.carousel-control.left {  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);  background-image:      -o-linear-gradient(left, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);  background-image: -webkit-gradient(linear, left top, right top, from(rgba(0, 0, 0, .5)), to(rgba(0, 0, 0, .0001)));  background-image:         linear-gradient(to right, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#00000000', GradientType=1);  background-repeat: repeat-x;}.carousel-control.right {  right: 0;  left: auto;  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);  background-image:      -o-linear-gradient(left, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);  background-image: -webkit-gradient(linear, left top, right top, from(rgba(0, 0, 0, .0001)), to(rgba(0, 0, 0, .5)));  background-image:         linear-gradient(to right, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#80000000', GradientType=1);  background-repeat: repeat-x;}.carousel-control:hover,.carousel-control:focus {  color: #fff;  text-decoration: none;  filter: alpha(opacity=90);  outline: 0;  opacity: .9;}.carousel-control .icon-prev,.carousel-control .icon-next,.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right {  position: absolute;  top: 50%;  z-index: 5;  display: inline-block;  margin-top: -10px;}.carousel-control .icon-prev,.carousel-control .glyphicon-chevron-left {  left: 50%;  margin-left: -10px;}.carousel-control .icon-next,.carousel-control .glyphicon-chevron-right {  right: 50%;  margin-right: -10px;}.carousel-control .icon-prev,.carousel-control .icon-next {  width: 20px;  height: 20px;  font-family: serif;  line-height: 1;}.carousel-control .icon-prev:before {  content: '\2039';}.carousel-control .icon-next:before {  content: '\203a';}.carousel-indicators {  position: absolute;  bottom: 10px;  left: 50%;  z-index: 15;  width: 60%;  padding-left: 0;  margin-left: -30%;  text-align: center;  list-style: none;}.carousel-indicators li {  display: inline-block;  width: 10px;  height: 10px;  margin: 1px;  text-indent: -999px;  cursor: pointer;  background-color: #000 \9;  background-color: rgba(0, 0, 0, 0);  border: 1px solid #fff;  border-radius: 10px;}.carousel-indicators .active {  width: 12px;  height: 12px;  margin: 0;  background-color: #fff;}.carousel-caption {  position: absolute;  right: 15%;  bottom: 20px;  left: 15%;  z-index: 10;  padding-top: 20px;  padding-bottom: 20px;  color: #fff;  text-align: center;  text-shadow: 0 1px 2px rgba(0, 0, 0, .6);}.carousel-caption .btn {  text-shadow: none;}@media screen and (min-width: 768px) {  .carousel-control .glyphicon-chevron-left,  .carousel-control .glyphicon-chevron-right,  .carousel-control .icon-prev,  .carousel-control .icon-next {    width: 30px;    height: 30px;    margin-top: -15px;    font-size: 30px;  }  .carousel-control .glyphicon-chevron-left,  .carousel-control .icon-prev {    margin-left: -15px;  }  .carousel-control .glyphicon-chevron-right,  .carousel-control .icon-next {    margin-right: -15px;  }  .carousel-caption {    right: 20%;    left: 20%;    padding-bottom: 30px;  }  .carousel-indicators {    bottom: 20px;  }}.clearfix:before,.clearfix:after,.dl-horizontal dd:before,.dl-horizontal dd:after,.container:before,.container:after,.container-fluid:before,.container-fluid:after,.row:before,.row:after,.form-horizontal .form-group:before,.form-horizontal .form-group:after,.btn-toolbar:before,.btn-toolbar:after,.btn-group-vertical > .btn-group:before,.btn-group-vertical > .btn-group:after,.nav:before,.nav:after,.navbar:before,.navbar:after,.navbar-header:before,.navbar-header:after,.navbar-collapse:before,.navbar-collapse:after,.pager:before,.pager:after,.panel-body:before,.panel-body:after,.modal-footer:before,.modal-footer:after {  display: table;  content: " ";}.clearfix:after,.dl-horizontal dd:after,.container:after,.container-fluid:after,.row:after,.form-horizontal .form-group:after,.btn-toolbar:after,.btn-group-vertical > .btn-group:after,.nav:after,.navbar:after,.navbar-header:after,.navbar-collapse:after,.pager:after,.panel-body:after,.modal-footer:after {  clear: both;}.center-block {  display: block;  margin-right: auto;  margin-left: auto;}.pull-right {  float: right !important;}.pull-left {  float: left !important;}.hide {  display: none !important;}.show {  display: block !important;}.invisible {  visibility: hidden;}.text-hide {  font: 0/0 a;  color: transparent;  text-shadow: none;  background-color: transparent;  border: 0;}.hidden {  display: none !important;}.affix {  position: fixed;}@-ms-viewport {  width: device-width;}.visible-xs,.visible-sm,.visible-md,.visible-lg {  display: none !important;}.visible-xs-block,.visible-xs-inline,.visible-xs-inline-block,.visible-sm-block,.visible-sm-inline,.visible-sm-inline-block,.visible-md-block,.visible-md-inline,.visible-md-inline-block,.visible-lg-block,.visible-lg-inline,.visible-lg-inline-block {  display: none !important;}@media (max-width: 767px) {  .visible-xs {    display: block !important;  }  table.visible-xs {    display: table !important;  }  tr.visible-xs {    display: table-row !important;  }  th.visible-xs,  td.visible-xs {    display: table-cell !important;  }}@media (max-width: 767px) {  .visible-xs-block {    display: block !important;  }}@media (max-width: 767px) {  .visible-xs-inline {    display: inline !important;  }}@media (max-width: 767px) {  .visible-xs-inline-block {    display: inline-block !important;  }}@media (min-width: 768px) and (max-width: 991px) {  .visible-sm {    display: block !important;  }  table.visible-sm {    display: table !important;  }  tr.visible-sm {    display: table-row !important;  }  th.visible-sm,  td.visible-sm {    display: table-cell !important;  }}@media (min-width: 768px) and (max-width: 991px) {  .visible-sm-block {    display: block !important;  }}@media (min-width: 768px) and (max-width: 991px) {  .visible-sm-inline {    display: inline !important;  }}@media (min-width: 768px) and (max-width: 991px) {  .visible-sm-inline-block {    display: inline-block !important;  }}@media (min-width: 992px) and (max-width: 1199px) {  .visible-md {    display: block !important;  }  table.visible-md {    display: table !important;  }  tr.visible-md {    display: table-row !important;  }  th.visible-md,  td.visible-md {    display: table-cell !important;  }}@media (min-width: 992px) and (max-width: 1199px) {  .visible-md-block {    display: block !important;  }}@media (min-width: 992px) and (max-width: 1199px) {  .visible-md-inline {    display: inline !important;  }}@media (min-width: 992px) and (max-width: 1199px) {  .visible-md-inline-block {    display: inline-block !important;  }}@media (min-width: 1200px) {  .visible-lg {    display: block !important;  }  table.visible-lg {    display: table !important;  }  tr.visible-lg {    display: table-row !important;  }  th.visible-lg,  td.visible-lg {    display: table-cell !important;  }}@media (min-width: 1200px) {  .visible-lg-block {    display: block !important;  }}@media (min-width: 1200px) {  .visible-lg-inline {    display: inline !important;  }}@media (min-width: 1200px) {  .visible-lg-inline-block {    display: inline-block !important;  }}@media (max-width: 767px) {  .hidden-xs {    display: none !important;  }}@media (min-width: 768px) and (max-width: 991px) {  .hidden-sm {    display: none !important;  }}@media (min-width: 992px) and (max-width: 1199px) {  .hidden-md {    display: none !important;  }}@media (min-width: 1200px) {  .hidden-lg {    display: none !important;  }}.visible-print {  display: none !important;}@media print {  .visible-print {    display: block !important;  }  table.visible-print {    display: table !important;  }  tr.visible-print {    display: table-row !important;  }  th.visible-print,  td.visible-print {    display: table-cell !important;  }}.visible-print-block {  display: none !important;}@media print {  .visible-print-block {    display: block !important;  }}.visible-print-inline {  display: none !important;}@media print {  .visible-print-inline {    display: inline !important;  }}.visible-print-inline-block {  display: none !important;}@media print {  .visible-print-inline-block {    display: inline-block !important;  }}@media print {  .hidden-print {    display: none !important;  }}/*# sourceMappingURL=bootstrap.css.map */]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/1_todos_page/index/"/>
      <url>/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/1_todos_page/index/</url>
      
        <content type="html"><![CDATA[<!doctype html><html lang="en"><head>  <meta charset="utf-8">  <title>React App</title>  <link rel="stylesheet" href="index.css"></head><body><div id="root">  <div class="todo-container">    <div class="todo-wrap">      <div class="todo-header">        <input type="text" placeholder="请输入你的任务名称，按回车键确认"/>      </div>      <ul class="todo-main">        <li>          <label>            <input type="checkbox"/>            <span>xxxxx</span>          </label>          <button class="btn btn-danger" style="display:none">删除</button>        </li>        <li>          <label>            <input type="checkbox"/>            <span>yyyy</span>          </label>          <button class="btn btn-danger" style="display:none">删除</button>        </li>      </ul>      <div class="todo-footer">        <label>          <input type="checkbox"/>        </label>        <span>          <span>已完成0</span> / 全部2        </span>        <button class="btn btn-danger">清除已完成任务</button>      </div>    </div>  </div></div></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/1_todos_page/index/"/>
      <url>/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/04_%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/1_todos_page/index/</url>
      
        <content type="html"><![CDATA[/*base*/body {  background: #fff;}.btn {  display: inline-block;  padding: 4px 12px;  margin-bottom: 0;  font-size: 14px;  line-height: 20px;  text-align: center;  vertical-align: middle;  cursor: pointer;  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);  border-radius: 4px;}.btn-danger {  color: #fff;  background-color: #da4f49;  border: 1px solid #bd362f;}.btn-danger:hover {  color: #fff;  background-color: #bd362f;}.btn:focus {  outline: none;}.todo-container {  width: 600px;  margin: 0 auto;}.todo-container .todo-wrap {  padding: 10px;  border: 1px solid #ddd;  border-radius: 5px;}/*header*/.todo-header input {  width: 560px;  height: 28px;  font-size: 14px;  border: 1px solid #ccc;  border-radius: 4px;  padding: 4px 7px;}.todo-header input:focus {  outline: none;  border-color: rgba(82, 168, 236, 0.8);  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);}/*main*/.todo-main {  margin-left: 0px;  border: 1px solid #ddd;  border-radius: 2px;  padding: 0px;}.todo-empty {  height: 40px;  line-height: 40px;  border: 1px solid #ddd;  border-radius: 2px;  padding-left: 5px;  margin-top: 10px;}/*item*/li {  list-style: none;  height: 36px;  line-height: 36px;  padding: 0 5px;  border-bottom: 1px solid #ddd;}li label {  float: left;  cursor: pointer;}li label li input {  vertical-align: middle;  margin-right: 6px;  position: relative;  top: -1px;}li button {  float: right;  display: none;  margin-top: 3px;}li:before {  content: initial;}li:last-child {  border-bottom: none;}/*footer*/.todo-footer {  height: 40px;  line-height: 40px;  padding-left: 6px;  margin-top: 5px;}.todo-footer label {  display: inline-block;  margin-right: 20px;  cursor: pointer;}.todo-footer label input {  position: relative;  top: -1px;  vertical-align: middle;  margin-right: 5px;}.todo-footer button {  float: right;  margin-top: 5px;}]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/03_%E4%BE%9D%E8%B5%96%E5%8C%85/vue/"/>
      <url>/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/03_%E4%BE%9D%E8%B5%96%E5%8C%85/vue/</url>
      
        <content type="html"><![CDATA[/*! * Vue.js v2.6.12 * (c) 2014-2020 Evan You * Released under the MIT License. */(function (global, factory) {  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  typeof define === 'function' && define.amd ? define(factory) :  (global = global || self, global.Vue = factory());}(this, function () { 'use strict';  /*  */  var emptyObject = Object.freeze({});  // These helpers produce better VM code in JS engines due to their  // explicitness and function inlining.  function isUndef (v) {    return v === undefined || v === null  }  function isDef (v) {    return v !== undefined && v !== null  }  function isTrue (v) {    return v === true  }  function isFalse (v) {    return v === false  }  /**   * Check if value is primitive.   */  function isPrimitive (value) {    return (      typeof value === 'string' ||      typeof value === 'number' ||      // $flow-disable-line      typeof value === 'symbol' ||      typeof value === 'boolean'    )  }  /**   * Quick object check - this is primarily used to tell   * Objects from primitive values when we know the value   * is a JSON-compliant type.   */  function isObject (obj) {    return obj !== null && typeof obj === 'object'  }  /**   * Get the raw type string of a value, e.g., [object Object].   */  var _toString = Object.prototype.toString;  function toRawType (value) {    return _toString.call(value).slice(8, -1)  }  /**   * Strict object type check. Only returns true   * for plain JavaScript objects.   */  function isPlainObject (obj) {    return _toString.call(obj) === '[object Object]'  }  function isRegExp (v) {    return _toString.call(v) === '[object RegExp]'  }  /**   * Check if val is a valid array index.   */  function isValidArrayIndex (val) {    var n = parseFloat(String(val));    return n >= 0 && Math.floor(n) === n && isFinite(val)  }  function isPromise (val) {    return (      isDef(val) &&      typeof val.then === 'function' &&      typeof val.catch === 'function'    )  }  /**   * @atguigu Convert a value to a string that is actually rendered.   */  function toString (val) {    return val == null      ? ''      : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)        ? JSON.stringify(val, null, 2)        : String(val)  }  /**   * Convert an input value to a number for persistence.   * If the conversion fails, return original string.   */  function toNumber (val) {    var n = parseFloat(val);    return isNaN(n) ? val : n  }  /**   * Make a map and return a function for checking if a key   * is in that map.   */  function makeMap (    str,    expectsLowerCase  ) {    var map = Object.create(null);    var list = str.split(',');    for (var i = 0; i < list.length; i++) {      map[list[i]] = true;    }    return expectsLowerCase      ? function (val) { return map[val.toLowerCase()]; }      : function (val) { return map[val]; }  }  /**   * Check if a tag is a built-in tag.   */  var isBuiltInTag = makeMap('slot,component', true);  /**   * Check if an attribute is a reserved attribute.   */  var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');  /**   * Remove an item from an array.   */  function remove (arr, item) {    if (arr.length) {      var index = arr.indexOf(item);      if (index > -1) {        return arr.splice(index, 1)      }    }  }  /**   * Check whether an object has the property.   */  var hasOwnProperty = Object.prototype.hasOwnProperty;  function hasOwn (obj, key) {    return hasOwnProperty.call(obj, key)  }  /**   * Create a cached version of a pure function.   */  function cached (fn) {    var cache = Object.create(null);    return (function cachedFn (str) {      var hit = cache[str];      return hit || (cache[str] = fn(str))    })  }  /**   * Camelize a hyphen-delimited string.   */  var camelizeRE = /-(\w)/g;  var camelize = cached(function (str) {    return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })  });  /**   * Capitalize a string.   */  var capitalize = cached(function (str) {    return str.charAt(0).toUpperCase() + str.slice(1)  });  /**   * Hyphenate a camelCase string.   */  var hyphenateRE = /\B([A-Z])/g;  var hyphenate = cached(function (str) {    return str.replace(hyphenateRE, '-$1').toLowerCase()  });  /**   * Simple bind polyfill for environments that do not support it,   * e.g., PhantomJS 1.x. Technically, we don't need this anymore   * since native bind is now performant enough in most browsers.   * But removing it would mean breaking code that was able to run in   * PhantomJS 1.x, so this must be kept for backward compatibility.   */  /* istanbul ignore next */  function polyfillBind (fn, ctx) {    function boundFn (a) {      var l = arguments.length;      return l        ? l > 1          ? fn.apply(ctx, arguments)          : fn.call(ctx, a)        : fn.call(ctx)    }    boundFn._length = fn.length;    return boundFn  }  function nativeBind (fn, ctx) {    return fn.bind(ctx)  }  var bind = Function.prototype.bind    ? nativeBind    : polyfillBind;  /**   * Convert an Array-like object to a real Array.   */  function toArray (list, start) {    start = start || 0;    var i = list.length - start;    var ret = new Array(i);    while (i--) {      ret[i] = list[i + start];    }    return ret  }  /**   * Mix properties into target object.   */  function extend (to, _from) {    for (var key in _from) {      to[key] = _from[key];    }    return to  }  /**   * Merge an Array of Objects into a single Object.   */  function toObject (arr) {    var res = {};    for (var i = 0; i < arr.length; i++) {      if (arr[i]) {        extend(res, arr[i]);      }    }    return res  }  /* eslint-disable no-unused-vars */  /**   * Perform no operation.   * Stubbing args to make Flow happy without leaving useless transpiled code   * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).   */  function noop (a, b, c) {}  /**   * Always return false.   */  var no = function (a, b, c) { return false; };  /* eslint-enable no-unused-vars */  /**   * Return the same value.   */  var identity = function (_) { return _; };  /**   * Generate a string containing static keys from compiler modules.   */  function genStaticKeys (modules) {    return modules.reduce(function (keys, m) {      return keys.concat(m.staticKeys || [])    }, []).join(',')  }  /**   * Check if two values are loosely equal - that is,   * if they are plain objects, do they have the same shape?   */  function looseEqual (a, b) {    if (a === b) { return true }    var isObjectA = isObject(a);    var isObjectB = isObject(b);    if (isObjectA && isObjectB) {      try {        var isArrayA = Array.isArray(a);        var isArrayB = Array.isArray(b);        if (isArrayA && isArrayB) {          return a.length === b.length && a.every(function (e, i) {            return looseEqual(e, b[i])          })        } else if (a instanceof Date && b instanceof Date) {          return a.getTime() === b.getTime()        } else if (!isArrayA && !isArrayB) {          var keysA = Object.keys(a);          var keysB = Object.keys(b);          return keysA.length === keysB.length && keysA.every(function (key) {            return looseEqual(a[key], b[key])          })        } else {          /* istanbul ignore next */          return false        }      } catch (e) {        /* istanbul ignore next */        return false      }    } else if (!isObjectA && !isObjectB) {      return String(a) === String(b)    } else {      return false    }  }  /**   * Return the first index at which a loosely equal value can be   * found in the array (if value is a plain object, the array must   * contain an object of the same shape), or -1 if it is not present.   */  function looseIndexOf (arr, val) {    for (var i = 0; i < arr.length; i++) {      if (looseEqual(arr[i], val)) { return i }    }    return -1  }  /**   * Ensure a function is called only once.   */  function once (fn) {    var called = false;    return function () {      if (!called) {        called = true;        fn.apply(this, arguments);      }    }  }  var SSR_ATTR = 'data-server-rendered';  var ASSET_TYPES = [    'component',    'directive',    'filter'  ];  var LIFECYCLE_HOOKS = [    'beforeCreate',    'created',    'beforeMount',    'mounted',    'beforeUpdate',    'updated',    'beforeDestroy',    'destroyed',    'activated',    'deactivated',    'errorCaptured',    'serverPrefetch'  ];  /*  */  var config = ({    /**     * Option merge strategies (used in core/util/options)     */    // $flow-disable-line    optionMergeStrategies: Object.create(null),    /**     * Whether to suppress warnings.     */    silent: false,    /**     * Show production mode tip message on boot?     */    productionTip: "development" !== 'production',    /**     * Whether to enable devtools     */    devtools: "development" !== 'production',    /**     * Whether to record perf     */    performance: false,    /**     * Error handler for watcher errors     */    errorHandler: null,    /**     * Warn handler for watcher warns     */    warnHandler: null,    /**     * Ignore certain custom elements     */    ignoredElements: [],    /**     * Custom user key aliases for v-on     */    // $flow-disable-line    keyCodes: Object.create(null),    /**     * Check if a tag is reserved so that it cannot be registered as a     * component. This is platform-dependent and may be overwritten.     */    isReservedTag: no,    /**     * Check if an attribute is reserved so that it cannot be used as a component     * prop. This is platform-dependent and may be overwritten.     */    isReservedAttr: no,    /**     * Check if a tag is an unknown element.     * Platform-dependent.     */    isUnknownElement: no,    /**     * Get the namespace of an element     */    getTagNamespace: noop,    /**     * Parse the real tag name for the specific platform.     */    parsePlatformTagName: identity,    /**     * Check if an attribute must be bound using property, e.g. value     * Platform-dependent.     */    mustUseProp: no,    /**     * Perform updates asynchronously. Intended to be used by Vue Test Utils     * This will significantly reduce performance if set to false.     */    async: true,    /**     * Exposed for legacy reasons     */    _lifecycleHooks: LIFECYCLE_HOOKS  });  /*  */  /**   * unicode letters @atguigu used for parsing html tags, component names and property paths.   * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname   * skipping \u10000-\uEFFFF due to it freezing up PhantomJS   */  var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;  /**   * Check if a string starts with $ or _   */  function isReserved (str) {    var c = (str + '').charCodeAt(0);    return c === 0x24 || c === 0x5F  }  /**   * Define a property.   */  function def (obj, key, val, enumerable) {    Object.defineProperty(obj, key, {      value: val,      enumerable: !!enumerable,      writable: true,      configurable: true    });  }  /**   * Parse simple path.   */  var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));  function parsePath (path) {    if (bailRE.test(path)) {      return    }    var segments = path.split('.');    return function (obj) {      for (var i = 0; i < segments.length; i++) {        if (!obj) { return }        obj = obj[segments[i]];      }      return obj    }  }  /*  */  // can we use __proto__?  var hasProto = '__proto__' in {};  // Browser environment sniffing  var inBrowser = typeof window !== 'undefined';  var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;  var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();  var UA = inBrowser && window.navigator.userAgent.toLowerCase();  var isIE = UA && /msie|trident/.test(UA);  var isIE9 = UA && UA.indexOf('msie 9.0') > 0;  var isEdge = UA && UA.indexOf('edge/') > 0;  var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');  var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');  var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;  var isPhantomJS = UA && /phantomjs/.test(UA);  var isFF = UA && UA.match(/firefox\/(\d+)/);  // Firefox has a "watch" function on Object.prototype...  var nativeWatch = ({}).watch;  var supportsPassive = false;  if (inBrowser) {    try {      var opts = {};      Object.defineProperty(opts, 'passive', ({        get: function get () {          /* istanbul ignore next */          supportsPassive = true;        }      })); // https://github.com/facebook/flow/issues/285      window.addEventListener('test-passive', null, opts);    } catch (e) {}  }  // this needs to be lazy-evaled because vue may be required before  // vue-server-renderer can set VUE_ENV  var _isServer;  var isServerRendering = function () {    if (_isServer === undefined) {      /* istanbul ignore if */      if (!inBrowser && !inWeex && typeof global !== 'undefined') {        // detect presence of vue-server-renderer and avoid        // Webpack shimming the process        _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';      } else {        _isServer = false;      }    }    return _isServer  };  // detect devtools  var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;  /* istanbul ignore next */  function isNative (Ctor) {    return typeof Ctor === 'function' && /native code/.test(Ctor.toString())  }  var hasSymbol =    typeof Symbol !== 'undefined' && isNative(Symbol) &&    typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);  var _Set;  /* istanbul ignore if */ // $flow-disable-line  if (typeof Set !== 'undefined' && isNative(Set)) {    // use native Set when available.    _Set = Set;  } else {    // a non-standard Set polyfill that only works with primitive keys.    _Set = /*@__PURE__*/(function () {      function Set () {        this.set = Object.create(null);      }      Set.prototype.has = function has (key) {        return this.set[key] === true      };      Set.prototype.add = function add (key) {        this.set[key] = true;      };      Set.prototype.clear = function clear () {        this.set = Object.create(null);      };      return Set;    }());  }  /*  */  var warn = noop;  var tip = noop;  var generateComponentTrace = (noop); // work around flow check  var formatComponentName = (noop);  {    var hasConsole = typeof console !== 'undefined';    var classifyRE = /(?:^|[-_])(\w)/g;    var classify = function (str) { return str      .replace(classifyRE, function (c) { return c.toUpperCase(); })      .replace(/[-_]/g, ''); };    warn = function (msg, vm) {      var trace = vm ? generateComponentTrace(vm) : '';      if (config.warnHandler) {        config.warnHandler.call(null, msg, vm, trace);      } else if (hasConsole && (!config.silent)) {        console.error(("[Vue warn]: " + msg + trace));      }    };    tip = function (msg, vm) {      if (hasConsole && (!config.silent)) {        console.warn("[Vue tip]: " + msg + (          vm ? generateComponentTrace(vm) : ''        ));      }    };    formatComponentName = function (vm, includeFile) {      if (vm.$root === vm) {        return '<Root>'      }      var options = typeof vm === 'function' && vm.cid != null        ? vm.options        : vm._isVue          ? vm.$options || vm.constructor.options          : vm;      var name = options.name || options._componentTag;      var file = options.__file;      if (!name && file) {        var match = file.match(/([^/\\]+)\.vue$/);        name = match && match[1];      }      return (        (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +        (file && includeFile !== false ? (" at " + file) : '')      )    };    var repeat = function (str, n) {      var res = '';      while (n) {        if (n % 2 === 1) { res += str; }        if (n > 1) { str += str; }        n >>= 1;      }      return res    };    generateComponentTrace = function (vm) {      if (vm._isVue && vm.$parent) {        var tree = [];        var currentRecursiveSequence = 0;        while (vm) {          if (tree.length > 0) {            var last = tree[tree.length - 1];            if (last.constructor === vm.constructor) {              currentRecursiveSequence++;              vm = vm.$parent;              continue            } else if (currentRecursiveSequence > 0) {              tree[tree.length - 1] = [last, currentRecursiveSequence];              currentRecursiveSequence = 0;            }          }          tree.push(vm);          vm = vm.$parent;        }        return '\n\nfound in\n\n' + tree          .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)              ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")              : formatComponentName(vm))); })          .join('\n')      } else {        return ("\n\n(found in " + (formatComponentName(vm)) + ")")      }    };  }  /*  */  var uid = 0;  /**   * A dep is an observable that can have multiple   * directives subscribing to it.   */  var Dep = function Dep () {    this.id = uid++;    this.subs = [];  };  Dep.prototype.addSub = function addSub (sub) {    this.subs.push(sub);  };  Dep.prototype.removeSub = function removeSub (sub) {    remove(this.subs, sub);  };  Dep.prototype.depend = function depend () {    if (Dep.target) {      Dep.target.addDep(this);    }  };  Dep.prototype.notify = function notify () {    // stabilize the subscriber list first    var subs = this.subs.slice();    if (!config.async) {      // subs aren't sorted in scheduler if not running async      // we need to sort them now to make sure they fire in correct      // order      subs.sort(function (a, b) { return a.id - b.id; });    }    for (var i = 0, l = subs.length; i < l; i++) {      subs[i].update();    }  };  // The current target watcher being evaluated.  // This is globally unique because only one watcher  // can be evaluated at a time.  Dep.target = null;  var targetStack = [];  function pushTarget (target) {    targetStack.push(target);    Dep.target = target;  }  function popTarget () {    targetStack.pop();    Dep.target = targetStack[targetStack.length - 1];  }  /*  */  var VNode = function VNode (    tag,    data,    children,    text,    elm,    context,    componentOptions,    asyncFactory  ) {    this.tag = tag;    this.data = data;    this.children = children;    this.text = text;    this.elm = elm;    this.ns = undefined;    this.context = context;    this.fnContext = undefined;    this.fnOptions = undefined;    this.fnScopeId = undefined;    this.key = data && data.key;    this.componentOptions = componentOptions;    this.componentInstance = undefined;    this.parent = undefined;    this.raw = false;    this.isStatic = false;    this.isRootInsert = true;    this.isComment = false;    this.isCloned = false;    this.isOnce = false;    this.asyncFactory = asyncFactory;    this.asyncMeta = undefined;    this.isAsyncPlaceholder = false;  };  var prototypeAccessors = { child: { configurable: true } };  // DEPRECATED: alias for componentInstance for backwards compat.  /* istanbul ignore next */  prototypeAccessors.child.get = function () {    return this.componentInstance  };  Object.defineProperties( VNode.prototype, prototypeAccessors );  var createEmptyVNode = function (text) {    if ( text === void 0 ) text = '';    var node = new VNode();    node.text = text;    node.isComment = true;    return node  };  function createTextVNode (val) {    return new VNode(undefined, undefined, undefined, String(val))  }  // optimized shallow clone  // used for static nodes and slot nodes because they may be reused across  // multiple renders, cloning them avoids errors when DOM manipulations rely  // on their elm reference.  function cloneVNode (vnode) {    var cloned = new VNode(      vnode.tag,      vnode.data,      // #7975      // clone children array to avoid mutating original in case of cloning      // a child.      vnode.children && vnode.children.slice(),      vnode.text,      vnode.elm,      vnode.context,      vnode.componentOptions,      vnode.asyncFactory    );    cloned.ns = vnode.ns;    cloned.isStatic = vnode.isStatic;    cloned.key = vnode.key;    cloned.isComment = vnode.isComment;    cloned.fnContext = vnode.fnContext;    cloned.fnOptions = vnode.fnOptions;    cloned.fnScopeId = vnode.fnScopeId;    cloned.asyncMeta = vnode.asyncMeta;    cloned.isCloned = true;    return cloned  }  /*   * not type checking this file because flow doesn't play well with   * dynamically accessing methods on Array prototype   */  var arrayProto = Array.prototype;  var arrayMethods = Object.create(arrayProto);  var methodsToPatch = [    'push',    'pop',    'shift',    'unshift',    'splice',    'sort',    'reverse'  ];  /**   * Intercept mutating methods and emit events   */  methodsToPatch.forEach(function (method) {    // cache original method    var original = arrayProto[method];    def(arrayMethods, method, function mutator () {      var args = [], len = arguments.length;      while ( len-- ) args[ len ] = arguments[ len ];      var result = original.apply(this, args);      var ob = this.__ob__;      var inserted;      switch (method) {        case 'push':        case 'unshift':          inserted = args;          break        case 'splice':          inserted = args.slice(2);          break      }      if (inserted) { ob.observeArray(inserted); }      // notify change      ob.dep.notify();      return result    });  });  /*  */  var arrayKeys = Object.getOwnPropertyNames(arrayMethods);  /**   * In some cases we may want to disable observation inside a component's   * update computation.   */  var shouldObserve = true;  function toggleObserving (value) {    shouldObserve = value;  }  /**   * Observer class that is attached to each observed   * object. Once attached, the observer converts the target   * object's property keys into getter/setters that   * collect dependencies and dispatch updates.   */  var Observer = function Observer (value) {    this.value = value;    this.dep = new Dep();    this.vmCount = 0;    def(value, '__ob__', this);    if (Array.isArray(value)) {      if (hasProto) {        protoAugment(value, arrayMethods);      } else {        copyAugment(value, arrayMethods, arrayKeys);      }      this.observeArray(value);    } else {      this.walk(value);    }  };  /**   * Walk through all properties and convert them into   * getter/setters. This method should only be called when   * value type is Object.   */  Observer.prototype.walk = function walk (obj) {    var keys = Object.keys(obj);    for (var i = 0; i < keys.length; i++) {      defineReactive$$1(obj, keys[i]);    }  };  /**   * Observe a list of Array items.   */  Observer.prototype.observeArray = function observeArray (items) {    for (var i = 0, l = items.length; i < l; i++) {      observe(items[i]);    }  };  // helpers  /**   * Augment a target Object or Array by intercepting   * the prototype chain using __proto__   */  function protoAugment (target, src) {    /* eslint-disable no-proto */    target.__proto__ = src;    /* eslint-enable no-proto */  }  /**   * Augment a target Object or Array by defining   * hidden properties.   */  /* istanbul ignore next */  function copyAugment (target, src, keys) {    for (var i = 0, l = keys.length; i < l; i++) {      var key = keys[i];      def(target, key, src[key]);    }  }  /**   * Attempt to create an observer instance for a value,   * returns the new observer if successfully observed,   * or the existing observer if the value already has one.   */  function observe (value, asRootData) {    if (!isObject(value) || value instanceof VNode) {      return    }    var ob;    if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {      ob = value.__ob__;    } else if (      shouldObserve &&      !isServerRendering() &&      (Array.isArray(value) || isPlainObject(value)) &&      Object.isExtensible(value) &&      !value._isVue    ) {      ob = new Observer(value);    }    if (asRootData && ob) {      ob.vmCount++;    }    return ob  }  /**   * Define a reactive property on an Object.   */  function defineReactive$$1 (    obj,    key,    val,    customSetter,    shallow  ) {    var dep = new Dep();    var property = Object.getOwnPropertyDescriptor(obj, key);    if (property && property.configurable === false) {      return    }    // cater for pre-defined getter/setters    var getter = property && property.get;    var setter = property && property.set;    if ((!getter || setter) && arguments.length === 2) {      val = obj[key];    }    var childOb = !shallow && observe(val);    Object.defineProperty(obj, key, {      enumerable: true,      configurable: true,      get: function reactiveGetter () {        var value = getter ? getter.call(obj) : val;        if (Dep.target) {          dep.depend();          if (childOb) {            childOb.dep.depend();            if (Array.isArray(value)) {              dependArray(value);            }          }        }        return value      },      set: function reactiveSetter (newVal) {        var value = getter ? getter.call(obj) : val;        /* eslint-disable no-self-compare */        if (newVal === value || (newVal !== newVal && value !== value)) {          return        }        /* eslint-enable no-self-compare */        if (customSetter) {          customSetter();        }        // #7981: for accessor properties without setter        if (getter && !setter) { return }        if (setter) {          setter.call(obj, newVal);        } else {          val = newVal;        }        childOb = !shallow && observe(newVal);        dep.notify();      }    });  }  /**   * Set a property on an object. Adds the new property and   * triggers change notification if the property doesn't   * already exist.   */  function set (target, key, val) {    if (isUndef(target) || isPrimitive(target)    ) {      warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));    }    if (Array.isArray(target) && isValidArrayIndex(key)) {      target.length = Math.max(target.length, key);      target.splice(key, 1, val);      return val    }    if (key in target && !(key in Object.prototype)) {      target[key] = val;      return val    }    var ob = (target).__ob__;    if (target._isVue || (ob && ob.vmCount)) {      warn(        'Avoid adding reactive properties to a Vue instance or its root $data ' +        'at runtime - declare it upfront in the data option.'      );      return val    }    if (!ob) {      target[key] = val;      return val    }    defineReactive$$1(ob.value, key, val);    ob.dep.notify();    return val  }  /**   * Delete a property and trigger change if necessary.   */  function del (target, key) {    if (isUndef(target) || isPrimitive(target)    ) {      warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));    }    if (Array.isArray(target) && isValidArrayIndex(key)) {      target.splice(key, 1);      return    }    var ob = (target).__ob__;    if (target._isVue || (ob && ob.vmCount)) {      warn(        'Avoid deleting properties on a Vue instance or its root $data ' +        '- just set it to null.'      );      return    }    if (!hasOwn(target, key)) {      return    }    delete target[key];    if (!ob) {      return    }    ob.dep.notify();  }  /**   * Collect dependencies on array elements when the array is touched, since   * we cannot intercept array element access like property getters.   */  function dependArray (value) {    for (var e = (void 0), i = 0, l = value.length; i < l; i++) {      e = value[i];      e && e.__ob__ && e.__ob__.dep.depend();      if (Array.isArray(e)) {        dependArray(e);      }    }  }  /*  */  /**   * Option overwriting strategies are functions that handle   * how to merge a parent option value and a child option   * value into the final value.   */  var strats = config.optionMergeStrategies;  /**   * Options with restrictions   */  {    strats.el = strats.propsData = function (parent, child, vm, key) {      if (!vm) {        warn(          "option \"" + key + "\" can only be used during instance " +          'creation with the `new` keyword.'        );      }      return defaultStrat(parent, child)    };  }  /**   * Helper that recursively merges two data objects together.   */  function mergeData (to, from) {    if (!from) { return to }    var key, toVal, fromVal;    var keys = hasSymbol      ? Reflect.ownKeys(from)      : Object.keys(from);    for (var i = 0; i < keys.length; i++) {      key = keys[i];      // in case the object is already observed...      if (key === '__ob__') { continue }      toVal = to[key];      fromVal = from[key];      if (!hasOwn(to, key)) {        set(to, key, fromVal);      } else if (        toVal !== fromVal &&        isPlainObject(toVal) &&        isPlainObject(fromVal)      ) {        mergeData(toVal, fromVal);      }    }    return to  }  /**   * Data   */  function mergeDataOrFn (    parentVal,    childVal,    vm  ) {    if (!vm) {      // in a Vue.extend merge, both should be functions      if (!childVal) {        return parentVal      }      if (!parentVal) {        return childVal      }      // when parentVal & childVal are both present,      // we need to return a function that returns the      // merged result of both functions... no need to      // check if parentVal is a function here because      // it has to be a function to pass previous merges.      return function mergedDataFn () {        return mergeData(          typeof childVal === 'function' ? childVal.call(this, this) : childVal,          typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal        )      }    } else {      return function mergedInstanceDataFn () {        // instance merge        var instanceData = typeof childVal === 'function'          ? childVal.call(vm, vm)          : childVal;        var defaultData = typeof parentVal === 'function'          ? parentVal.call(vm, vm)          : parentVal;        if (instanceData) {          return mergeData(instanceData, defaultData)        } else {          return defaultData        }      }    }  }  strats.data = function (    parentVal,    childVal,    vm  ) {    if (!vm) {      if (childVal && typeof childVal !== 'function') {        warn(          'The "data" option should be a function ' +          'that returns a per-instance value in component ' +          'definitions.',          vm        );        return parentVal      }      return mergeDataOrFn(parentVal, childVal)    }    return mergeDataOrFn(parentVal, childVal, vm)  };  /**   * Hooks and props are merged as arrays.   */  function mergeHook (    parentVal,    childVal  ) {    var res = childVal      ? parentVal        ? parentVal.concat(childVal)        : Array.isArray(childVal)          ? childVal          : [childVal]      : parentVal;    return res      ? dedupeHooks(res)      : res  }  function dedupeHooks (hooks) {    var res = [];    for (var i = 0; i < hooks.length; i++) {      if (res.indexOf(hooks[i]) === -1) {        res.push(hooks[i]);      }    }    return res  }  LIFECYCLE_HOOKS.forEach(function (hook) {    strats[hook] = mergeHook;  });  /**   * Assets   *   * When a vm is present (instance creation), we need to do   * a three-way merge between constructor options, instance   * options and parent options.   */  function mergeAssets (    parentVal,    childVal,    vm,    key  ) {    var res = Object.create(parentVal || null);    if (childVal) {      assertObjectType(key, childVal, vm);      return extend(res, childVal)    } else {      return res    }  }  ASSET_TYPES.forEach(function (type) {    strats[type + 's'] = mergeAssets;  });  /**   * Watchers.   *   * Watchers hashes should not overwrite one   * another, so we merge them as arrays.   */  strats.watch = function (    parentVal,    childVal,    vm,    key  ) {    // work around Firefox's Object.prototype.watch...    if (parentVal === nativeWatch) { parentVal = undefined; }    if (childVal === nativeWatch) { childVal = undefined; }    /* istanbul ignore if */    if (!childVal) { return Object.create(parentVal || null) }    {      assertObjectType(key, childVal, vm);    }    if (!parentVal) { return childVal }    var ret = {};    extend(ret, parentVal);    for (var key$1 in childVal) {      var parent = ret[key$1];      var child = childVal[key$1];      if (parent && !Array.isArray(parent)) {        parent = [parent];      }      ret[key$1] = parent        ? parent.concat(child)        : Array.isArray(child) ? child : [child];    }    return ret  };  /**   * Other object hashes.   */  strats.props =  strats.methods =  strats.inject =  strats.computed = function (    parentVal,    childVal,    vm,    key  ) {    if (childVal && "development" !== 'production') {      assertObjectType(key, childVal, vm);    }    if (!parentVal) { return childVal }    var ret = Object.create(null);    extend(ret, parentVal);    if (childVal) { extend(ret, childVal); }    return ret  };  strats.provide = mergeDataOrFn;  /**   * Default strategy.   */  var defaultStrat = function (parentVal, childVal) {    return childVal === undefined      ? parentVal      : childVal  };  /**   * Validate component names   */  function checkComponents (options) {    for (var key in options.components) {      validateComponentName(key);    }  }  function validateComponentName (name) {    if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {      warn(        'Invalid component name: "' + name + '". Component names ' +        'should conform to valid custom element name in html5 specification.'      );    }    if (isBuiltInTag(name) || config.isReservedTag(name)) {      warn(        'Do not use built-in or reserved HTML elements as component ' +        'id: ' + name      );    }  }  /**   * Ensure all props option syntax are normalized into the   * Object-based format.   */  function normalizeProps (options, vm) {    var props = options.props;    if (!props) { return }    var res = {};    var i, val, name;    if (Array.isArray(props)) {      i = props.length;      while (i--) {        val = props[i];        if (typeof val === 'string') {          name = camelize(val);          res[name] = { type: null };        } else {          warn('props must be strings when using array syntax.');        }      }    } else if (isPlainObject(props)) {      for (var key in props) {        val = props[key];        name = camelize(key);        res[name] = isPlainObject(val)          ? val          : { type: val };      }    } else {      warn(        "Invalid value for option \"props\": expected an Array or an Object, " +        "but got " + (toRawType(props)) + ".",        vm      );    }    options.props = res;  }  /**   * Normalize all injections into Object-based format   */  function normalizeInject (options, vm) {    var inject = options.inject;    if (!inject) { return }    var normalized = options.inject = {};    if (Array.isArray(inject)) {      for (var i = 0; i < inject.length; i++) {        normalized[inject[i]] = { from: inject[i] };      }    } else if (isPlainObject(inject)) {      for (var key in inject) {        var val = inject[key];        normalized[key] = isPlainObject(val)          ? extend({ from: key }, val)          : { from: val };      }    } else {      warn(        "Invalid value for option \"inject\": expected an Array or an Object, " +        "but got " + (toRawType(inject)) + ".",        vm      );    }  }  /**   * Normalize raw function directives into object format.   */  function normalizeDirectives (options) {    var dirs = options.directives;    if (dirs) {      for (var key in dirs) {        var def$$1 = dirs[key];        if (typeof def$$1 === 'function') {          dirs[key] = { bind: def$$1, update: def$$1 };        }      }    }  }  function assertObjectType (name, value, vm) {    if (!isPlainObject(value)) {      warn(        "Invalid value for option \"" + name + "\": expected an Object, " +        "but got " + (toRawType(value)) + ".",        vm      );    }  }  /**   * Merge two option objects into a new one.   * Core utility used in both instantiation and inheritance.   */  function mergeOptions (    parent,    child,    vm  ) {    {      checkComponents(child);    }    if (typeof child === 'function') {      child = child.options;    }    normalizeProps(child, vm);    normalizeInject(child, vm);    normalizeDirectives(child);    // Apply extends and mixins on the child options,    // but only if it is a raw options object that isn't    // the result of another mergeOptions call.    // Only merged options has the _base property.    if (!child._base) {      if (child.extends) {        parent = mergeOptions(parent, child.extends, vm);      }      if (child.mixins) {        for (var i = 0, l = child.mixins.length; i < l; i++) {          parent = mergeOptions(parent, child.mixins[i], vm);        }      }    }    var options = {};    var key;    for (key in parent) {      mergeField(key);    }    for (key in child) {      if (!hasOwn(parent, key)) {        mergeField(key);      }    }    function mergeField (key) {      var strat = strats[key] || defaultStrat;      options[key] = strat(parent[key], child[key], vm, key);    }    return options  }  /**   * Resolve an asset.   * This function is used because child instances need access   * to assets defined in its ancestor chain.   */  function resolveAsset (    options,    type,    id,    warnMissing  ) {    /* istanbul ignore if */    if (typeof id !== 'string') {      return    }    var assets = options[type];    // check local registration variations first    if (hasOwn(assets, id)) { return assets[id] }    var camelizedId = camelize(id);    if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }    var PascalCaseId = capitalize(camelizedId);    if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }    // fallback to prototype chain    var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];    if (warnMissing && !res) {      warn(        'Failed to resolve ' + type.slice(0, -1) + ': ' + id,        options      );    }    return res  }  /*  */  function validateProp (    key,    propOptions,    propsData,    vm  ) {    var prop = propOptions[key];    var absent = !hasOwn(propsData, key);    var value = propsData[key];    // boolean casting    var booleanIndex = getTypeIndex(Boolean, prop.type);    if (booleanIndex > -1) {      if (absent && !hasOwn(prop, 'default')) {        value = false;      } else if (value === '' || value === hyphenate(key)) {        // only cast empty string / same name to boolean if        // boolean has higher priority        var stringIndex = getTypeIndex(String, prop.type);        if (stringIndex < 0 || booleanIndex < stringIndex) {          value = true;        }      }    }    // check default value    if (value === undefined) {      value = getPropDefaultValue(vm, prop, key);      // since the default value is a fresh copy,      // make sure to observe it.      var prevShouldObserve = shouldObserve;      toggleObserving(true);      observe(value);      toggleObserving(prevShouldObserve);    }    {      assertProp(prop, key, value, vm, absent);    }    return value  }  /**   * Get the default value of a prop.   */  function getPropDefaultValue (vm, prop, key) {    // no default, return undefined    if (!hasOwn(prop, 'default')) {      return undefined    }    var def = prop.default;    // warn against non-factory defaults for Object & Array    if (isObject(def)) {      warn(        'Invalid default value for prop "' + key + '": ' +        'Props with type Object/Array must use a factory function ' +        'to return the default value.',        vm      );    }    // the raw prop value was also undefined from previous render,    // return previous default value to avoid unnecessary watcher trigger    if (vm && vm.$options.propsData &&      vm.$options.propsData[key] === undefined &&      vm._props[key] !== undefined    ) {      return vm._props[key]    }    // call factory function for non-Function types    // a value is Function if its prototype is function even across different execution context    return typeof def === 'function' && getType(prop.type) !== 'Function'      ? def.call(vm)      : def  }  /**   * Assert whether a prop is valid.   */  function assertProp (    prop,    name,    value,    vm,    absent  ) {    if (prop.required && absent) {      warn(        'Missing required prop: "' + name + '"',        vm      );      return    }    if (value == null && !prop.required) {      return    }    var type = prop.type;    var valid = !type || type === true;    var expectedTypes = [];    if (type) {      if (!Array.isArray(type)) {        type = [type];      }      for (var i = 0; i < type.length && !valid; i++) {        var assertedType = assertType(value, type[i]);        expectedTypes.push(assertedType.expectedType || '');        valid = assertedType.valid;      }    }    if (!valid) {      warn(        getInvalidTypeMessage(name, value, expectedTypes),        vm      );      return    }    var validator = prop.validator;    if (validator) {      if (!validator(value)) {        warn(          'Invalid prop: custom validator check failed for prop "' + name + '".',          vm        );      }    }  }  var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;  function assertType (value, type) {    var valid;    var expectedType = getType(type);    if (simpleCheckRE.test(expectedType)) {      var t = typeof value;      valid = t === expectedType.toLowerCase();      // for primitive wrapper objects      if (!valid && t === 'object') {        valid = value instanceof type;      }    } else if (expectedType === 'Object') {      valid = isPlainObject(value);    } else if (expectedType === 'Array') {      valid = Array.isArray(value);    } else {      valid = value instanceof type;    }    return {      valid: valid,      expectedType: expectedType    }  }  /**   * Use function string name to check built-in types,   * because a simple equality check will fail when running   * across different vms / iframes.   */  function getType (fn) {    var match = fn && fn.toString().match(/^\s*function (\w+)/);    return match ? match[1] : ''  }  function isSameType (a, b) {    return getType(a) === getType(b)  }  function getTypeIndex (type, expectedTypes) {    if (!Array.isArray(expectedTypes)) {      return isSameType(expectedTypes, type) ? 0 : -1    }    for (var i = 0, len = expectedTypes.length; i < len; i++) {      if (isSameType(expectedTypes[i], type)) {        return i      }    }    return -1  }  function getInvalidTypeMessage (name, value, expectedTypes) {    var message = "Invalid prop: type check failed for prop \"" + name + "\"." +      " Expected " + (expectedTypes.map(capitalize).join(', '));    var expectedType = expectedTypes[0];    var receivedType = toRawType(value);    var expectedValue = styleValue(value, expectedType);    var receivedValue = styleValue(value, receivedType);    // check if we need to specify expected value    if (expectedTypes.length === 1 &&        isExplicable(expectedType) &&        !isBoolean(expectedType, receivedType)) {      message += " with value " + expectedValue;    }    message += ", got " + receivedType + " ";    // check if we need to specify received value    if (isExplicable(receivedType)) {      message += "with value " + receivedValue + ".";    }    return message  }  function styleValue (value, type) {    if (type === 'String') {      return ("\"" + value + "\"")    } else if (type === 'Number') {      return ("" + (Number(value)))    } else {      return ("" + value)    }  }  function isExplicable (value) {    var explicitTypes = ['string', 'number', 'boolean'];    return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })  }  function isBoolean () {    var args = [], len = arguments.length;    while ( len-- ) args[ len ] = arguments[ len ];    return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })  }  /*  */  function handleError (err, vm, info) {    // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.    // See: https://github.com/vuejs/vuex/issues/1505    pushTarget();    try {      if (vm) {        var cur = vm;        while ((cur = cur.$parent)) {          var hooks = cur.$options.errorCaptured;          if (hooks) {            for (var i = 0; i < hooks.length; i++) {              try {                var capture = hooks[i].call(cur, err, vm, info) === false;                if (capture) { return }              } catch (e) {                globalHandleError(e, cur, 'errorCaptured hook');              }            }          }        }      }      globalHandleError(err, vm, info);    } finally {      popTarget();    }  }  function invokeWithErrorHandling (    handler,    context,    args,    vm,    info  ) {    var res;    try {      res = args ? handler.apply(context, args) : handler.call(context);      if (res && !res._isVue && isPromise(res) && !res._handled) {        res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });        // issue #9511        // avoid catch triggering multiple times when nested calls        res._handled = true;      }    } catch (e) {      handleError(e, vm, info);    }    return res  }  function globalHandleError (err, vm, info) {    if (config.errorHandler) {      try {        return config.errorHandler.call(null, err, vm, info)      } catch (e) {        // if the user intentionally throws the original error in the handler,        // do not log it twice        if (e !== err) {          logError(e, null, 'config.errorHandler');        }      }    }    logError(err, vm, info);  }  function logError (err, vm, info) {    {      warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);    }    /* istanbul ignore else */    if ((inBrowser || inWeex) && typeof console !== 'undefined') {      console.error(err);    } else {      throw err    }  }  /*  */  var isUsingMicroTask = false;  var callbacks = [];  var pending = false;  function flushCallbacks () {    pending = false;    var copies = callbacks.slice(0);    callbacks.length = 0;    for (var i = 0; i < copies.length; i++) {      copies[i]();    }  }  // Here we have async deferring wrappers using microtasks.  // In 2.5 we used (macro) tasks (in combination with microtasks).  // However, it has subtle problems when state is changed right before repaint  // (e.g. #6813, out-in transitions).  // Also, using (macro) tasks in event handler would cause some weird behaviors  // that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).  // So we now use microtasks everywhere, again.  // A major drawback of this tradeoff is that there are some scenarios  // where microtasks have too high a priority and fire in between supposedly  // sequential events (e.g. #4521, #6690, which have workarounds)  // or even between bubbling of the same event (#6566).  var timerFunc;  // The nextTick behavior leverages the microtask queue, which can be accessed  // via either native Promise.then or MutationObserver.  // MutationObserver has wider support, however it is seriously bugged in  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It  // completely stops working after triggering a few times... so, if native  // Promise is available, we will use it:  /* istanbul ignore next, $flow-disable-line */  if (typeof Promise !== 'undefined' && isNative(Promise)) {    var p = Promise.resolve();    timerFunc = function () {      p.then(flushCallbacks);      // In problematic UIWebViews, Promise.then doesn't completely break, but      // it can get stuck in a weird state where callbacks are pushed into the      // microtask queue but the queue isn't being flushed, until the browser      // needs to do some other work, e.g. handle a timer. Therefore we can      // "force" the microtask queue to be flushed by adding an empty timer.      if (isIOS) { setTimeout(noop); }    };    isUsingMicroTask = true;  } else if (!isIE && typeof MutationObserver !== 'undefined' && (    isNative(MutationObserver) ||    // PhantomJS and iOS 7.x    MutationObserver.toString() === '[object MutationObserverConstructor]'  )) {    // Use MutationObserver where native Promise is not available,    // e.g. PhantomJS, iOS7, Android 4.4    // (#6466 MutationObserver is unreliable in IE11)    var counter = 1;    var observer = new MutationObserver(flushCallbacks);    var textNode = document.createTextNode(String(counter));    observer.observe(textNode, {      characterData: true    });    timerFunc = function () {      counter = (counter + 1) % 2;      textNode.data = String(counter);    };    isUsingMicroTask = true;  } else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {    // Fallback to setImmediate.    // Technically it leverages the (macro) task queue,    // but it is still a better choice than setTimeout.    timerFunc = function () {      setImmediate(flushCallbacks);    };  } else {    // Fallback to setTimeout.    timerFunc = function () {      setTimeout(flushCallbacks, 0);    };  }  function nextTick (cb, ctx) {    var _resolve;    callbacks.push(function () {      if (cb) {        try {          cb.call(ctx);        } catch (e) {          handleError(e, ctx, 'nextTick');        }      } else if (_resolve) {        _resolve(ctx);      }    });    if (!pending) {      pending = true;      timerFunc();    }    // $flow-disable-line    if (!cb && typeof Promise !== 'undefined') {      return new Promise(function (resolve) {        _resolve = resolve;      })    }  }  /*  */  var mark;  var measure;  {    var perf = inBrowser && window.performance;    /* istanbul ignore if */    if (      perf &&      perf.mark &&      perf.measure &&      perf.clearMarks &&      perf.clearMeasures    ) {      mark = function (tag) { return perf.mark(tag); };      measure = function (name, startTag, endTag) {        perf.measure(name, startTag, endTag);        perf.clearMarks(startTag);        perf.clearMarks(endTag);        // perf.clearMeasures(name)      };    }  }  /* not type checking this file because flow doesn't play well with Proxy */  var initProxy;  {    var allowedGlobals = makeMap(      'Infinity,undefined,NaN,isFinite,isNaN,' +      'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +      'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +      'require' // for Webpack/Browserify    );    var warnNonPresent = function (target, key) {      warn(        "Property or method \"" + key + "\" is not defined on the instance but " +        'referenced during render. Make sure that this property is reactive, ' +        'either in the data option, or for class-based components, by ' +        'initializing the property. ' +        'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',        target      );    };    var warnReservedPrefix = function (target, key) {      warn(        "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +        'properties starting with "$" or "_" are not proxied in the Vue instance to ' +        'prevent conflicts with Vue internals. ' +        'See: https://vuejs.org/v2/api/#data',        target      );    };    var hasProxy =      typeof Proxy !== 'undefined' && isNative(Proxy);    if (hasProxy) {      var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');      config.keyCodes = new Proxy(config.keyCodes, {        set: function set (target, key, value) {          if (isBuiltInModifier(key)) {            warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));            return false          } else {            target[key] = value;            return true          }        }      });    }    var hasHandler = {      has: function has (target, key) {        var has = key in target;        var isAllowed = allowedGlobals(key) ||          (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));        if (!has && !isAllowed) {          if (key in target.$data) { warnReservedPrefix(target, key); }          else { warnNonPresent(target, key); }        }        return has || !isAllowed      }    };    var getHandler = {      get: function get (target, key) {        if (typeof key === 'string' && !(key in target)) {          if (key in target.$data) { warnReservedPrefix(target, key); }          else { warnNonPresent(target, key); }        }        return target[key]      }    };    initProxy = function initProxy (vm) {      if (hasProxy) {        // determine which proxy handler to use        var options = vm.$options;        var handlers = options.render && options.render._withStripped          ? getHandler          : hasHandler;        vm._renderProxy = new Proxy(vm, handlers);      } else {        vm._renderProxy = vm;      }    };  }  /*  */  var seenObjects = new _Set();  /**   * Recursively traverse an object to evoke all converted   * getters, so that @atguigu every nested property inside the object   * is collected as a "deep" dependency.   */  function traverse (val) {    _traverse(val, seenObjects);    seenObjects.clear();  }  function _traverse (val, seen) {    var i, keys;    var isA = Array.isArray(val);    if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {      return    }    if (val.__ob__) {      var depId = val.__ob__.dep.id;      if (seen.has(depId)) {        return      }      seen.add(depId);    }    if (isA) {      i = val.length;      while (i--) { _traverse(val[i], seen); }    } else {      keys = Object.keys(val);      i = keys.length;      while (i--) { _traverse(val[keys[i]], seen); }    }  }  /*  */  var normalizeEvent = cached(function (name) {    var passive = name.charAt(0) === '&';    name = passive ? name.slice(1) : name;    var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first    name = once$$1 ? name.slice(1) : name;    var capture = name.charAt(0) === '!';    name = capture ? name.slice(1) : name;    return {      name: name,      once: once$$1,      capture: capture,      passive: passive    }  });  function createFnInvoker (fns, vm) {    function invoker () {      var arguments$1 = arguments;      var fns = invoker.fns;      if (Array.isArray(fns)) {        var cloned = fns.slice();        for (var i = 0; i < cloned.length; i++) {          invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");        }      } else {        // return handler return value for single handlers        return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")      }    }    invoker.fns = fns;    return invoker  }  function updateListeners (    on,    oldOn,    add,    remove$$1,    createOnceHandler,    vm  ) {    var name, def$$1, cur, old, event;    for (name in on) {      def$$1 = cur = on[name];      old = oldOn[name];      event = normalizeEvent(name);      if (isUndef(cur)) {        warn(          "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),          vm        );      } else if (isUndef(old)) {        if (isUndef(cur.fns)) {          cur = on[name] = createFnInvoker(cur, vm);        }        if (isTrue(event.once)) {          cur = on[name] = createOnceHandler(event.name, cur, event.capture);        }        add(event.name, cur, event.capture, event.passive, event.params);      } else if (cur !== old) {        old.fns = cur;        on[name] = old;      }    }    for (name in oldOn) {      if (isUndef(on[name])) {        event = normalizeEvent(name);        remove$$1(event.name, oldOn[name], event.capture);      }    }  }  /*  */  function mergeVNodeHook (def, hookKey, hook) {    if (def instanceof VNode) {      def = def.data.hook || (def.data.hook = {});    }    var invoker;    var oldHook = def[hookKey];    function wrappedHook () {      hook.apply(this, arguments);      // important: remove merged hook to ensure it's called only once      // and prevent memory leak      remove(invoker.fns, wrappedHook);    }    if (isUndef(oldHook)) {      // no existing hook      invoker = createFnInvoker([wrappedHook]);    } else {      /* istanbul ignore if */      if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {        // already a merged invoker        invoker = oldHook;        invoker.fns.push(wrappedHook);      } else {        // existing plain hook        invoker = createFnInvoker([oldHook, wrappedHook]);      }    }    invoker.merged = true;    def[hookKey] = invoker;  }  /*  */  function extractPropsFromVNodeData (    data,    Ctor,    tag  ) {    // we are only extracting raw values here.    // validation and default values are handled in the child    // component itself.    var propOptions = Ctor.options.props;    if (isUndef(propOptions)) {      return    }    var res = {};    var attrs = data.attrs;    var props = data.props;    if (isDef(attrs) || isDef(props)) {      for (var key in propOptions) {        var altKey = hyphenate(key);        {          var keyInLowerCase = key.toLowerCase();          if (            key !== keyInLowerCase &&            attrs && hasOwn(attrs, keyInLowerCase)          ) {            tip(              "Prop \"" + keyInLowerCase + "\" is passed to component " +              (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +              " \"" + key + "\". " +              "Note that HTML attributes are case-insensitive and camelCased " +              "props need to use their kebab-case equivalents when using in-DOM " +              "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."            );          }        }        checkProp(res, props, key, altKey, true) ||        checkProp(res, attrs, key, altKey, false);      }    }    return res  }  function checkProp (    res,    hash,    key,    altKey,    preserve  ) {    if (isDef(hash)) {      if (hasOwn(hash, key)) {        res[key] = hash[key];        if (!preserve) {          delete hash[key];        }        return true      } else if (hasOwn(hash, altKey)) {        res[key] = hash[altKey];        if (!preserve) {          delete hash[altKey];        }        return true      }    }    return false  }  /*  */  // The template compiler attempts to minimize the need for normalization by  // statically analyzing the template at compile time.  //  // For plain HTML markup, normalization can be completely skipped because the  // generated render function is guaranteed to return Array<VNode>. There are  // two cases where extra normalization is needed:  // 1. When the children contains components - because a functional component  // may return an Array instead of a single root. In this case, just a simple  // normalization is needed - if any child is an Array, we flatten the whole  // thing with Array.prototype.concat. It is guaranteed to be only 1-level deep  // because functional components already normalize their own children.  function simpleNormalizeChildren (children) {    for (var i = 0; i < children.length; i++) {      if (Array.isArray(children[i])) {        return Array.prototype.concat.apply([], children)      }    }    return children  }  // 2. When the children contains constructs that always generated nested Arrays,  // e.g. <template>, <slot>, v-for, or when the children is provided by user  // with hand-written render functions / JSX. In such cases a full normalization  // is needed to cater to all possible types of children values.  function normalizeChildren (children) {    return isPrimitive(children)      ? [createTextVNode(children)]      : Array.isArray(children)        ? normalizeArrayChildren(children)        : undefined  }  function isTextNode (node) {    return isDef(node) && isDef(node.text) && isFalse(node.isComment)  }  function normalizeArrayChildren (children, nestedIndex) {    var res = [];    var i, c, lastIndex, last;    for (i = 0; i < children.length; i++) {      c = children[i];      if (isUndef(c) || typeof c === 'boolean') { continue }      lastIndex = res.length - 1;      last = res[lastIndex];      //  nested      if (Array.isArray(c)) {        if (c.length > 0) {          c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));          // merge adjacent text nodes          if (isTextNode(c[0]) && isTextNode(last)) {            res[lastIndex] = createTextVNode(last.text + (c[0]).text);            c.shift();          }          res.push.apply(res, c);        }      } else if (isPrimitive(c)) {        if (isTextNode(last)) {          // merge adjacent text nodes          // this is necessary for SSR hydration because text nodes are          // essentially merged when rendered to HTML strings          res[lastIndex] = createTextVNode(last.text + c);        } else if (c !== '') {          // convert primitive to vnode          res.push(createTextVNode(c));        }      } else {        if (isTextNode(c) && isTextNode(last)) {          // merge adjacent text nodes          res[lastIndex] = createTextVNode(last.text + c.text);        } else {          // default key for nested array children (likely generated by v-for)          if (isTrue(children._isVList) &&            isDef(c.tag) &&            isUndef(c.key) &&            isDef(nestedIndex)) {            c.key = "__vlist" + nestedIndex + "_" + i + "__";          }          res.push(c);        }      }    }    return res  }  /*  */  function initProvide (vm) {    var provide = vm.$options.provide;    if (provide) {      vm._provided = typeof provide === 'function'        ? provide.call(vm)        : provide;    }  }  function initInjections (vm) {    var result = resolveInject(vm.$options.inject, vm);    if (result) {      toggleObserving(false);      Object.keys(result).forEach(function (key) {        /* istanbul ignore else */        {          defineReactive$$1(vm, key, result[key], function () {            warn(              "Avoid mutating an injected value directly since the changes will be " +              "overwritten whenever the provided component re-renders. " +              "injection being mutated: \"" + key + "\"",              vm            );          });        }      });      toggleObserving(true);    }  }  function resolveInject (inject, vm) {    if (inject) {      // inject is :any because flow is not smart enough to figure out cached      var result = Object.create(null);      var keys = hasSymbol        ? Reflect.ownKeys(inject)        : Object.keys(inject);      for (var i = 0; i < keys.length; i++) {        var key = keys[i];        // #6574 in case the inject object is observed...        if (key === '__ob__') { continue }        var provideKey = inject[key].from;        var source = vm;        while (source) {          if (source._provided && hasOwn(source._provided, provideKey)) {            result[key] = source._provided[provideKey];            break          }          source = source.$parent;        }        if (!source) {          if ('default' in inject[key]) {            var provideDefault = inject[key].default;            result[key] = typeof provideDefault === 'function'              ? provideDefault.call(vm)              : provideDefault;          } else {            warn(("Injection \"" + key + "\" not found"), vm);          }        }      }      return result    }  }  /*  */  /**   * Runtime helper for resolving raw children VNodes into a slot object.   */  function resolveSlots (    children,    context  ) {    if (!children || !children.length) {      return {}    }    var slots = {};    for (var i = 0, l = children.length; i < l; i++) {      var child = children[i];      var data = child.data;      // remove slot attribute if the node is resolved as a Vue slot node      if (data && data.attrs && data.attrs.slot) {        delete data.attrs.slot;      }      // named slots should only be respected if the vnode was rendered in the      // same context.      if ((child.context === context || child.fnContext === context) &&        data && data.slot != null      ) {        var name = data.slot;        var slot = (slots[name] || (slots[name] = []));        if (child.tag === 'template') {          slot.push.apply(slot, child.children || []);        } else {          slot.push(child);        }      } else {        (slots.default || (slots.default = [])).push(child);      }    }    // ignore slots that contains only whitespace    for (var name$1 in slots) {      if (slots[name$1].every(isWhitespace)) {        delete slots[name$1];      }    }    return slots  }  function isWhitespace (node) {    return (node.isComment && !node.asyncFactory) || node.text === ' '  }  /*  */  function normalizeScopedSlots (    slots,    normalSlots,    prevSlots  ) {    var res;    var hasNormalSlots = Object.keys(normalSlots).length > 0;    var isStable = slots ? !!slots.$stable : !hasNormalSlots;    var key = slots && slots.$key;    if (!slots) {      res = {};    } else if (slots._normalized) {      // fast path 1: child component re-render only, parent did not change      return slots._normalized    } else if (      isStable &&      prevSlots &&      prevSlots !== emptyObject &&      key === prevSlots.$key &&      !hasNormalSlots &&      !prevSlots.$hasNormal    ) {      // fast path 2: stable scoped slots w/ no normal slots to proxy,      // only need to normalize once      return prevSlots    } else {      res = {};      for (var key$1 in slots) {        if (slots[key$1] && key$1[0] !== '$') {          res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);        }      }    }    // expose normal slots on scopedSlots    for (var key$2 in normalSlots) {      if (!(key$2 in res)) {        res[key$2] = proxyNormalSlot(normalSlots, key$2);      }    }    // avoriaz seems to mock a non-extensible $scopedSlots object    // and when that is passed down this would cause an error    if (slots && Object.isExtensible(slots)) {      (slots)._normalized = res;    }    def(res, '$stable', isStable);    def(res, '$key', key);    def(res, '$hasNormal', hasNormalSlots);    return res  }  function normalizeScopedSlot(normalSlots, key, fn) {    var normalized = function () {      var res = arguments.length ? fn.apply(null, arguments) : fn({});      res = res && typeof res === 'object' && !Array.isArray(res)        ? [res] // single vnode        : normalizeChildren(res);      return res && (        res.length === 0 ||        (res.length === 1 && res[0].isComment) // #9658      ) ? undefined        : res    };    // this is a slot using the new v-slot syntax without scope. although it is    // compiled as a scoped slot, render fn users would expect it to be present    // on this.$slots because the usage is semantically a normal slot.    if (fn.proxy) {      Object.defineProperty(normalSlots, key, {        get: normalized,        enumerable: true,        configurable: true      });    }    return normalized  }  function proxyNormalSlot(slots, key) {    return function () { return slots[key]; }  }  /*  */  /**   * Runtime helper for rendering v-for lists.   */  function renderList (    val,    render  ) {    var ret, i, l, keys, key;    if (Array.isArray(val) || typeof val === 'string') {      ret = new Array(val.length);      for (i = 0, l = val.length; i < l; i++) {        ret[i] = render(val[i], i);      }    } else if (typeof val === 'number') {      ret = new Array(val);      for (i = 0; i < val; i++) {        ret[i] = render(i + 1, i);      }    } else if (isObject(val)) {      if (hasSymbol && val[Symbol.iterator]) {        ret = [];        var iterator = val[Symbol.iterator]();        var result = iterator.next();        while (!result.done) {          ret.push(render(result.value, ret.length));          result = iterator.next();        }      } else {        keys = Object.keys(val);        ret = new Array(keys.length);        for (i = 0, l = keys.length; i < l; i++) {          key = keys[i];          ret[i] = render(val[key], key, i);        }      }    }    if (!isDef(ret)) {      ret = [];    }    (ret)._isVList = true;    return ret  }  /*  */  /**   * Runtime helper for rendering <slot>   */  function renderSlot (    name,    fallback,    props,    bindObject  ) {    var scopedSlotFn = this.$scopedSlots[name];    var nodes;    if (scopedSlotFn) { // scoped slot      props = props || {};      if (bindObject) {        if (!isObject(bindObject)) {          warn(            'slot v-bind without argument expects an Object',            this          );        }        props = extend(extend({}, bindObject), props);      }      nodes = scopedSlotFn(props) || fallback;    } else {      nodes = this.$slots[name] || fallback;    }    var target = props && props.slot;    if (target) {      return this.$createElement('template', { slot: target }, nodes)    } else {      return nodes    }  }  /*  */  /**   * Runtime helper for resolving filters   */  function resolveFilter (id) {    return resolveAsset(this.$options, 'filters', id, true) || identity  }  /*  */  function isKeyNotMatch (expect, actual) {    if (Array.isArray(expect)) {      return expect.indexOf(actual) === -1    } else {      return expect !== actual    }  }  /**   * Runtime helper for checking keyCodes from config.   * exposed as Vue.prototype._k   * passing in eventKeyName as last argument separately for backwards compat   */  function checkKeyCodes (    eventKeyCode,    key,    builtInKeyCode,    eventKeyName,    builtInKeyName  ) {    var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;    if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {      return isKeyNotMatch(builtInKeyName, eventKeyName)    } else if (mappedKeyCode) {      return isKeyNotMatch(mappedKeyCode, eventKeyCode)    } else if (eventKeyName) {      return hyphenate(eventKeyName) !== key    }  }  /*  */  /**   * Runtime helper for merging v-bind="object" into a VNode's data.   */  function bindObjectProps (    data,    tag,    value,    asProp,    isSync  ) {    if (value) {      if (!isObject(value)) {        warn(          'v-bind without argument expects an Object or Array value',          this        );      } else {        if (Array.isArray(value)) {          value = toObject(value);        }        var hash;        var loop = function ( key ) {          if (            key === 'class' ||            key === 'style' ||            isReservedAttribute(key)          ) {            hash = data;          } else {            var type = data.attrs && data.attrs.type;            hash = asProp || config.mustUseProp(tag, type, key)              ? data.domProps || (data.domProps = {})              : data.attrs || (data.attrs = {});          }          var camelizedKey = camelize(key);          var hyphenatedKey = hyphenate(key);          if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {            hash[key] = value[key];            if (isSync) {              var on = data.on || (data.on = {});              on[("update:" + key)] = function ($event) {                value[key] = $event;              };            }          }        };        for (var key in value) loop( key );      }    }    return data  }  /*  */  /**   * Runtime helper for rendering static trees.   */  function renderStatic (    index,    isInFor  ) {    var cached = this._staticTrees || (this._staticTrees = []);    var tree = cached[index];    // if has already-rendered static tree and not inside v-for,    // we can reuse the same tree.    if (tree && !isInFor) {      return tree    }    // otherwise, render a fresh tree.    tree = cached[index] = this.$options.staticRenderFns[index].call(      this._renderProxy,      null,      this // for render fns generated for functional component templates    );    markStatic(tree, ("__static__" + index), false);    return tree  }  /**   * Runtime helper for v-once.   * Effectively it means marking the node as static with a unique key.   */  function markOnce (    tree,    index,    key  ) {    markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);    return tree  }  function markStatic (    tree,    key,    isOnce  ) {    if (Array.isArray(tree)) {      for (var i = 0; i < tree.length; i++) {        if (tree[i] && typeof tree[i] !== 'string') {          markStaticNode(tree[i], (key + "_" + i), isOnce);        }      }    } else {      markStaticNode(tree, key, isOnce);    }  }  function markStaticNode (node, key, isOnce) {    node.isStatic = true;    node.key = key;    node.isOnce = isOnce;  }  /*  */  function bindObjectListeners (data, value) {    if (value) {      if (!isPlainObject(value)) {        warn(          'v-on without argument expects an Object value',          this        );      } else {        var on = data.on = data.on ? extend({}, data.on) : {};        for (var key in value) {          var existing = on[key];          var ours = value[key];          on[key] = existing ? [].concat(existing, ours) : ours;        }      }    }    return data  }  /*  */  function resolveScopedSlots (    fns, // see flow/vnode    res,    // the following are added in 2.6    hasDynamicKeys,    contentHashKey  ) {    res = res || { $stable: !hasDynamicKeys };    for (var i = 0; i < fns.length; i++) {      var slot = fns[i];      if (Array.isArray(slot)) {        resolveScopedSlots(slot, res, hasDynamicKeys);      } else if (slot) {        // marker for reverse proxying v-slot without scope on this.$slots        if (slot.proxy) {          slot.fn.proxy = true;        }        res[slot.key] = slot.fn;      }    }    if (contentHashKey) {      (res).$key = contentHashKey;    }    return res  }  /*  */  function bindDynamicKeys (baseObj, values) {    for (var i = 0; i < values.length; i += 2) {      var key = values[i];      if (typeof key === 'string' && key) {        baseObj[values[i]] = values[i + 1];      } else if (key !== '' && key !== null) {        // null is a special value for explicitly removing a binding        warn(          ("Invalid value for dynamic directive argument (expected string or null): " + key),          this        );      }    }    return baseObj  }  // helper to dynamically append modifier runtime markers to event names.  // ensure only append when value is already string, otherwise it will be cast  // to string and cause the type check to miss.  function prependModifier (value, symbol) {    return typeof value === 'string' ? symbol + value : value  }  /*  */  function installRenderHelpers (target) {    target._o = markOnce;    target._n = toNumber;    target._s = toString;    target._l = renderList;    target._t = renderSlot;    target._q = looseEqual;    target._i = looseIndexOf;    target._m = renderStatic;    target._f = resolveFilter;    target._k = checkKeyCodes;    target._b = bindObjectProps;    target._v = createTextVNode;    target._e = createEmptyVNode;    target._u = resolveScopedSlots;    target._g = bindObjectListeners;    target._d = bindDynamicKeys;    target._p = prependModifier;  }  /*  */  function FunctionalRenderContext (    data,    props,    children,    parent,    Ctor  ) {    var this$1 = this;    var options = Ctor.options;    // @atguigu ensure the createElement function in functional components    // gets a unique context - this is necessary for correct named slot check    var contextVm;    if (hasOwn(parent, '_uid')) {      contextVm = Object.create(parent);      // $flow-disable-line      contextVm._original = parent;    } else {      // the context vm passed in is a functional context as well.      // in this case we want to make sure we are able to get a hold to the      // real context instance.      contextVm = parent;      // $flow-disable-line      parent = parent._original;    }    var isCompiled = isTrue(options._compiled);    var needNormalization = !isCompiled;    this.data = data;    this.props = props;    this.children = children;    this.parent = parent;    this.listeners = data.on || emptyObject;    this.injections = resolveInject(options.inject, parent);    this.slots = function () {      if (!this$1.$slots) {        normalizeScopedSlots(          data.scopedSlots,          this$1.$slots = resolveSlots(children, parent)        );      }      return this$1.$slots    };    Object.defineProperty(this, 'scopedSlots', ({      enumerable: true,      get: function get () {        return normalizeScopedSlots(data.scopedSlots, this.slots())      }    }));    // support for compiled functional template    if (isCompiled) {      // exposing $options for renderStatic()      this.$options = options;      // pre-resolve slots for renderSlot()      this.$slots = this.slots();      this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);    }    if (options._scopeId) {      this._c = function (a, b, c, d) {        var vnode = createElement(contextVm, a, b, c, d, needNormalization);        if (vnode && !Array.isArray(vnode)) {          vnode.fnScopeId = options._scopeId;          vnode.fnContext = parent;        }        return vnode      };    } else {      this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };    }  }  installRenderHelpers(FunctionalRenderContext.prototype);  function createFunctionalComponent (    Ctor,    propsData,    data,    contextVm,    children  ) {    var options = Ctor.options;    var props = {};    var propOptions = options.props;    if (isDef(propOptions)) {      for (var key in propOptions) {        props[key] = validateProp(key, propOptions, propsData || emptyObject);      }    } else {      if (isDef(data.attrs)) { mergeProps(props, data.attrs); }      if (isDef(data.props)) { mergeProps(props, data.props); }    }    var renderContext = new FunctionalRenderContext(      data,      props,      children,      contextVm,      Ctor    );    var vnode = options.render.call(null, renderContext._c, renderContext);    if (vnode instanceof VNode) {      return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)    } else if (Array.isArray(vnode)) {      var vnodes = normalizeChildren(vnode) || [];      var res = new Array(vnodes.length);      for (var i = 0; i < vnodes.length; i++) {        res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);      }      return res    }  }  function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {    // #7817 clone node before setting fnContext, otherwise if the node is reused    // (e.g. it was from a cached normal slot) the fnContext causes named slots    // that should not be matched to match.    var clone = cloneVNode(vnode);    clone.fnContext = contextVm;    clone.fnOptions = options;    {      (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;    }    if (data.slot) {      (clone.data || (clone.data = {})).slot = data.slot;    }    return clone  }  function mergeProps (to, from) {    for (var key in from) {      to[camelize(key)] = from[key];    }  }  /*  */  /*  */  /*  */  /*  */  // inline hooks to be invoked on component VNodes during patch  var componentVNodeHooks = {    init: function init (vnode, hydrating) {      if (        vnode.componentInstance &&        !vnode.componentInstance._isDestroyed &&        vnode.data.keepAlive      ) {        // kept-alive components, treat as a patch        var mountedNode = vnode; // work around flow        componentVNodeHooks.prepatch(mountedNode, mountedNode);      } else {        var child = vnode.componentInstance = createComponentInstanceForVnode(          vnode,          activeInstance        );        child.$mount(hydrating ? vnode.elm : undefined, hydrating);      }    },    prepatch: function prepatch (oldVnode, vnode) {      var options = vnode.componentOptions;      var child = vnode.componentInstance = oldVnode.componentInstance;      updateChildComponent(        child,        options.propsData, // updated props        options.listeners, // updated listeners        vnode, // new parent vnode        options.children // new children      );    },    insert: function insert (vnode) {      var context = vnode.context;      var componentInstance = vnode.componentInstance;      if (!componentInstance._isMounted) {        componentInstance._isMounted = true;        callHook(componentInstance, 'mounted');      }      if (vnode.data.keepAlive) {        if (context._isMounted) {          // vue-router#1212          // During updates, a kept-alive component's child components may          // change, so directly walking the tree here may call activated hooks          // on incorrect children. Instead we push them into a queue which will          // be processed after the whole patch process ended.          queueActivatedComponent(componentInstance);        } else {          activateChildComponent(componentInstance, true /* direct */);        }      }    },    destroy: function destroy (vnode) {      var componentInstance = vnode.componentInstance;      if (!componentInstance._isDestroyed) {        if (!vnode.data.keepAlive) {          componentInstance.$destroy();        } else {          deactivateChildComponent(componentInstance, true /* direct */);        }      }    }  };  var hooksToMerge = Object.keys(componentVNodeHooks);  function createComponent (    Ctor,    data,    context,    children,    tag  ) {    if (isUndef(Ctor)) {      return    }    var baseCtor = context.$options._base;    // plain options object: turn it into a constructor    if (isObject(Ctor)) {      Ctor = baseCtor.extend(Ctor);    }    // if at this stage it's not a constructor or an async component factory,    // reject.    if (typeof Ctor !== 'function') {      {        warn(("Invalid Component definition: " + (String(Ctor))), context);      }      return    }    // async component    var asyncFactory;    if (isUndef(Ctor.cid)) {      asyncFactory = Ctor;      Ctor = resolveAsyncComponent(asyncFactory, baseCtor);      if (Ctor === undefined) {        // return a placeholder node for async component, which is rendered        // as a comment node but preserves all the raw information for the node.        // the information will be used for async server-rendering and hydration.        return createAsyncPlaceholder(          asyncFactory,          data,          context,          children,          tag        )      }    }    data = data || {};    // resolve constructor options in case global mixins are applied after    // component constructor creation    resolveConstructorOptions(Ctor);    // transform component v-model data into props & events    if (isDef(data.model)) {      transformModel(Ctor.options, data);    }    // extract props    var propsData = extractPropsFromVNodeData(data, Ctor, tag);    // functional component    if (isTrue(Ctor.options.functional)) {      return createFunctionalComponent(Ctor, propsData, data, context, children)    }    // extract listeners, since these needs to be treated as    // child component listeners instead of DOM listeners    var listeners = data.on;    // replace with listeners with .native modifier    // so it gets processed during parent component patch.    data.on = data.nativeOn;    if (isTrue(Ctor.options.abstract)) {      // abstract components do not keep anything      // other than props & listeners & slot      // work around flow      var slot = data.slot;      data = {};      if (slot) {        data.slot = slot;      }    }    // install component management hooks onto the placeholder node    installComponentHooks(data);    // return a placeholder vnode    var name = Ctor.options.name || tag;    var vnode = new VNode(      ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),      data, undefined, undefined, undefined, context,      { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },      asyncFactory    );    return vnode  }  function createComponentInstanceForVnode (    vnode, // we know it's MountedComponentVNode but flow doesn't    parent // activeInstance in lifecycle state  ) {    var options = {      _isComponent: true,      _parentVnode: vnode,      parent: parent    };    // check inline-template render functions    var inlineTemplate = vnode.data.inlineTemplate;    if (isDef(inlineTemplate)) {      options.render = inlineTemplate.render;      options.staticRenderFns = inlineTemplate.staticRenderFns;    }    return new vnode.componentOptions.Ctor(options)  }  function installComponentHooks (data) {    var hooks = data.hook || (data.hook = {});    for (var i = 0; i < hooksToMerge.length; i++) {      var key = hooksToMerge[i];      var existing = hooks[key];      var toMerge = componentVNodeHooks[key];      if (existing !== toMerge && !(existing && existing._merged)) {        hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;      }    }  }  function mergeHook$1 (f1, f2) {    var merged = function (a, b) {      // flow complains about extra args which is why we use any      f1(a, b);      f2(a, b);    };    merged._merged = true;    return merged  }  // transform component v-model info (value and callback) into  // prop and event handler respectively.  function transformModel (options, data) {    var prop = (options.model && options.model.prop) || 'value';    var event = (options.model && options.model.event) || 'input'    ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;    var on = data.on || (data.on = {});    var existing = on[event];    var callback = data.model.callback;    if (isDef(existing)) {      if (        Array.isArray(existing)          ? existing.indexOf(callback) === -1          : existing !== callback      ) {        on[event] = [callback].concat(existing);      }    } else {      on[event] = callback;    }  }  /*  */  var SIMPLE_NORMALIZE = 1;  var ALWAYS_NORMALIZE = 2;  // wrapper function for providing a more flexible interface  // without getting yelled at by flow  function createElement (    context,    tag,    data,    children,    normalizationType,    alwaysNormalize  ) {    if (Array.isArray(data) || isPrimitive(data)) {      normalizationType = children;      children = data;      data = undefined;    }    if (isTrue(alwaysNormalize)) {      normalizationType = ALWAYS_NORMALIZE;    }    return _createElement(context, tag, data, children, normalizationType)  }  function _createElement (    context,    tag,    data,    children,    normalizationType  ) {    if (isDef(data) && isDef((data).__ob__)) {      warn(        "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +        'Always create fresh vnode data objects in each render!',        context      );      return createEmptyVNode()    }    // object syntax in v-bind    if (isDef(data) && isDef(data.is)) {      tag = data.is;    }    if (!tag) {      // in case of component :is set to falsy value      return createEmptyVNode()    }    // warn against non-primitive key    if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)    ) {      {        warn(          'Avoid using non-primitive value as key, ' +          'use string/number value instead.',          context        );      }    }    // support single function children as default scoped slot    if (Array.isArray(children) &&      typeof children[0] === 'function'    ) {      data = data || {};      data.scopedSlots = { default: children[0] };      children.length = 0;    }    if (normalizationType === ALWAYS_NORMALIZE) {      children = normalizeChildren(children);    } else if (normalizationType === SIMPLE_NORMALIZE) {      children = simpleNormalizeChildren(children);    }    var vnode, ns;    if (typeof tag === 'string') {      var Ctor;      ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);      if (config.isReservedTag(tag)) {        // platform built-in elements        if (isDef(data) && isDef(data.nativeOn)) {          warn(            ("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">."),            context          );        }        vnode = new VNode(          config.parsePlatformTagName(tag), data, children,          undefined, undefined, context        );      } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {        // component        vnode = createComponent(Ctor, data, context, children, tag);      } else {        // unknown or unlisted namespaced elements        // check at runtime because it may get assigned a namespace when its        // parent normalizes children        vnode = new VNode(          tag, data, children,          undefined, undefined, context        );      }    } else {      // direct component options / constructor      vnode = createComponent(tag, data, context, children);    }    if (Array.isArray(vnode)) {      return vnode    } else if (isDef(vnode)) {      if (isDef(ns)) { applyNS(vnode, ns); }      if (isDef(data)) { registerDeepBindings(data); }      return vnode    } else {      return createEmptyVNode()    }  }  function applyNS (vnode, ns, force) {    vnode.ns = ns;    if (vnode.tag === 'foreignObject') {      // use default namespace inside foreignObject      ns = undefined;      force = true;    }    if (isDef(vnode.children)) {      for (var i = 0, l = vnode.children.length; i < l; i++) {        var child = vnode.children[i];        if (isDef(child.tag) && (          isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {          applyNS(child, ns, force);        }      }    }  }  // ref #5318  // necessary to ensure parent re-render when deep bindings like :style and  // :class are used on slot nodes  function registerDeepBindings (data) {    if (isObject(data.style)) {      traverse(data.style);    }    if (isObject(data.class)) {      traverse(data.class);    }  }  /*  */  function initRender (vm) {    vm._vnode = null; // the root of the child tree    vm._staticTrees = null; // v-once cached trees    var options = vm.$options;    var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree    var renderContext = parentVnode && parentVnode.context;    vm.$slots = resolveSlots(options._renderChildren, renderContext);    vm.$scopedSlots = emptyObject;    // bind the createElement fn to this instance    // so that we get proper render context inside it.    // args order: tag, data, children, normalizationType, alwaysNormalize    // internal version is used by render functions compiled from templates    vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };    // normalization is always applied for the public version, used in    // user-written render functions.    vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };    // $attrs & $listeners are exposed for easier HOC creation.    // they need to be reactive so that HOCs using them are always updated    var parentData = parentVnode && parentVnode.data;    /* istanbul ignore else */    {      defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {        !isUpdatingChildComponent && warn("$attrs is readonly.", vm);      }, true);      defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {        !isUpdatingChildComponent && warn("$listeners is readonly.", vm);      }, true);    }  }  var currentRenderingInstance = null;  function renderMixin (Vue) {    // install runtime convenience helpers    installRenderHelpers(Vue.prototype);    Vue.prototype.$nextTick = function (fn) {      return nextTick(fn, this)    };    Vue.prototype._render = function () {      var vm = this;      var ref = vm.$options;      var render = ref.render;      var _parentVnode = ref._parentVnode;      if (_parentVnode) {        vm.$scopedSlots = normalizeScopedSlots(          _parentVnode.data.scopedSlots,          vm.$slots,          vm.$scopedSlots        );      }      // set parent vnode. this allows render functions to have access      // to the data on the placeholder node.      vm.$vnode = _parentVnode;      // render self      var vnode;      try {        // There's no need to maintain a stack because all render fns are called        // separately from one another. Nested component's render fns are called        // when parent component is patched.        currentRenderingInstance = vm;        vnode = render.call(vm._renderProxy, vm.$createElement);      } catch (e) {        handleError(e, vm, "render");        // return error render result,        // or previous vnode to prevent render error causing blank component        /* istanbul ignore else */        if (vm.$options.renderError) {          try {            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);          } catch (e) {            handleError(e, vm, "renderError");            vnode = vm._vnode;          }        } else {          vnode = vm._vnode;        }      } finally {        currentRenderingInstance = null;      }      // if the returned array contains only a single node, allow it      if (Array.isArray(vnode) && vnode.length === 1) {        vnode = vnode[0];      }      // return empty vnode in case the render function errored out      if (!(vnode instanceof VNode)) {        if (Array.isArray(vnode)) {          warn(            'Multiple root nodes returned from render function. Render function ' +            'should return a single root node.',            vm          );        }        vnode = createEmptyVNode();      }      // set parent      vnode.parent = _parentVnode;      return vnode    };  }  /*  */  function ensureCtor (comp, base) {    if (      comp.__esModule ||      (hasSymbol && comp[Symbol.toStringTag] === 'Module')    ) {      comp = comp.default;    }    return isObject(comp)      ? base.extend(comp)      : comp  }  function createAsyncPlaceholder (    factory,    data,    context,    children,    tag  ) {    var node = createEmptyVNode();    node.asyncFactory = factory;    node.asyncMeta = { data: data, context: context, children: children, tag: tag };    return node  }  function resolveAsyncComponent (    factory,    baseCtor  ) {    if (isTrue(factory.error) && isDef(factory.errorComp)) {      return factory.errorComp    }    if (isDef(factory.resolved)) {      return factory.resolved    }    var owner = currentRenderingInstance;    if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {      // already pending      factory.owners.push(owner);    }    if (isTrue(factory.loading) && isDef(factory.loadingComp)) {      return factory.loadingComp    }    if (owner && !isDef(factory.owners)) {      var owners = factory.owners = [owner];      var sync = true;      var timerLoading = null;      var timerTimeout = null      ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });      var forceRender = function (renderCompleted) {        for (var i = 0, l = owners.length; i < l; i++) {          (owners[i]).$forceUpdate();        }        if (renderCompleted) {          owners.length = 0;          if (timerLoading !== null) {            clearTimeout(timerLoading);            timerLoading = null;          }          if (timerTimeout !== null) {            clearTimeout(timerTimeout);            timerTimeout = null;          }        }      };      var resolve = once(function (res) {        // cache resolved        factory.resolved = ensureCtor(res, baseCtor);        // invoke callbacks only if this is not a synchronous resolve        // (async resolves are shimmed as synchronous during SSR)        if (!sync) {          forceRender(true);        } else {          owners.length = 0;        }      });      var reject = once(function (reason) {        warn(          "Failed to resolve async component: " + (String(factory)) +          (reason ? ("\nReason: " + reason) : '')        );        if (isDef(factory.errorComp)) {          factory.error = true;          forceRender(true);        }      });      var res = factory(resolve, reject);      if (isObject(res)) {        if (isPromise(res)) {          // () => Promise          if (isUndef(factory.resolved)) {            res.then(resolve, reject);          }        } else if (isPromise(res.component)) {          res.component.then(resolve, reject);          if (isDef(res.error)) {            factory.errorComp = ensureCtor(res.error, baseCtor);          }          if (isDef(res.loading)) {            factory.loadingComp = ensureCtor(res.loading, baseCtor);            if (res.delay === 0) {              factory.loading = true;            } else {              timerLoading = setTimeout(function () {                timerLoading = null;                if (isUndef(factory.resolved) && isUndef(factory.error)) {                  factory.loading = true;                  forceRender(false);                }              }, res.delay || 200);            }          }          if (isDef(res.timeout)) {            timerTimeout = setTimeout(function () {              timerTimeout = null;              if (isUndef(factory.resolved)) {                reject(                  "timeout (" + (res.timeout) + "ms)"                );              }            }, res.timeout);          }        }      }      sync = false;      // return in case resolved synchronously      return factory.loading        ? factory.loadingComp        : factory.resolved    }  }  /*  */  function isAsyncPlaceholder (node) {    return node.isComment && node.asyncFactory  }  /*  */  function getFirstComponentChild (children) {    if (Array.isArray(children)) {      for (var i = 0; i < children.length; i++) {        var c = children[i];        if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {          return c        }      }    }  }  /*  */  /*  */  function initEvents (vm) {    vm._events = Object.create(null);    vm._hasHookEvent = false;    // init parent attached events    var listeners = vm.$options._parentListeners;    if (listeners) {      updateComponentListeners(vm, listeners);    }  }  var target;  function add (event, fn) {    target.$on(event, fn);  }  function remove$1 (event, fn) {    target.$off(event, fn);  }  function createOnceHandler (event, fn) {    var _target = target;    return function onceHandler () {      var res = fn.apply(null, arguments);      if (res !== null) {        _target.$off(event, onceHandler);      }    }  }  function updateComponentListeners (    vm,    listeners,    oldListeners  ) {    target = vm;    updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);    target = undefined;  }  function eventsMixin (Vue) {    var hookRE = /^hook:/;    Vue.prototype.$on = function (event, fn) {      var vm = this;      if (Array.isArray(event)) {        for (var i = 0, l = event.length; i < l; i++) {          vm.$on(event[i], fn);        }      } else {        (vm._events[event] || (vm._events[event] = [])).push(fn);        // optimize hook:event cost by using a boolean flag marked at registration        // instead of a hash lookup        if (hookRE.test(event)) {          vm._hasHookEvent = true;        }      }      return vm    };    Vue.prototype.$once = function (event, fn) {      var vm = this;      function on () {        vm.$off(event, on);        fn.apply(vm, arguments);      }      on.fn = fn;      vm.$on(event, on);      return vm    };    Vue.prototype.$off = function (event, fn) {      var vm = this;      // all      if (!arguments.length) {        vm._events = Object.create(null);        return vm      }      // array of events      if (Array.isArray(event)) {        for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {          vm.$off(event[i$1], fn);        }        return vm      }      // specific event      var cbs = vm._events[event];      if (!cbs) {        return vm      }      if (!fn) {        vm._events[event] = null;        return vm      }      // specific handler      var cb;      var i = cbs.length;      while (i--) {        cb = cbs[i];        if (cb === fn || cb.fn === fn) {          cbs.splice(i, 1);          break        }      }      return vm    };    Vue.prototype.$emit = function (event) {      var vm = this;      {        var lowerCaseEvent = event.toLowerCase();        if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {          tip(            "Event \"" + lowerCaseEvent + "\" is emitted in component " +            (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +            "Note that HTML attributes are case-insensitive and you cannot use " +            "v-on to listen to camelCase events when using in-DOM templates. " +            "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."          );        }      }      var cbs = vm._events[event];      if (cbs) {        cbs = cbs.length > 1 ? toArray(cbs) : cbs;        var args = toArray(arguments, 1);        var info = "event handler for \"" + event + "\"";        for (var i = 0, l = cbs.length; i < l; i++) {          invokeWithErrorHandling(cbs[i], vm, args, vm, info);        }      }      return vm    };  }  /*  */  var activeInstance = null;  var isUpdatingChildComponent = false;  function setActiveInstance(vm) {    var prevActiveInstance = activeInstance;    activeInstance = vm;    return function () {      activeInstance = prevActiveInstance;    }  }  function initLifecycle (vm) {    var options = vm.$options;    // locate first non-abstract parent    var parent = options.parent;    if (parent && !options.abstract) {      while (parent.$options.abstract && parent.$parent) {        parent = parent.$parent;      }      parent.$children.push(vm);    }    vm.$parent = parent;    vm.$root = parent ? parent.$root : vm;    vm.$children = [];    vm.$refs = {};    vm._watcher = null;    vm._inactive = null;    vm._directInactive = false;    vm._isMounted = false;    vm._isDestroyed = false;    vm._isBeingDestroyed = false;  }  function lifecycleMixin (Vue) {    Vue.prototype._update = function (vnode, hydrating) {      var vm = this;      var prevEl = vm.$el;      var prevVnode = vm._vnode;      var restoreActiveInstance = setActiveInstance(vm);      vm._vnode = vnode;      // Vue.prototype.__patch__ is injected in entry points      // based on the rendering backend used.      if (!prevVnode) {        // initial render        vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);      } else {        // updates        vm.$el = vm.__patch__(prevVnode, vnode);      }      restoreActiveInstance();      // update __vue__ reference      if (prevEl) {        prevEl.__vue__ = null;      }      if (vm.$el) {        vm.$el.__vue__ = vm;      }      // if parent is an HOC, update its $el as well      if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {        vm.$parent.$el = vm.$el;      }      // updated hook is called by the scheduler to ensure that children are      // updated in a parent's updated hook.    };    Vue.prototype.$forceUpdate = function () {      var vm = this;      if (vm._watcher) {        vm._watcher.update();      }    };    Vue.prototype.$destroy = function () {      var vm = this;      if (vm._isBeingDestroyed) {        return      }      callHook(vm, 'beforeDestroy');      vm._isBeingDestroyed = true;      // remove self from parent      var parent = vm.$parent;      if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {        remove(parent.$children, vm);      }      // teardown watchers      if (vm._watcher) {        vm._watcher.teardown();      }      var i = vm._watchers.length;      while (i--) {        vm._watchers[i].teardown();      }      // remove reference from data ob      // frozen object may not have observer.      if (vm._data.__ob__) {        vm._data.__ob__.vmCount--;      }      // call the last hook...      vm._isDestroyed = true;      // invoke destroy hooks on current rendered tree      vm.__patch__(vm._vnode, null);      // fire destroyed hook      callHook(vm, 'destroyed');      // turn off all instance listeners.      vm.$off();      // remove __vue__ reference      if (vm.$el) {        vm.$el.__vue__ = null;      }      // release circular reference (#6759)      if (vm.$vnode) {        vm.$vnode.parent = null;      }    };  }  function mountComponent (    vm,    el,    hydrating  ) {    vm.$el = el;    if (!vm.$options.render) {      vm.$options.render = createEmptyVNode;      {        /* istanbul ignore if */        if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||          vm.$options.el || el) {          warn(            'You are using the runtime-only build of Vue where the template ' +            'compiler is not available. Either pre-compile the templates into ' +            'render functions, or use the compiler-included build.',            vm          );        } else {          warn(            'Failed to mount component: template or render function not defined.',            vm          );        }      }    }    callHook(vm, 'beforeMount');    var updateComponent;    /* istanbul ignore if */    if (config.performance && mark) {      updateComponent = function () {        var name = vm._name;        var id = vm._uid;        var startTag = "vue-perf-start:" + id;        var endTag = "vue-perf-end:" + id;        mark(startTag);        var vnode = vm._render();        mark(endTag);        measure(("vue " + name + " render"), startTag, endTag);        mark(startTag);        vm._update(vnode, hydrating);        mark(endTag);        measure(("vue " + name + " patch"), startTag, endTag);      };    } else {      updateComponent = function () {        vm._update(vm._render(), hydrating);      };    }    // we set this to vm._watcher inside the watcher's constructor    // since the watcher's initial patch may call $forceUpdate (e.g. inside child    // component's mounted hook), which relies on vm._watcher being already defined    new Watcher(vm, updateComponent, noop, {      before: function before () {        if (vm._isMounted && !vm._isDestroyed) {          callHook(vm, 'beforeUpdate');        }      }    }, true /* isRenderWatcher */);    hydrating = false;    // manually mounted instance, call mounted on self    // mounted is called for render-created child components in its inserted hook    if (vm.$vnode == null) {      vm._isMounted = true;      callHook(vm, 'mounted');    }    return vm  }  function updateChildComponent (    vm,    propsData,    listeners,    parentVnode,    renderChildren  ) {    {      isUpdatingChildComponent = true;    }    // determine whether component has slot children    // we need to do this before overwriting $options._renderChildren.    // check if there are dynamic scopedSlots (hand-written or compiled but with    // dynamic slot names). Static scoped slots compiled from template has the    // "$stable" marker.    var newScopedSlots = parentVnode.data.scopedSlots;    var oldScopedSlots = vm.$scopedSlots;    var hasDynamicScopedSlot = !!(      (newScopedSlots && !newScopedSlots.$stable) ||      (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||      (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)    );    // Any static slot children from the parent may have changed during parent's    // update. Dynamic scoped slots may also have changed. In such cases, a forced    // update is necessary to ensure correctness.    var needsForceUpdate = !!(      renderChildren ||               // has new static slots      vm.$options._renderChildren ||  // has old static slots      hasDynamicScopedSlot    );    vm.$options._parentVnode = parentVnode;    vm.$vnode = parentVnode; // update vm's placeholder node without re-render    if (vm._vnode) { // update child tree's parent      vm._vnode.parent = parentVnode;    }    vm.$options._renderChildren = renderChildren;    // update $attrs and $listeners hash    // these are also reactive so they may trigger child update if the child    // used them during render    vm.$attrs = parentVnode.data.attrs || emptyObject;    vm.$listeners = listeners || emptyObject;    // update props    if (propsData && vm.$options.props) {      toggleObserving(false);      var props = vm._props;      var propKeys = vm.$options._propKeys || [];      for (var i = 0; i < propKeys.length; i++) {        var key = propKeys[i];        var propOptions = vm.$options.props; // wtf flow?        props[key] = validateProp(key, propOptions, propsData, vm);      }      toggleObserving(true);      // keep a copy of raw propsData      vm.$options.propsData = propsData;    }    // update listeners    listeners = listeners || emptyObject;    var oldListeners = vm.$options._parentListeners;    vm.$options._parentListeners = listeners;    updateComponentListeners(vm, listeners, oldListeners);    // resolve slots + force update if has children    if (needsForceUpdate) {      vm.$slots = resolveSlots(renderChildren, parentVnode.context);      vm.$forceUpdate();    }    {      isUpdatingChildComponent = false;    }  }  function isInInactiveTree (vm) {    while (vm && (vm = vm.$parent)) {      if (vm._inactive) { return true }    }    return false  }  function activateChildComponent (vm, direct) {    if (direct) {      vm._directInactive = false;      if (isInInactiveTree(vm)) {        return      }    } else if (vm._directInactive) {      return    }    if (vm._inactive || vm._inactive === null) {      vm._inactive = false;      for (var i = 0; i < vm.$children.length; i++) {        activateChildComponent(vm.$children[i]);      }      callHook(vm, 'activated');    }  }  function deactivateChildComponent (vm, direct) {    if (direct) {      vm._directInactive = true;      if (isInInactiveTree(vm)) {        return      }    }    if (!vm._inactive) {      vm._inactive = true;      for (var i = 0; i < vm.$children.length; i++) {        deactivateChildComponent(vm.$children[i]);      }      callHook(vm, 'deactivated');    }  }  function callHook (vm, hook) {    // #7573 disable dep collection when invoking lifecycle hooks    pushTarget();    var handlers = vm.$options[hook];    var info = hook + " hook";    if (handlers) {      for (var i = 0, j = handlers.length; i < j; i++) {        invokeWithErrorHandling(handlers[i], vm, null, vm, info);      }    }    if (vm._hasHookEvent) {      vm.$emit('hook:' + hook);    }    popTarget();  }  /*  */  var MAX_UPDATE_COUNT = 100;  var queue = [];  var activatedChildren = [];  var has = {};  var circular = {};  var waiting = false;  var flushing = false;  var index = 0;  /**   * Reset the scheduler's state.   */  function resetSchedulerState () {    index = queue.length = activatedChildren.length = 0;    has = {};    {      circular = {};    }    waiting = flushing = false;  }  // Async edge case #6566 requires saving the timestamp when event listeners are  // attached. However, calling performance.now() has a perf overhead especially  // if the page has thousands of event listeners. Instead, we take a timestamp  // every time the scheduler flushes and use that for all event listeners  // attached during that flush.  var currentFlushTimestamp = 0;  // Async edge case fix requires storing an event listener's attach timestamp.  var getNow = Date.now;  // Determine what event timestamp the browser is using. Annoyingly, the  // timestamp can either be hi-res (relative to page load) or low-res  // (relative to UNIX epoch), so in order to compare time we have to use the  // same timestamp type when saving the flush timestamp.  // All IE versions use low-res event timestamps, and have problematic clock  // implementations (#9632)  if (inBrowser && !isIE) {    var performance = window.performance;    if (      performance &&      typeof performance.now === 'function' &&      getNow() > document.createEvent('Event').timeStamp    ) {      // if the event timestamp, although evaluated AFTER the Date.now(), is      // smaller than it, it means the event is using a hi-res timestamp,      // and we need to use the hi-res version for event listener timestamps as      // well.      getNow = function () { return performance.now(); };    }  }  /**   * Flush both queues and run the watchers.   */  function flushSchedulerQueue () {    currentFlushTimestamp = getNow();    flushing = true;    var watcher, id;    // Sort queue before flush.    // This ensures that:    // 1. Components are updated from parent to child. (because parent is always    //    created before the child)    // 2. A component's user watchers are run before its render watcher (because    //    user watchers are created before the render watcher)    // 3. If a component is destroyed during a parent component's watcher run,    //    its watchers can be skipped.    queue.sort(function (a, b) { return a.id - b.id; });    // do not cache length because more watchers might be pushed    // as we run existing watchers    for (index = 0; index < queue.length; index++) {      watcher = queue[index];      if (watcher.before) {        watcher.before();      }      id = watcher.id;      has[id] = null;      watcher.run();      // in dev build, check and stop circular updates.      if (has[id] != null) {        circular[id] = (circular[id] || 0) + 1;        if (circular[id] > MAX_UPDATE_COUNT) {          warn(            'You may have an infinite update loop ' + (              watcher.user                ? ("in watcher with expression \"" + (watcher.expression) + "\"")                : "in a component render function."            ),            watcher.vm          );          break        }      }    }    // keep copies of post queues before resetting state    var activatedQueue = activatedChildren.slice();    var updatedQueue = queue.slice();    resetSchedulerState();    // call component updated and activated hooks    callActivatedHooks(activatedQueue);    callUpdatedHooks(updatedQueue);    // devtool hook    /* istanbul ignore if */    if (devtools && config.devtools) {      devtools.emit('flush');    }  }  function callUpdatedHooks (queue) {    var i = queue.length;    while (i--) {      var watcher = queue[i];      var vm = watcher.vm;      if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {        callHook(vm, 'updated');      }    }  }  /**   * Queue a kept-alive component that was activated during patch.   * The queue will be processed after the entire tree has been patched.   */  function queueActivatedComponent (vm) {    // setting _inactive to false here so that a render function can    // rely on checking whether it's in an inactive tree (e.g. router-view)    vm._inactive = false;    activatedChildren.push(vm);  }  function callActivatedHooks (queue) {    for (var i = 0; i < queue.length; i++) {      queue[i]._inactive = true;      activateChildComponent(queue[i], true /* true */);    }  }  /**   * Push a watcher into the watcher queue.   * Jobs with duplicate IDs will be skipped unless it's   * pushed when the queue is being flushed.   */  function queueWatcher (watcher) {    var id = watcher.id;    if (has[id] == null) {      has[id] = true;      if (!flushing) {        queue.push(watcher);      } else {        // if already flushing, splice the watcher based on its id        // if already past its id, it will be run next immediately.        var i = queue.length - 1;        while (i > index && queue[i].id > watcher.id) {          i--;        }        queue.splice(i + 1, 0, watcher);      }      // queue the flush      if (!waiting) {        waiting = true;        if (!config.async) {          flushSchedulerQueue();          return        }        nextTick(flushSchedulerQueue);      }    }  }  /*  */  var uid$2 = 0;  /**   * A watcher parses an expression, collects dependencies,   * and fires callback when the expression value changes.   * This is used for both the $watch() api and directives.   */  var Watcher = function Watcher (    vm,    expOrFn,    cb,    options,    isRenderWatcher  ) {    this.vm = vm;    if (isRenderWatcher) {      vm._watcher = this;    }    vm._watchers.push(this);    // options    if (options) {      this.deep = !!options.deep;      this.user = !!options.user;      this.lazy = !!options.lazy;      this.sync = !!options.sync;      this.before = options.before;    } else {      this.deep = this.user = this.lazy = this.sync = false;    }    this.cb = cb;    this.id = ++uid$2; // uid for batching    this.active = true;    this.dirty = this.lazy; // for lazy watchers    this.deps = [];    this.newDeps = [];    this.depIds = new _Set();    this.newDepIds = new _Set();    this.expression = expOrFn.toString();    // parse expression for getter    if (typeof expOrFn === 'function') {      this.getter = expOrFn;    } else {      this.getter = parsePath(expOrFn);      if (!this.getter) {        this.getter = noop;        warn(          "Failed watching path: \"" + expOrFn + "\" " +          'Watcher only accepts simple dot-delimited paths. ' +          'For full control, use a function instead.',          vm        );      }    }    this.value = this.lazy      ? undefined      : this.get();  };  /**   * Evaluate the getter, and re-collect dependencies.   */  Watcher.prototype.get = function get () {    pushTarget(this);    var value;    var vm = this.vm;    try {      value = this.getter.call(vm, vm);    } catch (e) {      if (this.user) {        handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));      } else {        throw e      }    } finally {      // "touch" every property so they are all tracked as      // dependencies for deep watching      if (this.deep) {        traverse(value);      }      popTarget();      this.cleanupDeps();    }    return value  };  /**   * Add a dependency to this directive.   */  Watcher.prototype.addDep = function addDep (dep) {    var id = dep.id;    if (!this.newDepIds.has(id)) {      this.newDepIds.add(id);      this.newDeps.push(dep);      if (!this.depIds.has(id)) {        dep.addSub(this);      }    }  };  /**   * Clean up for dependency collection.   */  Watcher.prototype.cleanupDeps = function cleanupDeps () {    var i = this.deps.length;    while (i--) {      var dep = this.deps[i];      if (!this.newDepIds.has(dep.id)) {        dep.removeSub(this);      }    }    var tmp = this.depIds;    this.depIds = this.newDepIds;    this.newDepIds = tmp;    this.newDepIds.clear();    tmp = this.deps;    this.deps = this.newDeps;    this.newDeps = tmp;    this.newDeps.length = 0;  };  /**   * Subscriber interface.   * Will be called when a dependency changes.   */  Watcher.prototype.update = function update () {    /* istanbul ignore else */    if (this.lazy) {      this.dirty = true;    } else if (this.sync) {      this.run();    } else {      queueWatcher(this);    }  };  /**   * Scheduler job interface.   * Will be called by the scheduler.   */  Watcher.prototype.run = function run () {    if (this.active) {      var value = this.get();      if (        value !== this.value ||        // Deep watchers and watchers on Object/Arrays should fire even        // when the value is the same, because the value may        // have mutated.        isObject(value) ||        this.deep      ) {        // set new value        var oldValue = this.value;        this.value = value;        if (this.user) {          try {            this.cb.call(this.vm, value, oldValue);          } catch (e) {            handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));          }        } else {          this.cb.call(this.vm, value, oldValue);        }      }    }  };  /**   * Evaluate the value of the watcher.   * This only gets called for lazy watchers.   */  Watcher.prototype.evaluate = function evaluate () {    this.value = this.get();    this.dirty = false;  };  /**   * Depend on all deps collected by this watcher.   */  Watcher.prototype.depend = function depend () {    var i = this.deps.length;    while (i--) {      this.deps[i].depend();    }  };  /**   * Remove self from all dependencies' subscriber list.   */  Watcher.prototype.teardown = function teardown () {    if (this.active) {      // remove self from vm's watcher list      // this is a somewhat expensive operation so we skip it      // if the vm is being destroyed.      if (!this.vm._isBeingDestroyed) {        remove(this.vm._watchers, this);      }      var i = this.deps.length;      while (i--) {        this.deps[i].removeSub(this);      }      this.active = false;    }  };  /*  */  var sharedPropertyDefinition = {    enumerable: true,    configurable: true,    get: noop,    set: noop  };  function proxy (target, sourceKey, key) {    sharedPropertyDefinition.get = function proxyGetter () {      return this[sourceKey][key]    };    sharedPropertyDefinition.set = function proxySetter (val) {      this[sourceKey][key] = val;    };    Object.defineProperty(target, key, sharedPropertyDefinition);  }  function initState (vm) {    vm._watchers = [];    var opts = vm.$options;    if (opts.props) { initProps(vm, opts.props); }    if (opts.methods) { initMethods(vm, opts.methods); }    if (opts.data) {      initData(vm);    } else {      observe(vm._data = {}, true /* asRootData */);    }    if (opts.computed) { initComputed(vm, opts.computed); }    if (opts.watch && opts.watch !== nativeWatch) {      initWatch(vm, opts.watch);    }  }  function initProps (vm, propsOptions) {    var propsData = vm.$options.propsData || {};    var props = vm._props = {};    // cache prop keys so that future props updates can iterate using Array    // instead of dynamic object key enumeration.    var keys = vm.$options._propKeys = [];    var isRoot = !vm.$parent;    // root instance props should be converted    if (!isRoot) {      toggleObserving(false);    }    var loop = function ( key ) {      keys.push(key);      var value = validateProp(key, propsOptions, propsData, vm);      /* istanbul ignore else */      {        var hyphenatedKey = hyphenate(key);        if (isReservedAttribute(hyphenatedKey) ||            config.isReservedAttr(hyphenatedKey)) {          warn(            ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),            vm          );        }        defineReactive$$1(props, key, value, function () {          if (!isRoot && !isUpdatingChildComponent) {            warn(              "Avoid mutating a prop directly since the value will be " +              "overwritten whenever the parent component re-renders. " +              "Instead, use a data or computed property based on the prop's " +              "value. Prop being mutated: \"" + key + "\"",              vm            );          }        });      }      // static props are already proxied on the component's prototype      // during Vue.extend(). We only need to proxy props defined at      // instantiation here.      if (!(key in vm)) {        proxy(vm, "_props", key);      }    };    for (var key in propsOptions) loop( key );    toggleObserving(true);  }  function initData (vm) {    var data = vm.$options.data;    data = vm._data = typeof data === 'function'      ? getData(data, vm)      : data || {};    if (!isPlainObject(data)) {      data = {};      warn(        'data functions should return an object:\n' +        'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',        vm      );    }    // proxy data on instance    var keys = Object.keys(data);    var props = vm.$options.props;    var methods = vm.$options.methods;    var i = keys.length;    while (i--) {      var key = keys[i];      {        if (methods && hasOwn(methods, key)) {          warn(            ("Method \"" + key + "\" has already been defined as a data property."),            vm          );        }      }      if (props && hasOwn(props, key)) {        warn(          "The data property \"" + key + "\" is already declared as a prop. " +          "Use prop default value instead.",          vm        );      } else if (!isReserved(key)) {        proxy(vm, "_data", key);      }    }    // observe data    observe(data, true /* asRootData */);  }  function getData (data, vm) {    // #7573 disable dep collection when invoking data getters    pushTarget();    try {      return data.call(vm, vm)    } catch (e) {      handleError(e, vm, "data()");      return {}    } finally {      popTarget();    }  }  var computedWatcherOptions = { lazy: true };  function initComputed (vm, computed) {    // $flow-disable-line    var watchers = vm._computedWatchers = Object.create(null);    // computed properties are just getters during SSR    var isSSR = isServerRendering();    for (var key in computed) {      var userDef = computed[key];      var getter = typeof userDef === 'function' ? userDef : userDef.get;      if (getter == null) {        warn(          ("Getter is missing for computed property \"" + key + "\"."),          vm        );      }      if (!isSSR) {        // create internal watcher for the computed property.        watchers[key] = new Watcher(          vm,          getter || noop,          noop,          computedWatcherOptions        );      }      // component-defined computed properties are already defined on the      // component prototype. We only need to define computed properties defined      // at instantiation here.      if (!(key in vm)) {        defineComputed(vm, key, userDef);      } else {        if (key in vm.$data) {          warn(("The computed property \"" + key + "\" is already defined in data."), vm);        } else if (vm.$options.props && key in vm.$options.props) {          warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);        }      }    }  }  function defineComputed (    target,    key,    userDef  ) {    var shouldCache = !isServerRendering();    if (typeof userDef === 'function') {      sharedPropertyDefinition.get = shouldCache        ? createComputedGetter(key)        : createGetterInvoker(userDef);      sharedPropertyDefinition.set = noop;    } else {      sharedPropertyDefinition.get = userDef.get        ? shouldCache && userDef.cache !== false          ? createComputedGetter(key)          : createGetterInvoker(userDef.get)        : noop;      sharedPropertyDefinition.set = userDef.set || noop;    }    if (sharedPropertyDefinition.set === noop) {      sharedPropertyDefinition.set = function () {        warn(          ("Computed property \"" + key + "\" was assigned to but it has no setter."),          this        );      };    }    Object.defineProperty(target, key, sharedPropertyDefinition);  }  function createComputedGetter (key) {    return function computedGetter () {      var watcher = this._computedWatchers && this._computedWatchers[key];      if (watcher) {        if (watcher.dirty) {          watcher.evaluate();        }        if (Dep.target) {          watcher.depend();        }        return watcher.value      }    }  }  function createGetterInvoker(fn) {    return function computedGetter () {      return fn.call(this, this)    }  }  function initMethods (vm, methods) {    var props = vm.$options.props;    for (var key in methods) {      {        if (typeof methods[key] !== 'function') {          warn(            "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +            "Did you reference the function correctly?",            vm          );        }        if (props && hasOwn(props, key)) {          warn(            ("Method \"" + key + "\" has already been defined as a prop."),            vm          );        }        if ((key in vm) && isReserved(key)) {          warn(            "Method \"" + key + "\" conflicts with an existing Vue instance method. " +            "Avoid defining component methods that start with _ or $."          );        }      }      vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);    }  }  function initWatch (vm, watch) {    for (var key in watch) {      var handler = watch[key];      if (Array.isArray(handler)) {        for (var i = 0; i < handler.length; i++) {          createWatcher(vm, key, handler[i]);        }      } else {        createWatcher(vm, key, handler);      }    }  }  function createWatcher (    vm,    expOrFn,    handler,    options  ) {    if (isPlainObject(handler)) {      options = handler;      handler = handler.handler;    }    if (typeof handler === 'string') {      handler = vm[handler];    }    return vm.$watch(expOrFn, handler, options)  }  function stateMixin (Vue) {    // @atguigu flow somehow has problems with directly declared definition object    // when using Object.defineProperty, so we have to procedurally build up    // the object here.    var dataDef = {};    dataDef.get = function () { return this._data };    var propsDef = {};    propsDef.get = function () { return this._props };    {      dataDef.set = function () {        warn(          'Avoid replacing instance root $data. ' +          'Use nested data properties instead.',          this        );      };      propsDef.set = function () {        warn("$props is readonly.", this);      };    }    Object.defineProperty(Vue.prototype, '$data', dataDef);    Object.defineProperty(Vue.prototype, '$props', propsDef);    Vue.prototype.$set = set;    Vue.prototype.$delete = del;    Vue.prototype.$watch = function (      expOrFn,      cb,      options    ) {      var vm = this;      if (isPlainObject(cb)) {        return createWatcher(vm, expOrFn, cb, options)      }      options = options || {};      options.user = true;      var watcher = new Watcher(vm, expOrFn, cb, options);      if (options.immediate) {        try {          cb.call(vm, watcher.value);        } catch (error) {          handleError(error, vm, ("callback for immediate watcher \"" + (watcher.expression) + "\""));        }      }      return function unwatchFn () {        watcher.teardown();      }    };  }  /*  */  var uid$3 = 0;  function initMixin (Vue) {    Vue.prototype._init = function (options) {      var vm = this;      // a uid      vm._uid = uid$3++;      var startTag, endTag;      /* istanbul ignore if */      if (config.performance && mark) {        startTag = "vue-perf-start:" + (vm._uid);        endTag = "vue-perf-end:" + (vm._uid);        mark(startTag);      }      // a flag to avoid this being observed      vm._isVue = true;      // merge options      if (options && options._isComponent) {        // optimize internal component instantiation        // since dynamic options merging is pretty slow, and none of the        // internal component options needs special treatment.        initInternalComponent(vm, options);      } else {        vm.$options = mergeOptions(          resolveConstructorOptions(vm.constructor),          options || {},          vm        );      }      /* istanbul ignore else */      {        initProxy(vm);      }      // expose real self      vm._self = vm;      initLifecycle(vm);      initEvents(vm);      initRender(vm);      callHook(vm, 'beforeCreate');      initInjections(vm); // resolve injections before data/props      initState(vm);      initProvide(vm); // resolve provide after data/props      callHook(vm, 'created');      /* istanbul ignore if */      if (config.performance && mark) {        vm._name = formatComponentName(vm, false);        mark(endTag);        measure(("vue " + (vm._name) + " init"), startTag, endTag);      }      if (vm.$options.el) {        vm.$mount(vm.$options.el);      }    };  }  function initInternalComponent (vm, options) {    var opts = vm.$options = Object.create(vm.constructor.options);    // doing this because it's faster than dynamic enumeration.    var parentVnode = options._parentVnode;    opts.parent = options.parent;    opts._parentVnode = parentVnode;    var vnodeComponentOptions = parentVnode.componentOptions;    opts.propsData = vnodeComponentOptions.propsData;    opts._parentListeners = vnodeComponentOptions.listeners;    opts._renderChildren = vnodeComponentOptions.children;    opts._componentTag = vnodeComponentOptions.tag;    if (options.render) {      opts.render = options.render;      opts.staticRenderFns = options.staticRenderFns;    }  }  function resolveConstructorOptions (Ctor) {    var options = Ctor.options;    if (Ctor.super) {      var superOptions = resolveConstructorOptions(Ctor.super);      var cachedSuperOptions = Ctor.superOptions;      if (superOptions !== cachedSuperOptions) {        // super option changed,        // need to resolve new options.        Ctor.superOptions = superOptions;        // check if there are any late-modified/attached options (#4976)        var modifiedOptions = resolveModifiedOptions(Ctor);        // update base extend options        if (modifiedOptions) {          extend(Ctor.extendOptions, modifiedOptions);        }        options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);        if (options.name) {          options.components[options.name] = Ctor;        }      }    }    return options  }  function resolveModifiedOptions (Ctor) {    var modified;    var latest = Ctor.options;    var sealed = Ctor.sealedOptions;    for (var key in latest) {      if (latest[key] !== sealed[key]) {        if (!modified) { modified = {}; }        modified[key] = latest[key];      }    }    return modified  }  function Vue (options) {    if (!(this instanceof Vue)    ) {      warn('Vue is a constructor and should be called with the `new` keyword');    }    this._init(options);  }  initMixin(Vue);  stateMixin(Vue);  eventsMixin(Vue);  lifecycleMixin(Vue);  renderMixin(Vue);  /*  */  function initUse (Vue) {    Vue.use = function (plugin) {      var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));      if (installedPlugins.indexOf(plugin) > -1) {        return this      }      // additional parameters      var args = toArray(arguments, 1);      args.unshift(this);      if (typeof plugin.install === 'function') {        plugin.install.apply(plugin, args);      } else if (typeof plugin === 'function') {        plugin.apply(null, args);      }      installedPlugins.push(plugin);      return this    };  }  /*  */  function initMixin$1 (Vue) {    Vue.mixin = function (mixin) {      this.options = mergeOptions(this.options, mixin);      return this    };  }  /*  */  function initExtend (Vue) {    /**     * Each instance constructor, including Vue, has a unique     * cid. This enables us to create wrapped "child     * constructors" for prototypal inheritance and cache them.     */    Vue.cid = 0;    var cid = 1;    /**     * Class inheritance     */    Vue.extend = function (extendOptions) {      extendOptions = extendOptions || {};      var Super = this;      var SuperId = Super.cid;      var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});      if (cachedCtors[SuperId]) {        return cachedCtors[SuperId]      }      var name = extendOptions.name || Super.options.name;      if (name) {        validateComponentName(name);      }      var Sub = function VueComponent (options) {        this._init(options);      };      Sub.prototype = Object.create(Super.prototype);      Sub.prototype.constructor = Sub;      Sub.cid = cid++;      Sub.options = mergeOptions(        Super.options,        extendOptions      );      Sub['super'] = Super;      // For props and computed properties, we define the proxy getters on      // the Vue instances at extension time, on the extended prototype. This      // avoids Object.defineProperty calls for each instance created.      if (Sub.options.props) {        initProps$1(Sub);      }      if (Sub.options.computed) {        initComputed$1(Sub);      }      // allow further extension/mixin/plugin usage      Sub.extend = Super.extend;      Sub.mixin = Super.mixin;      Sub.use = Super.use;      // create asset registers, so extended classes      // can have their private assets too.      ASSET_TYPES.forEach(function (type) {        Sub[type] = Super[type];      });      // enable recursive self-lookup      if (name) {        Sub.options.components[name] = Sub;      }      // keep a reference to the super options at extension time.      // later at instantiation we can check if Super's options have      // been updated.      Sub.superOptions = Super.options;      Sub.extendOptions = extendOptions;      Sub.sealedOptions = extend({}, Sub.options);      // cache constructor      cachedCtors[SuperId] = Sub;      return Sub    };  }  function initProps$1 (Comp) {    var props = Comp.options.props;    for (var key in props) {      proxy(Comp.prototype, "_props", key);    }  }  function initComputed$1 (Comp) {    var computed = Comp.options.computed;    for (var key in computed) {      defineComputed(Comp.prototype, key, computed[key]);    }  }  /*  */  function initAssetRegisters (Vue) {    /**     * Create asset registration methods.     */    ASSET_TYPES.forEach(function (type) {      Vue[type] = function (        id,        definition      ) {        if (!definition) {          return this.options[type + 's'][id]        } else {          /* istanbul ignore if */          if (type === 'component') {            validateComponentName(id);          }          if (type === 'component' && isPlainObject(definition)) {            definition.name = definition.name || id;            definition = this.options._base.extend(definition);          }          if (type === 'directive' && typeof definition === 'function') {            definition = { bind: definition, update: definition };          }          this.options[type + 's'][id] = definition;          return definition        }      };    });  }  /*  */  function getComponentName (opts) {    return opts && (opts.Ctor.options.name || opts.tag)  }  function matches (pattern, name) {    if (Array.isArray(pattern)) {      return pattern.indexOf(name) > -1    } else if (typeof pattern === 'string') {      return pattern.split(',').indexOf(name) > -1    } else if (isRegExp(pattern)) {      return pattern.test(name)    }    /* istanbul ignore next */    return false  }  function pruneCache (keepAliveInstance, filter) {    var cache = keepAliveInstance.cache;    var keys = keepAliveInstance.keys;    var _vnode = keepAliveInstance._vnode;    for (var key in cache) {      var cachedNode = cache[key];      if (cachedNode) {        var name = getComponentName(cachedNode.componentOptions);        if (name && !filter(name)) {          pruneCacheEntry(cache, key, keys, _vnode);        }      }    }  }  function pruneCacheEntry (    cache,    key,    keys,    current  ) {    var cached$$1 = cache[key];    if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {      cached$$1.componentInstance.$destroy();    }    cache[key] = null;    remove(keys, key);  }  var patternTypes = [String, RegExp, Array];  var KeepAlive = {    name: 'keep-alive',    abstract: true,    props: {      include: patternTypes,      exclude: patternTypes,      max: [String, Number]    },    created: function created () {      this.cache = Object.create(null);      this.keys = [];    },    destroyed: function destroyed () {      for (var key in this.cache) {        pruneCacheEntry(this.cache, key, this.keys);      }    },    mounted: function mounted () {      var this$1 = this;      this.$watch('include', function (val) {        pruneCache(this$1, function (name) { return matches(val, name); });      });      this.$watch('exclude', function (val) {        pruneCache(this$1, function (name) { return !matches(val, name); });      });    },    render: function render () {      var slot = this.$slots.default;      var vnode = getFirstComponentChild(slot);      var componentOptions = vnode && vnode.componentOptions;      if (componentOptions) {        // check pattern        var name = getComponentName(componentOptions);        var ref = this;        var include = ref.include;        var exclude = ref.exclude;        if (          // not included          (include && (!name || !matches(include, name))) ||          // excluded          (exclude && name && matches(exclude, name))        ) {          return vnode        }        var ref$1 = this;        var cache = ref$1.cache;        var keys = ref$1.keys;        var key = vnode.key == null          // same constructor may get registered as different local components          // so cid alone is not enough (#3269)          ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')          : vnode.key;        if (cache[key]) {          vnode.componentInstance = cache[key].componentInstance;          // make current key freshest          remove(keys, key);          keys.push(key);        } else {          cache[key] = vnode;          keys.push(key);          // prune oldest entry          if (this.max && keys.length > parseInt(this.max)) {            pruneCacheEntry(cache, keys[0], keys, this._vnode);          }        }        vnode.data.keepAlive = true;      }      return vnode || (slot && slot[0])    }  };  var builtInComponents = {    KeepAlive: KeepAlive  };  /*  */  function initGlobalAPI (Vue) {    // config    var configDef = {};    configDef.get = function () { return config; };    {      configDef.set = function () {        warn(          'Do not replace the Vue.config object, set individual fields instead.'        );      };    }    Object.defineProperty(Vue, 'config', configDef);    // exposed util methods.    // NOTE: these are not considered part of the public API - avoid relying on    // them unless you are aware of the risk.    Vue.util = {      warn: warn,      extend: extend,      mergeOptions: mergeOptions,      defineReactive: defineReactive$$1    };    Vue.set = set;    Vue.delete = del;    Vue.nextTick = nextTick;    // 2.6 explicit observable API    Vue.observable = function (obj) {      observe(obj);      return obj    };    Vue.options = Object.create(null);    ASSET_TYPES.forEach(function (type) {      Vue.options[type + 's'] = Object.create(null);    });    // this is used to identify the "base" constructor to extend all plain-object    // components with in Weex's multi-instance scenarios.    Vue.options._base = Vue;    extend(Vue.options.components, builtInComponents);    initUse(Vue);    initMixin$1(Vue);    initExtend(Vue);    initAssetRegisters(Vue);  }  initGlobalAPI(Vue);  Object.defineProperty(Vue.prototype, '$isServer', {    get: isServerRendering  });  Object.defineProperty(Vue.prototype, '$ssrContext', {    get: function get () {      /* istanbul ignore next */      return this.$vnode && this.$vnode.ssrContext    }  });  // expose FunctionalRenderContext for ssr runtime helper installation  Object.defineProperty(Vue, 'FunctionalRenderContext', {    value: FunctionalRenderContext  });  Vue.version = '2.6.12';  /*  */  // these are reserved for web because they are directly compiled away  // during template compilation  var isReservedAttr = makeMap('style,class');  // attributes that should be using props for binding  var acceptValue = makeMap('input,textarea,option,select,progress');  var mustUseProp = function (tag, type, attr) {    return (      (attr === 'value' && acceptValue(tag)) && type !== 'button' ||      (attr === 'selected' && tag === 'option') ||      (attr === 'checked' && tag === 'input') ||      (attr === 'muted' && tag === 'video')    )  };  var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');  var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');  var convertEnumeratedValue = function (key, value) {    return isFalsyAttrValue(value) || value === 'false'      ? 'false'      // allow arbitrary string value for contenteditable      : key === 'contenteditable' && isValidContentEditableValue(value)        ? value        : 'true'  };  var isBooleanAttr = makeMap(    'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +    'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +    'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +    'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +    'required,reversed,scoped,seamless,selected,sortable,translate,' +    'truespeed,typemustmatch,visible'  );  var xlinkNS = 'http://www.w3.org/1999/xlink';  var isXlink = function (name) {    return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'  };  var getXlinkProp = function (name) {    return isXlink(name) ? name.slice(6, name.length) : ''  };  var isFalsyAttrValue = function (val) {    return val == null || val === false  };  /*  */  function genClassForVnode (vnode) {    var data = vnode.data;    var parentNode = vnode;    var childNode = vnode;    while (isDef(childNode.componentInstance)) {      childNode = childNode.componentInstance._vnode;      if (childNode && childNode.data) {        data = mergeClassData(childNode.data, data);      }    }    while (isDef(parentNode = parentNode.parent)) {      if (parentNode && parentNode.data) {        data = mergeClassData(data, parentNode.data);      }    }    return renderClass(data.staticClass, data.class)  }  function mergeClassData (child, parent) {    return {      staticClass: concat(child.staticClass, parent.staticClass),      class: isDef(child.class)        ? [child.class, parent.class]        : parent.class    }  }  function renderClass (    staticClass,    dynamicClass  ) {    if (isDef(staticClass) || isDef(dynamicClass)) {      return concat(staticClass, stringifyClass(dynamicClass))    }    /* istanbul ignore next */    return ''  }  function concat (a, b) {    return a ? b ? (a + ' ' + b) : a : (b || '')  }  function stringifyClass (value) {    if (Array.isArray(value)) {      return stringifyArray(value)    }    if (isObject(value)) {      return stringifyObject(value)    }    if (typeof value === 'string') {      return value    }    /* istanbul ignore next */    return ''  }  function stringifyArray (value) {    var res = '';    var stringified;    for (var i = 0, l = value.length; i < l; i++) {      if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {        if (res) { res += ' '; }        res += stringified;      }    }    return res  }  function stringifyObject (value) {    var res = '';    for (var key in value) {      if (value[key]) {        if (res) { res += ' '; }        res += key;      }    }    return res  }  /*  */  var namespaceMap = {    svg: 'http://www.w3.org/2000/svg',    math: 'http://www.w3.org/1998/Math/MathML'  };  var isHTMLTag = makeMap(    'html,body,base,head,link,meta,style,title,' +    'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +    'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +    'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +    's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +    'embed,object,param,source,canvas,script,noscript,del,ins,' +    'caption,col,colgroup,table,thead,tbody,td,th,tr,' +    'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +    'output,progress,select,textarea,' +    'details,dialog,menu,menuitem,summary,' +    'content,element,shadow,template,blockquote,iframe,tfoot'  );  // this map is intentionally selective, only covering SVG elements that may  // contain child elements.  var isSVG = makeMap(    'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +    'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +    'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',    true  );  var isPreTag = function (tag) { return tag === 'pre'; };  var isReservedTag = function (tag) {    return isHTMLTag(tag) || isSVG(tag)  };  function getTagNamespace (tag) {    if (isSVG(tag)) {      return 'svg'    }    // basic support for MathML    // note it doesn't support other MathML elements being component roots    if (tag === 'math') {      return 'math'    }  }  var unknownElementCache = Object.create(null);  function isUnknownElement (tag) {    /* istanbul ignore if */    if (!inBrowser) {      return true    }    if (isReservedTag(tag)) {      return false    }    tag = tag.toLowerCase();    /* istanbul ignore if */    if (unknownElementCache[tag] != null) {      return unknownElementCache[tag]    }    var el = document.createElement(tag);    if (tag.indexOf('-') > -1) {      // http://stackoverflow.com/a/28210364/1070244      return (unknownElementCache[tag] = (        el.constructor === window.HTMLUnknownElement ||        el.constructor === window.HTMLElement      ))    } else {      return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))    }  }  var isTextInputType = makeMap('text,number,password,search,email,tel,url');  /*  */  /**   * Query an element selector if it's not an element already.   */  function query (el) {    if (typeof el === 'string') {      var selected = document.querySelector(el);      if (!selected) {        warn(          'Cannot find element: ' + el        );        return document.createElement('div')      }      return selected    } else {      return el    }  }  /*  */  function createElement$1 (tagName, vnode) {    var elm = document.createElement(tagName);    if (tagName !== 'select') {      return elm    }    // false or null will remove the attribute but undefined will not    if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {      elm.setAttribute('multiple', 'multiple');    }    return elm  }  function createElementNS (namespace, tagName) {    return document.createElementNS(namespaceMap[namespace], tagName)  }  function createTextNode (text) {    return document.createTextNode(text)  }  function createComment (text) {    return document.createComment(text)  }  function insertBefore (parentNode, newNode, referenceNode) {    parentNode.insertBefore(newNode, referenceNode);  }  function removeChild (node, child) {    node.removeChild(child);  }  function appendChild (node, child) {    node.appendChild(child);  }  function parentNode (node) {    return node.parentNode  }  function nextSibling (node) {    return node.nextSibling  }  function tagName (node) {    return node.tagName  }  function setTextContent (node, text) {    node.textContent = text;  }  function setStyleScope (node, scopeId) {    node.setAttribute(scopeId, '');  }  var nodeOps = /*#__PURE__*/Object.freeze({    createElement: createElement$1,    createElementNS: createElementNS,    createTextNode: createTextNode,    createComment: createComment,    insertBefore: insertBefore,    removeChild: removeChild,    appendChild: appendChild,    parentNode: parentNode,    nextSibling: nextSibling,    tagName: tagName,    setTextContent: setTextContent,    setStyleScope: setStyleScope  });  /*  */  var ref = {    create: function create (_, vnode) {      registerRef(vnode);    },    update: function update (oldVnode, vnode) {      if (oldVnode.data.ref !== vnode.data.ref) {        registerRef(oldVnode, true);        registerRef(vnode);      }    },    destroy: function destroy (vnode) {      registerRef(vnode, true);    }  };  function registerRef (vnode, isRemoval) {    var key = vnode.data.ref;    if (!isDef(key)) { return }    var vm = vnode.context;    var ref = vnode.componentInstance || vnode.elm;    var refs = vm.$refs;    if (isRemoval) {      if (Array.isArray(refs[key])) {        remove(refs[key], ref);      } else if (refs[key] === ref) {        refs[key] = undefined;      }    } else {      if (vnode.data.refInFor) {        if (!Array.isArray(refs[key])) {          refs[key] = [ref];        } else if (refs[key].indexOf(ref) < 0) {          // $flow-disable-line          refs[key].push(ref);        }      } else {        refs[key] = ref;      }    }  }  /**   * Virtual DOM patching algorithm based on Snabbdom by   * Simon Friis Vindum (@paldepind)   * Licensed under the MIT License   * https://github.com/paldepind/snabbdom/blob/master/LICENSE   *   * modified by Evan You (@yyx990803)   *   * Not type-checking this because this file is perf-critical and the cost   * of making flow understand it is not worth it.   */  var emptyNode = new VNode('', {}, []);  var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];  function sameVnode (a, b) {    return (      a.key === b.key && (        (          a.tag === b.tag &&          a.isComment === b.isComment &&          isDef(a.data) === isDef(b.data) &&          sameInputType(a, b)        ) || (          isTrue(a.isAsyncPlaceholder) &&          a.asyncFactory === b.asyncFactory &&          isUndef(b.asyncFactory.error)        )      )    )  }  function sameInputType (a, b) {    if (a.tag !== 'input') { return true }    var i;    var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;    var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;    return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)  }  function createKeyToOldIdx (children, beginIdx, endIdx) {    var i, key;    var map = {};    for (i = beginIdx; i <= endIdx; ++i) {      key = children[i].key;      if (isDef(key)) { map[key] = i; }    }    return map  }  function createPatchFunction (backend) {    var i, j;    var cbs = {};    var modules = backend.modules;    var nodeOps = backend.nodeOps;    for (i = 0; i < hooks.length; ++i) {      cbs[hooks[i]] = [];      for (j = 0; j < modules.length; ++j) {        if (isDef(modules[j][hooks[i]])) {          cbs[hooks[i]].push(modules[j][hooks[i]]);        }      }    }    function emptyNodeAt (elm) {      return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)    }    function createRmCb (childElm, listeners) {      function remove$$1 () {        if (--remove$$1.listeners === 0) {          removeNode(childElm);        }      }      remove$$1.listeners = listeners;      return remove$$1    }    function removeNode (el) {      var parent = nodeOps.parentNode(el);      // element may have already been removed due to v-html / v-text      if (isDef(parent)) {        nodeOps.removeChild(parent, el);      }    }    function isUnknownElement$$1 (vnode, inVPre) {      return (        !inVPre &&        !vnode.ns &&        !(          config.ignoredElements.length &&          config.ignoredElements.some(function (ignore) {            return isRegExp(ignore)              ? ignore.test(vnode.tag)              : ignore === vnode.tag          })        ) &&        config.isUnknownElement(vnode.tag)      )    }    var creatingElmInVPre = 0;    function createElm (      vnode,      insertedVnodeQueue,      parentElm,      refElm,      nested,      ownerArray,      index    ) {      if (isDef(vnode.elm) && isDef(ownerArray)) {        // This vnode was used in a previous render!        // now it's used as a new node, overwriting its elm would cause        // potential patch errors down the road when it's used as an insertion        // reference node. Instead, we clone the node on-demand before creating        // associated DOM element for it.        vnode = ownerArray[index] = cloneVNode(vnode);      }      vnode.isRootInsert = !nested; // for transition enter check      if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {        return      }      var data = vnode.data;      var children = vnode.children;      var tag = vnode.tag;      if (isDef(tag)) {        {          if (data && data.pre) {            creatingElmInVPre++;          }          if (isUnknownElement$$1(vnode, creatingElmInVPre)) {            warn(              'Unknown custom element: <' + tag + '> - did you ' +              'register the component correctly? For recursive components, ' +              'make sure to provide the "name" option.',              vnode.context            );          }        }        vnode.elm = vnode.ns          ? nodeOps.createElementNS(vnode.ns, tag)          : nodeOps.createElement(tag, vnode);        setScope(vnode);        /* istanbul ignore if */        {          createChildren(vnode, children, insertedVnodeQueue);          if (isDef(data)) {            invokeCreateHooks(vnode, insertedVnodeQueue);          }          insert(parentElm, vnode.elm, refElm);        }        if (data && data.pre) {          creatingElmInVPre--;        }      } else if (isTrue(vnode.isComment)) {        vnode.elm = nodeOps.createComment(vnode.text);        insert(parentElm, vnode.elm, refElm);      } else {        vnode.elm = nodeOps.createTextNode(vnode.text);        insert(parentElm, vnode.elm, refElm);      }    }    function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {      var i = vnode.data;      if (isDef(i)) {        var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;        if (isDef(i = i.hook) && isDef(i = i.init)) {          i(vnode, false /* hydrating */);        }        // after calling the init hook, if the vnode is a child component        // it should've created a child instance and mounted it. the child        // component also has set the placeholder vnode's elm.        // in that case we can just return the element and be done.        if (isDef(vnode.componentInstance)) {          initComponent(vnode, insertedVnodeQueue);          insert(parentElm, vnode.elm, refElm);          if (isTrue(isReactivated)) {            reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);          }          return true        }      }    }    function initComponent (vnode, insertedVnodeQueue) {      if (isDef(vnode.data.pendingInsert)) {        insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);        vnode.data.pendingInsert = null;      }      vnode.elm = vnode.componentInstance.$el;      if (isPatchable(vnode)) {        invokeCreateHooks(vnode, insertedVnodeQueue);        setScope(vnode);      } else {        // empty component root.        // skip all element-related modules except for ref (#3455)        registerRef(vnode);        // make sure to invoke the insert hook        insertedVnodeQueue.push(vnode);      }    }    function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {      var i;      // hack for #4339: a reactivated component with inner transition      // does not trigger because the inner node's created hooks are not called      // again. It's not ideal to involve module-specific logic in here but      // there doesn't seem to be a better way to do it.      var innerNode = vnode;      while (innerNode.componentInstance) {        innerNode = innerNode.componentInstance._vnode;        if (isDef(i = innerNode.data) && isDef(i = i.transition)) {          for (i = 0; i < cbs.activate.length; ++i) {            cbs.activate[i](emptyNode, innerNode);          }          insertedVnodeQueue.push(innerNode);          break        }      }      // unlike a newly created component,      // a reactivated keep-alive component doesn't insert itself      insert(parentElm, vnode.elm, refElm);    }    function insert (parent, elm, ref$$1) {      if (isDef(parent)) {        if (isDef(ref$$1)) {          if (nodeOps.parentNode(ref$$1) === parent) {            nodeOps.insertBefore(parent, elm, ref$$1);          }        } else {          nodeOps.appendChild(parent, elm);        }      }    }    function createChildren (vnode, children, insertedVnodeQueue) {      if (Array.isArray(children)) {        {          checkDuplicateKeys(children);        }        for (var i = 0; i < children.length; ++i) {          createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);        }      } else if (isPrimitive(vnode.text)) {        nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));      }    }    function isPatchable (vnode) {      while (vnode.componentInstance) {        vnode = vnode.componentInstance._vnode;      }      return isDef(vnode.tag)    }    function invokeCreateHooks (vnode, insertedVnodeQueue) {      for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {        cbs.create[i$1](emptyNode, vnode);      }      i = vnode.data.hook; // Reuse variable      if (isDef(i)) {        if (isDef(i.create)) { i.create(emptyNode, vnode); }        if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }      }    }    // set scope id attribute for scoped CSS.    // this is implemented as a special case to avoid the overhead    // of going through the normal attribute patching process.    function setScope (vnode) {      var i;      if (isDef(i = vnode.fnScopeId)) {        nodeOps.setStyleScope(vnode.elm, i);      } else {        var ancestor = vnode;        while (ancestor) {          if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {            nodeOps.setStyleScope(vnode.elm, i);          }          ancestor = ancestor.parent;        }      }      // for slot content they should also get the scopeId from the host instance.      if (isDef(i = activeInstance) &&        i !== vnode.context &&        i !== vnode.fnContext &&        isDef(i = i.$options._scopeId)      ) {        nodeOps.setStyleScope(vnode.elm, i);      }    }    function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {      for (; startIdx <= endIdx; ++startIdx) {        createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);      }    }    function invokeDestroyHook (vnode) {      var i, j;      var data = vnode.data;      if (isDef(data)) {        if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }        for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }      }      if (isDef(i = vnode.children)) {        for (j = 0; j < vnode.children.length; ++j) {          invokeDestroyHook(vnode.children[j]);        }      }    }    function removeVnodes (vnodes, startIdx, endIdx) {      for (; startIdx <= endIdx; ++startIdx) {        var ch = vnodes[startIdx];        if (isDef(ch)) {          if (isDef(ch.tag)) {            removeAndInvokeRemoveHook(ch);            invokeDestroyHook(ch);          } else { // Text node            removeNode(ch.elm);          }        }      }    }    function removeAndInvokeRemoveHook (vnode, rm) {      if (isDef(rm) || isDef(vnode.data)) {        var i;        var listeners = cbs.remove.length + 1;        if (isDef(rm)) {          // we have a recursively passed down rm callback          // increase the listeners count          rm.listeners += listeners;        } else {          // directly removing          rm = createRmCb(vnode.elm, listeners);        }        // recursively invoke hooks on child component root node        if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {          removeAndInvokeRemoveHook(i, rm);        }        for (i = 0; i < cbs.remove.length; ++i) {          cbs.remove[i](vnode, rm);        }        if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {          i(vnode, rm);        } else {          rm();        }      } else {        removeNode(vnode.elm);      }    }    function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {      var oldStartIdx = 0;      var newStartIdx = 0;      var oldEndIdx = oldCh.length - 1;      var oldStartVnode = oldCh[0];      var oldEndVnode = oldCh[oldEndIdx];      var newEndIdx = newCh.length - 1;      var newStartVnode = newCh[0];      var newEndVnode = newCh[newEndIdx];      var oldKeyToIdx, idxInOld, vnodeToMove, refElm;      // removeOnly is a special flag used only by <transition-group>      // to ensure removed elements stay in correct relative positions      // during leaving transitions      var canMove = !removeOnly;      {        checkDuplicateKeys(newCh);      }      while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {        if (isUndef(oldStartVnode)) {          oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left        } else if (isUndef(oldEndVnode)) {          oldEndVnode = oldCh[--oldEndIdx];        } else if (sameVnode(oldStartVnode, newStartVnode)) {          patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);          oldStartVnode = oldCh[++oldStartIdx];          newStartVnode = newCh[++newStartIdx];        } else if (sameVnode(oldEndVnode, newEndVnode)) {          patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);          oldEndVnode = oldCh[--oldEndIdx];          newEndVnode = newCh[--newEndIdx];        } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right          patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);          canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));          oldStartVnode = oldCh[++oldStartIdx];          newEndVnode = newCh[--newEndIdx];        } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left          patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);          canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);          oldEndVnode = oldCh[--oldEndIdx];          newStartVnode = newCh[++newStartIdx];        } else {          if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }          idxInOld = isDef(newStartVnode.key)            ? oldKeyToIdx[newStartVnode.key]            : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);          if (isUndef(idxInOld)) { // New element            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);          } else {            vnodeToMove = oldCh[idxInOld];            if (sameVnode(vnodeToMove, newStartVnode)) {              patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);              oldCh[idxInOld] = undefined;              canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);            } else {              // same key but different element. treat as new element              createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);            }          }          newStartVnode = newCh[++newStartIdx];        }      }      if (oldStartIdx > oldEndIdx) {        refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;        addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);      } else if (newStartIdx > newEndIdx) {        removeVnodes(oldCh, oldStartIdx, oldEndIdx);      }    }    function checkDuplicateKeys (children) {      var seenKeys = {};      for (var i = 0; i < children.length; i++) {        var vnode = children[i];        var key = vnode.key;        if (isDef(key)) {          if (seenKeys[key]) {            warn(              ("Duplicate keys detected: '" + key + "'. This may cause an update error."),              vnode.context            );          } else {            seenKeys[key] = true;          }        }      }    }    function findIdxInOld (node, oldCh, start, end) {      for (var i = start; i < end; i++) {        var c = oldCh[i];        if (isDef(c) && sameVnode(node, c)) { return i }      }    }    function patchVnode (      oldVnode,      vnode,      insertedVnodeQueue,      ownerArray,      index,      removeOnly    ) {      if (oldVnode === vnode) {        return      }      if (isDef(vnode.elm) && isDef(ownerArray)) {        // clone reused vnode        vnode = ownerArray[index] = cloneVNode(vnode);      }      var elm = vnode.elm = oldVnode.elm;      if (isTrue(oldVnode.isAsyncPlaceholder)) {        if (isDef(vnode.asyncFactory.resolved)) {          hydrate(oldVnode.elm, vnode, insertedVnodeQueue);        } else {          vnode.isAsyncPlaceholder = true;        }        return      }      // reuse element for static trees.      // note we only do this if the vnode is cloned -      // if the new node is not cloned it means the render functions have been      // reset by the hot-reload-api and we need to do a proper re-render.      if (isTrue(vnode.isStatic) &&        isTrue(oldVnode.isStatic) &&        vnode.key === oldVnode.key &&        (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))      ) {        vnode.componentInstance = oldVnode.componentInstance;        return      }      var i;      var data = vnode.data;      if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {        i(oldVnode, vnode);      }      var oldCh = oldVnode.children;      var ch = vnode.children;      if (isDef(data) && isPatchable(vnode)) {        for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }        if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }      }      if (isUndef(vnode.text)) {        if (isDef(oldCh) && isDef(ch)) {          if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }        } else if (isDef(ch)) {          {            checkDuplicateKeys(ch);          }          if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }          addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);        } else if (isDef(oldCh)) {          removeVnodes(oldCh, 0, oldCh.length - 1);        } else if (isDef(oldVnode.text)) {          nodeOps.setTextContent(elm, '');        }      } else if (oldVnode.text !== vnode.text) {        nodeOps.setTextContent(elm, vnode.text);      }      if (isDef(data)) {        if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }      }    }    function invokeInsertHook (vnode, queue, initial) {      // delay insert hooks for component root nodes, invoke them after the      // element is really inserted      if (isTrue(initial) && isDef(vnode.parent)) {        vnode.parent.data.pendingInsert = queue;      } else {        for (var i = 0; i < queue.length; ++i) {          queue[i].data.hook.insert(queue[i]);        }      }    }    var hydrationBailed = false;    // list of modules that can skip create hook during hydration because they    // are already rendered on the client or has no need for initialization    // Note: style is excluded because it relies on initial clone for future    // deep updates (#7063).    var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');    // Note: this is a browser-only function so we can assume elms are DOM nodes.    function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {      var i;      var tag = vnode.tag;      var data = vnode.data;      var children = vnode.children;      inVPre = inVPre || (data && data.pre);      vnode.elm = elm;      if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {        vnode.isAsyncPlaceholder = true;        return true      }      // assert node match      {        if (!assertNodeMatch(elm, vnode, inVPre)) {          return false        }      }      if (isDef(data)) {        if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }        if (isDef(i = vnode.componentInstance)) {          // child component. it should have hydrated its own tree.          initComponent(vnode, insertedVnodeQueue);          return true        }      }      if (isDef(tag)) {        if (isDef(children)) {          // empty element, allow client to pick up and populate children          if (!elm.hasChildNodes()) {            createChildren(vnode, children, insertedVnodeQueue);          } else {            // v-html and domProps: innerHTML            if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {              if (i !== elm.innerHTML) {                /* istanbul ignore if */                if (typeof console !== 'undefined' &&                  !hydrationBailed                ) {                  hydrationBailed = true;                  console.warn('Parent: ', elm);                  console.warn('server innerHTML: ', i);                  console.warn('client innerHTML: ', elm.innerHTML);                }                return false              }            } else {              // iterate and compare children lists              var childrenMatch = true;              var childNode = elm.firstChild;              for (var i$1 = 0; i$1 < children.length; i$1++) {                if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {                  childrenMatch = false;                  break                }                childNode = childNode.nextSibling;              }              // if childNode is not null, it means the actual childNodes list is              // longer than the virtual children list.              if (!childrenMatch || childNode) {                /* istanbul ignore if */                if (typeof console !== 'undefined' &&                  !hydrationBailed                ) {                  hydrationBailed = true;                  console.warn('Parent: ', elm);                  console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);                }                return false              }            }          }        }        if (isDef(data)) {          var fullInvoke = false;          for (var key in data) {            if (!isRenderedModule(key)) {              fullInvoke = true;              invokeCreateHooks(vnode, insertedVnodeQueue);              break            }          }          if (!fullInvoke && data['class']) {            // ensure collecting deps for deep class bindings for future updates            traverse(data['class']);          }        }      } else if (elm.data !== vnode.text) {        elm.data = vnode.text;      }      return true    }    function assertNodeMatch (node, vnode, inVPre) {      if (isDef(vnode.tag)) {        return vnode.tag.indexOf('vue-component') === 0 || (          !isUnknownElement$$1(vnode, inVPre) &&          vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())        )      } else {        return node.nodeType === (vnode.isComment ? 8 : 3)      }    }    return function patch (oldVnode, vnode, hydrating, removeOnly) {      if (isUndef(vnode)) {        if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }        return      }      var isInitialPatch = false;      var insertedVnodeQueue = [];      if (isUndef(oldVnode)) {        // empty mount (likely as component), create new root element        isInitialPatch = true;        createElm(vnode, insertedVnodeQueue);      } else {        var isRealElement = isDef(oldVnode.nodeType);        if (!isRealElement && sameVnode(oldVnode, vnode)) {          // patch existing root node          patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);        } else {          if (isRealElement) {            // mounting to a real element            // check if this is server-rendered content and if we can perform            // a successful hydration.            if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {              oldVnode.removeAttribute(SSR_ATTR);              hydrating = true;            }            if (isTrue(hydrating)) {              if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {                invokeInsertHook(vnode, insertedVnodeQueue, true);                return oldVnode              } else {                warn(                  'The client-side rendered virtual DOM tree is not matching ' +                  'server-rendered content. This is likely caused by incorrect ' +                  'HTML markup, for example nesting block-level elements inside ' +                  '<p>, or missing <tbody>. Bailing hydration and performing ' +                  'full client-side render.'                );              }            }            // either not server-rendered, or hydration failed.            // create an empty node and replace it            oldVnode = emptyNodeAt(oldVnode);          }          // replacing existing element          var oldElm = oldVnode.elm;          var parentElm = nodeOps.parentNode(oldElm);          // create new node          createElm(            vnode,            insertedVnodeQueue,            // extremely rare edge case: do not insert if old element is in a            // leaving transition. Only happens when combining transition +            // keep-alive + HOCs. (#4590)            oldElm._leaveCb ? null : parentElm,            nodeOps.nextSibling(oldElm)          );          // update parent placeholder node element, recursively          if (isDef(vnode.parent)) {            var ancestor = vnode.parent;            var patchable = isPatchable(vnode);            while (ancestor) {              for (var i = 0; i < cbs.destroy.length; ++i) {                cbs.destroy[i](ancestor);              }              ancestor.elm = vnode.elm;              if (patchable) {                for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {                  cbs.create[i$1](emptyNode, ancestor);                }                // #6513                // invoke insert hooks that may have been merged by create hooks.                // e.g. for directives that uses the "inserted" hook.                var insert = ancestor.data.hook.insert;                if (insert.merged) {                  // start at index 1 to avoid re-invoking component mounted hook                  for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {                    insert.fns[i$2]();                  }                }              } else {                registerRef(ancestor);              }              ancestor = ancestor.parent;            }          }          // destroy old node          if (isDef(parentElm)) {            removeVnodes([oldVnode], 0, 0);          } else if (isDef(oldVnode.tag)) {            invokeDestroyHook(oldVnode);          }        }      }      invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);      return vnode.elm    }  }  /*  */  var directives = {    create: updateDirectives,    update: updateDirectives,    destroy: function unbindDirectives (vnode) {      updateDirectives(vnode, emptyNode);    }  };  function updateDirectives (oldVnode, vnode) {    if (oldVnode.data.directives || vnode.data.directives) {      _update(oldVnode, vnode);    }  }  function _update (oldVnode, vnode) {    var isCreate = oldVnode === emptyNode;    var isDestroy = vnode === emptyNode;    var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);    var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);    var dirsWithInsert = [];    var dirsWithPostpatch = [];    var key, oldDir, dir;    for (key in newDirs) {      oldDir = oldDirs[key];      dir = newDirs[key];      if (!oldDir) {        // new directive, bind        callHook$1(dir, 'bind', vnode, oldVnode);        if (dir.def && dir.def.inserted) {          dirsWithInsert.push(dir);        }      } else {        // existing directive, update        dir.oldValue = oldDir.value;        dir.oldArg = oldDir.arg;        callHook$1(dir, 'update', vnode, oldVnode);        if (dir.def && dir.def.componentUpdated) {          dirsWithPostpatch.push(dir);        }      }    }    if (dirsWithInsert.length) {      var callInsert = function () {        for (var i = 0; i < dirsWithInsert.length; i++) {          callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);        }      };      if (isCreate) {        mergeVNodeHook(vnode, 'insert', callInsert);      } else {        callInsert();      }    }    if (dirsWithPostpatch.length) {      mergeVNodeHook(vnode, 'postpatch', function () {        for (var i = 0; i < dirsWithPostpatch.length; i++) {          callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);        }      });    }    if (!isCreate) {      for (key in oldDirs) {        if (!newDirs[key]) {          // no longer present, unbind          callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);        }      }    }  }  var emptyModifiers = Object.create(null);  function normalizeDirectives$1 (    dirs,    vm  ) {    var res = Object.create(null);    if (!dirs) {      // $flow-disable-line      return res    }    var i, dir;    for (i = 0; i < dirs.length; i++) {      dir = dirs[i];      if (!dir.modifiers) {        // $flow-disable-line        dir.modifiers = emptyModifiers;      }      res[getRawDirName(dir)] = dir;      dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);    }    // $flow-disable-line    return res  }  function getRawDirName (dir) {    return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))  }  function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {    var fn = dir.def && dir.def[hook];    if (fn) {      try {        fn(vnode.elm, dir, vnode, oldVnode, isDestroy);      } catch (e) {        handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));      }    }  }  var baseModules = [    ref,    directives  ];  /*  */  function updateAttrs (oldVnode, vnode) {    var opts = vnode.componentOptions;    if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {      return    }    if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {      return    }    var key, cur, old;    var elm = vnode.elm;    var oldAttrs = oldVnode.data.attrs || {};    var attrs = vnode.data.attrs || {};    // clone observed objects, as the user probably wants to mutate it    if (isDef(attrs.__ob__)) {      attrs = vnode.data.attrs = extend({}, attrs);    }    for (key in attrs) {      cur = attrs[key];      old = oldAttrs[key];      if (old !== cur) {        setAttr(elm, key, cur);      }    }    // #4391: in IE9, setting type can reset value for input[type=radio]    // #6666: IE/Edge forces progress value down to 1 before setting a max    /* istanbul ignore if */    if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {      setAttr(elm, 'value', attrs.value);    }    for (key in oldAttrs) {      if (isUndef(attrs[key])) {        if (isXlink(key)) {          elm.removeAttributeNS(xlinkNS, getXlinkProp(key));        } else if (!isEnumeratedAttr(key)) {          elm.removeAttribute(key);        }      }    }  }  function setAttr (el, key, value) {    if (el.tagName.indexOf('-') > -1) {      baseSetAttr(el, key, value);    } else if (isBooleanAttr(key)) {      // set attribute for blank value      // e.g. <option disabled>Select one</option>      if (isFalsyAttrValue(value)) {        el.removeAttribute(key);      } else {        // technically allowfullscreen is a boolean attribute for <iframe>,        // but Flash expects a value of "true" when used on <embed> tag        value = key === 'allowfullscreen' && el.tagName === 'EMBED'          ? 'true'          : key;        el.setAttribute(key, value);      }    } else if (isEnumeratedAttr(key)) {      el.setAttribute(key, convertEnumeratedValue(key, value));    } else if (isXlink(key)) {      if (isFalsyAttrValue(value)) {        el.removeAttributeNS(xlinkNS, getXlinkProp(key));      } else {        el.setAttributeNS(xlinkNS, key, value);      }    } else {      baseSetAttr(el, key, value);    }  }  function baseSetAttr (el, key, value) {    if (isFalsyAttrValue(value)) {      el.removeAttribute(key);    } else {      // #7138: IE10 & 11 fires input event when setting placeholder on      // <textarea>... block the first input event and remove the blocker      // immediately.      /* istanbul ignore if */      if (        isIE && !isIE9 &&        el.tagName === 'TEXTAREA' &&        key === 'placeholder' && value !== '' && !el.__ieph      ) {        var blocker = function (e) {          e.stopImmediatePropagation();          el.removeEventListener('input', blocker);        };        el.addEventListener('input', blocker);        // $flow-disable-line        el.__ieph = true; /* IE placeholder patched */      }      el.setAttribute(key, value);    }  }  var attrs = {    create: updateAttrs,    update: updateAttrs  };  /*  */  function updateClass (oldVnode, vnode) {    var el = vnode.elm;    var data = vnode.data;    var oldData = oldVnode.data;    if (      isUndef(data.staticClass) &&      isUndef(data.class) && (        isUndef(oldData) || (          isUndef(oldData.staticClass) &&          isUndef(oldData.class)        )      )    ) {      return    }    var cls = genClassForVnode(vnode);    // handle transition classes    var transitionClass = el._transitionClasses;    if (isDef(transitionClass)) {      cls = concat(cls, stringifyClass(transitionClass));    }    // set the class    if (cls !== el._prevClass) {      el.setAttribute('class', cls);      el._prevClass = cls;    }  }  var klass = {    create: updateClass,    update: updateClass  };  /*  */  var validDivisionCharRE = /[\w).+\-_$\]]/;  function parseFilters (exp) {    var inSingle = false;    var inDouble = false;    var inTemplateString = false;    var inRegex = false;    var curly = 0;    var square = 0;    var paren = 0;    var lastFilterIndex = 0;    var c, prev, i, expression, filters;    for (i = 0; i < exp.length; i++) {      prev = c;      c = exp.charCodeAt(i);      if (inSingle) {        if (c === 0x27 && prev !== 0x5C) { inSingle = false; }      } else if (inDouble) {        if (c === 0x22 && prev !== 0x5C) { inDouble = false; }      } else if (inTemplateString) {        if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }      } else if (inRegex) {        if (c === 0x2f && prev !== 0x5C) { inRegex = false; }      } else if (        c === 0x7C && // pipe        exp.charCodeAt(i + 1) !== 0x7C &&        exp.charCodeAt(i - 1) !== 0x7C &&        !curly && !square && !paren      ) {        if (expression === undefined) {          // first filter, end of expression          lastFilterIndex = i + 1;          expression = exp.slice(0, i).trim();        } else {          pushFilter();        }      } else {        switch (c) {          case 0x22: inDouble = true; break         // "          case 0x27: inSingle = true; break         // '          case 0x60: inTemplateString = true; break // `          case 0x28: paren++; break                 // (          case 0x29: paren--; break                 // )          case 0x5B: square++; break                // [          case 0x5D: square--; break                // ]          case 0x7B: curly++; break                 // {          case 0x7D: curly--; break                 // }        }        if (c === 0x2f) { // /          var j = i - 1;          var p = (void 0);          // find first non-whitespace prev char          for (; j >= 0; j--) {            p = exp.charAt(j);            if (p !== ' ') { break }          }          if (!p || !validDivisionCharRE.test(p)) {            inRegex = true;          }        }      }    }    if (expression === undefined) {      expression = exp.slice(0, i).trim();    } else if (lastFilterIndex !== 0) {      pushFilter();    }    function pushFilter () {      (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());      lastFilterIndex = i + 1;    }    if (filters) {      for (i = 0; i < filters.length; i++) {        expression = wrapFilter(expression, filters[i]);      }    }    return expression  }  function wrapFilter (exp, filter) {    var i = filter.indexOf('(');    if (i < 0) {      // _f: resolveFilter      return ("_f(\"" + filter + "\")(" + exp + ")")    } else {      var name = filter.slice(0, i);      var args = filter.slice(i + 1);      return ("_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args))    }  }  /*  */  /* eslint-disable no-unused-vars */  function baseWarn (msg, range) {    console.error(("[Vue compiler]: " + msg));  }  /* eslint-enable no-unused-vars */  function pluckModuleFunction (    modules,    key  ) {    return modules      ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })      : []  }  function addProp (el, name, value, range, dynamic) {    (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));    el.plain = false;  }  function addAttr (el, name, value, range, dynamic) {    var attrs = dynamic      ? (el.dynamicAttrs || (el.dynamicAttrs = []))      : (el.attrs || (el.attrs = []));    attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));    el.plain = false;  }  // add a raw attr (use this in preTransforms)  function addRawAttr (el, name, value, range) {    el.attrsMap[name] = value;    el.attrsList.push(rangeSetItem({ name: name, value: value }, range));  }  function addDirective (    el,    name,    rawName,    value,    arg,    isDynamicArg,    modifiers,    range  ) {    (el.directives || (el.directives = [])).push(rangeSetItem({      name: name,      rawName: rawName,      value: value,      arg: arg,      isDynamicArg: isDynamicArg,      modifiers: modifiers    }, range));    el.plain = false;  }  function prependModifierMarker (symbol, name, dynamic) {    return dynamic      ? ("_p(" + name + ",\"" + symbol + "\")")      : symbol + name // mark the event as captured  }  function addHandler (    el,    name,    value,    modifiers,    important,    warn,    range,    dynamic  ) {    modifiers = modifiers || emptyObject;    // warn prevent and passive modifier    /* istanbul ignore if */    if (      warn &&      modifiers.prevent && modifiers.passive    ) {      warn(        'passive and prevent can\'t be used together. ' +        'Passive handler can\'t prevent default event.',        range      );    }    // normalize click.right and click.middle since they don't actually fire    // this is technically browser-specific, but at least for now browsers are    // the only target envs that have right/middle clicks.    if (modifiers.right) {      if (dynamic) {        name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";      } else if (name === 'click') {        name = 'contextmenu';        delete modifiers.right;      }    } else if (modifiers.middle) {      if (dynamic) {        name = "(" + name + ")==='click'?'mouseup':(" + name + ")";      } else if (name === 'click') {        name = 'mouseup';      }    }    // check capture modifier    if (modifiers.capture) {      delete modifiers.capture;      name = prependModifierMarker('!', name, dynamic);    }    if (modifiers.once) {      delete modifiers.once;      name = prependModifierMarker('~', name, dynamic);    }    /* istanbul ignore if */    if (modifiers.passive) {      delete modifiers.passive;      name = prependModifierMarker('&', name, dynamic);    }    var events;    if (modifiers.native) {      delete modifiers.native;      events = el.nativeEvents || (el.nativeEvents = {});    } else {      events = el.events || (el.events = {});    }    var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);    if (modifiers !== emptyObject) {      newHandler.modifiers = modifiers;    }    var handlers = events[name];    /* istanbul ignore if */    if (Array.isArray(handlers)) {      important ? handlers.unshift(newHandler) : handlers.push(newHandler);    } else if (handlers) {      events[name] = important ? [newHandler, handlers] : [handlers, newHandler];    } else {      events[name] = newHandler;    }    el.plain = false;  }  function getRawBindingAttr (    el,    name  ) {    return el.rawAttrsMap[':' + name] ||      el.rawAttrsMap['v-bind:' + name] ||      el.rawAttrsMap[name]  }  function getBindingAttr (    el,    name,    getStatic  ) {    var dynamicValue =      getAndRemoveAttr(el, ':' + name) ||      getAndRemoveAttr(el, 'v-bind:' + name);    if (dynamicValue != null) {      return parseFilters(dynamicValue)    } else if (getStatic !== false) {      var staticValue = getAndRemoveAttr(el, name);      if (staticValue != null) {        return JSON.stringify(staticValue)      }    }  }  // note: this only removes the attr from the Array (attrsList) so that it  // doesn't get processed by processAttrs.  // By default it does NOT remove it from the map (attrsMap) because the map is  // needed during codegen.  function getAndRemoveAttr (    el,    name,    removeFromMap  ) {    var val;    if ((val = el.attrsMap[name]) != null) {      var list = el.attrsList;      for (var i = 0, l = list.length; i < l; i++) {        if (list[i].name === name) {          list.splice(i, 1);          break        }      }    }    if (removeFromMap) {      delete el.attrsMap[name];    }    return val  }  function getAndRemoveAttrByRegex (    el,    name  ) {    var list = el.attrsList;    for (var i = 0, l = list.length; i < l; i++) {      var attr = list[i];      if (name.test(attr.name)) {        list.splice(i, 1);        return attr      }    }  }  function rangeSetItem (    item,    range  ) {    if (range) {      if (range.start != null) {        item.start = range.start;      }      if (range.end != null) {        item.end = range.end;      }    }    return item  }  /*  */  /**   * Cross-platform code generation for component v-model   */  function genComponentModel (    el,    value,    modifiers  ) {    var ref = modifiers || {};    var number = ref.number;    var trim = ref.trim;    var baseValueExpression = '$$v';    var valueExpression = baseValueExpression;    if (trim) {      valueExpression =        "(typeof " + baseValueExpression + " === 'string'" +        "? " + baseValueExpression + ".trim()" +        ": " + baseValueExpression + ")";    }    if (number) {      valueExpression = "_n(" + valueExpression + ")";    }    var assignment = genAssignmentCode(value, valueExpression);    el.model = {      value: ("(" + value + ")"),      expression: JSON.stringify(value),      callback: ("function (" + baseValueExpression + ") {" + assignment + "}")    };  }  /**   * Cross-platform codegen helper for generating v-model value assignment code.   */  function genAssignmentCode (    value,    assignment  ) {    var res = parseModel(value);    if (res.key === null) {      return (value + "=" + assignment)    } else {      return ("$set(" + (res.exp) + ", " + (res.key) + ", " + assignment + ")")    }  }  /**   * Parse a v-model expression into a base path and a final key segment.   * Handles both dot-path and possible square brackets.   *   * Possible cases:   *   * - test   * - test[key]   * - test[test1[key]]   * - test["a"][key]   * - xxx.test[a[a].test1[key]]   * - test.xxx.a["asa"][test1[key]]   *   */  var len, str, chr, index$1, expressionPos, expressionEndPos;  function parseModel (val) {    // Fix https://github.com/vuejs/vue/pull/7730    // allow v-model="obj.val " (trailing whitespace)    val = val.trim();    len = val.length;    if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {      index$1 = val.lastIndexOf('.');      if (index$1 > -1) {        return {          exp: val.slice(0, index$1),          key: '"' + val.slice(index$1 + 1) + '"'        }      } else {        return {          exp: val,          key: null        }      }    }    str = val;    index$1 = expressionPos = expressionEndPos = 0;    while (!eof()) {      chr = next();      /* istanbul ignore if */      if (isStringStart(chr)) {        parseString(chr);      } else if (chr === 0x5B) {        parseBracket(chr);      }    }    return {      exp: val.slice(0, expressionPos),      key: val.slice(expressionPos + 1, expressionEndPos)    }  }  function next () {    return str.charCodeAt(++index$1)  }  function eof () {    return index$1 >= len  }  function isStringStart (chr) {    return chr === 0x22 || chr === 0x27  }  function parseBracket (chr) {    var inBracket = 1;    expressionPos = index$1;    while (!eof()) {      chr = next();      if (isStringStart(chr)) {        parseString(chr);        continue      }      if (chr === 0x5B) { inBracket++; }      if (chr === 0x5D) { inBracket--; }      if (inBracket === 0) {        expressionEndPos = index$1;        break      }    }  }  function parseString (chr) {    var stringQuote = chr;    while (!eof()) {      chr = next();      if (chr === stringQuote) {        break      }    }  }  /*  */  var warn$1;  // in some cases, the event used has to be determined at runtime  // so we used some reserved tokens during compile.  var RANGE_TOKEN = '__r';  var CHECKBOX_RADIO_TOKEN = '__c';  function model (    el,    dir,    _warn  ) {    warn$1 = _warn;    var value = dir.value;    var modifiers = dir.modifiers;    var tag = el.tag;    var type = el.attrsMap.type;    {      // inputs with type="file" are read only and setting the input's      // value will throw an error.      if (tag === 'input' && type === 'file') {        warn$1(          "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +          "File inputs are read only. Use a v-on:change listener instead.",          el.rawAttrsMap['v-model']        );      }    }    if (el.component) {      genComponentModel(el, value, modifiers);      // component v-model doesn't need extra runtime      return false    } else if (tag === 'select') {      genSelect(el, value, modifiers);    } else if (tag === 'input' && type === 'checkbox') {      genCheckboxModel(el, value, modifiers);    } else if (tag === 'input' && type === 'radio') {      genRadioModel(el, value, modifiers);    } else if (tag === 'input' || tag === 'textarea') {      genDefaultModel(el, value, modifiers);    } else if (!config.isReservedTag(tag)) {      genComponentModel(el, value, modifiers);      // component v-model doesn't need extra runtime      return false    } else {      warn$1(        "<" + (el.tag) + " v-model=\"" + value + "\">: " +        "v-model is not supported on this element type. " +        'If you are working with contenteditable, it\'s recommended to ' +        'wrap a library dedicated for that purpose inside a custom component.',        el.rawAttrsMap['v-model']      );    }    // ensure runtime directive metadata    return true  }  function genCheckboxModel (    el,    value,    modifiers  ) {    var number = modifiers && modifiers.number;    var valueBinding = getBindingAttr(el, 'value') || 'null';    var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';    var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';    addProp(el, 'checked',      "Array.isArray(" + value + ")" +      "?_i(" + value + "," + valueBinding + ")>-1" + (        trueValueBinding === 'true'          ? (":(" + value + ")")          : (":_q(" + value + "," + trueValueBinding + ")")      )    );    addHandler(el, 'change',      "var $$a=" + value + "," +          '$$el=$event.target,' +          "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +      'if(Array.isArray($$a)){' +        "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +            '$$i=_i($$a,$$v);' +        "if($$el.checked){$$i<0&&(" + (genAssignmentCode(value, '$$a.concat([$$v])')) + ")}" +        "else{$$i>-1&&(" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + ")}" +      "}else{" + (genAssignmentCode(value, '$$c')) + "}",      null, true    );  }  function genRadioModel (    el,    value,    modifiers  ) {    var number = modifiers && modifiers.number;    var valueBinding = getBindingAttr(el, 'value') || 'null';    valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;    addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));    addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);  }  function genSelect (    el,    value,    modifiers  ) {    var number = modifiers && modifiers.number;    var selectedVal = "Array.prototype.filter" +      ".call($event.target.options,function(o){return o.selected})" +      ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +      "return " + (number ? '_n(val)' : 'val') + "})";    var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';    var code = "var $$selectedVal = " + selectedVal + ";";    code = code + " " + (genAssignmentCode(value, assignment));    addHandler(el, 'change', code, null, true);  }  function genDefaultModel (    el,    value,    modifiers  ) {    var type = el.attrsMap.type;    // warn if v-bind:value conflicts with v-model    // except for inputs with v-bind:type    {      var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];      var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];      if (value$1 && !typeBinding) {        var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';        warn$1(          binding + "=\"" + value$1 + "\" conflicts with v-model on the same element " +          'because the latter already expands to a value binding internally',          el.rawAttrsMap[binding]        );      }    }    var ref = modifiers || {};    var lazy = ref.lazy;    var number = ref.number;    var trim = ref.trim;    var needCompositionGuard = !lazy && type !== 'range';    var event = lazy      ? 'change'      : type === 'range'        ? RANGE_TOKEN        : 'input';    var valueExpression = '$event.target.value';    if (trim) {      valueExpression = "$event.target.value.trim()";    }    if (number) {      valueExpression = "_n(" + valueExpression + ")";    }    var code = genAssignmentCode(value, valueExpression);    if (needCompositionGuard) {      code = "if($event.target.composing)return;" + code;    }    addProp(el, 'value', ("(" + value + ")"));    addHandler(el, event, code, null, true);    if (trim || number) {      addHandler(el, 'blur', '$forceUpdate()');    }  }  /*  */  // normalize v-model event tokens that can only be determined at runtime.  // it's important to place the event as the first in the array because  // the whole point is ensuring the v-model callback gets called before  // user-attached handlers.  function normalizeEvents (on) {    /* istanbul ignore if */    if (isDef(on[RANGE_TOKEN])) {      // IE input[type=range] only supports `change` event      var event = isIE ? 'change' : 'input';      on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);      delete on[RANGE_TOKEN];    }    // This was originally intended to fix #4521 but no longer necessary    // after 2.5. Keeping it for backwards compat with generated code from < 2.4    /* istanbul ignore if */    if (isDef(on[CHECKBOX_RADIO_TOKEN])) {      on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);      delete on[CHECKBOX_RADIO_TOKEN];    }  }  var target$1;  function createOnceHandler$1 (event, handler, capture) {    var _target = target$1; // save current target element in closure    return function onceHandler () {      var res = handler.apply(null, arguments);      if (res !== null) {        remove$2(event, onceHandler, capture, _target);      }    }  }  // #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp  // implementation and does not fire microtasks in between event propagation, so  // safe to exclude.  var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);  function add$1 (    name,    handler,    capture,    passive  ) {    // async edge case #6566: inner click event triggers patch, event handler    // attached to outer element during patch, and triggered again. This    // happens because browsers fire microtask ticks between event propagation.    // the solution is simple: we save the timestamp when a handler is attached,    // and the handler would only fire if the event passed to it was fired    // AFTER it was attached.    if (useMicrotaskFix) {      var attachedTimestamp = currentFlushTimestamp;      var original = handler;      handler = original._wrapper = function (e) {        if (          // no bubbling, should always fire.          // this is just a safety net in case event.timeStamp is unreliable in          // certain weird environments...          e.target === e.currentTarget ||          // event is fired after handler attachment          e.timeStamp >= attachedTimestamp ||          // bail for environments that have buggy event.timeStamp implementations          // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState          // #9681 QtWebEngine event.timeStamp is negative value          e.timeStamp <= 0 ||          // #9448 bail if event is fired in another document in a multi-page          // electron/nw.js app, since event.timeStamp will be using a different          // starting reference          e.target.ownerDocument !== document        ) {          return original.apply(this, arguments)        }      };    }    target$1.addEventListener(      name,      handler,      supportsPassive        ? { capture: capture, passive: passive }        : capture    );  }  function remove$2 (    name,    handler,    capture,    _target  ) {    (_target || target$1).removeEventListener(      name,      handler._wrapper || handler,      capture    );  }  function updateDOMListeners (oldVnode, vnode) {    if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {      return    }    var on = vnode.data.on || {};    var oldOn = oldVnode.data.on || {};    target$1 = vnode.elm;    normalizeEvents(on);    updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);    target$1 = undefined;  }  var events = {    create: updateDOMListeners,    update: updateDOMListeners  };  /*  */  var svgContainer;  function updateDOMProps (oldVnode, vnode) {    if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {      return    }    var key, cur;    var elm = vnode.elm;    var oldProps = oldVnode.data.domProps || {};    var props = vnode.data.domProps || {};    // clone observed objects, as the user probably wants to mutate it    if (isDef(props.__ob__)) {      props = vnode.data.domProps = extend({}, props);    }    for (key in oldProps) {      if (!(key in props)) {        elm[key] = '';      }    }    for (key in props) {      cur = props[key];      // ignore children if the node has textContent or innerHTML,      // as these will throw away existing DOM nodes and cause removal errors      // on subsequent patches (#3360)      if (key === 'textContent' || key === 'innerHTML') {        if (vnode.children) { vnode.children.length = 0; }        if (cur === oldProps[key]) { continue }        // #6601 work around Chrome version <= 55 bug where single textNode        // replaced by innerHTML/textContent retains its parentNode property        if (elm.childNodes.length === 1) {          elm.removeChild(elm.childNodes[0]);        }      }      if (key === 'value' && elm.tagName !== 'PROGRESS') {        // store value as _value as well since        // non-string values will be stringified        elm._value = cur;        // avoid resetting cursor position when value is the same        var strCur = isUndef(cur) ? '' : String(cur);        if (shouldUpdateValue(elm, strCur)) {          elm.value = strCur;        }      } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {        // IE doesn't support innerHTML for SVG elements        svgContainer = svgContainer || document.createElement('div');        svgContainer.innerHTML = "<svg>" + cur + "</svg>";        var svg = svgContainer.firstChild;        while (elm.firstChild) {          elm.removeChild(elm.firstChild);        }        while (svg.firstChild) {          elm.appendChild(svg.firstChild);        }      } else if (        // skip the update if old and new VDOM state is the same.        // `value` is handled separately because the DOM value may be temporarily        // out of sync with VDOM state due to focus, composition and modifiers.        // This  #4521 by skipping the unnecessary `checked` update.        cur !== oldProps[key]      ) {        // some property updates can throw        // e.g. `value` on <progress> w/ non-finite value        try {          elm[key] = cur;        } catch (e) {}      }    }  }  // check platforms/web/util/attrs.js acceptValue  function shouldUpdateValue (elm, checkVal) {    return (!elm.composing && (      elm.tagName === 'OPTION' ||      isNotInFocusAndDirty(elm, checkVal) ||      isDirtyWithModifiers(elm, checkVal)    ))  }  function isNotInFocusAndDirty (elm, checkVal) {    // return true when textbox (.number and .trim) loses focus and its value is    // not equal to the updated value    var notInFocus = true;    // #6157    // work around IE bug when accessing document.activeElement in an iframe    try { notInFocus = document.activeElement !== elm; } catch (e) {}    return notInFocus && elm.value !== checkVal  }  function isDirtyWithModifiers (elm, newVal) {    var value = elm.value;    var modifiers = elm._vModifiers; // injected by v-model runtime    if (isDef(modifiers)) {      if (modifiers.number) {        return toNumber(value) !== toNumber(newVal)      }      if (modifiers.trim) {        return value.trim() !== newVal.trim()      }    }    return value !== newVal  }  var domProps = {    create: updateDOMProps,    update: updateDOMProps  };  /*  */  var parseStyleText = cached(function (cssText) {    var res = {};    var listDelimiter = /;(?![^(]*\))/g;    var propertyDelimiter = /:(.+)/;    cssText.split(listDelimiter).forEach(function (item) {      if (item) {        var tmp = item.split(propertyDelimiter);        tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());      }    });    return res  });  // merge static and dynamic style data on the same vnode  function normalizeStyleData (data) {    var style = normalizeStyleBinding(data.style);    // static style is pre-processed into an object during compilation    // and is always a fresh object, so it's safe to merge into it    return data.staticStyle      ? extend(data.staticStyle, style)      : style  }  // normalize possible array / string values into Object  function normalizeStyleBinding (bindingStyle) {    if (Array.isArray(bindingStyle)) {      return toObject(bindingStyle)    }    if (typeof bindingStyle === 'string') {      return parseStyleText(bindingStyle)    }    return bindingStyle  }  /**   * parent component style should be after child's   * so that parent component's style could override it   */  function getStyle (vnode, checkChild) {    var res = {};    var styleData;    if (checkChild) {      var childNode = vnode;      while (childNode.componentInstance) {        childNode = childNode.componentInstance._vnode;        if (          childNode && childNode.data &&          (styleData = normalizeStyleData(childNode.data))        ) {          extend(res, styleData);        }      }    }    if ((styleData = normalizeStyleData(vnode.data))) {      extend(res, styleData);    }    var parentNode = vnode;    while ((parentNode = parentNode.parent)) {      if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {        extend(res, styleData);      }    }    return res  }  /*  */  var cssVarRE = /^--/;  var importantRE = /\s*!important$/;  var setProp = function (el, name, val) {    /* istanbul ignore if */    if (cssVarRE.test(name)) {      el.style.setProperty(name, val);    } else if (importantRE.test(val)) {      el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');    } else {      var normalizedName = normalize(name);      if (Array.isArray(val)) {        // Support values array created by autoprefixer, e.g.        // {display: ["-webkit-box", "-ms-flexbox", "flex"]}        // Set them one by one, and the browser will only set those it can recognize        for (var i = 0, len = val.length; i < len; i++) {          el.style[normalizedName] = val[i];        }      } else {        el.style[normalizedName] = val;      }    }  };  var vendorNames = ['Webkit', 'Moz', 'ms'];  var emptyStyle;  var normalize = cached(function (prop) {    emptyStyle = emptyStyle || document.createElement('div').style;    prop = camelize(prop);    if (prop !== 'filter' && (prop in emptyStyle)) {      return prop    }    var capName = prop.charAt(0).toUpperCase() + prop.slice(1);    for (var i = 0; i < vendorNames.length; i++) {      var name = vendorNames[i] + capName;      if (name in emptyStyle) {        return name      }    }  });  function updateStyle (oldVnode, vnode) {    var data = vnode.data;    var oldData = oldVnode.data;    if (isUndef(data.staticStyle) && isUndef(data.style) &&      isUndef(oldData.staticStyle) && isUndef(oldData.style)    ) {      return    }    var cur, name;    var el = vnode.elm;    var oldStaticStyle = oldData.staticStyle;    var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};    // if static style exists, stylebinding already merged into it when doing normalizeStyleData    var oldStyle = oldStaticStyle || oldStyleBinding;    var style = normalizeStyleBinding(vnode.data.style) || {};    // store normalized style under a different key for next diff    // make sure to clone it if it's reactive, since the user likely wants    // to mutate it.    vnode.data.normalizedStyle = isDef(style.__ob__)      ? extend({}, style)      : style;    var newStyle = getStyle(vnode, true);    for (name in oldStyle) {      if (isUndef(newStyle[name])) {        setProp(el, name, '');      }    }    for (name in newStyle) {      cur = newStyle[name];      if (cur !== oldStyle[name]) {        // ie9 setting to null has no effect, must use empty string        setProp(el, name, cur == null ? '' : cur);      }    }  }  var style = {    create: updateStyle,    update: updateStyle  };  /*  */  var whitespaceRE = /\s+/;  /**   * Add class with compatibility for SVG since classList is not supported on   * SVG elements in IE   */  function addClass (el, cls) {    /* istanbul ignore if */    if (!cls || !(cls = cls.trim())) {      return    }    /* istanbul ignore else */    if (el.classList) {      if (cls.indexOf(' ') > -1) {        cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });      } else {        el.classList.add(cls);      }    } else {      var cur = " " + (el.getAttribute('class') || '') + " ";      if (cur.indexOf(' ' + cls + ' ') < 0) {        el.setAttribute('class', (cur + cls).trim());      }    }  }  /**   * Remove class with compatibility for SVG since classList is not supported on   * SVG elements in IE   */  function removeClass (el, cls) {    /* istanbul ignore if */    if (!cls || !(cls = cls.trim())) {      return    }    /* istanbul ignore else */    if (el.classList) {      if (cls.indexOf(' ') > -1) {        cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });      } else {        el.classList.remove(cls);      }      if (!el.classList.length) {        el.removeAttribute('class');      }    } else {      var cur = " " + (el.getAttribute('class') || '') + " ";      var tar = ' ' + cls + ' ';      while (cur.indexOf(tar) >= 0) {        cur = cur.replace(tar, ' ');      }      cur = cur.trim();      if (cur) {        el.setAttribute('class', cur);      } else {        el.removeAttribute('class');      }    }  }  /*  */  function resolveTransition (def$$1) {    if (!def$$1) {      return    }    /* istanbul ignore else */    if (typeof def$$1 === 'object') {      var res = {};      if (def$$1.css !== false) {        extend(res, autoCssTransition(def$$1.name || 'v'));      }      extend(res, def$$1);      return res    } else if (typeof def$$1 === 'string') {      return autoCssTransition(def$$1)    }  }  var autoCssTransition = cached(function (name) {    return {      enterClass: (name + "-enter"),      enterToClass: (name + "-enter-to"),      enterActiveClass: (name + "-enter-active"),      leaveClass: (name + "-leave"),      leaveToClass: (name + "-leave-to"),      leaveActiveClass: (name + "-leave-active")    }  });  var hasTransition = inBrowser && !isIE9;  var TRANSITION = 'transition';  var ANIMATION = 'animation';  // Transition property/event sniffing  var transitionProp = 'transition';  var transitionEndEvent = 'transitionend';  var animationProp = 'animation';  var animationEndEvent = 'animationend';  if (hasTransition) {    /* istanbul ignore if */    if (window.ontransitionend === undefined &&      window.onwebkittransitionend !== undefined    ) {      transitionProp = 'WebkitTransition';      transitionEndEvent = 'webkitTransitionEnd';    }    if (window.onanimationend === undefined &&      window.onwebkitanimationend !== undefined    ) {      animationProp = 'WebkitAnimation';      animationEndEvent = 'webkitAnimationEnd';    }  }  // binding to window is necessary to make hot reload work in IE in strict mode  var raf = inBrowser    ? window.requestAnimationFrame      ? window.requestAnimationFrame.bind(window)      : setTimeout    : /* istanbul ignore next */ function (fn) { return fn(); };  function nextFrame (fn) {    raf(function () {      raf(fn);    });  }  function addTransitionClass (el, cls) {    var transitionClasses = el._transitionClasses || (el._transitionClasses = []);    if (transitionClasses.indexOf(cls) < 0) {      transitionClasses.push(cls);      addClass(el, cls);    }  }  function removeTransitionClass (el, cls) {    if (el._transitionClasses) {      remove(el._transitionClasses, cls);    }    removeClass(el, cls);  }  function whenTransitionEnds (    el,    expectedType,    cb  ) {    var ref = getTransitionInfo(el, expectedType);    var type = ref.type;    var timeout = ref.timeout;    var propCount = ref.propCount;    if (!type) { return cb() }    var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;    var ended = 0;    var end = function () {      el.removeEventListener(event, onEnd);      cb();    };    var onEnd = function (e) {      if (e.target === el) {        if (++ended >= propCount) {          end();        }      }    };    setTimeout(function () {      if (ended < propCount) {        end();      }    }, timeout + 1);    el.addEventListener(event, onEnd);  }  var transformRE = /\b(transform|all)(,|$)/;  function getTransitionInfo (el, expectedType) {    var styles = window.getComputedStyle(el);    // JSDOM may return undefined for transition properties    var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');    var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');    var transitionTimeout = getTimeout(transitionDelays, transitionDurations);    var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');    var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');    var animationTimeout = getTimeout(animationDelays, animationDurations);    var type;    var timeout = 0;    var propCount = 0;    /* istanbul ignore if */    if (expectedType === TRANSITION) {      if (transitionTimeout > 0) {        type = TRANSITION;        timeout = transitionTimeout;        propCount = transitionDurations.length;      }    } else if (expectedType === ANIMATION) {      if (animationTimeout > 0) {        type = ANIMATION;        timeout = animationTimeout;        propCount = animationDurations.length;      }    } else {      timeout = Math.max(transitionTimeout, animationTimeout);      type = timeout > 0        ? transitionTimeout > animationTimeout          ? TRANSITION          : ANIMATION        : null;      propCount = type        ? type === TRANSITION          ? transitionDurations.length          : animationDurations.length        : 0;    }    var hasTransform =      type === TRANSITION &&      transformRE.test(styles[transitionProp + 'Property']);    return {      type: type,      timeout: timeout,      propCount: propCount,      hasTransform: hasTransform    }  }  function getTimeout (delays, durations) {    /* istanbul ignore next */    while (delays.length < durations.length) {      delays = delays.concat(delays);    }    return Math.max.apply(null, durations.map(function (d, i) {      return toMs(d) + toMs(delays[i])    }))  }  // Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers  // in a locale-dependent way, using a comma instead of a dot.  // If comma is not replaced with a dot, the input will be rounded down (i.e. acting  // as a floor function) causing unexpected behaviors  function toMs (s) {    return Number(s.slice(0, -1).replace(',', '.')) * 1000  }  /*  */  function enter (vnode, toggleDisplay) {    var el = vnode.elm;    // call leave callback now    if (isDef(el._leaveCb)) {      el._leaveCb.cancelled = true;      el._leaveCb();    }    var data = resolveTransition(vnode.data.transition);    if (isUndef(data)) {      return    }    /* istanbul ignore if */    if (isDef(el._enterCb) || el.nodeType !== 1) {      return    }    var css = data.css;    var type = data.type;    var enterClass = data.enterClass;    var enterToClass = data.enterToClass;    var enterActiveClass = data.enterActiveClass;    var appearClass = data.appearClass;    var appearToClass = data.appearToClass;    var appearActiveClass = data.appearActiveClass;    var beforeEnter = data.beforeEnter;    var enter = data.enter;    var afterEnter = data.afterEnter;    var enterCancelled = data.enterCancelled;    var beforeAppear = data.beforeAppear;    var appear = data.appear;    var afterAppear = data.afterAppear;    var appearCancelled = data.appearCancelled;    var duration = data.duration;    // activeInstance will always be the <transition> component managing this    // transition. One edge case to check is when the <transition> is placed    // as the root node of a child component. In that case we need to check    // <transition>'s parent for appear check.    var context = activeInstance;    var transitionNode = activeInstance.$vnode;    while (transitionNode && transitionNode.parent) {      context = transitionNode.context;      transitionNode = transitionNode.parent;    }    var isAppear = !context._isMounted || !vnode.isRootInsert;    if (isAppear && !appear && appear !== '') {      return    }    var startClass = isAppear && appearClass      ? appearClass      : enterClass;    var activeClass = isAppear && appearActiveClass      ? appearActiveClass      : enterActiveClass;    var toClass = isAppear && appearToClass      ? appearToClass      : enterToClass;    var beforeEnterHook = isAppear      ? (beforeAppear || beforeEnter)      : beforeEnter;    var enterHook = isAppear      ? (typeof appear === 'function' ? appear : enter)      : enter;    var afterEnterHook = isAppear      ? (afterAppear || afterEnter)      : afterEnter;    var enterCancelledHook = isAppear      ? (appearCancelled || enterCancelled)      : enterCancelled;    var explicitEnterDuration = toNumber(      isObject(duration)        ? duration.enter        : duration    );    if (explicitEnterDuration != null) {      checkDuration(explicitEnterDuration, 'enter', vnode);    }    var expectsCSS = css !== false && !isIE9;    var userWantsControl = getHookArgumentsLength(enterHook);    var cb = el._enterCb = once(function () {      if (expectsCSS) {        removeTransitionClass(el, toClass);        removeTransitionClass(el, activeClass);      }      if (cb.cancelled) {        if (expectsCSS) {          removeTransitionClass(el, startClass);        }        enterCancelledHook && enterCancelledHook(el);      } else {        afterEnterHook && afterEnterHook(el);      }      el._enterCb = null;    });    if (!vnode.data.show) {      // remove pending leave element on enter by injecting an insert hook      mergeVNodeHook(vnode, 'insert', function () {        var parent = el.parentNode;        var pendingNode = parent && parent._pending && parent._pending[vnode.key];        if (pendingNode &&          pendingNode.tag === vnode.tag &&          pendingNode.elm._leaveCb        ) {          pendingNode.elm._leaveCb();        }        enterHook && enterHook(el, cb);      });    }    // start enter transition    beforeEnterHook && beforeEnterHook(el);    if (expectsCSS) {      addTransitionClass(el, startClass);      addTransitionClass(el, activeClass);      nextFrame(function () {        removeTransitionClass(el, startClass);        if (!cb.cancelled) {          addTransitionClass(el, toClass);          if (!userWantsControl) {            if (isValidDuration(explicitEnterDuration)) {              setTimeout(cb, explicitEnterDuration);            } else {              whenTransitionEnds(el, type, cb);            }          }        }      });    }    if (vnode.data.show) {      toggleDisplay && toggleDisplay();      enterHook && enterHook(el, cb);    }    if (!expectsCSS && !userWantsControl) {      cb();    }  }  function leave (vnode, rm) {    var el = vnode.elm;    // call enter callback now    if (isDef(el._enterCb)) {      el._enterCb.cancelled = true;      el._enterCb();    }    var data = resolveTransition(vnode.data.transition);    if (isUndef(data) || el.nodeType !== 1) {      return rm()    }    /* istanbul ignore if */    if (isDef(el._leaveCb)) {      return    }    var css = data.css;    var type = data.type;    var leaveClass = data.leaveClass;    var leaveToClass = data.leaveToClass;    var leaveActiveClass = data.leaveActiveClass;    var beforeLeave = data.beforeLeave;    var leave = data.leave;    var afterLeave = data.afterLeave;    var leaveCancelled = data.leaveCancelled;    var delayLeave = data.delayLeave;    var duration = data.duration;    var expectsCSS = css !== false && !isIE9;    var userWantsControl = getHookArgumentsLength(leave);    var explicitLeaveDuration = toNumber(      isObject(duration)        ? duration.leave        : duration    );    if (isDef(explicitLeaveDuration)) {      checkDuration(explicitLeaveDuration, 'leave', vnode);    }    var cb = el._leaveCb = once(function () {      if (el.parentNode && el.parentNode._pending) {        el.parentNode._pending[vnode.key] = null;      }      if (expectsCSS) {        removeTransitionClass(el, leaveToClass);        removeTransitionClass(el, leaveActiveClass);      }      if (cb.cancelled) {        if (expectsCSS) {          removeTransitionClass(el, leaveClass);        }        leaveCancelled && leaveCancelled(el);      } else {        rm();        afterLeave && afterLeave(el);      }      el._leaveCb = null;    });    if (delayLeave) {      delayLeave(performLeave);    } else {      performLeave();    }    function performLeave () {      // the delayed leave may have already been cancelled      if (cb.cancelled) {        return      }      // record leaving element      if (!vnode.data.show && el.parentNode) {        (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;      }      beforeLeave && beforeLeave(el);      if (expectsCSS) {        addTransitionClass(el, leaveClass);        addTransitionClass(el, leaveActiveClass);        nextFrame(function () {          removeTransitionClass(el, leaveClass);          if (!cb.cancelled) {            addTransitionClass(el, leaveToClass);            if (!userWantsControl) {              if (isValidDuration(explicitLeaveDuration)) {                setTimeout(cb, explicitLeaveDuration);              } else {                whenTransitionEnds(el, type, cb);              }            }          }        });      }      leave && leave(el, cb);      if (!expectsCSS && !userWantsControl) {        cb();      }    }  }  // only used in dev mode  function checkDuration (val, name, vnode) {    if (typeof val !== 'number') {      warn(        "<transition> explicit " + name + " duration is not a valid number - " +        "got " + (JSON.stringify(val)) + ".",        vnode.context      );    } else if (isNaN(val)) {      warn(        "<transition> explicit " + name + " duration is NaN - " +        'the duration expression might be incorrect.',        vnode.context      );    }  }  function isValidDuration (val) {    return typeof val === 'number' && !isNaN(val)  }  /**   * Normalize a transition hook's argument length. The hook may be:   * - a merged hook (invoker) with the original in .fns   * - a wrapped component method (check ._length)   * - a plain function (.length)   */  function getHookArgumentsLength (fn) {    if (isUndef(fn)) {      return false    }    var invokerFns = fn.fns;    if (isDef(invokerFns)) {      // invoker      return getHookArgumentsLength(        Array.isArray(invokerFns)          ? invokerFns[0]          : invokerFns      )    } else {      return (fn._length || fn.length) > 1    }  }  function _enter (_, vnode) {    if (vnode.data.show !== true) {      enter(vnode);    }  }  var transition = inBrowser ? {    create: _enter,    activate: _enter,    remove: function remove$$1 (vnode, rm) {      /* istanbul ignore else */      if (vnode.data.show !== true) {        leave(vnode, rm);      } else {        rm();      }    }  } : {};  var platformModules = [    attrs,    klass,    events,    domProps,    style,    transition  ];  /*  */  // the directive module should be applied last, after all  // built-in modules have been applied.  var modules = platformModules.concat(baseModules);  var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });  /**   * Not type checking this file because flow doesn't like attaching   * properties to Elements.   */  /* istanbul ignore if */  if (isIE9) {    // http://www.matts411.com/post/internet-explorer-9-oninput/    document.addEventListener('selectionchange', function () {      var el = document.activeElement;      if (el && el.vmodel) {        trigger(el, 'input');      }    });  }  var directive = {    inserted: function inserted (el, binding, vnode, oldVnode) {      if (vnode.tag === 'select') {        // #6903        if (oldVnode.elm && !oldVnode.elm._vOptions) {          mergeVNodeHook(vnode, 'postpatch', function () {            directive.componentUpdated(el, binding, vnode);          });        } else {          setSelected(el, binding, vnode.context);        }        el._vOptions = [].map.call(el.options, getValue);      } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {        el._vModifiers = binding.modifiers;        if (!binding.modifiers.lazy) {          el.addEventListener('compositionstart', onCompositionStart);          el.addEventListener('compositionend', onCompositionEnd);          // Safari < 10.2 & UIWebView doesn't fire compositionend when          // switching focus before confirming composition choice          // this also fixes the issue where some browsers e.g. iOS Chrome          // fires "change" instead of "input" on autocomplete.          el.addEventListener('change', onCompositionEnd);          /* istanbul ignore if */          if (isIE9) {            el.vmodel = true;          }        }      }    },    componentUpdated: function componentUpdated (el, binding, vnode) {      if (vnode.tag === 'select') {        setSelected(el, binding, vnode.context);        // in case the options rendered by v-for have changed,        // it's possible that the value is out-of-sync with the rendered options.        // detect such cases and filter out values that no longer has a matching        // option in the DOM.        var prevOptions = el._vOptions;        var curOptions = el._vOptions = [].map.call(el.options, getValue);        if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {          // trigger change event if          // no matching option found for at least one value          var needReset = el.multiple            ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })            : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);          if (needReset) {            trigger(el, 'change');          }        }      }    }  };  function setSelected (el, binding, vm) {    actuallySetSelected(el, binding, vm);    /* istanbul ignore if */    if (isIE || isEdge) {      setTimeout(function () {        actuallySetSelected(el, binding, vm);      }, 0);    }  }  function actuallySetSelected (el, binding, vm) {    var value = binding.value;    var isMultiple = el.multiple;    if (isMultiple && !Array.isArray(value)) {      warn(        "<select multiple v-model=\"" + (binding.expression) + "\"> " +        "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),        vm      );      return    }    var selected, option;    for (var i = 0, l = el.options.length; i < l; i++) {      option = el.options[i];      if (isMultiple) {        selected = looseIndexOf(value, getValue(option)) > -1;        if (option.selected !== selected) {          option.selected = selected;        }      } else {        if (looseEqual(getValue(option), value)) {          if (el.selectedIndex !== i) {            el.selectedIndex = i;          }          return        }      }    }    if (!isMultiple) {      el.selectedIndex = -1;    }  }  function hasNoMatchingOption (value, options) {    return options.every(function (o) { return !looseEqual(o, value); })  }  function getValue (option) {    return '_value' in option      ? option._value      : option.value  }  function onCompositionStart (e) {    e.target.composing = true;  }  function onCompositionEnd (e) {    // prevent triggering an input event for no reason    if (!e.target.composing) { return }    e.target.composing = false;    trigger(e.target, 'input');  }  function trigger (el, type) {    var e = document.createEvent('HTMLEvents');    e.initEvent(type, true, true);    el.dispatchEvent(e);  }  /*  */  // recursively search for possible transition defined inside the component root  function locateNode (vnode) {    return vnode.componentInstance && (!vnode.data || !vnode.data.transition)      ? locateNode(vnode.componentInstance._vnode)      : vnode  }  var show = {    bind: function bind (el, ref, vnode) {      var value = ref.value;      vnode = locateNode(vnode);      var transition$$1 = vnode.data && vnode.data.transition;      var originalDisplay = el.__vOriginalDisplay =        el.style.display === 'none' ? '' : el.style.display;      if (value && transition$$1) {        vnode.data.show = true;        enter(vnode, function () {          el.style.display = originalDisplay;        });      } else {        el.style.display = value ? originalDisplay : 'none';      }    },    update: function update (el, ref, vnode) {      var value = ref.value;      var oldValue = ref.oldValue;      /* istanbul ignore if */      if (!value === !oldValue) { return }      vnode = locateNode(vnode);      var transition$$1 = vnode.data && vnode.data.transition;      if (transition$$1) {        vnode.data.show = true;        if (value) {          enter(vnode, function () {            el.style.display = el.__vOriginalDisplay;          });        } else {          leave(vnode, function () {            el.style.display = 'none';          });        }      } else {        el.style.display = value ? el.__vOriginalDisplay : 'none';      }    },    unbind: function unbind (      el,      binding,      vnode,      oldVnode,      isDestroy    ) {      if (!isDestroy) {        el.style.display = el.__vOriginalDisplay;      }    }  };  var platformDirectives = {    model: directive,    show: show  };  /*  */  var transitionProps = {    name: String,    appear: Boolean,    css: Boolean,    mode: String,    type: String,    enterClass: String,    leaveClass: String,    enterToClass: String,    leaveToClass: String,    enterActiveClass: String,    leaveActiveClass: String,    appearClass: String,    appearActiveClass: String,    appearToClass: String,    duration: [Number, String, Object]  };  // in case the child is also an abstract component, e.g. <keep-alive>  // we want to recursively retrieve the real component to be rendered  function getRealChild (vnode) {    var compOptions = vnode && vnode.componentOptions;    if (compOptions && compOptions.Ctor.options.abstract) {      return getRealChild(getFirstComponentChild(compOptions.children))    } else {      return vnode    }  }  function extractTransitionData (comp) {    var data = {};    var options = comp.$options;    // props    for (var key in options.propsData) {      data[key] = comp[key];    }    // events.    // extract listeners and pass them directly to the transition methods    var listeners = options._parentListeners;    for (var key$1 in listeners) {      data[camelize(key$1)] = listeners[key$1];    }    return data  }  function placeholder (h, rawChild) {    if (/\d-keep-alive$/.test(rawChild.tag)) {      return h('keep-alive', {        props: rawChild.componentOptions.propsData      })    }  }  function hasParentTransition (vnode) {    while ((vnode = vnode.parent)) {      if (vnode.data.transition) {        return true      }    }  }  function isSameChild (child, oldChild) {    return oldChild.key === child.key && oldChild.tag === child.tag  }  var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };  var isVShowDirective = function (d) { return d.name === 'show'; };  var Transition = {    name: 'transition',    props: transitionProps,    abstract: true,    render: function render (h) {      var this$1 = this;      var children = this.$slots.default;      if (!children) {        return      }      // filter out text nodes (possible whitespaces)      children = children.filter(isNotTextNode);      /* istanbul ignore if */      if (!children.length) {        return      }      // warn multiple elements      if (children.length > 1) {        warn(          '<transition> can only be used on a single element. Use ' +          '<transition-group> for lists.',          this.$parent        );      }      var mode = this.mode;      // warn invalid mode      if (mode && mode !== 'in-out' && mode !== 'out-in'      ) {        warn(          'invalid <transition> mode: ' + mode,          this.$parent        );      }      var rawChild = children[0];      // if this is a component root node and the component's      // parent container node also has transition, skip.      if (hasParentTransition(this.$vnode)) {        return rawChild      }      // apply transition data to child      // use getRealChild() to ignore abstract components e.g. keep-alive      var child = getRealChild(rawChild);      /* istanbul ignore if */      if (!child) {        return rawChild      }      if (this._leaving) {        return placeholder(h, rawChild)      }      // ensure a key that is unique to the vnode type and to this transition      // component instance. This key will be used to remove pending leaving nodes      // during entering.      var id = "__transition-" + (this._uid) + "-";      child.key = child.key == null        ? child.isComment          ? id + 'comment'          : id + child.tag        : isPrimitive(child.key)          ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)          : child.key;      var data = (child.data || (child.data = {})).transition = extractTransitionData(this);      var oldRawChild = this._vnode;      var oldChild = getRealChild(oldRawChild);      // mark v-show      // so that the transition module can hand over the control to the directive      if (child.data.directives && child.data.directives.some(isVShowDirective)) {        child.data.show = true;      }      if (        oldChild &&        oldChild.data &&        !isSameChild(child, oldChild) &&        !isAsyncPlaceholder(oldChild) &&        // #6687 component root is a comment node        !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)      ) {        // replace old child transition data with fresh one        // important for dynamic transitions!        var oldData = oldChild.data.transition = extend({}, data);        // handle transition mode        if (mode === 'out-in') {          // return placeholder node and queue update when leave finishes          this._leaving = true;          mergeVNodeHook(oldData, 'afterLeave', function () {            this$1._leaving = false;            this$1.$forceUpdate();          });          return placeholder(h, rawChild)        } else if (mode === 'in-out') {          if (isAsyncPlaceholder(child)) {            return oldRawChild          }          var delayedLeave;          var performLeave = function () { delayedLeave(); };          mergeVNodeHook(data, 'afterEnter', performLeave);          mergeVNodeHook(data, 'enterCancelled', performLeave);          mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });        }      }      return rawChild    }  };  /*  */  var props = extend({    tag: String,    moveClass: String  }, transitionProps);  delete props.mode;  var TransitionGroup = {    props: props,    beforeMount: function beforeMount () {      var this$1 = this;      var update = this._update;      this._update = function (vnode, hydrating) {        var restoreActiveInstance = setActiveInstance(this$1);        // force removing pass        this$1.__patch__(          this$1._vnode,          this$1.kept,          false, // hydrating          true // removeOnly (!important, avoids unnecessary moves)        );        this$1._vnode = this$1.kept;        restoreActiveInstance();        update.call(this$1, vnode, hydrating);      };    },    render: function render (h) {      var tag = this.tag || this.$vnode.data.tag || 'span';      var map = Object.create(null);      var prevChildren = this.prevChildren = this.children;      var rawChildren = this.$slots.default || [];      var children = this.children = [];      var transitionData = extractTransitionData(this);      for (var i = 0; i < rawChildren.length; i++) {        var c = rawChildren[i];        if (c.tag) {          if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {            children.push(c);            map[c.key] = c            ;(c.data || (c.data = {})).transition = transitionData;          } else {            var opts = c.componentOptions;            var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;            warn(("<transition-group> children must be keyed: <" + name + ">"));          }        }      }      if (prevChildren) {        var kept = [];        var removed = [];        for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {          var c$1 = prevChildren[i$1];          c$1.data.transition = transitionData;          c$1.data.pos = c$1.elm.getBoundingClientRect();          if (map[c$1.key]) {            kept.push(c$1);          } else {            removed.push(c$1);          }        }        this.kept = h(tag, null, kept);        this.removed = removed;      }      return h(tag, null, children)    },    updated: function updated () {      var children = this.prevChildren;      var moveClass = this.moveClass || ((this.name || 'v') + '-move');      if (!children.length || !this.hasMove(children[0].elm, moveClass)) {        return      }      // we divide the work into three loops to avoid mixing DOM reads and writes      // in each iteration - which helps prevent layout thrashing.      children.forEach(callPendingCbs);      children.forEach(recordPosition);      children.forEach(applyTranslation);      // force reflow to put everything in position      // assign to this to avoid being removed in tree-shaking      // $flow-disable-line      this._reflow = document.body.offsetHeight;      children.forEach(function (c) {        if (c.data.moved) {          var el = c.elm;          var s = el.style;          addTransitionClass(el, moveClass);          s.transform = s.WebkitTransform = s.transitionDuration = '';          el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {            if (e && e.target !== el) {              return            }            if (!e || /transform$/.test(e.propertyName)) {              el.removeEventListener(transitionEndEvent, cb);              el._moveCb = null;              removeTransitionClass(el, moveClass);            }          });        }      });    },    methods: {      hasMove: function hasMove (el, moveClass) {        /* istanbul ignore if */        if (!hasTransition) {          return false        }        /* istanbul ignore if */        if (this._hasMove) {          return this._hasMove        }        // Detect whether an element with the move class applied has        // CSS transitions. Since the element may be inside an entering        // transition at this very moment, we make a clone of it and remove        // all other transition classes applied to ensure only the move class        // is applied.        var clone = el.cloneNode();        if (el._transitionClasses) {          el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });        }        addClass(clone, moveClass);        clone.style.display = 'none';        this.$el.appendChild(clone);        var info = getTransitionInfo(clone);        this.$el.removeChild(clone);        return (this._hasMove = info.hasTransform)      }    }  };  function callPendingCbs (c) {    /* istanbul ignore if */    if (c.elm._moveCb) {      c.elm._moveCb();    }    /* istanbul ignore if */    if (c.elm._enterCb) {      c.elm._enterCb();    }  }  function recordPosition (c) {    c.data.newPos = c.elm.getBoundingClientRect();  }  function applyTranslation (c) {    var oldPos = c.data.pos;    var newPos = c.data.newPos;    var dx = oldPos.left - newPos.left;    var dy = oldPos.top - newPos.top;    if (dx || dy) {      c.data.moved = true;      var s = c.elm.style;      s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";      s.transitionDuration = '0s';    }  }  var platformComponents = {    Transition: Transition,    TransitionGroup: TransitionGroup  };  /*  */  // install platform specific utils  Vue.config.mustUseProp = mustUseProp;  Vue.config.isReservedTag = isReservedTag;  Vue.config.isReservedAttr = isReservedAttr;  Vue.config.getTagNamespace = getTagNamespace;  Vue.config.isUnknownElement = isUnknownElement;  // install platform runtime directives & components  extend(Vue.options.directives, platformDirectives);  extend(Vue.options.components, platformComponents);  // install platform patch function  Vue.prototype.__patch__ = inBrowser ? patch : noop;  // public mount method  Vue.prototype.$mount = function (    el,    hydrating  ) {    el = el && inBrowser ? query(el) : undefined;    return mountComponent(this, el, hydrating)  };  // devtools global hook  /* istanbul ignore next */  if (inBrowser) {    setTimeout(function () {      if (config.devtools) {        if (devtools) {          devtools.emit('init', Vue);        } else {          console[console.info ? 'info' : 'log'](            'Download the Vue Devtools extension for a better development experience:\n' +            'https://github.com/vuejs/vue-devtools'          );        }      }      if (config.productionTip !== false &&        typeof console !== 'undefined'      ) {        console[console.info ? 'info' : 'log'](          "You are running Vue in development mode.\n" +          "Make sure to turn on production mode when deploying for production.\n" +          "See more tips at https://vuejs.org/guide/deployment.html"        );      }    }, 0);  }  /*  */  var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;  var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;  var buildRegex = cached(function (delimiters) {    var open = delimiters[0].replace(regexEscapeRE, '\\$&');    var close = delimiters[1].replace(regexEscapeRE, '\\$&');    return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')  });  function parseText (    text,    delimiters  ) {    var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;    if (!tagRE.test(text)) {      return    }    var tokens = [];    var rawTokens = [];    var lastIndex = tagRE.lastIndex = 0;    var match, index, tokenValue;    while ((match = tagRE.exec(text))) {      index = match.index;      // push text token      if (index > lastIndex) {        rawTokens.push(tokenValue = text.slice(lastIndex, index));        tokens.push(JSON.stringify(tokenValue));      }      // tag token      var exp = parseFilters(match[1].trim());      tokens.push(("_s(" + exp + ")"));      rawTokens.push({ '@binding': exp });      lastIndex = index + match[0].length;    }    if (lastIndex < text.length) {      rawTokens.push(tokenValue = text.slice(lastIndex));      tokens.push(JSON.stringify(tokenValue));    }    return {      expression: tokens.join('+'),      tokens: rawTokens    }  }  /*  */  function transformNode (el, options) {    var warn = options.warn || baseWarn;    var staticClass = getAndRemoveAttr(el, 'class');    if (staticClass) {      var res = parseText(staticClass, options.delimiters);      if (res) {        warn(          "class=\"" + staticClass + "\": " +          'Interpolation inside attributes has been removed. ' +          'Use v-bind or the colon shorthand instead. For example, ' +          'instead of <div class="">, use <div :class="val">.',          el.rawAttrsMap['class']        );      }    }    if (staticClass) {      el.staticClass = JSON.stringify(staticClass);    }    var classBinding = getBindingAttr(el, 'class', false /* getStatic */);    if (classBinding) {      el.classBinding = classBinding;    }  }  function genData (el) {    var data = '';    if (el.staticClass) {      data += "staticClass:" + (el.staticClass) + ",";    }    if (el.classBinding) {      data += "class:" + (el.classBinding) + ",";    }    return data  }  var klass$1 = {    staticKeys: ['staticClass'],    transformNode: transformNode,    genData: genData  };  /*  */  function transformNode$1 (el, options) {    var warn = options.warn || baseWarn;    var staticStyle = getAndRemoveAttr(el, 'style');    if (staticStyle) {      /* istanbul ignore if */      {        var res = parseText(staticStyle, options.delimiters);        if (res) {          warn(            "style=\"" + staticStyle + "\": " +            'Interpolation inside attributes has been removed. ' +            'Use v-bind or the colon shorthand instead. For example, ' +            'instead of <div style="">, use <div :style="val">.',            el.rawAttrsMap['style']          );        }      }      el.staticStyle = JSON.stringify(parseStyleText(staticStyle));    }    var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);    if (styleBinding) {      el.styleBinding = styleBinding;    }  }  function genData$1 (el) {    var data = '';    if (el.staticStyle) {      data += "staticStyle:" + (el.staticStyle) + ",";    }    if (el.styleBinding) {      data += "style:(" + (el.styleBinding) + "),";    }    return data  }  var style$1 = {    staticKeys: ['staticStyle'],    transformNode: transformNode$1,    genData: genData$1  };  /*  */  var decoder;  var he = {    decode: function decode (html) {      decoder = decoder || document.createElement('div');      decoder.innerHTML = html;      return decoder.textContent    }  };  /*  */  var isUnaryTag = makeMap(    'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +    'link,meta,param,source,track,wbr'  );  // Elements that you can, intentionally, leave open  // (and which close themselves)  var canBeLeftOpenTag = makeMap(    'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'  );  // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3  // Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content  var isNonPhrasingTag = makeMap(    'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +    'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +    'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +    'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +    'title,tr,track'  );  /**   * Not type-checking this file because it's mostly vendor code.   */  // Regular Expressions for parsing tags and attributes  var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;  var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;  var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + (unicodeRegExp.source) + "]*";  var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";  var startTagOpen = new RegExp(("^<" + qnameCapture));  var startTagClose = /^\s*(\/?)>/;  var endTag = new RegExp(("^<\\/" + qnameCapture + "[^>]*>"));  var doctype = /^<!DOCTYPE [^>]+>/i;  // #7298: escape - to avoid being passed as HTML comment when inlined in page  var comment = /^<!\--/;  var conditionalComment = /^<!\[/;  // Special Elements (can contain anything)  var isPlainTextElement = makeMap('script,style,textarea', true);  var reCache = {};  var decodingMap = {    '&lt;': '<',    '&gt;': '>',    '&quot;': '"',    '&amp;': '&',    '&#10;': '\n',    '&#9;': '\t',    '&#39;': "'"  };  var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;  var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;  // #5992  var isIgnoreNewlineTag = makeMap('pre,textarea', true);  var shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\n'; };  function decodeAttr (value, shouldDecodeNewlines) {    var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;    return value.replace(re, function (match) { return decodingMap[match]; })  }  function parseHTML (html, options) {    var stack = [];    var expectHTML = options.expectHTML;    var isUnaryTag$$1 = options.isUnaryTag || no;    var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;    var index = 0;    var last, lastTag;    while (html) {      last = html;      // Make sure we're not in a plaintext content element like script/style      if (!lastTag || !isPlainTextElement(lastTag)) {        var textEnd = html.indexOf('<');        if (textEnd === 0) {          // Comment:          if (comment.test(html)) {            var commentEnd = html.indexOf('-->');            if (commentEnd >= 0) {              if (options.shouldKeepComment) {                options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);              }              advance(commentEnd + 3);              continue            }          }          // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment          if (conditionalComment.test(html)) {            var conditionalEnd = html.indexOf(']>');            if (conditionalEnd >= 0) {              advance(conditionalEnd + 2);              continue            }          }          // Doctype:          var doctypeMatch = html.match(doctype);          if (doctypeMatch) {            advance(doctypeMatch[0].length);            continue          }          // End tag:          var endTagMatch = html.match(endTag);          if (endTagMatch) {            var curIndex = index;            advance(endTagMatch[0].length);            parseEndTag(endTagMatch[1], curIndex, index);            continue          }          // Start tag:          var startTagMatch = parseStartTag();          if (startTagMatch) {            handleStartTag(startTagMatch);            if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {              advance(1);            }            continue          }        }        var text = (void 0), rest = (void 0), next = (void 0);        if (textEnd >= 0) {          rest = html.slice(textEnd);          while (            !endTag.test(rest) &&            !startTagOpen.test(rest) &&            !comment.test(rest) &&            !conditionalComment.test(rest)          ) {            // < in plain text, be forgiving and treat it as text            next = rest.indexOf('<', 1);            if (next < 0) { break }            textEnd += next;            rest = html.slice(textEnd);          }          text = html.substring(0, textEnd);        }        if (textEnd < 0) {          text = html;        }        if (text) {          advance(text.length);        }        if (options.chars && text) {          options.chars(text, index - text.length, index);        }      } else {        var endTagLength = 0;        var stackedTag = lastTag.toLowerCase();        var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));        var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {          endTagLength = endTag.length;          if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {            text = text              .replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298              .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');          }          if (shouldIgnoreFirstNewline(stackedTag, text)) {            text = text.slice(1);          }          if (options.chars) {            options.chars(text);          }          return ''        });        index += html.length - rest$1.length;        html = rest$1;        parseEndTag(stackedTag, index - endTagLength, index);      }      if (html === last) {        options.chars && options.chars(html);        if (!stack.length && options.warn) {          options.warn(("Mal-formatted tag at end of template: \"" + html + "\""), { start: index + html.length });        }        break      }    }    // Clean up any remaining tags    parseEndTag();    function advance (n) {      index += n;      html = html.substring(n);    }    function parseStartTag () {      var start = html.match(startTagOpen);      if (start) {        var match = {          tagName: start[1],          attrs: [],          start: index        };        advance(start[0].length);        var end, attr;        while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {          attr.start = index;          advance(attr[0].length);          attr.end = index;          match.attrs.push(attr);        }        if (end) {          match.unarySlash = end[1];          advance(end[0].length);          match.end = index;          return match        }      }    }    function handleStartTag (match) {      var tagName = match.tagName;      var unarySlash = match.unarySlash;      if (expectHTML) {        if (lastTag === 'p' && isNonPhrasingTag(tagName)) {          parseEndTag(lastTag);        }        if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {          parseEndTag(tagName);        }      }      var unary = isUnaryTag$$1(tagName) || !!unarySlash;      var l = match.attrs.length;      var attrs = new Array(l);      for (var i = 0; i < l; i++) {        var args = match.attrs[i];        var value = args[3] || args[4] || args[5] || '';        var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'          ? options.shouldDecodeNewlinesForHref          : options.shouldDecodeNewlines;        attrs[i] = {          name: args[1],          value: decodeAttr(value, shouldDecodeNewlines)        };        if (options.outputSourceRange) {          attrs[i].start = args.start + args[0].match(/^\s*/).length;          attrs[i].end = args.end;        }      }      if (!unary) {        stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });        lastTag = tagName;      }      if (options.start) {        options.start(tagName, attrs, unary, match.start, match.end);      }    }    function parseEndTag (tagName, start, end) {      var pos, lowerCasedTagName;      if (start == null) { start = index; }      if (end == null) { end = index; }      // Find the closest opened tag of the same type      if (tagName) {        lowerCasedTagName = tagName.toLowerCase();        for (pos = stack.length - 1; pos >= 0; pos--) {          if (stack[pos].lowerCasedTag === lowerCasedTagName) {            break          }        }      } else {        // If no tag name is provided, clean shop        pos = 0;      }      if (pos >= 0) {        // Close all the open elements, up the stack        for (var i = stack.length - 1; i >= pos; i--) {          if (i > pos || !tagName &&            options.warn          ) {            options.warn(              ("tag <" + (stack[i].tag) + "> has no matching end tag."),              { start: stack[i].start, end: stack[i].end }            );          }          if (options.end) {            options.end(stack[i].tag, start, end);          }        }        // Remove the open elements from the stack        stack.length = pos;        lastTag = pos && stack[pos - 1].tag;      } else if (lowerCasedTagName === 'br') {        if (options.start) {          options.start(tagName, [], true, start, end);        }      } else if (lowerCasedTagName === 'p') {        if (options.start) {          options.start(tagName, [], false, start, end);        }        if (options.end) {          options.end(tagName, start, end);        }      }    }  }  /*  */  var onRE = /^@|^v-on:/;  var dirRE = /^v-|^@|^:|^#/;  var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;  var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;  var stripParensRE = /^\(|\)$/g;  var dynamicArgRE = /^\[.*\]$/;  var argRE = /:(.*)$/;  var bindRE = /^:|^\.|^v-bind:/;  var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;  var slotRE = /^v-slot(:|$)|^#/;  var lineBreakRE = /[\r\n]/;  var whitespaceRE$1 = /\s+/g;  var invalidAttributeRE = /[\s"'<>\/=]/;  var decodeHTMLCached = cached(he.decode);  var emptySlotScopeToken = "_empty_";  // configurable state  var warn$2;  var delimiters;  var transforms;  var preTransforms;  var postTransforms;  var platformIsPreTag;  var platformMustUseProp;  var platformGetTagNamespace;  var maybeComponent;  function createASTElement (    tag,    attrs,    parent  ) {    return {      type: 1,      tag: tag,      attrsList: attrs,      attrsMap: makeAttrsMap(attrs),      rawAttrsMap: {},      parent: parent,      children: []    }  }  /**   * Convert HTML string to AST.   */  function parse (    template,    options  ) {    warn$2 = options.warn || baseWarn;    platformIsPreTag = options.isPreTag || no;    platformMustUseProp = options.mustUseProp || no;    platformGetTagNamespace = options.getTagNamespace || no;    var isReservedTag = options.isReservedTag || no;    maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };    transforms = pluckModuleFunction(options.modules, 'transformNode');    preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');    postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');    delimiters = options.delimiters;    var stack = [];    var preserveWhitespace = options.preserveWhitespace !== false;    var whitespaceOption = options.whitespace;    var root;    var currentParent;    var inVPre = false;    var inPre = false;    var warned = false;    function warnOnce (msg, range) {      if (!warned) {        warned = true;        warn$2(msg, range);      }    }    function closeElement (element) {      trimEndingWhitespace(element);      if (!inVPre && !element.processed) {        element = processElement(element, options);      }      // tree management      if (!stack.length && element !== root) {        // allow root elements with v-if, v-else-if and v-else        if (root.if && (element.elseif || element.else)) {          {            checkRootConstraints(element);          }          addIfCondition(root, {            exp: element.elseif,            block: element          });        } else {          warnOnce(            "Component template should contain exactly one root element. " +            "If you are using v-if on multiple elements, " +            "use v-else-if to chain them instead.",            { start: element.start }          );        }      }      if (currentParent && !element.forbidden) {        if (element.elseif || element.else) {          processIfConditions(element, currentParent);        } else {          if (element.slotScope) {            // scoped slot            // keep it in the children list so that v-else(-if) conditions can            // find it as the prev node.            var name = element.slotTarget || '"default"'            ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;          }          currentParent.children.push(element);          element.parent = currentParent;        }      }      // final children cleanup      // filter out scoped slots      element.children = element.children.filter(function (c) { return !(c).slotScope; });      // remove trailing whitespace node again      trimEndingWhitespace(element);      // check pre state      if (element.pre) {        inVPre = false;      }      if (platformIsPreTag(element.tag)) {        inPre = false;      }      // apply post-transforms      for (var i = 0; i < postTransforms.length; i++) {        postTransforms[i](element, options);      }    }    function trimEndingWhitespace (el) {      // remove trailing whitespace node      if (!inPre) {        var lastNode;        while (          (lastNode = el.children[el.children.length - 1]) &&          lastNode.type === 3 &&          lastNode.text === ' '        ) {          el.children.pop();        }      }    }    function checkRootConstraints (el) {      if (el.tag === 'slot' || el.tag === 'template') {        warnOnce(          "Cannot use <" + (el.tag) + "> as component root element because it may " +          'contain multiple nodes.',          { start: el.start }        );      }      if (el.attrsMap.hasOwnProperty('v-for')) {        warnOnce(          'Cannot use v-for on stateful component root element because ' +          'it renders multiple elements.',          el.rawAttrsMap['v-for']        );      }    }    parseHTML(template, {      warn: warn$2,      expectHTML: options.expectHTML,      isUnaryTag: options.isUnaryTag,      canBeLeftOpenTag: options.canBeLeftOpenTag,      shouldDecodeNewlines: options.shouldDecodeNewlines,      shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,      shouldKeepComment: options.comments,      outputSourceRange: options.outputSourceRange,      start: function start (tag, attrs, unary, start$1, end) {        // check namespace.        // inherit parent ns if there is one        var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);        // handle IE svg bug        /* istanbul ignore if */        if (isIE && ns === 'svg') {          attrs = guardIESVGBug(attrs);        }        var element = createASTElement(tag, attrs, currentParent);        if (ns) {          element.ns = ns;        }        {          if (options.outputSourceRange) {            element.start = start$1;            element.end = end;            element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {              cumulated[attr.name] = attr;              return cumulated            }, {});          }          attrs.forEach(function (attr) {            if (invalidAttributeRE.test(attr.name)) {              warn$2(                "Invalid dynamic argument expression: attribute names cannot contain " +                "spaces, quotes, <, >, / or =.",                {                  start: attr.start + attr.name.indexOf("["),                  end: attr.start + attr.name.length                }              );            }          });        }        if (isForbiddenTag(element) && !isServerRendering()) {          element.forbidden = true;          warn$2(            'Templates should only be responsible for mapping the state to the ' +            'UI. Avoid placing tags with side-effects in your templates, such as ' +            "<" + tag + ">" + ', as they will not be parsed.',            { start: element.start }          );        }        // apply pre-transforms        for (var i = 0; i < preTransforms.length; i++) {          element = preTransforms[i](element, options) || element;        }        if (!inVPre) {          processPre(element);          if (element.pre) {            inVPre = true;          }        }        if (platformIsPreTag(element.tag)) {          inPre = true;        }        if (inVPre) {          processRawAttrs(element);        } else if (!element.processed) {          // structural directives          processFor(element);          processIf(element);          processOnce(element);        }        if (!root) {          root = element;          {            checkRootConstraints(root);          }        }        if (!unary) {          currentParent = element;          stack.push(element);        } else {          closeElement(element);        }      },      end: function end (tag, start, end$1) {        var element = stack[stack.length - 1];        // pop stack        stack.length -= 1;        currentParent = stack[stack.length - 1];        if (options.outputSourceRange) {          element.end = end$1;        }        closeElement(element);      },      chars: function chars (text, start, end) {        if (!currentParent) {          {            if (text === template) {              warnOnce(                'Component template requires a root element, rather than just text.',                { start: start }              );            } else if ((text = text.trim())) {              warnOnce(                ("text \"" + text + "\" outside root element will be ignored."),                { start: start }              );            }          }          return        }        // IE textarea placeholder bug        /* istanbul ignore if */        if (isIE &&          currentParent.tag === 'textarea' &&          currentParent.attrsMap.placeholder === text        ) {          return        }        var children = currentParent.children;        if (inPre || text.trim()) {          text = isTextTag(currentParent) ? text : decodeHTMLCached(text);        } else if (!children.length) {          // remove the whitespace-only node right after an opening tag          text = '';        } else if (whitespaceOption) {          if (whitespaceOption === 'condense') {            // in condense mode, remove the whitespace node if it contains            // line break, otherwise condense to a single space            text = lineBreakRE.test(text) ? '' : ' ';          } else {            text = ' ';          }        } else {          text = preserveWhitespace ? ' ' : '';        }        if (text) {          if (!inPre && whitespaceOption === 'condense') {            // condense consecutive whitespaces into single space            text = text.replace(whitespaceRE$1, ' ');          }          var res;          var child;          if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {            child = {              type: 2,              expression: res.expression,              tokens: res.tokens,              text: text            };          } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {            child = {              type: 3,              text: text            };          }          if (child) {            if (options.outputSourceRange) {              child.start = start;              child.end = end;            }            children.push(child);          }        }      },      comment: function comment (text, start, end) {        // adding anything as a sibling to the root node is forbidden        // comments should still be allowed, but ignored        if (currentParent) {          var child = {            type: 3,            text: text,            isComment: true          };          if (options.outputSourceRange) {            child.start = start;            child.end = end;          }          currentParent.children.push(child);        }      }    });    return root  }  function processPre (el) {    if (getAndRemoveAttr(el, 'v-pre') != null) {      el.pre = true;    }  }  function processRawAttrs (el) {    var list = el.attrsList;    var len = list.length;    if (len) {      var attrs = el.attrs = new Array(len);      for (var i = 0; i < len; i++) {        attrs[i] = {          name: list[i].name,          value: JSON.stringify(list[i].value)        };        if (list[i].start != null) {          attrs[i].start = list[i].start;          attrs[i].end = list[i].end;        }      }    } else if (!el.pre) {      // non root node in pre blocks with no attributes      el.plain = true;    }  }  function processElement (    element,    options  ) {    processKey(element);    // determine whether this is a plain element after    // removing structural attributes    element.plain = (      !element.key &&      !element.scopedSlots &&      !element.attrsList.length    );    processRef(element);    processSlotContent(element);    processSlotOutlet(element);    processComponent(element);    for (var i = 0; i < transforms.length; i++) {      element = transforms[i](element, options) || element;    }    processAttrs(element);    return element  }  function processKey (el) {    var exp = getBindingAttr(el, 'key');    if (exp) {      {        if (el.tag === 'template') {          warn$2(            "<template> cannot be keyed. Place the key on real elements instead.",            getRawBindingAttr(el, 'key')          );        }        if (el.for) {          var iterator = el.iterator2 || el.iterator1;          var parent = el.parent;          if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {            warn$2(              "Do not use v-for index as key on <transition-group> children, " +              "this is the same as not using keys.",              getRawBindingAttr(el, 'key'),              true /* tip */            );          }        }      }      el.key = exp;    }  }  function processRef (el) {    var ref = getBindingAttr(el, 'ref');    if (ref) {      el.ref = ref;      el.refInFor = checkInFor(el);    }  }  function processFor (el) {    var exp;    if ((exp = getAndRemoveAttr(el, 'v-for'))) {      var res = parseFor(exp);      if (res) {        extend(el, res);      } else {        warn$2(          ("Invalid v-for expression: " + exp),          el.rawAttrsMap['v-for']        );      }    }  }  function parseFor (exp) {    var inMatch = exp.match(forAliasRE);    if (!inMatch) { return }    var res = {};    res.for = inMatch[2].trim();    var alias = inMatch[1].trim().replace(stripParensRE, '');    var iteratorMatch = alias.match(forIteratorRE);    if (iteratorMatch) {      res.alias = alias.replace(forIteratorRE, '').trim();      res.iterator1 = iteratorMatch[1].trim();      if (iteratorMatch[2]) {        res.iterator2 = iteratorMatch[2].trim();      }    } else {      res.alias = alias;    }    return res  }  function processIf (el) {    var exp = getAndRemoveAttr(el, 'v-if');    if (exp) {      el.if = exp;      addIfCondition(el, {        exp: exp,        block: el      });    } else {      if (getAndRemoveAttr(el, 'v-else') != null) {        el.else = true;      }      var elseif = getAndRemoveAttr(el, 'v-else-if');      if (elseif) {        el.elseif = elseif;      }    }  }  function processIfConditions (el, parent) {    var prev = findPrevElement(parent.children);    if (prev && prev.if) {      addIfCondition(prev, {        exp: el.elseif,        block: el      });    } else {      warn$2(        "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +        "used on element <" + (el.tag) + "> without corresponding v-if.",        el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']      );    }  }  function findPrevElement (children) {    var i = children.length;    while (i--) {      if (children[i].type === 1) {        return children[i]      } else {        if (children[i].text !== ' ') {          warn$2(            "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +            "will be ignored.",            children[i]          );        }        children.pop();      }    }  }  function addIfCondition (el, condition) {    if (!el.ifConditions) {      el.ifConditions = [];    }    el.ifConditions.push(condition);  }  function processOnce (el) {    var once$$1 = getAndRemoveAttr(el, 'v-once');    if (once$$1 != null) {      el.once = true;    }  }  // handle content being passed to a component as slot,  // e.g. <template slot="xxx">, <div slot-scope="xxx">  function processSlotContent (el) {    var slotScope;    if (el.tag === 'template') {      slotScope = getAndRemoveAttr(el, 'scope');      /* istanbul ignore if */      if (slotScope) {        warn$2(          "the \"scope\" attribute for scoped slots have been deprecated and " +          "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " +          "can also be used on plain elements in addition to <template> to " +          "denote scoped slots.",          el.rawAttrsMap['scope'],          true        );      }      el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');    } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {      /* istanbul ignore if */      if (el.attrsMap['v-for']) {        warn$2(          "Ambiguous combined usage of slot-scope and v-for on <" + (el.tag) + "> " +          "(v-for takes higher priority). Use a wrapper <template> for the " +          "scoped slot to make it clearer.",          el.rawAttrsMap['slot-scope'],          true        );      }      el.slotScope = slotScope;    }    // slot="xxx"    var slotTarget = getBindingAttr(el, 'slot');    if (slotTarget) {      el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;      el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);      // preserve slot as an attribute for native shadow DOM compat      // only for non-scoped slots.      if (el.tag !== 'template' && !el.slotScope) {        addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));      }    }    // 2.6 v-slot syntax    {      if (el.tag === 'template') {        // v-slot on <template>        var slotBinding = getAndRemoveAttrByRegex(el, slotRE);        if (slotBinding) {          {            if (el.slotTarget || el.slotScope) {              warn$2(                "Unexpected mixed usage of different slot syntaxes.",                el              );            }            if (el.parent && !maybeComponent(el.parent)) {              warn$2(                "<template v-slot> can only appear at the root level inside " +                "the receiving component",                el              );            }          }          var ref = getSlotName(slotBinding);          var name = ref.name;          var dynamic = ref.dynamic;          el.slotTarget = name;          el.slotTargetDynamic = dynamic;          el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf        }      } else {        // v-slot on component, denotes default slot        var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);        if (slotBinding$1) {          {            if (!maybeComponent(el)) {              warn$2(                "v-slot can only be used on components or <template>.",                slotBinding$1              );            }            if (el.slotScope || el.slotTarget) {              warn$2(                "Unexpected mixed usage of different slot syntaxes.",                el              );            }            if (el.scopedSlots) {              warn$2(                "To avoid scope ambiguity, the default slot should also use " +                "<template> syntax when there are other named slots.",                slotBinding$1              );            }          }          // add the component's children to its default slot          var slots = el.scopedSlots || (el.scopedSlots = {});          var ref$1 = getSlotName(slotBinding$1);          var name$1 = ref$1.name;          var dynamic$1 = ref$1.dynamic;          var slotContainer = slots[name$1] = createASTElement('template', [], el);          slotContainer.slotTarget = name$1;          slotContainer.slotTargetDynamic = dynamic$1;          slotContainer.children = el.children.filter(function (c) {            if (!c.slotScope) {              c.parent = slotContainer;              return true            }          });          slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;          // remove children as they are returned from scopedSlots now          el.children = [];          // mark el non-plain so data gets generated          el.plain = false;        }      }    }  }  function getSlotName (binding) {    var name = binding.name.replace(slotRE, '');    if (!name) {      if (binding.name[0] !== '#') {        name = 'default';      } else {        warn$2(          "v-slot shorthand syntax requires a slot name.",          binding        );      }    }    return dynamicArgRE.test(name)      // dynamic [name]      ? { name: name.slice(1, -1), dynamic: true }      // static name      : { name: ("\"" + name + "\""), dynamic: false }  }  // handle <slot/> outlets  function processSlotOutlet (el) {    if (el.tag === 'slot') {      el.slotName = getBindingAttr(el, 'name');      if (el.key) {        warn$2(          "`key` does not work on <slot> because slots are abstract outlets " +          "and can possibly expand into multiple elements. " +          "Use the key on a wrapping element instead.",          getRawBindingAttr(el, 'key')        );      }    }  }  function processComponent (el) {    var binding;    if ((binding = getBindingAttr(el, 'is'))) {      el.component = binding;    }    if (getAndRemoveAttr(el, 'inline-template') != null) {      el.inlineTemplate = true;    }  }  function processAttrs (el) {    var list = el.attrsList;    var i, l, name, rawName, value, modifiers, syncGen, isDynamic;    for (i = 0, l = list.length; i < l; i++) {      name = rawName = list[i].name;      value = list[i].value;      if (dirRE.test(name)) {        // mark element as dynamic        el.hasBindings = true;        // modifiers        modifiers = parseModifiers(name.replace(dirRE, ''));        // support .foo shorthand syntax for the .prop modifier        if (modifiers) {          name = name.replace(modifierRE, '');        }        if (bindRE.test(name)) { // v-bind          name = name.replace(bindRE, '');          value = parseFilters(value);          isDynamic = dynamicArgRE.test(name);          if (isDynamic) {            name = name.slice(1, -1);          }          if (            value.trim().length === 0          ) {            warn$2(              ("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"")            );          }          if (modifiers) {            if (modifiers.prop && !isDynamic) {              name = camelize(name);              if (name === 'innerHtml') { name = 'innerHTML'; }            }            if (modifiers.camel && !isDynamic) {              name = camelize(name);            }            if (modifiers.sync) {              syncGen = genAssignmentCode(value, "$event");              if (!isDynamic) {                addHandler(                  el,                  ("update:" + (camelize(name))),                  syncGen,                  null,                  false,                  warn$2,                  list[i]                );                if (hyphenate(name) !== camelize(name)) {                  addHandler(                    el,                    ("update:" + (hyphenate(name))),                    syncGen,                    null,                    false,                    warn$2,                    list[i]                  );                }              } else {                // handler w/ dynamic event name                addHandler(                  el,                  ("\"update:\"+(" + name + ")"),                  syncGen,                  null,                  false,                  warn$2,                  list[i],                  true // dynamic                );              }            }          }          if ((modifiers && modifiers.prop) || (            !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)          )) {            addProp(el, name, value, list[i], isDynamic);          } else {            addAttr(el, name, value, list[i], isDynamic);          }        } else if (onRE.test(name)) { // v-on          name = name.replace(onRE, '');          isDynamic = dynamicArgRE.test(name);          if (isDynamic) {            name = name.slice(1, -1);          }          addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);        } else { // normal directives          name = name.replace(dirRE, '');          // parse arg          var argMatch = name.match(argRE);          var arg = argMatch && argMatch[1];          isDynamic = false;          if (arg) {            name = name.slice(0, -(arg.length + 1));            if (dynamicArgRE.test(arg)) {              arg = arg.slice(1, -1);              isDynamic = true;            }          }          addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);          if (name === 'model') {            checkForAliasModel(el, value);          }        }      } else {        // literal attribute        {          var res = parseText(value, delimiters);          if (res) {            warn$2(              name + "=\"" + value + "\": " +              'Interpolation inside attributes has been removed. ' +              'Use v-bind or the colon shorthand instead. For example, ' +              'instead of <div id="">, use <div :id="val">.',              list[i]            );          }        }        addAttr(el, name, JSON.stringify(value), list[i]);        // #6887 firefox doesn't update muted state if set via attribute        // even immediately after element creation        if (!el.component &&            name === 'muted' &&            platformMustUseProp(el.tag, el.attrsMap.type, name)) {          addProp(el, name, 'true', list[i]);        }      }    }  }  function checkInFor (el) {    var parent = el;    while (parent) {      if (parent.for !== undefined) {        return true      }      parent = parent.parent;    }    return false  }  function parseModifiers (name) {    var match = name.match(modifierRE);    if (match) {      var ret = {};      match.forEach(function (m) { ret[m.slice(1)] = true; });      return ret    }  }  function makeAttrsMap (attrs) {    var map = {};    for (var i = 0, l = attrs.length; i < l; i++) {      if (        map[attrs[i].name] && !isIE && !isEdge      ) {        warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);      }      map[attrs[i].name] = attrs[i].value;    }    return map  }  // for script (e.g. type="x/template") or style, do not decode content  function isTextTag (el) {    return el.tag === 'script' || el.tag === 'style'  }  function isForbiddenTag (el) {    return (      el.tag === 'style' ||      (el.tag === 'script' && (        !el.attrsMap.type ||        el.attrsMap.type === 'text/javascript'      ))    )  }  var ieNSBug = /^xmlns:NS\d+/;  var ieNSPrefix = /^NS\d+:/;  /* istanbul ignore next */  function guardIESVGBug (attrs) {    var res = [];    for (var i = 0; i < attrs.length; i++) {      var attr = attrs[i];      if (!ieNSBug.test(attr.name)) {        attr.name = attr.name.replace(ieNSPrefix, '');        res.push(attr);      }    }    return res  }  function checkForAliasModel (el, value) {    var _el = el;    while (_el) {      if (_el.for && _el.alias === value) {        warn$2(          "<" + (el.tag) + " v-model=\"" + value + "\">: " +          "You are binding v-model directly to a v-for iteration alias. " +          "This will not be able to modify the v-for source array because " +          "writing to the alias is like modifying a function local variable. " +          "Consider using an array of objects and use v-model on an object property instead.",          el.rawAttrsMap['v-model']        );      }      _el = _el.parent;    }  }  /*  */  function preTransformNode (el, options) {    if (el.tag === 'input') {      var map = el.attrsMap;      if (!map['v-model']) {        return      }      var typeBinding;      if (map[':type'] || map['v-bind:type']) {        typeBinding = getBindingAttr(el, 'type');      }      if (!map.type && !typeBinding && map['v-bind']) {        typeBinding = "(" + (map['v-bind']) + ").type";      }      if (typeBinding) {        var ifCondition = getAndRemoveAttr(el, 'v-if', true);        var ifConditionExtra = ifCondition ? ("&&(" + ifCondition + ")") : "";        var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;        var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);        // 1. checkbox        var branch0 = cloneASTElement(el);        // process for on the main node        processFor(branch0);        addRawAttr(branch0, 'type', 'checkbox');        processElement(branch0, options);        branch0.processed = true; // prevent it from double-processed        branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;        addIfCondition(branch0, {          exp: branch0.if,          block: branch0        });        // 2. add radio else-if condition        var branch1 = cloneASTElement(el);        getAndRemoveAttr(branch1, 'v-for', true);        addRawAttr(branch1, 'type', 'radio');        processElement(branch1, options);        addIfCondition(branch0, {          exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,          block: branch1        });        // 3. other        var branch2 = cloneASTElement(el);        getAndRemoveAttr(branch2, 'v-for', true);        addRawAttr(branch2, ':type', typeBinding);        processElement(branch2, options);        addIfCondition(branch0, {          exp: ifCondition,          block: branch2        });        if (hasElse) {          branch0.else = true;        } else if (elseIfCondition) {          branch0.elseif = elseIfCondition;        }        return branch0      }    }  }  function cloneASTElement (el) {    return createASTElement(el.tag, el.attrsList.slice(), el.parent)  }  var model$1 = {    preTransformNode: preTransformNode  };  var modules$1 = [    klass$1,    style$1,    model$1  ];  /*  */  function text (el, dir) {    if (dir.value) {      addProp(el, 'textContent', ("_s(" + (dir.value) + ")"), dir);    }  }  /*  */  function html (el, dir) {    if (dir.value) {      addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"), dir);    }  }  var directives$1 = {    model: model,    text: text,    html: html  };  /*  */  var baseOptions = {    expectHTML: true,    modules: modules$1,    directives: directives$1,    isPreTag: isPreTag,    isUnaryTag: isUnaryTag,    mustUseProp: mustUseProp,    canBeLeftOpenTag: canBeLeftOpenTag,    isReservedTag: isReservedTag,    getTagNamespace: getTagNamespace,    staticKeys: genStaticKeys(modules$1)  };  /*  */  var isStaticKey;  var isPlatformReservedTag;  var genStaticKeysCached = cached(genStaticKeys$1);  /**   * Goal of the optimizer: walk the generated template AST tree   * and detect sub-trees that are purely static, i.e. parts of   * the DOM that never needs to change.   *   * Once we detect these sub-trees, we can:   *   * 1. Hoist them into constants, so that we no longer need to   *    create fresh nodes for them on each re-render;   * 2. Completely skip them in the patching process.   */  function optimize (root, options) {    if (!root) { return }    isStaticKey = genStaticKeysCached(options.staticKeys || '');    isPlatformReservedTag = options.isReservedTag || no;    // first pass: mark all non-static nodes.    markStatic$1(root);    // second pass: mark static roots.    markStaticRoots(root, false);  }  function genStaticKeys$1 (keys) {    return makeMap(      'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +      (keys ? ',' + keys : '')    )  }  function markStatic$1 (node) {    node.static = isStatic(node);    if (node.type === 1) {      // do not make component slot content static. this avoids      // 1. components not able to mutate slot nodes      // 2. static slot content fails for hot-reloading      if (        !isPlatformReservedTag(node.tag) &&        node.tag !== 'slot' &&        node.attrsMap['inline-template'] == null      ) {        return      }      for (var i = 0, l = node.children.length; i < l; i++) {        var child = node.children[i];        markStatic$1(child);        if (!child.static) {          node.static = false;        }      }      if (node.ifConditions) {        for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {          var block = node.ifConditions[i$1].block;          markStatic$1(block);          if (!block.static) {            node.static = false;          }        }      }    }  }  function markStaticRoots (node, isInFor) {    if (node.type === 1) {      if (node.static || node.once) {        node.staticInFor = isInFor;      }      // For a node to qualify as a static root, it should have children that      // are not just static text. Otherwise the cost of hoisting out will      // outweigh the benefits and it's better off to just always render it fresh.      if (node.static && node.children.length && !(        node.children.length === 1 &&        node.children[0].type === 3      )) {        node.staticRoot = true;        return      } else {        node.staticRoot = false;      }      if (node.children) {        for (var i = 0, l = node.children.length; i < l; i++) {          markStaticRoots(node.children[i], isInFor || !!node.for);        }      }      if (node.ifConditions) {        for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {          markStaticRoots(node.ifConditions[i$1].block, isInFor);        }      }    }  }  function isStatic (node) {    if (node.type === 2) { // expression      return false    }    if (node.type === 3) { // text      return true    }    return !!(node.pre || (      !node.hasBindings && // no dynamic bindings      !node.if && !node.for && // not v-if or v-for or v-else      !isBuiltInTag(node.tag) && // not a built-in      isPlatformReservedTag(node.tag) && // not a component      !isDirectChildOfTemplateFor(node) &&      Object.keys(node).every(isStaticKey)    ))  }  function isDirectChildOfTemplateFor (node) {    while (node.parent) {      node = node.parent;      if (node.tag !== 'template') {        return false      }      if (node.for) {        return true      }    }    return false  }  /*  */  var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/;  var fnInvokeRE = /\([^)]*?\);*$/;  var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;  // KeyboardEvent.keyCode aliases  var keyCodes = {    esc: 27,    tab: 9,    enter: 13,    space: 32,    up: 38,    left: 37,    right: 39,    down: 40,    'delete': [8, 46]  };  // KeyboardEvent.key aliases  var keyNames = {    // #7880: IE11 and Edge use `Esc` for Escape key name.    esc: ['Esc', 'Escape'],    tab: 'Tab',    enter: 'Enter',    // #9112: IE11 uses `Spacebar` for Space key name.    space: [' ', 'Spacebar'],    // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.    up: ['Up', 'ArrowUp'],    left: ['Left', 'ArrowLeft'],    right: ['Right', 'ArrowRight'],    down: ['Down', 'ArrowDown'],    // #9112: IE11 uses `Del` for Delete key name.    'delete': ['Backspace', 'Delete', 'Del']  };  // #4868: modifiers that prevent the execution of the listener  // need to explicitly return null so that we can determine whether to remove  // the listener for .once  var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };  var modifierCode = {    stop: '$event.stopPropagation();',    prevent: '$event.preventDefault();',    self: genGuard("$event.target !== $event.currentTarget"),    ctrl: genGuard("!$event.ctrlKey"),    shift: genGuard("!$event.shiftKey"),    alt: genGuard("!$event.altKey"),    meta: genGuard("!$event.metaKey"),    left: genGuard("'button' in $event && $event.button !== 0"),    middle: genGuard("'button' in $event && $event.button !== 1"),    right: genGuard("'button' in $event && $event.button !== 2")  };  function genHandlers (    events,    isNative  ) {    var prefix = isNative ? 'nativeOn:' : 'on:';    var staticHandlers = "";    var dynamicHandlers = "";    for (var name in events) {      var handlerCode = genHandler(events[name]);      if (events[name] && events[name].dynamic) {        dynamicHandlers += name + "," + handlerCode + ",";      } else {        staticHandlers += "\"" + name + "\":" + handlerCode + ",";      }    }    staticHandlers = "{" + (staticHandlers.slice(0, -1)) + "}";    if (dynamicHandlers) {      return prefix + "_d(" + staticHandlers + ",[" + (dynamicHandlers.slice(0, -1)) + "])"    } else {      return prefix + staticHandlers    }  }  function genHandler (handler) {    if (!handler) {      return 'function(){}'    }    if (Array.isArray(handler)) {      return ("[" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + "]")    }    var isMethodPath = simplePathRE.test(handler.value);    var isFunctionExpression = fnExpRE.test(handler.value);    var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));    if (!handler.modifiers) {      if (isMethodPath || isFunctionExpression) {        return handler.value      }      return ("function($event){" + (isFunctionInvocation ? ("return " + (handler.value)) : handler.value) + "}") // inline statement    } else {      var code = '';      var genModifierCode = '';      var keys = [];      for (var key in handler.modifiers) {        if (modifierCode[key]) {          genModifierCode += modifierCode[key];          // left/right          if (keyCodes[key]) {            keys.push(key);          }        } else if (key === 'exact') {          var modifiers = (handler.modifiers);          genModifierCode += genGuard(            ['ctrl', 'shift', 'alt', 'meta']              .filter(function (keyModifier) { return !modifiers[keyModifier]; })              .map(function (keyModifier) { return ("$event." + keyModifier + "Key"); })              .join('||')          );        } else {          keys.push(key);        }      }      if (keys.length) {        code += genKeyFilter(keys);      }      // Make sure modifiers like prevent and stop get executed after key filtering      if (genModifierCode) {        code += genModifierCode;      }      var handlerCode = isMethodPath        ? ("return " + (handler.value) + "($event)")        : isFunctionExpression          ? ("return (" + (handler.value) + ")($event)")          : isFunctionInvocation            ? ("return " + (handler.value))            : handler.value;      return ("function($event){" + code + handlerCode + "}")    }  }  function genKeyFilter (keys) {    return (      // make sure the key filters only apply to KeyboardEvents      // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake      // key events that do not have keyCode property...      "if(!$event.type.indexOf('key')&&" +      (keys.map(genFilterCode).join('&&')) + ")return null;"    )  }  function genFilterCode (key) {    var keyVal = parseInt(key, 10);    if (keyVal) {      return ("$event.keyCode!==" + keyVal)    }    var keyCode = keyCodes[key];    var keyName = keyNames[key];    return (      "_k($event.keyCode," +      (JSON.stringify(key)) + "," +      (JSON.stringify(keyCode)) + "," +      "$event.key," +      "" + (JSON.stringify(keyName)) +      ")"    )  }  /*  */  function on (el, dir) {    if (dir.modifiers) {      warn("v-on without argument does not support modifiers.");    }    el.wrapListeners = function (code) { return ("_g(" + code + "," + (dir.value) + ")"); };  }  /*  */  function bind$1 (el, dir) {    el.wrapData = function (code) {      return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")")    };  }  /*  */  var baseDirectives = {    on: on,    bind: bind$1,    cloak: noop  };  /*  */  var CodegenState = function CodegenState (options) {    this.options = options;    this.warn = options.warn || baseWarn;    this.transforms = pluckModuleFunction(options.modules, 'transformCode');    this.dataGenFns = pluckModuleFunction(options.modules, 'genData');    this.directives = extend(extend({}, baseDirectives), options.directives);    var isReservedTag = options.isReservedTag || no;    this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };    this.onceId = 0;    this.staticRenderFns = [];    this.pre = false;  };  function generate (    ast,    options  ) {    var state = new CodegenState(options);    var code = ast ? genElement(ast, state) : '_c("div")';    return {      render: ("with(this){return " + code + "}"),      staticRenderFns: state.staticRenderFns    }  }  function genElement (el, state) {    if (el.parent) {      el.pre = el.pre || el.parent.pre;    }    if (el.staticRoot && !el.staticProcessed) {      return genStatic(el, state)    } else if (el.once && !el.onceProcessed) {      return genOnce(el, state)    } else if (el.for && !el.forProcessed) {      return genFor(el, state)    } else if (el.if && !el.ifProcessed) {      return genIf(el, state)    } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {      return genChildren(el, state) || 'void 0'    } else if (el.tag === 'slot') {      return genSlot(el, state)    } else {      // component or element      var code;      if (el.component) {        code = genComponent(el.component, el, state);      } else {        var data;        if (!el.plain || (el.pre && state.maybeComponent(el))) {          data = genData$2(el, state);        }        var children = el.inlineTemplate ? null : genChildren(el, state, true);        code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";      }      // module transforms      for (var i = 0; i < state.transforms.length; i++) {        code = state.transforms[i](el, code);      }      return code    }  }  // hoist static sub-trees out  function genStatic (el, state) {    el.staticProcessed = true;    // Some elements (templates) need to behave differently inside of a v-pre    // node.  All pre nodes are static roots, so we can use this as a location to    // wrap a state change and reset it upon exiting the pre node.    var originalPreState = state.pre;    if (el.pre) {      state.pre = el.pre;    }    state.staticRenderFns.push(("with(this){return " + (genElement(el, state)) + "}"));    state.pre = originalPreState;    return ("_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")  }  // v-once  function genOnce (el, state) {    el.onceProcessed = true;    if (el.if && !el.ifProcessed) {      return genIf(el, state)    } else if (el.staticInFor) {      var key = '';      var parent = el.parent;      while (parent) {        if (parent.for) {          key = parent.key;          break        }        parent = parent.parent;      }      if (!key) {        state.warn(          "v-once can only be used inside v-for that is keyed. ",          el.rawAttrsMap['v-once']        );        return genElement(el, state)      }      return ("_o(" + (genElement(el, state)) + "," + (state.onceId++) + "," + key + ")")    } else {      return genStatic(el, state)    }  }  function genIf (    el,    state,    altGen,    altEmpty  ) {    el.ifProcessed = true; // avoid recursion    return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)  }  function genIfConditions (    conditions,    state,    altGen,    altEmpty  ) {    if (!conditions.length) {      return altEmpty || '_e()'    }    var condition = conditions.shift();    if (condition.exp) {      return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions, state, altGen, altEmpty)))    } else {      return ("" + (genTernaryExp(condition.block)))    }    // v-if with v-once should generate code like (a)?_m(0):_m(1)    function genTernaryExp (el) {      return altGen        ? altGen(el, state)        : el.once          ? genOnce(el, state)          : genElement(el, state)    }  }  function genFor (    el,    state,    altGen,    altHelper  ) {    var exp = el.for;    var alias = el.alias;    var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';    var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';    if (state.maybeComponent(el) &&      el.tag !== 'slot' &&      el.tag !== 'template' &&      !el.key    ) {      state.warn(        "<" + (el.tag) + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " +        "v-for should have explicit keys. " +        "See https://vuejs.org/guide/list.html#key for more info.",        el.rawAttrsMap['v-for'],        true /* tip */      );    }    el.forProcessed = true; // avoid recursion    return (altHelper || '_l') + "((" + exp + ")," +      "function(" + alias + iterator1 + iterator2 + "){" +        "return " + ((altGen || genElement)(el, state)) +      '})'  }  function genData$2 (el, state) {    var data = '{';    // directives first.    // directives may mutate the el's other properties before they are generated.    var dirs = genDirectives(el, state);    if (dirs) { data += dirs + ','; }    // key    if (el.key) {      data += "key:" + (el.key) + ",";    }    // ref    if (el.ref) {      data += "ref:" + (el.ref) + ",";    }    if (el.refInFor) {      data += "refInFor:true,";    }    // pre    if (el.pre) {      data += "pre:true,";    }    // record original tag name for components using "is" attribute    if (el.component) {      data += "tag:\"" + (el.tag) + "\",";    }    // module data generation functions    for (var i = 0; i < state.dataGenFns.length; i++) {      data += state.dataGenFns[i](el);    }    // attributes    if (el.attrs) {      data += "attrs:" + (genProps(el.attrs)) + ",";    }    // DOM props    if (el.props) {      data += "domProps:" + (genProps(el.props)) + ",";    }    // event handlers    if (el.events) {      data += (genHandlers(el.events, false)) + ",";    }    if (el.nativeEvents) {      data += (genHandlers(el.nativeEvents, true)) + ",";    }    // slot target    // only for non-scoped slots    if (el.slotTarget && !el.slotScope) {      data += "slot:" + (el.slotTarget) + ",";    }    // scoped slots    if (el.scopedSlots) {      data += (genScopedSlots(el, el.scopedSlots, state)) + ",";    }    // component v-model    if (el.model) {      data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";    }    // inline-template    if (el.inlineTemplate) {      var inlineTemplate = genInlineTemplate(el, state);      if (inlineTemplate) {        data += inlineTemplate + ",";      }    }    data = data.replace(/,$/, '') + '}';    // v-bind dynamic argument wrap    // v-bind with dynamic arguments must be applied using the same v-bind object    // merge helper so that class/style/mustUseProp attrs are handled correctly.    if (el.dynamicAttrs) {      data = "_b(" + data + ",\"" + (el.tag) + "\"," + (genProps(el.dynamicAttrs)) + ")";    }    // v-bind data wrap    if (el.wrapData) {      data = el.wrapData(data);    }    // v-on data wrap    if (el.wrapListeners) {      data = el.wrapListeners(data);    }    return data  }  function genDirectives (el, state) {    var dirs = el.directives;    if (!dirs) { return }    var res = 'directives:[';    var hasRuntime = false;    var i, l, dir, needRuntime;    for (i = 0, l = dirs.length; i < l; i++) {      dir = dirs[i];      needRuntime = true;      var gen = state.directives[dir.name];      if (gen) {        // compile-time directive that manipulates AST.        // returns true if it also needs a runtime counterpart.        needRuntime = !!gen(el, dir, state.warn);      }      if (needRuntime) {        hasRuntime = true;        res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:" + (dir.isDynamicArg ? dir.arg : ("\"" + (dir.arg) + "\""))) : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";      }    }    if (hasRuntime) {      return res.slice(0, -1) + ']'    }  }  function genInlineTemplate (el, state) {    var ast = el.children[0];    if (el.children.length !== 1 || ast.type !== 1) {      state.warn(        'Inline-template components must have exactly one child element.',        { start: el.start }      );    }    if (ast && ast.type === 1) {      var inlineRenderFns = generate(ast, state.options);      return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")    }  }  function genScopedSlots (    el,    slots,    state  ) {    // by default scoped slots are considered "stable", this allows child    // components with only scoped slots to skip forced updates from parent.    // but in some cases we have to bail-out of this optimization    // for example if the slot contains dynamic names, has v-if or v-for on them...    var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {      var slot = slots[key];      return (        slot.slotTargetDynamic ||        slot.if ||        slot.for ||        containsSlotChild(slot) // is passing down slot from parent which may be dynamic      )    });    // #9534: if a component with scoped slots is inside a conditional branch,    // it's possible for the same component to be reused but with different    // compiled slot content. To avoid that, we generate a unique key based on    // the generated code of all the slot contents.    var needsKey = !!el.if;    // OR when it is inside another scoped slot or v-for (the reactivity may be    // disconnected due to the intermediate scope variable)    // #9438, #9506    // TODO: this can be further optimized by properly analyzing in-scope bindings    // and skip force updating ones that do not actually use scope variables.    if (!needsForceUpdate) {      var parent = el.parent;      while (parent) {        if (          (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||          parent.for        ) {          needsForceUpdate = true;          break        }        if (parent.if) {          needsKey = true;        }        parent = parent.parent;      }    }    var generatedSlots = Object.keys(slots)      .map(function (key) { return genScopedSlot(slots[key], state); })      .join(',');    return ("scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? (",null,false," + (hash(generatedSlots))) : "") + ")")  }  function hash(str) {    var hash = 5381;    var i = str.length;    while(i) {      hash = (hash * 33) ^ str.charCodeAt(--i);    }    return hash >>> 0  }  function containsSlotChild (el) {    if (el.type === 1) {      if (el.tag === 'slot') {        return true      }      return el.children.some(containsSlotChild)    }    return false  }  function genScopedSlot (    el,    state  ) {    var isLegacySyntax = el.attrsMap['slot-scope'];    if (el.if && !el.ifProcessed && !isLegacySyntax) {      return genIf(el, state, genScopedSlot, "null")    }    if (el.for && !el.forProcessed) {      return genFor(el, state, genScopedSlot)    }    var slotScope = el.slotScope === emptySlotScopeToken      ? ""      : String(el.slotScope);    var fn = "function(" + slotScope + "){" +      "return " + (el.tag === 'template'        ? el.if && isLegacySyntax          ? ("(" + (el.if) + ")?" + (genChildren(el, state) || 'undefined') + ":undefined")          : genChildren(el, state) || 'undefined'        : genElement(el, state)) + "}";    // reverse proxy v-slot without scope on this.$slots    var reverseProxy = slotScope ? "" : ",proxy:true";    return ("{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}")  }  function genChildren (    el,    state,    checkSkip,    altGenElement,    altGenNode  ) {    var children = el.children;    if (children.length) {      var el$1 = children[0];      // optimize single v-for      if (children.length === 1 &&        el$1.for &&        el$1.tag !== 'template' &&        el$1.tag !== 'slot'      ) {        var normalizationType = checkSkip          ? state.maybeComponent(el$1) ? ",1" : ",0"          : "";        return ("" + ((altGenElement || genElement)(el$1, state)) + normalizationType)      }      var normalizationType$1 = checkSkip        ? getNormalizationType(children, state.maybeComponent)        : 0;      var gen = altGenNode || genNode;      return ("[" + (children.map(function (c) { return gen(c, state); }).join(',')) + "]" + (normalizationType$1 ? ("," + normalizationType$1) : ''))    }  }  // determine the normalization needed for the children array.  // 0: no normalization needed  // 1: simple normalization needed (possible 1-level deep nested array)  // 2: full normalization needed  function getNormalizationType (    children,    maybeComponent  ) {    var res = 0;    for (var i = 0; i < children.length; i++) {      var el = children[i];      if (el.type !== 1) {        continue      }      if (needsNormalization(el) ||          (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {        res = 2;        break      }      if (maybeComponent(el) ||          (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {        res = 1;      }    }    return res  }  function needsNormalization (el) {    return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'  }  function genNode (node, state) {    if (node.type === 1) {      return genElement(node, state)    } else if (node.type === 3 && node.isComment) {      return genComment(node)    } else {      return genText(node)    }  }  function genText (text) {    return ("_v(" + (text.type === 2      ? text.expression // no need for () because already wrapped in _s()      : transformSpecialNewlines(JSON.stringify(text.text))) + ")")  }  function genComment (comment) {    return ("_e(" + (JSON.stringify(comment.text)) + ")")  }  function genSlot (el, state) {    var slotName = el.slotName || '"default"';    var children = genChildren(el, state);    var res = "_t(" + slotName + (children ? ("," + children) : '');    var attrs = el.attrs || el.dynamicAttrs      ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({          // slot props are camelized          name: camelize(attr.name),          value: attr.value,          dynamic: attr.dynamic        }); }))      : null;    var bind$$1 = el.attrsMap['v-bind'];    if ((attrs || bind$$1) && !children) {      res += ",null";    }    if (attrs) {      res += "," + attrs;    }    if (bind$$1) {      res += (attrs ? '' : ',null') + "," + bind$$1;    }    return res + ')'  }  // componentName is el.component, take it as argument to shun flow's pessimistic refinement  function genComponent (    componentName,    el,    state  ) {    var children = el.inlineTemplate ? null : genChildren(el, state, true);    return ("_c(" + componentName + "," + (genData$2(el, state)) + (children ? ("," + children) : '') + ")")  }  function genProps (props) {    var staticProps = "";    var dynamicProps = "";    for (var i = 0; i < props.length; i++) {      var prop = props[i];      var value = transformSpecialNewlines(prop.value);      if (prop.dynamic) {        dynamicProps += (prop.name) + "," + value + ",";      } else {        staticProps += "\"" + (prop.name) + "\":" + value + ",";      }    }    staticProps = "{" + (staticProps.slice(0, -1)) + "}";    if (dynamicProps) {      return ("_d(" + staticProps + ",[" + (dynamicProps.slice(0, -1)) + "])")    } else {      return staticProps    }  }  // #3895, #4268  function transformSpecialNewlines (text) {    return text      .replace(/\u2028/g, '\\u2028')      .replace(/\u2029/g, '\\u2029')  }  /*  */  // these keywords should not appear inside expressions, but operators like  // typeof, instanceof and in are allowed  var prohibitedKeywordRE = new RegExp('\\b' + (    'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +    'super,throw,while,yield,delete,export,import,return,switch,default,' +    'extends,finally,continue,debugger,function,arguments'  ).split(',').join('\\b|\\b') + '\\b');  // these unary operators should not be used as property/method names  var unaryOperatorsRE = new RegExp('\\b' + (    'delete,typeof,void'  ).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');  // strip strings in expressions  var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;  // detect problematic expressions in a template  function detectErrors (ast, warn) {    if (ast) {      checkNode(ast, warn);    }  }  function checkNode (node, warn) {    if (node.type === 1) {      for (var name in node.attrsMap) {        if (dirRE.test(name)) {          var value = node.attrsMap[name];          if (value) {            var range = node.rawAttrsMap[name];            if (name === 'v-for') {              checkFor(node, ("v-for=\"" + value + "\""), warn, range);            } else if (name === 'v-slot' || name[0] === '#') {              checkFunctionParameterExpression(value, (name + "=\"" + value + "\""), warn, range);            } else if (onRE.test(name)) {              checkEvent(value, (name + "=\"" + value + "\""), warn, range);            } else {              checkExpression(value, (name + "=\"" + value + "\""), warn, range);            }          }        }      }      if (node.children) {        for (var i = 0; i < node.children.length; i++) {          checkNode(node.children[i], warn);        }      }    } else if (node.type === 2) {      checkExpression(node.expression, node.text, warn, node);    }  }  function checkEvent (exp, text, warn, range) {    var stripped = exp.replace(stripStringRE, '');    var keywordMatch = stripped.match(unaryOperatorsRE);    if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {      warn(        "avoid using JavaScript unary operator as property name: " +        "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim()),        range      );    }    checkExpression(exp, text, warn, range);  }  function checkFor (node, text, warn, range) {    checkExpression(node.for || '', text, warn, range);    checkIdentifier(node.alias, 'v-for alias', text, warn, range);    checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);    checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);  }  function checkIdentifier (    ident,    type,    text,    warn,    range  ) {    if (typeof ident === 'string') {      try {        new Function(("var " + ident + "=_"));      } catch (e) {        warn(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())), range);      }    }  }  function checkExpression (exp, text, warn, range) {    try {      new Function(("return " + exp));    } catch (e) {      var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);      if (keywordMatch) {        warn(          "avoid using JavaScript keyword as property name: " +          "\"" + (keywordMatch[0]) + "\"\n  Raw expression: " + (text.trim()),          range        );      } else {        warn(          "invalid expression: " + (e.message) + " in\n\n" +          "    " + exp + "\n\n" +          "  Raw expression: " + (text.trim()) + "\n",          range        );      }    }  }  function checkFunctionParameterExpression (exp, text, warn, range) {    try {      new Function(exp, '');    } catch (e) {      warn(        "invalid function parameter expression: " + (e.message) + " in\n\n" +        "    " + exp + "\n\n" +        "  Raw expression: " + (text.trim()) + "\n",        range      );    }  }  /*  */  var range = 2;  function generateCodeFrame (    source,    start,    end  ) {    if ( start === void 0 ) start = 0;    if ( end === void 0 ) end = source.length;    var lines = source.split(/\r?\n/);    var count = 0;    var res = [];    for (var i = 0; i < lines.length; i++) {      count += lines[i].length + 1;      if (count >= start) {        for (var j = i - range; j <= i + range || end > count; j++) {          if (j < 0 || j >= lines.length) { continue }          res.push(("" + (j + 1) + (repeat$1(" ", 3 - String(j + 1).length)) + "|  " + (lines[j])));          var lineLength = lines[j].length;          if (j === i) {            // push underline            var pad = start - (count - lineLength) + 1;            var length = end > count ? lineLength - pad : end - start;            res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));          } else if (j > i) {            if (end > count) {              var length$1 = Math.min(end - count, lineLength);              res.push("   |  " + repeat$1("^", length$1));            }            count += lineLength + 1;          }        }        break      }    }    return res.join('\n')  }  function repeat$1 (str, n) {    var result = '';    if (n > 0) {      while (true) { // eslint-disable-line        if (n & 1) { result += str; }        n >>>= 1;        if (n <= 0) { break }        str += str;      }    }    return result  }  /*  */  function createFunction (code, errors) {    try {      return new Function(code)    } catch (err) {      errors.push({ err: err, code: code });      return noop    }  }  function createCompileToFunctionFn (compile) {    var cache = Object.create(null);    return function compileToFunctions (      template,      options,      vm    ) {      options = extend({}, options);      var warn$$1 = options.warn || warn;      delete options.warn;      /* istanbul ignore if */      {        // detect possible CSP restriction        try {          new Function('return 1');        } catch (e) {          if (e.toString().match(/unsafe-eval|CSP/)) {            warn$$1(              'It seems you are using the standalone build of Vue.js in an ' +              'environment with Content Security Policy that prohibits unsafe-eval. ' +              'The template compiler cannot work in this environment. Consider ' +              'relaxing the policy to allow unsafe-eval or pre-compiling your ' +              'templates into render functions.'            );          }        }      }      // check cache      var key = options.delimiters        ? String(options.delimiters) + template        : template;      if (cache[key]) {        return cache[key]      }      // compile      var compiled = compile(template, options);      // check compilation errors/tips      {        if (compiled.errors && compiled.errors.length) {          if (options.outputSourceRange) {            compiled.errors.forEach(function (e) {              warn$$1(                "Error compiling template:\n\n" + (e.msg) + "\n\n" +                generateCodeFrame(template, e.start, e.end),                vm              );            });          } else {            warn$$1(              "Error compiling template:\n\n" + template + "\n\n" +              compiled.errors.map(function (e) { return ("- " + e); }).join('\n') + '\n',              vm            );          }        }        if (compiled.tips && compiled.tips.length) {          if (options.outputSourceRange) {            compiled.tips.forEach(function (e) { return tip(e.msg, vm); });          } else {            compiled.tips.forEach(function (msg) { return tip(msg, vm); });          }        }      }      // turn code into functions      var res = {};      var fnGenErrors = [];      res.render = createFunction(compiled.render, fnGenErrors);      res.staticRenderFns = compiled.staticRenderFns.map(function (code) {        return createFunction(code, fnGenErrors)      });      // check function generation errors.      // this should only happen if there is a bug in the compiler itself.      // mostly for codegen development use      /* istanbul ignore if */      {        if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {          warn$$1(            "Failed to generate render function:\n\n" +            fnGenErrors.map(function (ref) {              var err = ref.err;              var code = ref.code;              return ((err.toString()) + " in\n\n" + code + "\n");          }).join('\n'),            vm          );        }      }      return (cache[key] = res)    }  }  /*  */  function createCompilerCreator (baseCompile) {    return function createCompiler (baseOptions) {      function compile (        template,        options      ) {        var finalOptions = Object.create(baseOptions);        var errors = [];        var tips = [];        var warn = function (msg, range, tip) {          (tip ? tips : errors).push(msg);        };        if (options) {          if (options.outputSourceRange) {            // $flow-disable-line            var leadingSpaceLength = template.match(/^\s*/)[0].length;            warn = function (msg, range, tip) {              var data = { msg: msg };              if (range) {                if (range.start != null) {                  data.start = range.start + leadingSpaceLength;                }                if (range.end != null) {                  data.end = range.end + leadingSpaceLength;                }              }              (tip ? tips : errors).push(data);            };          }          // merge custom modules          if (options.modules) {            finalOptions.modules =              (baseOptions.modules || []).concat(options.modules);          }          // merge custom directives          if (options.directives) {            finalOptions.directives = extend(              Object.create(baseOptions.directives || null),              options.directives            );          }          // copy other options          for (var key in options) {            if (key !== 'modules' && key !== 'directives') {              finalOptions[key] = options[key];            }          }        }        finalOptions.warn = warn;        var compiled = baseCompile(template.trim(), finalOptions);        {          detectErrors(compiled.ast, warn);        }        compiled.errors = errors;        compiled.tips = tips;        return compiled      }      return {        compile: compile,        compileToFunctions: createCompileToFunctionFn(compile)      }    }  }  /*  */  // `createCompilerCreator` allows creating compilers that use alternative  // parser/optimizer/codegen, e.g the SSR optimizing compiler.  // Here we just export a default compiler using the default parts.  var createCompiler = createCompilerCreator(function baseCompile (    template,    options  ) {    var ast = parse(template.trim(), options);    if (options.optimize !== false) {      optimize(ast, options);    }    var code = generate(ast, options);    return {      ast: ast,      render: code.render,      staticRenderFns: code.staticRenderFns    }  });  /*  */  var ref$1 = createCompiler(baseOptions);  var compile = ref$1.compile;  var compileToFunctions = ref$1.compileToFunctions;  /*  */  // check whether current browser encodes a char inside attribute values  var div;  function getShouldDecode (href) {    div = div || document.createElement('div');    div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";    return div.innerHTML.indexOf('&#10;') > 0  }  // #3663: IE encodes newlines inside attribute values while other browsers don't  var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;  // #6828: chrome encodes content in a[href]  var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;  /*  */  var idToTemplate = cached(function (id) {    var el = query(id);    return el && el.innerHTML  });  var mount = Vue.prototype.$mount;  Vue.prototype.$mount = function (    el,    hydrating  ) {    el = el && query(el);    /* istanbul ignore if */    if (el === document.body || el === document.documentElement) {      warn(        "Do not mount Vue to <html> or <body> - mount to normal elements instead."      );      return this    }    var options = this.$options;    // resolve template/el and convert to render function    if (!options.render) {      var template = options.template;      if (template) {        if (typeof template === 'string') {          if (template.charAt(0) === '#') {            template = idToTemplate(template);            /* istanbul ignore if */            if (!template) {              warn(                ("Template element not found or is empty: " + (options.template)),                this              );            }          }        } else if (template.nodeType) {          template = template.innerHTML;        } else {          {            warn('invalid template option:' + template, this);          }          return this        }      } else if (el) {        template = getOuterHTML(el);      }      if (template) {        /* istanbul ignore if */        if (config.performance && mark) {          mark('compile');        }        var ref = compileToFunctions(template, {          outputSourceRange: "development" !== 'production',          shouldDecodeNewlines: shouldDecodeNewlines,          shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,          delimiters: options.delimiters,          comments: options.comments        }, this);        var render = ref.render;        var staticRenderFns = ref.staticRenderFns;        options.render = render;        options.staticRenderFns = staticRenderFns;        /* istanbul ignore if */        if (config.performance && mark) {          mark('compile end');          measure(("vue " + (this._name) + " compile"), 'compile', 'compile end');        }      }    }    return mount.call(this, el, hydrating)  };  /**   * Get outerHTML of elements, taking care   * of SVG elements in IE as well.   */  function getOuterHTML (el) {    if (el.outerHTML) {      return el.outerHTML    } else {      var container = document.createElement('div');      container.appendChild(el.cloneNode(true));      return container.innerHTML    }  }  Vue.compile = compileToFunctions;  return Vue;}));]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/03_%E4%BE%9D%E8%B5%96%E5%8C%85/dayjs.min/"/>
      <url>/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/03_%E4%BE%9D%E8%B5%96%E5%8C%85/dayjs.min/</url>
      
        <content type="html"><![CDATA[!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.dayjs=e()}(this,function(){"use strict";var t="millisecond",e="second",n="minute",r="hour",i="day",s="week",u="month",a="quarter",o="year",f="date",h=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,c=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,d={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},$=function(t,e,n){var r=String(t);return!r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},l={s:$,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?"+":"-")+$(r,2,"0")+":"+$(i,2,"0")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,u),s=n-i<0,a=e.clone().add(r+(s?-1:1),u);return+(-(r+(n-i)/(s?i-a:a-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(h){return{M:u,y:o,w:s,d:i,D:f,h:r,m:n,s:e,ms:t,Q:a}[h]||String(h||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},y="en",M={};M[y]=d;var m=function(t){return t instanceof S},D=function(t,e,n){var r;if(!t)return y;if("string"==typeof t)M[t]&&(r=t),e&&(M[t]=e,r=t);else{var i=t.name;M[i]=t,r=i}return!n&&r&&(y=r),r||!n&&y},v=function(t,e){if(m(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new S(n)},g=l;g.l=D,g.i=m,g.w=function(t,e){return v(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var S=function(){function d(t){this.$L=D(t.locale,null,!0),this.parse(t)}var $=d.prototype;return $.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(g.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match(h);if(r){var i=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init()},$.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},$.$utils=function(){return g},$.isValid=function(){return!("Invalid Date"===this.$d.toString())},$.isSame=function(t,e){var n=v(t);return this.startOf(e)<=n&&n<=this.endOf(e)},$.isAfter=function(t,e){return v(t)<this.startOf(e)},$.isBefore=function(t,e){return this.endOf(e)<v(t)},$.$g=function(t,e,n){return g.u(t)?this[e]:this.set(n,t)},$.unix=function(){return Math.floor(this.valueOf()/1e3)},$.valueOf=function(){return this.$d.getTime()},$.startOf=function(t,a){var h=this,c=!!g.u(a)||a,d=g.p(t),$=function(t,e){var n=g.w(h.$u?Date.UTC(h.$y,e,t):new Date(h.$y,e,t),h);return c?n:n.endOf(i)},l=function(t,e){return g.w(h.toDate()[t].apply(h.toDate("s"),(c?[0,0,0,0]:[23,59,59,999]).slice(e)),h)},y=this.$W,M=this.$M,m=this.$D,D="set"+(this.$u?"UTC":"");switch(d){case o:return c?$(1,0):$(31,11);case u:return c?$(1,M):$(0,M+1);case s:var v=this.$locale().weekStart||0,S=(y<v?y+7:y)-v;return $(c?m-S:m+(6-S),M);case i:case f:return l(D+"Hours",0);case r:return l(D+"Minutes",1);case n:return l(D+"Seconds",2);case e:return l(D+"Milliseconds",3);default:return this.clone()}},$.endOf=function(t){return this.startOf(t,!1)},$.$set=function(s,a){var h,c=g.p(s),d="set"+(this.$u?"UTC":""),$=(h={},h[i]=d+"Date",h[f]=d+"Date",h[u]=d+"Month",h[o]=d+"FullYear",h[r]=d+"Hours",h[n]=d+"Minutes",h[e]=d+"Seconds",h[t]=d+"Milliseconds",h)[c],l=c===i?this.$D+(a-this.$W):a;if(c===u||c===o){var y=this.clone().set(f,1);y.$d[$](l),y.init(),this.$d=y.set(f,Math.min(this.$D,y.daysInMonth())).$d}else $&&this.$d[$](l);return this.init(),this},$.set=function(t,e){return this.clone().$set(t,e)},$.get=function(t){return this[g.p(t)]()},$.add=function(t,a){var f,h=this;t=Number(t);var c=g.p(a),d=function(e){var n=v(h);return g.w(n.date(n.date()+Math.round(e*t)),h)};if(c===u)return this.set(u,this.$M+t);if(c===o)return this.set(o,this.$y+t);if(c===i)return d(1);if(c===s)return d(7);var $=(f={},f[n]=6e4,f[r]=36e5,f[e]=1e3,f)[c]||1,l=this.$d.getTime()+t*$;return g.w(l,this)},$.subtract=function(t,e){return this.add(-1*t,e)},$.format=function(t){var e=this;if(!this.isValid())return"Invalid Date";var n=t||"YYYY-MM-DDTHH:mm:ssZ",r=g.z(this),i=this.$locale(),s=this.$H,u=this.$m,a=this.$M,o=i.weekdays,f=i.months,h=function(t,r,i,s){return t&&(t[r]||t(e,n))||i[r].substr(0,s)},d=function(t){return g.s(s%12||12,t,"0")},$=i.meridiem||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r},l={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:g.s(a+1,2,"0"),MMM:h(i.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:g.s(this.$D,2,"0"),d:String(this.$W),dd:h(i.weekdaysMin,this.$W,o,2),ddd:h(i.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:g.s(s,2,"0"),h:d(1),hh:d(2),a:$(s,u,!0),A:$(s,u,!1),m:String(u),mm:g.s(u,2,"0"),s:String(this.$s),ss:g.s(this.$s,2,"0"),SSS:g.s(this.$ms,3,"0"),Z:r};return n.replace(c,function(t,e){return e||l[t]||r.replace(":","")})},$.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},$.diff=function(t,f,h){var c,d=g.p(f),$=v(t),l=6e4*($.utcOffset()-this.utcOffset()),y=this-$,M=g.m(this,$);return M=(c={},c[o]=M/12,c[u]=M,c[a]=M/3,c[s]=(y-l)/6048e5,c[i]=(y-l)/864e5,c[r]=y/36e5,c[n]=y/6e4,c[e]=y/1e3,c)[d]||y,h?M:g.a(M)},$.daysInMonth=function(){return this.endOf(u).$D},$.$locale=function(){return M[this.$L]},$.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=D(t,e,!0);return r&&(n.$L=r),n},$.clone=function(){return g.w(this.$d,this)},$.toDate=function(){return new Date(this.valueOf())},$.toJSON=function(){return this.isValid()?this.toISOString():null},$.toISOString=function(){return this.$d.toISOString()},$.toString=function(){return this.$d.toUTCString()},d}(),p=S.prototype;return v.prototype=p,[["$ms",t],["$s",e],["$m",n],["$H",r],["$W",i],["$M",u],["$y",o],["$D",f]].forEach(function(t){p[t[1]]=function(e){return this.$g(e,t[0],t[1])}}),v.extend=function(t,e){return t.$i||(t(e,S,v),t.$i=!0),v},v.locale=D,v.isDayjs=m,v.unix=function(t){return v(1e3*t)},v.en=M[y],v.Ls=M,v.p={},v});]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/01_%E8%AF%BE%E4%BB%B6/vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
      <url>/2023/08/07/before/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/01_%E8%AF%BE%E4%BB%B6/vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3快速上手"><a href="#Vue3快速上手" class="headerlink" title="Vue3快速上手"></a>Vue3快速上手</h1><img src="https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png" style="width:200px" /><h2 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1.Vue3简介"></a>1.Vue3简介</h2><ul><li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li><li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99位贡献者</a> </li><li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h2 id="2-Vue3带来了什么"><a href="#2-Vue3带来了什么" class="headerlink" title="2.Vue3带来了什么"></a>2.Vue3带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul><li><p>打包大小减少41%</p></li><li><p>初次渲染快55%, 更新渲染快133%</p></li><li><p>内存减少54%</p><p>……</p></li></ul><h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.源码的升级</h3><ul><li><p>使用Proxy代替defineProperty实现响应式</p></li><li><p>重写虚拟DOM的实现和Tree-Shaking</p><p>……</p></li></ul><h3 id="3-拥抱TypeScript"><a href="#3-拥抱TypeScript" class="headerlink" title="3.拥抱TypeScript"></a>3.拥抱TypeScript</h3><ul><li>Vue3可以更好的支持TypeScript</li></ul><h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.新的特性</h3><ol><li><p>Composition API（组合API）</p><ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>……</li></ul></li><li><p>新的内置组件</p><ul><li>Fragment </li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>……</li></ul></li></ol><h1 id="一、创建Vue3-0工程"><a href="#一、创建Vue3-0工程" class="headerlink" title="一、创建Vue3.0工程"></a>一、创建Vue3.0工程</h1><h2 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span>vue --version<span class="token comment" spellcheck="true">## 安装或者升级你的@vue/cli</span><span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli<span class="token comment" spellcheck="true">## 创建</span>vue create vue_test<span class="token comment" spellcheck="true">## 启动</span><span class="token function">cd</span> vue_test<span class="token function">npm</span> run serve</code></pre><h2 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn/">https://vitejs.cn</a></p><ul><li>什么是vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite构建对比图</li></ul><p><img src="https://cn.vitejs.dev/assets/bundler.37740380.png" style="width:500px;height:280px;float:left" /><img src="https://cn.vitejs.dev/assets/esm.3070012d.png" style="width:480px;height:280px" /></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 创建工程</span><span class="token function">npm</span> init vite-app <span class="token operator">&lt;</span>project-name<span class="token operator">></span><span class="token comment" spellcheck="true">## 进入工程目录</span><span class="token function">cd</span> <span class="token operator">&lt;</span>project-name<span class="token operator">></span><span class="token comment" spellcheck="true">## 安装依赖</span><span class="token function">npm</span> <span class="token function">install</span><span class="token comment" spellcheck="true">## 运行</span><span class="token function">npm</span> run dev</code></pre><h1 id="二、常用-Composition-API"><a href="#二、常用-Composition-API" class="headerlink" title="二、常用 Composition API"></a>二、常用 Composition API</h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="1-拉开序幕的setup"><a href="#1-拉开序幕的setup" class="headerlink" title="1.拉开序幕的setup"></a>1.拉开序幕的setup</h2><ol><li>理解：Vue3.0中一个新的配置项，值为一个函数。</li><li>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：数据、方法等等，均要配置在setup中。</li><li>setup函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li>注意点：<ol><li>​                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li><li>如果有重名, setup优先。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li></ol></li></ol><h2 id="2-ref函数"><a href="#2-ref函数" class="headerlink" title="2.ref函数"></a>2.ref函数</h2><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code> <ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li><li>JS中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><h2 id="3-reactive函数"><a href="#3-reactive函数" class="headerlink" title="3.reactive函数"></a>3.reactive函数</h2><ul><li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><h2 id="4-Vue3-0中的响应式原理"><a href="#4-Vue3-0中的响应式原理" class="headerlink" title="4.Vue3.0中的响应式原理"></a>4.Vue3.0中的响应式原理</h2><h3 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><pre class=" language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>     <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h3 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h3><ul><li>实现原理: <ul><li>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</li><li>通过Reflect（反射）:  对源对象的属性进行操作。</li><li>MDN文档中描述的Proxy与Reflect：<ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 拦截读取属性值</span>    <span class="token keyword">get</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 拦截设置属性值或添加新属性</span>    <span class="token keyword">set</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 拦截删除属性</span>    deleteProperty <span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>proxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'tom'</span>   </code></pre></li></ul></li></ul></li></ul><h2 id="5-reactive对比ref"><a href="#5-reactive对比ref" class="headerlink" title="5.reactive对比ref"></a>5.reactive对比ref</h2><ul><li>从定义数据角度对比：<ul><li> ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li> reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li> 备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li> ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li> reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li> ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li> reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="6-setup的两个注意点"><a href="#6-setup的两个注意点" class="headerlink" title="6.setup的两个注意点"></a>6.setup的两个注意点</h2><ul><li>setup执行的时机<ul><li>在beforeCreate之前执行一次，this是undefined。</li></ul></li><li>setup的参数<ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><h2 id="7-计算属性与监视"><a href="#7-计算属性与监视" class="headerlink" title="7.计算属性与监视"></a>7.计算属性与监视</h2><h3 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1.computed函数"></a>1.computed函数</h3><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>computed<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">...</span>    <span class="token comment" spellcheck="true">//计算属性——简写</span>    <span class="token keyword">let</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> person<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>lastName    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//计算属性——完整</span>    <span class="token keyword">let</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> person<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>lastName        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> nameArr <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>            person<span class="token punctuation">.</span>firstName <span class="token operator">=</span> nameArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            person<span class="token punctuation">.</span>lastName <span class="token operator">=</span> nameArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="2-watch函数"><a href="#2-watch函数" class="headerlink" title="2.watch函数"></a>2.watch函数</h3><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//情况一：监视ref定义的响应式数据</span><span class="token function">watch</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sum变化了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>immediate<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//情况二：监视多个ref定义的响应式数据</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>sum<span class="token punctuation">,</span>msg<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sum或msg变化了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* 情况三：监视reactive定义的响应式数据            若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！            若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 */</span><span class="token function">watch</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'person变化了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>immediate<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>deep<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//此处的deep配置不再奏效</span><span class="token comment" spellcheck="true">//情况四：监视reactive定义的响应式数据中的某个属性</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>person<span class="token punctuation">.</span>job<span class="token punctuation">,</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'person的job变化了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>immediate<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>deep<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//情况五：监视reactive定义的响应式数据中的某些属性</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>person<span class="token punctuation">.</span>job<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>person<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'person的job变化了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>immediate<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>deep<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//特殊情况</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>person<span class="token punctuation">.</span>job<span class="token punctuation">,</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'person的job变化了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>deep<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></code></pre></li></ul><h3 id="3-watchEffect函数"><a href="#3-watchEffect函数" class="headerlink" title="3.watchEffect函数"></a>3.watchEffect函数</h3><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> x1 <span class="token operator">=</span> sum<span class="token punctuation">.</span>value    <span class="token keyword">const</span> x2 <span class="token operator">=</span> person<span class="token punctuation">.</span>age    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'watchEffect配置的回调执行了'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h2><div style="border:1px solid black;width:380px;float:left;margin-right:20px;"><strong>vue2.x的生命周期</strong><img src="https://cn.vuejs.org/images/lifecycle.png" alt="lifecycle_2" style="zoom:33%;width:1200px" /></div><div style="border:1px solid black;width:510px;height:985px;float:left"><strong>vue3.0的生命周期</strong><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="lifecycle_2" style="zoom:33%;width:2500px" /></div><p>1</p><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>=======&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li></ul><h2 id="9-自定义hook函数"><a href="#9-自定义hook函数" class="headerlink" title="9.自定义hook函数"></a>9.自定义hook函数</h2><ul><li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p></li><li><p>类似于vue2.x中的mixin。</p></li><li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p></li></ul><h2 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10.toRef"></a>10.toRef</h2><ul><li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li><li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li><li>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</li></ul><ul><li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li></ul><h1 id="三、其它-Composition-API"><a href="#三、其它-Composition-API" class="headerlink" title="三、其它 Composition API"></a>三、其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><ul><li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li> 如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li> 如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h2><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h2 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4.customRef"></a>4.customRef</h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><pre class=" language-vue"><code class="language-vue"><template>    <input type="text" v-model="keyword">    <h3>&#123;&#123;keyword&#125;&#125;</h3></template><script>    import &#123;ref,customRef&#125; from 'vue'    export default &#123;        name:'Demo',        setup()&#123;            // let keyword = ref('hello') //使用Vue准备好的内置ref            //自定义一个myRef            function myRef(value,delay)&#123;                let timer                //通过customRef去实现自定义                return customRef((track,trigger)=>&#123;                    return&#123;                        get()&#123;                            track() //告诉Vue这个value值是需要被“追踪”的                            return value                        &#125;,                        set(newValue)&#123;                            clearTimeout(timer)                            timer = setTimeout(()=>&#123;                                value = newValue                                trigger() //告诉Vue去更新界面                            &#125;,delay)                        &#125;                    &#125;                &#125;)            &#125;            let keyword = myRef('hello',500) //使用程序员自定义的ref            return &#123;                keyword            &#125;        &#125;    &#125;</script></code></pre></li></ul><h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><img src="https://v3.cn.vuejs.org/images/components_provide.png" style="width:300px" /><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><pre class=" language-js"><code class="language-js"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">...</span><span class="token operator">...</span>    <span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">'奔驰'</span><span class="token punctuation">,</span>price<span class="token punctuation">:</span><span class="token string">'40万'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'car'</span><span class="token punctuation">,</span>car<span class="token punctuation">)</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>后代组件中：</p><pre class=" language-js"><code class="language-js"><span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">...</span><span class="token operator">...</span>    <span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'car'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>car<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ol></li></ul><h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="四、Composition-API-的优势"><a href="#四、Composition-API-的优势" class="headerlink" title="四、Composition API 的优势"></a>四、Composition API 的优势</h1><h2 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><div style="width:600px;height:370px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image" style="width:600px;float:left" /></div><div style="width:300px;height:370px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image" style="zoom:50%;width:560px;left" /> </div><h2 id="2-Composition-API-的优势"><a href="#2-Composition-API-的优势" class="headerlink" title="2.Composition API 的优势"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><div style="width:500px;height:340px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/></div><div style="width:430px;height:340px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image"style="height:360px"/></div><h1 id="五、新的组件"><a href="#五、新的组件" class="headerlink" title="五、新的组件"></a>五、新的组件</h1><h2 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h2><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><pre class=" language-vue"><code class="language-vue"><teleport to="移动位置">    <div v-if="isShow" class="mask">        <div class="dialog">            <h3>我是一个弹窗</h3>            <button @click="isShow = false">关闭弹窗</button>        </div>    </div></teleport></code></pre></li></ul><h2 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3.Suspense"></a>3.Suspense</h2><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>defineAsyncComponent<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./components/Child.vue'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><pre class=" language-vue"><code class="language-vue"><template>    <div class="app">        <h3>我是App组件</h3>        <Suspense>            <template v-slot:default>                <Child/>            </template>            <template v-slot:fallback>                <h3>加载中.....</h3>            </template>        </Suspense>    </div></template></code></pre></li></ul></li></ul><h1 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h1><h2 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局API的转移</h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//注册全局组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'MyButton'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  data<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    count<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;button @click="count++">Clicked &amp;#123;&amp;#123; count &amp;#125;&amp;#125; times.&lt;/button>'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注册全局指令</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  inserted<span class="token punctuation">:</span> el <span class="token operator">=</span><span class="token operator">></span> el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul><li><p>data选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x写法</p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>v-enter,<span class="token number">.</span>v-leave-to &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>v-leave,<span class="token number">.</span>v-enter-to &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li><li><p>Vue3.x写法</p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>v-enter-from,<span class="token number">.</span>v-leave-to &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>v-leave-from,<span class="token number">.</span>v-enter-to &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><pre class=" language-vue"><code class="language-vue"><my-component  v-on:close="handleComponentEvent"  v-on:click="handleNativeClickEvent"/></code></pre></li><li><p>子组件中声明自定义事件</p><pre class=" language-vue"><code class="language-vue"><script>  export default &#123;    emits: ['close']  &#125;</script></code></pre></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>……</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>黑盒测试</title>
      <link href="/2023/08/07/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/08/07/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h1><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_04.jpg" alt="黑盒测试设计方法_04"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_05.jpg" alt="黑盒测试设计方法_05"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_06.jpg" alt="黑盒测试设计方法_06"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_07.jpg" alt="黑盒测试设计方法_07"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_08.jpg" alt="黑盒测试设计方法_08"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_09.jpg" alt="黑盒测试设计方法_09"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_10.jpg" alt="黑盒测试设计方法_10"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_11.jpg" alt="黑盒测试设计方法_11"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_12.jpg" alt="黑盒测试设计方法_12"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_13.jpg" alt="黑盒测试设计方法_13"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_14.jpg" alt="黑盒测试设计方法_14"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_15.jpg" alt="黑盒测试设计方法_15"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_16.jpg" alt="黑盒测试设计方法_16"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_017.jpg" alt="黑盒测试设计方法_17"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_18.jpg" alt="黑盒测试设计方法_18"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_019.jpg" alt="黑盒测试设计方法_19"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_20.jpg" alt="黑盒测试设计方法_20"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_21.jpg" alt="黑盒测试设计方法_21"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_22.jpg" alt="黑盒测试设计方法_22"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_23.jpg" alt="黑盒测试设计方法_23"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_24.jpg" alt="黑盒测试设计方法_24"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_025.jpg" alt="黑盒测试设计方法_25"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_026.jpg" alt="黑盒测试设计方法_26"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_27.jpg" alt="黑盒测试设计方法_27"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_28.jpg" alt="黑盒测试设计方法_28"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_29.jpg" alt="黑盒测试设计方法_29"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_30.jpg" alt="黑盒测试设计方法_30"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_31.jpg" alt="黑盒测试设计方法_31"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_32.jpg" alt="黑盒测试设计方法_32"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_33.jpg" alt="黑盒测试设计方法_33"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_034.jpg" alt="黑盒测试设计方法_34"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95_035.jpg" alt="黑盒测试设计方法_35"></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白盒测试</title>
      <link href="/2023/08/07/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/08/07/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h1><p>问题：</p><ol><li>白盒测试方法的概念及应用场景</li><li>白盒测试方法</li><li>用各种逻辑覆盖法来和设计白盒测试用例</li><li>使用基本路径法来设计白盒测试用例</li></ol><p>内容：</p><ol><li>白盒测试的基本介绍</li><li>白盒测试用例设计方法   <ol><li>静态设计方法</li><li>动态设计方法</li></ol></li></ol><h2 id="一、白盒测试的概念及特点"><a href="#一、白盒测试的概念及特点" class="headerlink" title="一、白盒测试的概念及特点"></a>一、白盒测试的概念及特点</h2><h3 id="1、什么是白盒测试"><a href="#1、什么是白盒测试" class="headerlink" title="1、什么是白盒测试"></a>1、什么是白盒测试</h3><p>代码逻辑的测试</p><ul><li>白盒测试，又称结构测试、逻辑驱动测试或基于程序代码内部构成的测试。此时，测试工程师需深入考察程序代码的内部结构、逻辑设计等。</li><li>对于白盒测试工程师来说，软件产品内部构成是透明的。</li></ul><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726101345613.png" alt="image-20230726101345613"></p><h3 id="2、白盒测试的特点"><a href="#2、白盒测试的特点" class="headerlink" title="2、白盒测试的特点"></a>2、白盒测试的特点</h3><ol><li>优点：代码覆盖率高</li><li>缺点：   <ol><li>覆盖所有代码路径难度大</li><li>业务功能可能覆盖不全</li><li>测试开销大</li></ol></li></ol><h2 id="二、白盒测试设计方法"><a href="#二、白盒测试设计方法" class="headerlink" title="二、白盒测试设计方法"></a>二、白盒测试设计方法</h2><h3 id="1、静态设计方法"><a href="#1、静态设计方法" class="headerlink" title="1、静态设计方法"></a>1、静态设计方法</h3><ol><li>桌面检查</li><li>代码审查</li><li>代码走查</li><li>代码扫描工具</li></ol><h3 id="2、动态设计方法"><a href="#2、动态设计方法" class="headerlink" title="2、动态设计方法"></a>2、动态设计方法</h3><ol><li>逻辑覆盖法   <ul><li>语句覆盖</li><li>判定覆盖</li><li>条件覆盖</li><li>判断条件覆盖</li><li>条件组合覆盖</li><li>路径覆盖</li></ul></li><li>基本路径测试法</li></ol><h2 id="三、逻辑覆盖法"><a href="#三、逻辑覆盖法" class="headerlink" title="三、逻辑覆盖法"></a>三、逻辑覆盖法</h2><ul><li>逻辑覆盖法：是通过程序逻辑结构的便利实现程序的覆盖。</li><li>覆盖率：是用来度量测试完整性的一个手段</li></ul><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726101512222.png" alt="image-20230726101512222"></p><h3 id="1、语句覆盖"><a href="#1、语句覆盖" class="headerlink" title="1、语句覆盖"></a>1、语句覆盖</h3><h4 id="1、语句覆盖设计用例"><a href="#1、语句覆盖设计用例" class="headerlink" title="1、语句覆盖设计用例"></a>1、语句覆盖设计用例</h4><ul><li><p>语句覆盖：设计测试用例，是对程序中每条语句至少被执行一次。</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726101534149.png" alt="image-20230726101534149"></p></li></ul><p>例如：</p><p>​    案例代码中共有4条可执行语句</p><p>​    设计测试用例执行了3条，语句覆盖率为3/4=75%</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726101549457.png" alt="image-20230726101549457"></p><h4 id="2、语句覆盖法的局限性"><a href="#2、语句覆盖法的局限性" class="headerlink" title="2、语句覆盖法的局限性"></a>2、语句覆盖法的局限性</h4><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726101629073.png" alt="image-20230726101629073"></p><h3 id="2、判定覆盖"><a href="#2、判定覆盖" class="headerlink" title="2、判定覆盖"></a>2、判定覆盖</h3><h4 id="1、判定覆盖法设计用例"><a href="#1、判定覆盖法设计用例" class="headerlink" title="1、判定覆盖法设计用例"></a>1、判定覆盖法设计用例</h4><ul><li>判定覆盖：也叫分支覆盖，设计测试用例，使得程序中的每个判断的”真“和”假“都至少被执行一次。即：程序中的每个分支至少执行一次。</li></ul><h3 id="2、判定覆盖-1"><a href="#2、判定覆盖-1" class="headerlink" title="2、判定覆盖"></a>2、判定覆盖</h3><h4 id="1、判定覆盖法设计用例-1"><a href="#1、判定覆盖法设计用例-1" class="headerlink" title="1、判定覆盖法设计用例"></a>1、判定覆盖法设计用例</h4><ul><li>判定覆盖：也叫分支覆盖，设计测试用例，使得程序中的每个判断的”真“和”假“都至少被执行一次。即：程序中的每个分支至少执行一次。</li></ul><h3 id="2、判定覆盖-2"><a href="#2、判定覆盖-2" class="headerlink" title="2、判定覆盖"></a>2、判定覆盖</h3><h4 id="1、判定覆盖法设计用例-2"><a href="#1、判定覆盖法设计用例-2" class="headerlink" title="1、判定覆盖法设计用例"></a>1、判定覆盖法设计用例</h4><ul><li><p>判定覆盖：也叫分支覆盖，设计测试用例，使得程序中的每个判断的”真“和”假“都至少被执行一次。即：程序中的每个分支至少执行一次。</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726101657142.png" alt="image-20230726101657142"></p></li></ul><p>例如：</p><p>​    案例代码中有判定2个，判定结果4个</p><p>​    设计测试用例执行了3个分支，分支覆盖率为3/4=75%</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726101709755.png" alt="image-20230726101709755"></p><h4 id="2、判定覆盖法的局限性"><a href="#2、判定覆盖法的局限性" class="headerlink" title="2、判定覆盖法的局限性"></a>2、判定覆盖法的局限性</h4><ul><li>只要满足了判定覆盖标准就一定满足语句覆盖标准。</li></ul><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726101740708.png" alt="image-20230726101740708"></p><h3 id="3、条件覆盖"><a href="#3、条件覆盖" class="headerlink" title="3、条件覆盖"></a>3、条件覆盖</h3><h4 id="1、条件覆盖法设计测试用例"><a href="#1、条件覆盖法设计测试用例" class="headerlink" title="1、条件覆盖法设计测试用例"></a>1、条件覆盖法设计测试用例</h4><ul><li>条件覆盖：设计测试用例，使得判定中的每个条件至少有一次取真值，有一次取假值。</li></ul><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726101758562.png" alt="image-20230726101758562"></p><p>例如：</p><ul><li>案例代码中有判定2个，条件3个，条件结果6个</li><li>设计测试用例执行了5个条件结果，条件覆盖率为5/6=83%</li></ul><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726101812835.png" alt="image-20230726101812835"></p><h4 id="2、条件覆盖法的局限性"><a href="#2、条件覆盖法的局限性" class="headerlink" title="2、条件覆盖法的局限性"></a>2、条件覆盖法的局限性</h4><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726101831446.png" alt="image-20230726101831446"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726101838542.png" alt="image-20230726101838542"></p><h3 id="4、判定条件覆盖"><a href="#4、判定条件覆盖" class="headerlink" title="4、判定条件覆盖"></a>4、判定条件覆盖</h3><h4 id="1、判定条件覆盖法设计测试用例"><a href="#1、判定条件覆盖法设计测试用例" class="headerlink" title="1、判定条件覆盖法设计测试用例"></a>1、判定条件覆盖法设计测试用例</h4><ul><li>判定条件覆盖：设计测试用例，使得被测试程序中的每个判断本身的判定结果（真假）至少满足一次，同时，每个逻辑条件的可能值（真假）也至少被满足一次。即同时满足100%判定覆盖和100%条件覆盖的标准。</li></ul><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726101855152.png" alt="image-20230726101855152"></p><p>例如：</p><ul><li>案例代码中有判定2个，条件3个，判定结果4个，条件结果6个</li><li>设计测试用例执行了3个判定结果，5个条件结果，判定条件覆盖率为：（3+5）/（4+6）=80%</li></ul><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726101906185.png" alt="image-20230726101906185"></p><h4 id="2、判定条件覆盖法的局限性"><a href="#2、判定条件覆盖法的局限性" class="headerlink" title="2、判定条件覆盖法的局限性"></a>2、判定条件覆盖法的局限性</h4><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726101917436.png" alt="image-20230726101917436"></p><h3 id="5、条件组合覆盖"><a href="#5、条件组合覆盖" class="headerlink" title="5、条件组合覆盖"></a>5、条件组合覆盖</h3><h4 id="1、条件组合覆盖法设计用例"><a href="#1、条件组合覆盖法设计用例" class="headerlink" title="1、条件组合覆盖法设计用例"></a>1、条件组合覆盖法设计用例</h4><ul><li>条件组合覆盖：设计测试用例，使得被测试程序中的每个判定中条件结果的所有可能组合至少执行一次。</li></ul><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726101933876.png" alt="image-20230726101933876"></p><p>例如：</p><ul><li><p>案例代码中有判定2个，条件3个（判定1有2个条件，判定2有1一个条件），判定1的条件组合为4个，判定2的条件组合为2个</p></li><li><p>设计测试用例执行了5个条件组合，条件组合覆盖率为：5/（4+2）=83%</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726101946214.png" alt="image-20230726101946214"></p></li></ul><h4 id="2、条件组合覆盖法的局限性"><a href="#2、条件组合覆盖法的局限性" class="headerlink" title="2、条件组合覆盖法的局限性"></a>2、条件组合覆盖法的局限性</h4><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726102000274.png" alt="image-20230726102000274"></p><h3 id="6、路径覆盖"><a href="#6、路径覆盖" class="headerlink" title="6、路径覆盖"></a>6、路径覆盖</h3><h4 id="1、路径覆盖法设计测试用例"><a href="#1、路径覆盖法设计测试用例" class="headerlink" title="1、路径覆盖法设计测试用例"></a>1、路径覆盖法设计测试用例</h4><ul><li>路径覆盖：设计测试用例，覆盖程序中所有可能的路径。</li></ul><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726102011246.png" alt="image-20230726102011246"></p><p>例如：</p><ul><li>案例代码中共有4条路径</li><li>设计测试用例执行了3条路径，路径覆盖率为3/4=75%</li></ul><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726102027065.png" alt="image-20230726102027065"></p><h4 id="2、路径覆盖法的局限性"><a href="#2、路径覆盖法的局限性" class="headerlink" title="2、路径覆盖法的局限性"></a>2、路径覆盖法的局限性</h4><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726102102864.png" alt="image-20230726102102864"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726102109647.png" alt="image-20230726102109647"></p><h2 id="四、基本路径测试法"><a href="#四、基本路径测试法" class="headerlink" title="四、基本路径测试法"></a>四、基本路径测试法</h2><ul><li>基本路径测试法：在程序控制流程图的基础上，通过分析程序的环路复杂性，导出基本可执行路径集合，从而设计测试用例</li><li>基本路径测试法步骤：</li></ul><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726102130602.png" alt="image-20230726102130602"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726102123392.png" alt="image-20230726102123392"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726102142051.png" alt="image-20230726102142051"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726102148692.png" alt="image-20230726102148692"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726102155575.png" alt="image-20230726102155575"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726102202665.png" alt="image-20230726102202665"></p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230726102209350.png" alt="image-20230726102209350"></p><p>对白盒测试的特点进行补充<br>特点：</p><ol><li>保证每一个模块中的所有独立的路径至少被使用一次</li><li>对所有逻辑值均需测试true和false</li><li>在上下边界及可操作范围内运行所有循环</li><li>检查内部数据结构以确保其有效性</li></ol>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/07/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/"/>
      <url>/2023/08/07/%E8%8B%B1%E8%AF%AD%E9%97%AE%E7%AD%94/</url>
      
        <content type="html"><![CDATA[<p><strong>常见情况处理</strong></p><p>若考官问其他的，没有听明白，可以说(记住，一定要微笑)：</p><p>Could you please make the question simpler? 您能把这个问题说得简单些吗？</p><p>Could you please express in a different way? 您能用别的话来表达您的意思吗？</p><p>Could you please say again？Sorry I cannot hear clearly.</p><p>你能再说一遍吗?对不起，我听不清楚。</p><p>Could you please change a question? I don’t know how to organize language and therefore it’s difficult for me to answer it.</p><p>你能改一个问题吗?我不知道如何组织语言，因此我很难回答这个问题。</p><p>The Internet may be bad</p><p>I am in the dormitory</p><p>介绍你的<strong>家庭</strong> 介绍你的爱好还是家乡 2022</p><p>a.向我们介绍一下你自己 2021</p><p>b.你最近最快乐的一件事情</p><p>c.你倾向于个人学习还是小组学习（应该是这个问题，前半部分没有听清楚）</p><p>2020</p><p>a. 自我介绍 介绍<strong>学校</strong></p><p>数据结构、基本排序算法、网络、ssl协议</p><p>2022-1</p><p>自我介绍、<strong>爱好</strong>、介绍学校</p><p>2022-2</p><p>自我介绍、职业规划、自己的<strong>家庭</strong></p><p>\1. 自我介绍</p><p>\2. 介绍自己的学校 Tell me something about your university.</p><p>My undergraduate college is South China Agricultural University. Located in guangzhou, guangdong Province is a national key university and a national “double first-class” construction university, it is a comprehensive university with advantages in agricultural sciences and life sciences. South China Agricultural University has given me a lot in the past few years, which not only made me grow up from an ignorant to a student with clear carrer plan, but also strengthened my confidence in devoting to the society; not only laid a solid professional foundation for me and passed on knowledge to me, but also taught me to hold a proper attitude towards the study.</p><p>我的本科学校是华南农业大学。它位于广东省广州市，是一所全国重点大学和国家“双一流”建设大学，是一所以农业科学和生命科学为优势的综合性大学。华南农业大学这几年给了我很多，不仅让我从一个懵懂无知的人成长为一个有明确职业规划的学生，更坚定了我投身社会的信心;不仅为我打下了坚实的专业基础，传授了知识，也教会了我正确对待学习的态度。</p><p>\3. 你对我们学校了解吗？/ 你能简单说说对我们学校的印象吗？Do you know our school? / Can you briefly talk about your impression of our school?</p><p>Your school has a rich faculty, full of professional ability and high-quality teachers. There is no doubt that I will learn a lot here. It is always my dream school, now I have a chance to apply for it, I want to seize this chance.</p><p>贵校师资力量雄厚，专业能力强，师资队伍素质高。毫无疑问，我会在这里学到很多东西。它一直是我梦想中的学校，现在我有机会申请它，我想抓住这个机会。</p><p>\4. 介绍家乡 Where are you from? / Tell something about your hometown. / Would you like to tell some stories about your hometown?</p><p>My hometown is Meizhou, located in the northeast part of Guangdong Province，Meizhou is known as the “Guest capital of the world” and is the hometown of Marshal Ye Jianying. It enjoys the reputation of the hometown of culture,  the hometown of football, the hometown of hot springs, the hometown of Hakka cuisine, and the hometown of peace. Meizhou has beautiful scenery and is a livable city in the country. Meizhou specialty oil and salt baked chicken, Hakka stuffed tofu and so on.</p><p>如果问到气候：（Meizhou has four distinct seasons and pleasant scenery.）</p><p>\5. 介绍家庭 Tell something about your family.</p><p>There are four people in my family: my father, my mother, my three brothers and me. My parents are both businessmen and run a drugstore together. As I am the oldest child in my family, my parents have been strict with me since childhood. They asked me to work steadily, be an honest person, and teach me to study hard and change my fate with knowledge, which is not only their request for me, but also their own golden rule.</p><p>我家有四口人:我爸爸，我妈妈，我的三个兄弟和我。我的父母都是商人，一起经营一家药店。由于我是家里最大的孩子，我的父母从小就对我很严格。他们要求我踏实工作，做一个诚实的人，教我努力学习，用知识改变命运，这既是他们对我的要求，也是他们自己的金科玉律。</p><p>\6. 个人兴趣爱好 / 业余活动 / 你空闲时间喜欢做些什么？</p><p>Could you tell me about a hobby or an interest that you have? / What do you like to do in your spare time? / How do you arrange your spare time?</p><p>In my spare time, I like playing basketball and exercising by running. I am eager to learn some new things and have a strong curiosity about them. In the past few years in college, through the combination of study and exercise, I feel that I have lived a very fulfilling life.</p><p>闲暇之余，我喜欢打篮球和通过跑步来锻炼身体。我渴望学习一些新事物，并且对它们有着强烈的好奇心。在大学的过去几年里，通过学习与运动的劳逸结合，我觉得过的很充实。</p><p>\7. 接下来研究生学习的规划</p><p>What is your (research) plan in the postgraduate study?</p><p>I want to improve myself in three aspects.</p><p>First of all, in terms of professional skills, I would like to do more research under the guidance of my tutor to improve my research ability.</p><p>Secondly, I want to improve my English skills by reading more English papers and writing English papers.</p><p>Third, I want to strengthen my critical thinking skills and learn to identify and solve challenges independently.</p><p>我想在三个方面提升自己。</p><p>首先，在专业技能方面，我想在导师的指导下进行更多的研究，提高自己的研究能力。</p><p>其次，我想通过阅读更多的英语论文和写英语论文来提高我的英语技能。</p><p>第三，我想加强批判性思维能力，学会独立发现和解决挑战。</p><p>\8. 读研后职业规划</p><p>After graduation, I want to develop in first-tier cities, engage in a related job in the computer field in an Internet company, and apply the theoretical knowledge I have learned to practice.</p><p>毕业后，我想在一线城市发展，在互联网公司从事计算机领域的相关工作，并将所学的理论知识运用到实践中。</p><p>\9. 介绍自己的专业</p><p>Tell me something about your major.</p><p>My major is software engineering. It is a discipline based on computer science and technology which studies the use of engineering methods to construct and maintain effective, practical and high-quality software. It involves programming language, data structure, operating system and so on. Generally speaking, software engineering is a major related to software development.</p><p>我的专业是软件工程。它是一门以计算机科学和技术为基础，研究使用工程方法来构建和维护有效、实用和高质量的软件等的学科。它涉及编程语言、数据结构、操作系统等。一般来说，软件工程是与软件开发相关的专业。</p><p>Why apply for this major?（为什么报考这个专业）/为什么读研？Why do you want to become a postgraduate?</p><p>There are two reasons. On the one hand, I love this major very much. It’s interesting and useful. we can do many things on the computer if we learn it well. On the other hand, the computer direction has a broad development prospect in today’s society and studying this major can make me a better job in the future.</p><p>有两个原因。一方面，我非常喜欢这个专业。这很有趣也很有用。如果我们学得好，我们可以在计算机上做很多事情。另一方面，计算机方向在当今社会有着广阔的发展前景，学习这个专业可以让我以后的工作更好。</p><p>\10. 在大学，你迄今为止最有成就感的一件事 / 大学里最难忘的一件事 / 大学里最成功的一件事/你最近最快乐的一件事情</p><p>What has been your greatest success/accomplishment in campus life? / What is the most memorable/successful thing you have in college?/What is the happiest thing that happened to you recently？</p><p>When I first entered the university life, my learning attitude was not particularly correct. But then I kept working hard, and the results were basically stable in the top two. There is no doubt that this is the greatest affirmation for me and also supports me to continue to study hard.</p><p>刚进入大学生活时我的学习态度不是特别端正。但是后来我不断努力，成绩也基本稳定在前两名。毫无疑问这是对我最大的肯定，也支撑着我继续努力学习。</p><p>\11. Do you prefer individual study or group study? 你倾向于个人学习还是小组学习？</p><p>I may prefer to study by myself, and I usually prefer to study or explore problems by myself first. If there are problems that need to be completed by the team, I will definitely cooperate actively. I think both individual and group learning are important to some extent.</p><p>我可能更倾向于个人学习，平时可能比较喜欢一个人先去研究或者探索问题。如果遇到需要小组一起完成的问题我也一定会积极配合。我认为个人和小组学习在某种程度上来说都是很重要的。</p><p>自我介绍</p><p>Good afternoon, teachers. My name is Liu Longhao. I study software engineering in South China Agricultural University, ranking second in my major. I have won the third prize of Blue Bridge Cup National Finals, the first prize of Guangdong competition, and the third prize of mathematical modeling in the Asia-Pacific region. At present, a CCF-C paper has been accepted. In this paper, I was responsible for and participated in the design and development of the online evaluation system, including the development of back-end interface, database design, front-end interface development and system deployment. This year, together with my graduate student, I proposed a square tray center area segmentation algorithm. It can reliably segment the center area of the square tray, and has completed the writing of the paper, and is now contributing to the core journal papers of Peking University. While in school, I also presided over a big creative project as a host. I was mainly responsible for the process design of the system and the construction of each module of the system, as well as the design and development of the genotypic prediction software for drug resistance phenotype, mainly responsible for the back-end development. I like sports very much. For example, I often play basketball, run, and have participated in school sports competitions. I hope that I can do my best and devote myself to study, and contribute to the profession I love.</p><p>老师们下午好，我是刘龙浩，就读于华南农业大学软件工程专业，排名专业第二。我获得过蓝桥杯全国总决赛三等奖、广东赛区一等奖，亚太地区数学建模三等奖等。目前已有一篇CCF-C论文被录用，在这篇论文我负责以及参与在线评判系统的设计与开发，包括后端接口的开发、数据库的设计、前端界面的开发和系统的部署等等；今年我与研究生师兄一起提出了一种方形托盘中心区域分割算法。它能够可靠的分割出方形托盘的中心区，并且已经完成了论文的撰写，现在正在投稿北大核心期刊论文。在校期间我还以主持人的身份主持了一项大创项目。我主要负责系统的流程设计和系统各模块的搭建，设计以及开发基因型预测耐药表型软件，主要负责后端开发部分。我非常喜欢运动。例如经常打篮球，跑步，并且参加过学校的运动比赛。我希望能竭尽所能、潜心钻研，为我所热爱的专业贡献一己之力。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 学习路线</title>
      <link href="/2023/08/07/Python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2023/08/07/Python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-学习路线"><a href="#Python-学习路线" class="headerlink" title="Python 学习路线"></a>Python 学习路线</h1><blockquote><p>Python 学习路线 by 程序员鱼皮</p></blockquote><p>在看路线前，建议大家先通过以下视频了解几个问题：</p><ul><li>Python 为什么这么火？</li><li>为什么都在说学 Python 找不到工作？Python 真香么？</li><li>我要学 Python 么？</li><li>怎么快速学习？</li></ul><p>视频地址：<a href="https://www.bilibili.com/video/BV133411C7u5/">https://www.bilibili.com/video/BV133411C7u5/</a></p><h2 id="Python-为什么火了？"><a href="#Python-为什么火了？" class="headerlink" title="Python 为什么火了？"></a>Python 为什么火了？</h2><p>有很多原因，列举几点：</p><ol><li>语法简单易学，其他语言 5 行代码才能实现的东西，Python 一行搞定！可以少写很多代码，因此不少同学拿 Python 刷算法题（但注意要理解算法本身哦）。</li><li>类库生态丰富，想做什么功能基本都有现成的代码，拿来直接用就行，无比方便！</li><li>免费开源，感兴趣、有能力的同学可以自己去研究源码。</li><li>其他特性，比如跨平台、可扩展等。</li><li>作为数据科学、人工智能的首选语言，踩到了时代的风口。</li></ol><p>于是乎，Python 被推向了神坛，甚至在 2021 年 10 月的编程语言排行榜中，Python 登上了第一位！</p><p><img src="https://qiniuyun.code-nav.cn/image-20211009115608685.png" alt="TIOBE 编程语言排行榜"></p><p>但就是这样一门 “永远的神” 的编程语言，却在网上被口口相传说：学了 Python 找不到工作！</p><p>哎，为啥呢？</p><h2 id="为什么-Python-不适合找工作？"><a href="#为什么-Python-不适合找工作？" class="headerlink" title="为什么 Python 不适合找工作？"></a>为什么 Python 不适合找工作？</h2><p>一方面是，大多数的企业，都不用 Python 来开发应用。</p><p>因为 Python 的运行速度太慢了，别说跟底层的 C++ 比了，Java 都能甩它几条街！而且这和语言本身的设计实现有关，所以哪怕你再出什么技术去优化它的性能，也终究有个瓶颈，世界上最好的语言 PHP 也是一样。</p><p>而对企业来说，<strong>性能</strong> 会直接影响用户体验和机器成本，尤其是在这个信息爆炸、大家都在追求性能的时代，Python 在应用开发领域的地位就很尴尬，而开发岗又正好是程序员中占比极高的岗位。</p><p>另一方面，虽然 Python 的应用场景很多、相关岗位也不少，又是什么 AI、数据科学的主流语言是吧，未来很美好。但是，这些前沿技术的难点并不是 Python 语言的代码本身，而是算法和思想。Python 只是一个调包、把你思想表达出来的工具而已。所以这些前沿岗位的门槛远比你入门 Python、或者听培训机构画饼时要高的多，算法岗位、大厂的产品岗真就是神仙打架，而且研究生居多。</p><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><p>既然这样，那我还要不要学 Python 呢？</p><p>我认为：<strong>必须要学！</strong></p><p>但是，一定要先思考自己的学习目标，目标不同，对 Python 的学习态度和投入的时间也不同。</p><p>如果想找开发岗位的工作，像上面说的，不建议把 Python 作为你的主语言，而是把它当做你的副武器。只需简单学学 Python 基础，就可以编写 Python 脚本来自动化办公、提高工作效率、做一些小工具了，性价比很高。</p><p><strong>如果说编程语言是工具，那 Python 是对这句话的完美诠释。</strong> 多会用一个神器，谁不爱呢？</p><p>如果你想找其他岗位的工作，比如运维、测试、数据分析、产品经理、大数据、爬虫、人工智能、图像处理、多媒体处理、算法研究，当然也可以，只是如果以这些岗位为目标，除了要打好 Python 基础外，更重要的是理解对应领域的思想、方法和实践，而不是只会引库调包。</p><p>如果你是初学编程或者出于好奇学编程，我也建议你学 Python，好玩、能学下去、能培养兴趣，这些对初学者非常重要，有了兴趣之后，再学别的语言就会如鱼得水。</p><h2 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h2><p>对于初学者和非 Python 岗位的从业者，就把 Python 当工具学，了解下基础语法和常用类库，需要写 Python 脚本时，能利用搜索引擎和文档写出（或者复制）代码就行。只要你学过其他编程语言，上手 Python 真的都很容易，3 - 7 天就能学会。</p><p>建议学习时多写些小例子，比如 Python 处理表格、Python 处理 PDF 等，感受 Python 类库的强大就完事儿~</p><h2 id="学习路线大纲"><a href="#学习路线大纲" class="headerlink" title="学习路线大纲"></a>学习路线大纲</h2><p>折叠了一部分，还是老长，<strong>思维导图获取见文末</strong> ：</p><p><img src="https://qiniuyun.code-nav.cn/img/%E9%B1%BC%E7%9A%AE%20-%20Python%20%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.png" alt="鱼皮 - Python 学习路线"></p><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul><li>Python 安装</li><li>开发工具<ul><li>PyCharm</li><li>Sublime</li><li>VS Code</li></ul></li><li>变量<ul><li>定义变量</li><li>关键字</li><li>命名规则</li><li>基本数据类型</li><li>类型转换</li></ul></li><li>运算符和表达式</li><li>流程控制<ul><li>条件分支</li><li>循环</li></ul></li><li>基本数据结构<ul><li>字符串</li><li>列表</li><li>元组</li><li>集合</li><li>字典</li></ul></li><li>函数<ul><li>定义</li><li>参数传递</li><li>作用域</li><li>lambda 表达式</li><li>常用内置函数</li></ul></li><li>⭐ 面向对象编程<ul><li>类和对象</li><li>三大特性<ul><li>封装<ul><li>self</li><li>属性</li><li>方法<ul><li>类方法</li><li>实例方法</li><li>静态方法</li></ul></li><li>访问控制</li></ul></li><li>继承<ul><li>单继承</li><li>多继承</li></ul></li><li>多态<ul><li>方法重写</li></ul></li></ul></li><li>运算符重载</li><li>装饰器</li><li>反射</li></ul></li><li>模块<ul><li>导入模块</li><li>常用模块<ul><li>文件处理</li><li>日期时间</li></ul></li></ul></li><li>包<ul><li>导入包</li><li>生成包</li></ul></li><li>异常处理<ul><li>捕获异常</li><li>try … else … finally 结构</li><li>自定义异常</li></ul></li><li>文件操作<ul><li>文件开闭</li><li>文件读写</li></ul></li></ul><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><ul><li>函数进阶<ul><li>闭包</li><li>匿名函数</li><li>生成器函数</li><li>装饰器</li><li>高阶函数</li></ul></li><li>正则表达式</li><li>数据库编程<ul><li>数据库基础</li><li>SQL 编写</li><li>查询<ul><li>聚合</li><li>分组</li><li>关联</li><li>排序</li></ul></li><li>事务</li><li>数据库设计</li><li>数据库调优</li></ul></li><li>并发编程<ul><li>同步和异步</li><li>阻塞和非阻塞</li><li>多线程</li><li>多进程</li><li>协程</li><li>并发类库</li></ul></li><li>网络编程<ul><li>网络基础（七层模型、IP）</li><li>网络协议（TCP、UDP、HTTP、HTTPS、FTP、DNS）</li><li>WebSocket</li></ul></li></ul><h3 id="web-开发"><a href="#web-开发" class="headerlink" title="web 开发"></a>web 开发</h3><ul><li>Django 框架<ul><li>安装与 Demo</li><li>MVT 分层</li><li>模型<ul><li>数据库基础</li><li>ORM<ul><li>单表查询</li><li>多表查询</li><li>聚合查询</li></ul></li></ul></li><li>视图</li><li>模板<ul><li>模板语法</li><li>静态资源</li></ul></li><li>路由</li><li>Django Admin 管理工具</li><li>测试</li><li>会话</li><li>鉴权</li><li>文件上传</li><li>中间件</li><li>高级特性<ul><li>分页</li><li>缓存<ul><li>本地缓存</li><li>Redis 分布式缓存</li></ul></li><li>序列化</li><li>信号</li><li>celery 任务调度</li></ul></li><li>Restful API 开发<ul><li>概念</li><li>数据序列化</li><li>Django Rest Framework</li></ul></li><li>部署</li><li>项目实战</li></ul></li><li>前端基础<ul><li>HTML</li><li>CSS</li><li>JavaScript</li></ul></li><li>Flask 框架</li></ul><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><ul><li>概念</li><li>合法性</li><li>数据抓取<ul><li>常用网络协议（http / https）概念</li><li>请求<ul><li>请求头</li><li>请求参数</li><li>请求类型</li></ul></li><li>响应<ul><li>响应头</li><li>响应参数</li></ul></li><li>requests 模块</li><li>urllib 模块</li><li>模拟登陆</li><li>静态 / 动态网站抓取</li><li>无头浏览器<ul><li>selenium</li><li>puppeteer</li></ul></li></ul></li><li>数据解析<ul><li>常用标签</li><li>BeautifulSoup</li><li>正则表达式</li><li>xpath</li></ul></li><li>数据导出<ul><li>文件<ul><li>Excel</li><li>CSV</li></ul></li><li>数据库<ul><li>MongoDB</li><li>MySQL</li></ul></li><li>中间件<ul><li>Redis</li></ul></li></ul></li><li>Scrapy 框架<ul><li>核心概念<ul><li>命令行工具</li><li>Spiders</li><li>Selectors</li><li>Items</li><li>Item Loaders</li><li>管道</li><li>Scrapy Shell</li><li>Link Extractors</li></ul></li><li>调度器</li><li>分布式爬虫</li><li>部署</li></ul></li><li>并发异步爬虫<ul><li>aioHttp</li><li>asyncio</li></ul></li><li>高级<ul><li>IP 代理</li><li>验证码识别</li><li>APP 抓取</li><li>增量式爬虫</li></ul></li><li>项目实战</li><li>反爬虫<ul><li>请求头限制</li><li>验证码</li><li>黑白名单</li><li>封禁 IP</li><li>数据加密</li><li>数据混淆</li><li>行为分析</li></ul></li></ul><h3 id="自动化运维"><a href="#自动化运维" class="headerlink" title="自动化运维"></a>自动化运维</h3><ul><li>Linux 环境</li><li>Shell 脚本编写</li><li>脚本管理</li><li>脚本发布</li><li>Python 运维库</li><li>常用运维工具</li></ul><h3 id="数据分析（数据科学）"><a href="#数据分析（数据科学）" class="headerlink" title="数据分析（数据科学）"></a>数据分析（数据科学）</h3><ul><li>环境搭建<ul><li>Anaconda</li><li>Conda</li><li>Miniconda</li><li>Jupyter Notebook</li></ul></li><li>常用数据结构</li><li>常用类库<ul><li>Numpy<ul><li>数组</li><li>索引</li><li>切片</li><li>多维数组</li><li>函数</li></ul></li><li>Pandas<ul><li>Series</li><li>DataFrame</li><li>索引</li><li>对齐</li><li>函数</li><li>统计</li></ul></li></ul></li><li>数据处理<ul><li>数据清洗</li><li>层次化索引</li><li>数据连接</li><li>数据合并</li><li>分组聚合</li><li>轴向旋转</li></ul></li><li>数据可视化<ul><li>matplotlib</li><li>seaborn</li><li>pyechart</li></ul></li></ul><h3 id="算法（人工智能）"><a href="#算法（人工智能）" class="headerlink" title="算法（人工智能）"></a>算法（人工智能）</h3><blockquote><p>鱼皮自己没怎么接触人工智能，结合网上很多大神的资料整理而成，也有一定参考意义。</p></blockquote><ul><li>数学基础<ul><li>高等数学</li><li>线性代数</li><li>概率论</li><li>统计分析</li></ul></li><li>机器学习<ul><li>特征工程</li><li>模型<ul><li>模型分类</li><li>模型评估</li><li>模型训练</li><li>模型调优</li></ul></li><li>常用算法<ul><li>监督与无监督学习</li><li>回归（有监督）<ul><li>线性回归</li><li>决策树</li><li>集成算法</li></ul></li><li>分类（有监督）<ul><li>逻辑回归</li><li>决策树</li><li>支持向量机</li><li>集成算法</li><li>贝叶斯算法</li></ul></li><li>聚类（无监督）<ul><li>k-means</li><li>dbscan</li></ul></li><li>降维<ul><li>主成分分析</li><li>线性判别分析</li></ul></li><li>进阶<ul><li>GBDT 提升算法</li><li>lightgbm</li><li>EM 算法</li><li>隐马尔科夫模型</li></ul></li></ul></li><li>多因子模型</li><li>常用库<ul><li>Scikit-learn</li></ul></li><li>量化交易策略</li></ul></li><li>深度学习<ul><li>数据预处理</li><li>算法<ul><li>神经网络</li><li>卷积神经网络</li><li>递归神经网络</li><li>对抗生成网络</li><li>序列网络模型</li></ul></li><li>常用算法</li><li>框架和平台<ul><li>Tenserflow2</li><li>Pytorch</li><li>Keras</li><li>Caffe</li></ul></li></ul></li><li>自然语言处理</li><li>图像处理</li><li>计算机视觉</li></ul><h2 id="常用类库"><a href="#常用类库" class="headerlink" title="常用类库"></a>常用类库</h2><p>Python 能被广泛应用，很大程度上是因为其丰富的类库，就是他人提前写好并封装的代码。基本你要做什么东西都能找到对应的类库，直接看文档用就行了，大大提高开发效率！</p><p>开源项目 <code>awesome-python-cn</code>（地址：<a href="https://github.com/jobbole/awesome-python-cn%EF%BC%89">https://github.com/jobbole/awesome-python-cn）</a> 和 <code>awesome-python</code>（地址：<a href="https://github.com/vinta/awesome-python%EF%BC%89%E5%B7%B2%E7%BB%8F%E5%B8%AE%E5%A4%A7%E5%AE%B6%E6%95%B4%E7%90%86%E4%BA%86%E5%90%84%E6%96%B9%E5%90%91%E7%9A%84">https://github.com/vinta/awesome-python）已经帮大家整理了各方向的</a> Python 类库，数量非常多。鱼皮在此基础上筛选了一些相对优质的库，分享给大家。</p><h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><h4 id="日期处理"><a href="#日期处理" class="headerlink" title="日期处理"></a>日期处理</h4><ul><li>delorean：日期处理库</li><li>pendulum：日期时间操作库</li><li>dateutil：对标准 datetime 模块的强大扩展</li></ul><h4 id="终端优化"><a href="#终端优化" class="headerlink" title="终端优化"></a>终端优化</h4><ul><li>IPython：功能丰富的交互式 Python 解析器</li><li>Jupyter Notebook：基于网页的用于交互计算的应用程序</li><li>Prettytable：生成美观的 ASCII 格式的表格</li><li>Colorama：让终端具有颜色</li><li>bashplotlib：在终端中进行基本绘图</li><li>emoji：支持在 Python 终端输出表情</li><li>Ipyvolume：在 Jupyter notebook 中可视化 3d 体积和字形</li></ul><h4 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h4><ul><li>FlashText：高效的文本查找替换库</li><li>furl：url 处理库</li><li>pypinyin：汉字拼音转换工具</li><li>simplejson：JSON 编 / 解码器</li><li>JMESPath：JSON 查询语法库</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><p>Pipenv：Python 官方推荐的新一代包管理工具</p></li><li><p>threading：自带的线程库</p></li><li><p>multiprocessing：自带的多线程库</p></li><li><p>Chardet：字符编码检测器</p></li><li><p>logging：日志功能</p></li><li><p>PySnooper：Python 调试工具</p></li><li><p>sphinx：Python 文档生成器</p></li><li><p>pyttsx3：文字转语音库</p></li><li><p>PyWin32：提供和 windows 的交互</p></li><li><p>shortuuid：生成唯一 uuid 的库</p></li><li><p>more-itertools：支持迭代操作对象</p></li><li><p>cryptography：密码学工具包</p></li></ul><h3 id="网络请求-amp-解析"><a href="#网络请求-amp-解析" class="headerlink" title="网络请求 &amp; 解析"></a>网络请求 &amp; 解析</h3><ul><li>requests：HTTP 请求库</li><li>aiohttp：异步 HTTP 网络库</li><li>scrapy：分布式网页采集框架</li><li>pyspider：一个强大的爬虫系统</li><li>BeautifulSoup：从 HTML 或 XML 文件中提取数据的库</li><li>you-get：网页视频下载器</li><li>wget：网页文件下载</li><li>musicdl：Python 音乐下载器</li></ul><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><ul><li>openpyxl：Excel 读写库</li><li>tablib：处理表格数据</li><li>csvkit：用于转换和操作 CSV 的工具</li><li>XlsxWriter：操作 Excel</li><li>python-docx：操作 office word 文档</li><li>PyPDF2：操作 PDF 文档</li><li>pdfminer：从 PDF 文档中抽取信息的工具</li><li>xhtml2pdf：HTML 转 PDF 工具</li><li>WeasyPrint：可视化网页，并支持导出为 PDF</li><li>html2text：将 HTML 转换为 Markdown 文档</li><li>xmltodict：像处理 JSON 一样处理 XML</li><li>moviepy：基于脚本的视频编辑模块</li><li>eyeD3：操作音频文件的工具</li><li>pyAudioAnalysis：音频特征提取分析</li></ul><h3 id="界面开发"><a href="#界面开发" class="headerlink" title="界面开发"></a>界面开发</h3><ul><li>pyQT：跨平台的用户界面开发框架</li><li>Turtle：交互式绘画库</li><li>pyglet：跨平台界面及多媒体框架</li><li>wxPython：Python 用户界面开发工具</li><li>Pygame：一组用来开发游戏的 Python 模块</li><li>Manim：Python 数学动画引擎</li><li>progressbar：一个滚动条函数库</li><li>progress：进度条输出</li><li>tqdm：快速、可扩展的进度条</li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li>nose：测试框架</li><li>faker：生成假数据</li><li>PyAutoGUI：跨平台 GUI 自动测试模块</li><li>coverage：代码覆盖率测量</li><li>sqlmap：自动 SQL 注入和渗透测试工具</li></ul><h3 id="Web-开发"><a href="#Web-开发" class="headerlink" title="Web 开发"></a>Web 开发</h3><ul><li>Django：Python 界最流行的 web 框架</li><li>Django REST framework：用于开发 web api 的框架</li><li>FastAPI：快速构建 web 应用程序</li><li>flask：Python 微型框架</li><li>Twisted：一个事件驱动的网络引擎</li></ul><h3 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h3><ul><li>psutil：跨平台的进程和系统工具模块</li><li>supervisor：进程控制管理系统</li><li>sh：让 Python 支持 shell 脚本</li><li>dnspython：DNS 工具包</li><li>scapy：数据包处理库</li><li>pexpect：在伪终端中控制交互程序</li><li>paramiko：远程连接服务</li><li>Ansible：IT 自动化平台</li><li>SaltStack：基础设施自动化和管理系统</li><li>watchdog：管理文件系统事件的 API 和 shell 工具</li></ul><h3 id="图像处理-amp-计算机视觉"><a href="#图像处理-amp-计算机视觉" class="headerlink" title="图像处理 &amp; 计算机视觉"></a>图像处理 &amp; 计算机视觉</h3><ul><li>Pillow：图像处理库</li><li>kornia：计算机视觉库</li><li>Opencv：开源计算机视觉库</li><li>Mahotas：计算机视觉和图像处理库</li><li>Luminoth：计算机视觉的深度学习工具集</li></ul><h3 id="数据分析-amp-数据科学"><a href="#数据分析-amp-数据科学" class="headerlink" title="数据分析 &amp; 数据科学"></a>数据分析 &amp; 数据科学</h3><ul><li>NumPy：数值计算工具包</li><li>Pandas：主流的数据分析工具</li><li>pyecharts：基于百度 Echarts 的数据可视化库</li><li>Dash：快速构建 Web 数据可视化应用</li><li>matplotlib：Python 2D 绘图库</li><li>Seaborn：使用 Matplotlib 进行统计数据可视化</li><li>python-recsys：实现推荐系统的库</li><li>vaex：高速大数据处理库</li><li>SciPy：算法和数学工具库</li><li>blaze：NumPy 和 Pandas 的大数据接口</li><li>statsmodels：统计建模和计量经济学</li></ul><h3 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h3><ul><li>Tensorflow：谷歌开源的最受欢迎的深度学习框架</li><li>keras：深度学习封装库，快速上手神经网络</li><li>Pytorch：具有张量和动态神经网络，并有强大 GPU 加速能力的深度学习框架</li><li>Caffe2：一个轻量、模块化、可扩展的深度学习框架</li><li>scikit-learn：基于 SciPy 构建的机器学习 Python 模块</li><li>PyMC：马尔科夫链蒙特卡洛采样工具</li><li>mmdetection：深度学习目标检测工具箱</li><li>imbalanced-learn：不平衡学习工具包</li><li>XGBoost：分布式梯度增强库</li><li>Gym：强化学习算法的工具包</li></ul><h3 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h3><ul><li>NLTK：自然语言处理工具包</li><li>Gensim：话题建模库</li><li>Pattern：自然语言处理工具</li><li>fuzzywuzzy：用于字符串模糊匹配、令牌匹配等</li><li>TextBlob：为进行普通自然语言处理任务提供一致的 API</li><li>PyFlux：时间序列处理库</li><li>jieba：中文分词工具</li></ul><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p>（大纲图）</p><h2 id="岗位"><a href="#岗位" class="headerlink" title="岗位"></a>岗位</h2><ul><li>腾讯校招 Python 相关岗位：<a href="https://join.qq.com/post.html?keyword=python">https://join.qq.com/post.html?keyword=python</a></li><li>岗位薪资查询：OfferShow 小程序</li><li>运维工程师</li><li>Web 开发工程师（后端、全栈为主）</li><li>测试工程师</li><li>数据分析师</li><li>产品经理</li><li>算法工程师<ul><li>机器学习</li><li>计算机视觉</li><li>NLP</li><li>多媒体处理</li></ul></li><li>大数据工程师<ul><li>大数据开发</li><li>数据挖掘</li></ul></li><li>网络爬虫工程师</li><li>技术研究员</li></ul><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><h4 id="零基础"><a href="#零基础" class="headerlink" title="零基础"></a>零基础</h4><ul><li>⭐ 千锋教育 700 集零基础 Python 教程：<a href="https://www.bilibili.com/video/BV1R7411F7JV%EF%BC%88%E9%9D%9E%E5%B8%B8%E5%85%A8%E9%9D%A2%EF%BC%8C%E5%9F%BA%E7%A1%80%E3%80%81web">https://www.bilibili.com/video/BV1R7411F7JV（非常全面，基础、web</a> 开发、爬虫、数据分析、AI 基础都讲了，例子也很丰富）</li><li>⭐ 黑马程序员600集 Python 教程：<a href="https://www.bilibili.com/video/BV1ex411x7Em%EF%BC%88%E6%AF%94%E8%BE%83%E5%85%A8%E9%9D%A2%EF%BC%8C%E5%9F%BA%E4%BA%8E">https://www.bilibili.com/video/BV1ex411x7Em（比较全面，基于</a> Linux 环境学习，以 Python 基础 + 面向对象为重点，还包含一部分游戏开发） </li><li>⭐ Python 全栈开发教程：<a href="https://www.bilibili.com/video/BV1wD4y1o7AS%EF%BC%88%E5%BE%88%E7%BA%AF%E7%B2%B9%E7%9A%84">https://www.bilibili.com/video/BV1wD4y1o7AS（很纯粹的</a> Python 基础教程，案例多，适合快速入门）</li><li>小甲鱼 -《零基础入门学习Python》最新版：<a href="https://www.bilibili.com/video/av52080698%EF%BC%88%E5%8F%AF%E6%83%9C%EF%BC%8C%E6%9B%B4%E6%96%B0%E5%88%B0%E4%B8%80%E5%8D%8A%E5%B0%B1%E6%B2%A1%E4%BA%86%E3%80%82%E3%80%82%EF%BC%89">https://www.bilibili.com/video/av52080698（可惜，更新到一半就没了。。）</a></li><li>【麻省理工学院-中文字幕版】Python 和计算机科学导论公开课：<a href="https://www.bilibili.com/video/BV1ty4y1x7xP%EF%BC%88%E9%80%82%E5%90%88%E5%A4%96%E8%AF%AD%E4%B8%8D%E9%94%99%E7%9A%84%E5%90%8C%E5%AD%A6%E8%AF%BE%E5%A4%96%E7%9C%8B%EF%BC%8C%E6%84%9F%E5%8F%97%E5%9B%BD%E5%A4%96%E6%95%99%E5%AD%A6%E6%B0%9B%E5%9B%B4%EF%BC%89">https://www.bilibili.com/video/BV1ty4y1x7xP（适合外语不错的同学课外看，感受国外教学氛围）</a></li><li>阿里云 python 工程师学习：<a href="https://developer.aliyun.com/graph/python%EF%BC%88%E6%9C%89%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E4%BD%93%E9%AA%8C%EF%BC%89">https://developer.aliyun.com/graph/python（有在线编程体验）</a></li><li>鱼皮公众号【程序员鱼皮】后台回复 Python，也有一套视频课</li></ul><h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><ul><li><p>Web 开发</p><ul><li>Python Django 项目实战教程：<a href="https://www.bilibili.com/video/BV1pq4y1W7a1">https://www.bilibili.com/video/BV1pq4y1W7a1</a></li><li>Python + 微信小程序实战开发：<a href="https://www.bilibili.com/video/BV1Xy4y1s792%EF%BC%88%E6%8C%BA%E5%AE%8C%E6%95%B4%EF%BC%8C%E5%90%8E%E5%8F%B0%E7%94%A8%E7%9A%84">https://www.bilibili.com/video/BV1Xy4y1s792（挺完整，后台用的</a> Django 框架）</li></ul></li><li><p>数据结构与算法</p><ul><li>Python 数据结构与算法全套 100 节：<a href="https://www.bilibili.com/video/BV1uA411N7c5">https://www.bilibili.com/video/BV1uA411N7c5</a></li><li>【北京大学】数据结构与算法Python版（完整版）：<a href="https://www.bilibili.com/video/BV1VC4y1x7uv">https://www.bilibili.com/video/BV1VC4y1x7uv</a></li></ul></li><li><p>爬虫</p><ul><li>2020 年Python爬虫全套课程（学完可做项目）：<a href="https://www.bilibili.com/video/BV1Yh411o7Sz">https://www.bilibili.com/video/BV1Yh411o7Sz</a></li><li>Python 爬虫编程基础 5 天速成：<a href="https://www.bilibili.com/video/BV12E411A7ZQ%EF%BC%88%E5%BE%88%E7%9F%AD%E7%9A%84%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8%E8%AF%BE%EF%BC%89">https://www.bilibili.com/video/BV12E411A7ZQ（很短的爬虫实战入门课）</a></li></ul></li><li><p>数据分析</p><ul><li>自学数据分析课程：<a href="https://www.bilibili.com/video/BV1ZM4y1u7uF%EF%BC%88%E5%BE%88%E7%BA%AF%E7%B2%B9%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90">https://www.bilibili.com/video/BV1ZM4y1u7uF（很纯粹的数据分析</a> + 可视化课程，适合办公党快速上手）</li><li>完整数据分析课程：<a href="https://www.bilibili.com/video/BV1vV411p7D6%EF%BC%88%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90">https://www.bilibili.com/video/BV1vV411p7D6（数据分析</a> + 机器学习，很全面）</li><li>Python 数据分析入门视频合集：<a href="https://shimowendang.com/docs/36pykCPH6XCjKJcv/read">https://shimowendang.com/docs/36pykCPH6XCjKJcv/read</a></li></ul></li><li><p>其他</p><ul><li><p>一天搞定人脸识别项目（python+opencv）：<a href="https://www.bilibili.com/video/BV1Lq4y1Z7dm">https://www.bilibili.com/video/BV1Lq4y1Z7dm</a></p></li><li><p>Python 自动化办公：<a href="https://www.bilibili.com/video/BV1uv411W7Fi%EF%BC%88%E4%B8%BB%E8%A6%81%E6%98%AF%E5%A4%84%E7%90%86">https://www.bilibili.com/video/BV1uv411W7Fi（主要是处理</a> Excel）</p></li></ul></li></ul><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><ul><li>⭐《Python编程：从入门到实践》：<a href="https://www.code-nav.cn/rd/?rid=cbddf0af6064484f002658102cdbba17">https://www.code-nav.cn/rd/?rid=cbddf0af6064484f002658102cdbba17</a></li><li>《python学习手册》：<a href="https://www.code-nav.cn/rd/?rid=79550af260643c8e0ce47ab84633e200">https://www.code-nav.cn/rd/?rid=79550af260643c8e0ce47ab84633e200</a></li><li>《笨办法学Python3》：<a href="https://www.code-nav.cn/rd/?rid=b00064a760643bb90cbba72836995fd5">https://www.code-nav.cn/rd/?rid=b00064a760643bb90cbba72836995fd5</a></li><li>《Python编程快速上手》（第2版）：<a href="https://book.douban.com/subject/35387685/">https://book.douban.com/subject/35387685/</a></li><li>《Python Cookbook 中文版》（第3版）：<a href="https://book.douban.com/subject/26381341/">https://book.douban.com/subject/26381341/</a></li><li>《父与子的编程之旅》：<a href="https://www.code-nav.cn/rd/?rid=8937eaa9615519680ed81c0e3165ee65">https://www.code-nav.cn/rd/?rid=8937eaa9615519680ed81c0e3165ee65</a></li><li>⭐《Python 深度学习》<a href="https://www.code-nav.cn/rd/?rid=2d44d6c261624dd31224ed1b5841920c">https://www.code-nav.cn/rd/?rid=2d44d6c261624dd31224ed1b5841920c</a></li><li>《Python网络爬虫实战》第2版：<a href="https://www.code-nav.cn/rd/?rid=b00064a7606440d40cbc2fca19192e4f">https://www.code-nav.cn/rd/?rid=b00064a7606440d40cbc2fca19192e4f</a></li><li>《Python数据科学手册》：<a href="https://book.douban.com/subject/27667378/">https://book.douban.com/subject/27667378/</a></li><li>《利用Python进行数据分析》：<a href="https://book.douban.com/subject/25779298/">https://book.douban.com/subject/25779298/</a></li><li>《轻量级Django》：<a href="https://www.code-nav.cn/rd/?rid=28ee4e3e60641fd60d91fd2441418491">https://www.code-nav.cn/rd/?rid=28ee4e3e60641fd60d91fd2441418491</a></li><li>⭐ <strong>编程导航 - 超多 Python 书籍直接免费下载</strong> ：<a href="https://www.code-nav.cn/topic/Python%EF%BC%88%E9%80%89%E6%8B%A9%E4%B9%A6%E7%B1%8D%E6%A0%87%E7%AD%BE%EF%BC%89">https://www.code-nav.cn/topic/Python（选择书籍标签）</a></li><li>Python Guide（英文）：<a href="https://docs.python-guide.org/">https://docs.python-guide.org/</a></li></ul><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><ul><li>⭐ Python 入门教程（菜鸟教程）：<a href="https://www.runoob.com/python3/python3-tutorial.html%EF%BC%88%E5%8F%AF%E4%BB%A5%E5%9C%A8%E7%BA%BF%E5%86%99%E4%BB%A3%E7%A0%81%E7%BB%83%E4%B9%A0%EF%BC%89">https://www.runoob.com/python3/python3-tutorial.html（可以在线写代码练习）</a></li><li>Python 入门教程（W3Cschool）：<a href="https://www.w3cschool.cn/python3/%EF%BC%88%E6%94%AF%E6%8C%81%E6%89%8B%E6%9C%BA%E9%98%85%E8%AF%BB%EF%BC%89">https://www.w3cschool.cn/python3/（支持手机阅读）</a></li><li>Python 中文学习大本营：<a href="http://www.pythondoc.com/%EF%BC%88%E4%B8%80%E7%B3%BB%E5%88%97%E6%96%87%E6%A1%A3%E6%95%99%E7%A8%8B%E7%9A%84%E9%9B%86%E5%90%88%EF%BC%89">http://www.pythondoc.com/（一系列文档教程的集合）</a></li><li>Python 100 天：<a href="https://github.com/jackfrued/Python-100-Days">https://github.com/jackfrued/Python-100-Days</a></li><li>廖雪峰 Python 入门教程：<a href="https://www.liaoxuefeng.com/wiki/1016959663602400">https://www.liaoxuefeng.com/wiki/1016959663602400</a></li><li>莫烦 Python 教程：<a href="https://mofanpy.com/%EF%BC%88%E5%8C%85%E6%8B%AC%E5%9F%BA%E7%A1%80%E3%80%81%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E3%80%81%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AD%89%EF%BC%8C%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9%E6%9C%89%E8%A7%86%E9%A2%91%EF%BC%89">https://mofanpy.com/（包括基础、数据处理、机器学习等，部分内容有视频）</a></li><li>Django 官方教程：<a href="https://docs.djangoproject.com/zh-hans/3.2/intro/tutorial01/">https://docs.djangoproject.com/zh-hans/3.2/intro/tutorial01/</a></li><li>Manim 动画引擎教程：<a href="https://docs.manim.org.cn/shaders/">https://docs.manim.org.cn/shaders/</a></li><li>A Byte of Python：<a href="https://python.swaroopch.com/%EF%BC%88Python">https://python.swaroopch.com/（Python</a> 英文入门教程）</li><li>⭐ 谷歌 Python 代码规范：<a href="https://google.github.io/styleguide/pyguide.html">https://google.github.io/styleguide/pyguide.html</a></li></ul><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><ul><li>⭐ 蓝桥云课 Python 实战合集：<a href="https://www.lanqiao.cn/courses/?fee=free&amp;tag=Python">https://www.lanqiao.cn/courses/?fee=free&amp;tag=Python</a></li><li>腾讯云在线 Python 实验：<a href="https://cloud.tencent.com/developer/labs/gallery?tagId=23">https://cloud.tencent.com/developer/labs/gallery?tagId=23</a></li><li>阿里云 Python 入门实验：<a href="https://developer.aliyun.com/adc/scenario/e04fe73ad95d4782aef7aecca206196e">https://developer.aliyun.com/adc/scenario/e04fe73ad95d4782aef7aecca206196e</a></li><li>华为云沙箱实验室：<a href="https://lab.huaweicloud.com/testList.html">https://lab.huaweicloud.com/testList.html</a></li><li>Python123：<a href="https://python123.io/index%EF%BC%88%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%EF%BC%8C%E9%83%A8%E5%88%86%E8%AF%BE%E6%94%B6%E8%B4%B9%EF%BC%89">https://python123.io/index（在线编程，部分课收费）</a></li><li>CheckiO 游戏学 Python：<a href="https://py.checkio.org/">https://py.checkio.org/</a></li><li>通过测试交互式学 Python（英文）：<a href="https://github.com/gregmalcolm/python_koans">https://github.com/gregmalcolm/python_koans</a></li><li>交互式 Python 挑战（英文）：<a href="https://github.com/donnemartin/interactive-coding-challenges">https://github.com/donnemartin/interactive-coding-challenges</a></li><li>通过项目学 Python（英文）：<a href="https://github.com/practical-tutorials/project-based-learning#python">https://github.com/practical-tutorials/project-based-learning#python</a></li><li>通过示例交互式学 Python（英文）：<a href="https://github.com/jerry-git/learn-python3">https://github.com/jerry-git/learn-python3</a></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>数据结构和算法 Python 实现：<a href="https://github.com/keon/algorithms">https://github.com/keon/algorithms</a></li><li>《剑指 Offer》算法面试题 Python 实现：<a href="https://github.com/JushuangQiao/Python-Offer">https://github.com/JushuangQiao/Python-Offer</a></li><li>设计模式 Python 实现：<a href="http://www.pythontip.com/python-patterns/detail/abstract_factory">http://www.pythontip.com/python-patterns/detail/abstract_factory</a></li><li>Python Machine Learning 代码：<a href="https://github.com/rasbt/python-machine-learning-book-3rd-edition">https://github.com/rasbt/python-machine-learning-book-3rd-edition</a></li><li>Python 小脚本：<a href="https://github.com/RealHacker/python-gems">https://github.com/RealHacker/python-gems</a></li></ul><h3 id="合集"><a href="#合集" class="headerlink" title="合集"></a>合集</h3><ul><li><p>⭐ GitHub Python 专区：<a href="https://github.com/topics/python">https://github.com/topics/python</a></p></li><li><p>神经网络和深度学习相关框架：<a href="https://github.com/ChristosChristofidis/awesome-deep-learning">https://github.com/ChristosChristofidis/awesome-deep-learning</a></p></li><li><p>机器学习相关库：<a href="https://github.com/josephmisiti/awesome-machine-learning#python">https://github.com/josephmisiti/awesome-machine-learning#python</a></p></li><li><p>开源 Python 应用程序大全：<a href="https://github.com/mahmoud/awesome-python-applications">https://github.com/mahmoud/awesome-python-applications</a></p></li><li><p>Python 类库大全：<a href="https://github.com/vinta/awesome-python">https://github.com/vinta/awesome-python</a></p></li><li><p>Python 类库大全（中文版）：<a href="https://github.com/jobbole/awesome-python-cn">https://github.com/jobbole/awesome-python-cn</a></p></li><li><p>Python 异步大全：<a href="https://github.com/timofurrer/awesome-asyncio">https://github.com/timofurrer/awesome-asyncio</a></p></li><li><p>jupyter 相关：<a href="https://github.com/markusschanta/awesome-jupyter">https://github.com/markusschanta/awesome-jupyter</a></p></li><li><p>Python 书单：<a href="https://github.com/Junnplus/awesome-python-books">https://github.com/Junnplus/awesome-python-books</a></p></li><li><p>Python 书单（中文版）：<a href="https://github.com/jobbole/awesome-python-books">https://github.com/jobbole/awesome-python-books</a></p></li><li><p>StackOverflow Python 专区：<a href="https://stackoverflow.com/questions/tagged/python%EF%BC%88%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E5%BF%85%E5%A4%87%EF%BC%89">https://stackoverflow.com/questions/tagged/python（解决问题必备）</a></p></li><li><p>⭐ 掘金 Python 专区：<a href="https://juejin.cn/tag/Python%EF%BC%88%E7%9C%8B%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%EF%BC%89">https://juejin.cn/tag/Python（看技术文章）</a></p></li></ul><h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h3><ul><li>⭐ PythonTab：<a href="https://www.pythontab.com/%EF%BC%88%E4%B8%AD%E6%96%87">https://www.pythontab.com/（中文</a> Python 开发者社区）</li><li>Learnku Python 技术论坛：<a href="https://learnku.com/python">https://learnku.com/python</a></li><li>开源中国：<a href="https://www.oschina.net/%EF%BC%88%E7%BB%BC%E5%90%88%E7%9A%84%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%EF%BC%89">https://www.oschina.net/（综合的开源社区）</a></li></ul><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li>⭐ Python 在线编程（菜鸟教程）：<a href="https://c.runoob.com/compile/6/">https://c.runoob.com/compile/6/</a></li><li>腾讯云 Python 在线手册：<a href="https://cloud.tencent.com/developer/devdocs">https://cloud.tencent.com/developer/devdocs</a></li><li>Python 在线手册汇总：<a href="https://docs.pythontab.com/">https://docs.pythontab.com/</a></li></ul><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><ul><li>⭐ 牛客 Python 专项练习：<a href="https://www.nowcoder.com/intelligentTest">https://www.nowcoder.com/intelligentTest</a></li><li>牛客 Python 试题：<a href="https://www.nowcoder.com/search?query=python&amp;type=question">https://www.nowcoder.com/search?query=python&amp;type=question</a></li><li>牛客机器学习面试题：<a href="https://www.nowcoder.com/search?type=question&amp;query=%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0">https://www.nowcoder.com/search?type=question&amp;query=%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0</a></li><li>牛客机器学习笔试：<a href="https://www.nowcoder.com/search?type=paper&amp;query=%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0">https://www.nowcoder.com/search?type=paper&amp;query=%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0</a></li><li>Python 面试题整理：<a href="https://github.com/taizilongxu/interview_python%EF%BC%88%E9%AB%98%E6%98%9F%EF%BC%89">https://github.com/taizilongxu/interview_python（高星）</a></li><li>Python 面试题整理：<a href="https://github.com/kenwoodjw/python_interview_question">https://github.com/kenwoodjw/python_interview_question</a></li><li>机器学习面试题：<a href="https://geektutu.com/post/qa-ml.html">https://geektutu.com/post/qa-ml.html</a></li></ul><h3 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a>其他</h3><ul><li>⭐ Python 常见问题：<a href="https://docs.python.org/zh-cn/3/faq/general.html%EF%BC%88%E5%AE%98%E6%96%B9%E6%8F%90%E4%BE%9B%E7%9A%84">https://docs.python.org/zh-cn/3/faq/general.html（官方提供的</a> ）</li><li>GitHub Python 趋势：<a href="https://github.com/trending/python">https://github.com/trending/python</a></li><li>Python 模块推荐：<a href="https://pymotw.com/3/">https://pymotw.com/3/</a></li><li>Python 练习册：<a href="https://github.com/Yixiaohan/show-me-the-code%EF%BC%88%E4%B8%80%E4%BA%9B">https://github.com/Yixiaohan/show-me-the-code（一些</a> Python 练习题目）</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端学习路线</title>
      <link href="/2023/08/07/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2023/08/07/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="前端学习路线"><a href="#前端学习路线" class="headerlink" title="前端学习路线"></a>前端学习路线</h1><blockquote><p>这份学习路线并不完美，也不会有最终形态，正如前端不可预见、永无止境的未来。</p></blockquote><p>💂 + 💻 = 👴🏽</p><p>建议先观看视频导读：<a href="https://www.bilibili.com/video/BV1nh411e7oG/">https://www.bilibili.com/video/BV1nh411e7oG/</a></p><h2 id="路线特点"><a href="#路线特点" class="headerlink" title="路线特点"></a>路线特点</h2><ol><li>一份全面的前端知识点大梳理和汇总</li><li>分阶段学习，每个阶段给出学习目标</li><li>使用符号对知识点的重要程度做了区分，按需学习</li><li>知识点附有描述和资源链接</li><li>提供一份清晰的个人顺序学习路线方法</li><li>提供大量优质学习资源</li></ol><h2 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h2><p>可根据知识点前的符号按需选学，并获取知识点描述和学习资源。</p><ul><li><p>⭐️ 必学（追求速成）</p></li><li><p>✅ 建议学（重要知识）</p></li><li><p>❗ 面试重点</p></li><li><p>❌ 一般没必要学习</p></li><li><p>💬 描述</p></li><li><p>📚 资源</p></li><li><p>🎯 目标</p></li></ul><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ol><li>前言 - 学编程需要的特质</li><li>前端学习七阶段<ol><li>前端入门</li><li>巩固基础</li><li>前端工程化</li><li>前端优化</li><li>前端生态</li><li>前端求职</li><li>前端未来</li></ol></li><li>我的前端学习路线</li><li>尾声 - 持续学习</li></ol><h2 id="前言-学编程需要的特质"><a href="#前言-学编程需要的特质" class="headerlink" title="前言 - 学编程需要的特质"></a>前言 - 学编程需要的特质</h2><p>相信自己有能力，那么你就真的会有！</p><ul><li>兴趣</li><li>坚持</li><li>付出</li><li>心态</li></ul><h2 id="一、前端入门"><a href="#一、前端入门" class="headerlink" title="一、前端入门"></a>一、前端入门</h2><ul><li><p>💬 描述：学习前端基础三件套，建议从实战开始，边学边练，培养兴趣，快速入门。</p></li><li><p>📚 资源</p><ul><li>freeCodecamp 在线编程：<a href="https://learn.freecodecamp.one/">https://learn.freecodecamp.one/</a></li><li>阿里云前端实战学习：<a href="https://edu.aliyun.com/roadmap/frontend">https://edu.aliyun.com/roadmap/frontend</a></li><li>W3Cschool 编程入门实战：<a href="https://www.w3cschool.cn/codecamp/">https://www.w3cschool.cn/codecamp/</a></li><li>pink老师前端入门教程：<a href="https://www.bilibili.com/video/BV14J4114768">https://www.bilibili.com/video/BV14J4114768</a></li></ul></li><li><p>🎯 目标：了解和实践各语言的基础语法，并能使用开发工具来独立开发一个留言板网站。</p></li></ul><h3 id="⭐️-开发工具"><a href="#⭐️-开发工具" class="headerlink" title="⭐️ 开发工具"></a>⭐️ 开发工具</h3><ul><li>💬 描述：工欲善其事，必先利其器。</li></ul><h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h4><ul><li>⭐️ Chrome</li><li>✅ Edge</li><li>✅ Firefox</li><li>❌ Opera</li><li>Safari</li></ul><h4 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h4><ul><li>⭐️ VSCode</li><li>✅ WebStorm</li><li>Atom</li><li>⭐️ Sublime Text</li><li>HBuilder X</li><li>记事本</li><li>在线 IDE</li></ul><h4 id="文档笔记"><a href="#文档笔记" class="headerlink" title="文档笔记"></a>文档笔记</h4><ul><li>✅ Markdown 语法</li><li>✅ Typora</li><li>在线笔记<ul><li>语雀</li><li>腾讯文档</li><li>石墨文档</li><li>印象笔记</li></ul></li><li>Mdnice</li></ul><h3 id="⭐️-HTML"><a href="#⭐️-HTML" class="headerlink" title="⭐️ HTML"></a>⭐️ HTML</h3><ul><li><p>💬 描述：用于定义一个网页结构的基本技术。</p></li><li><p>📚 资源：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML">https://developer.mozilla.org/zh-CN/docs/Learn/HTML</a></p></li><li><p>⭐️ 基本语法</p></li><li><p>⭐️ 标签</p><ul><li>分区 div</li><li>标题 h1 ~ h6</li><li>段落 p</li><li>图像 img</li><li>列表 ul / ol</li><li>超链接 a</li><li>表单 form</li><li>表格 table</li><li>框架 iframe</li></ul></li><li><p>⭐️ 属性</p></li><li><p>✅ HTML5 特性</p><ul><li>语义化标签</li><li>浏览器支持</li><li>多媒体标签</li><li>Canvas 画布</li><li>❌ 内联 SVG</li><li>本地存储<ul><li>localStorage</li><li>sessionStorage</li><li>❌ Web SQL</li></ul></li><li>Web Workers</li><li>应用缓存（Cache Manifest）</li><li>无障碍</li></ul></li></ul><h3 id="⭐️-CSS"><a href="#⭐️-CSS" class="headerlink" title="⭐️ CSS"></a>⭐️ CSS</h3><ul><li><p>💬 描述：层叠样式表，用于设计风格和布局。</p></li><li><p>📚 资源：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS">https://developer.mozilla.org/zh-CN/docs/Learn/CSS</a></p></li><li><p>⭐️ 基本语法</p></li><li><p>⭐️ 引入方式</p><ul><li>行内样式</li><li>内部样式表</li><li>外部样式表</li></ul></li><li><p>⭐️ 选择器</p><ul><li>通用选择器</li><li>标签选择器</li><li>id 选择器</li><li>class 选择器</li><li>属性选择器</li><li>派生选择器<ul><li>后代选择器</li><li>子元素选择器</li><li>相邻兄弟选择器</li></ul></li><li>组合选择器</li><li>伪选择器</li><li>选择器优先级</li></ul></li><li><p>⭐️ 属性</p><ul><li>单位<ul><li>px</li><li>em</li><li>rem</li><li>vw</li><li>vh</li></ul></li><li>背景</li><li>文本</li><li>字体</li><li>列表</li><li>表格</li></ul></li><li><p>⭐️ 文档流</p><ul><li>标准流</li><li>浮动流</li><li>定位流</li></ul></li><li><p>⭐️ 内联元素 / 块状元素</p></li><li><p>⭐️ 盒子模型</p><ul><li>content</li><li>padding</li><li>border</li><li>margin</li></ul></li><li><p>⭐️ 浮动</p><ul><li>设置浮动 float</li><li>清除浮动 clear</li></ul></li><li><p>⭐️ 定位</p><ul><li>static</li><li>absolute</li><li>fixed</li><li>relative</li><li>sticky</li></ul></li><li><p>⭐️ 层叠规则</p></li><li><p>❗ BFC 和 IFC 机制</p></li><li><p>CSS3</p><ul><li>⭐️ 响应式布局<ul><li>媒体查询</li><li>Flex 布局</li><li>Grid 布局</li><li>瀑布流</li></ul></li><li>动画</li><li>过渡</li><li>渐变</li><li>背景</li><li>边框</li><li>圆角</li><li>字体</li><li>2D / 3D 转换</li></ul></li></ul><h3 id="⭐️-JavaScript"><a href="#⭐️-JavaScript" class="headerlink" title="⭐️ JavaScript"></a>⭐️ JavaScript</h3><ul><li><p>💬 描述：具有函数优先的轻量级，解释型或即时编译型的编程语言。</p></li><li><p>📚 资源：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a></p></li><li><p>⭐️ 基本语法</p></li><li><p>⭐️ 数据类型</p><ul><li>值类型<ul><li>字符串 String</li><li>数组 Number</li><li>布尔 Boolean</li><li>空值 Null</li><li>未定义 Undefined</li><li>Symbol</li></ul></li><li>引用类型<ul><li>对象 Object</li><li>数组 Array</li><li>函数 Function</li></ul></li></ul></li><li><p>✅ 数据类型转换</p></li><li><p>✅ 函数</p><ul><li>⭐️ 概念</li><li>⭐️ 自定义函数</li><li>调用方式<ul><li>⭐️ 全局调用</li><li>构造函数调用</li><li>⭐️ 函数方法调用</li><li>apply</li><li>call</li></ul></li><li>✅❗ 闭包</li></ul></li><li><p>✅ 对象</p><ul><li>概念</li><li>this</li><li>原型链和继承</li><li>常用对象<ul><li>数字 Number</li><li>字符串 String 对象</li><li>日期 Date 对象</li><li>数组 Array</li><li>布尔 Boolean</li><li>算数 Math</li></ul></li><li>自定义对象</li></ul></li><li><p>✅❗ 作用域（作用域链）</p></li><li><p>✅ BOM API</p></li><li><p>⭐️ DOM API</p></li><li><p>⭐️ JSON</p></li><li><p>⭐️ Ajax</p></li><li><p>✅ JavaScript 执行机制</p></li></ul><h4 id="✅-ES6-特性"><a href="#✅-ES6-特性" class="headerlink" title="✅ ES6+ 特性"></a>✅ ES6+ 特性</h4><ul><li><p>💬 描述：新引入的 JavaScript 语法特性。</p></li><li><p>📚 资源：ES6 入门教程 <a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></p></li><li><p>let 和 const</p></li><li><p>变量解构赋值</p></li><li><p>对象扩展和新增方法</p></li><li><p>Symbol</p></li><li><p>Set 和 Map 数据结构</p></li><li><p>⭐️❗ Promise &amp; async / await 异步编程</p></li><li><p>Generator 函数异步编程</p></li></ul><h2 id="二、巩固基础"><a href="#二、巩固基础" class="headerlink" title="二、巩固基础"></a>二、巩固基础</h2><ul><li><p>💬 描述：学习前端、计算机、软件开发相关基础知识，并复习巩固上阶段学到的前端三件套。</p></li><li><p>📚 资源</p><ul><li>《JavaScript 高级程序设计》：<a href="https://www.code-nav.cn/rd/?rid=28ee4e3e606b1e1a0e3cfd8952d172cf">https://www.code-nav.cn/rd/?rid=28ee4e3e606b1e1a0e3cfd8952d172cf</a></li><li>《JavaScript 忍者秘籍》：<a href="https://www.code-nav.cn/rd/?rid=28ee4e3e606b16c00e3c5b18609e3dc2">https://www.code-nav.cn/rd/?rid=28ee4e3e606b16c00e3c5b18609e3dc2</a></li></ul></li><li><p>🎯 目标：熟悉前端三件套语法，尤其是 JavaScript，并了解互联网、域名、浏览器、服务器等，扎实前端程序员的基本功，为下面进入实战开发做准备。</p></li></ul><h3 id="前端基础知识"><a href="#前端基础知识" class="headerlink" title="前端基础知识"></a>前端基础知识</h3><ul><li><p>✅ 互联网</p></li><li><p>⭐️ 域名</p></li><li><p>⭐️ DNS</p></li><li><p>⭐️ 服务器</p></li><li><p>✅ 浏览器</p><ul><li>浏览器 DOM 事件流 / 事件委托</li><li>⭐️ 浏览器加载顺序</li><li>⭐️ 浏览器渲染过程</li><li>浏览器事件循环</li><li>浏览器同源策略</li><li>❗ 跨域解决方案</li><li>浏览器缓存</li><li>控制台调试技巧</li></ul></li><li><p>✅ HTTP</p><ul><li>❗ HTTP 请求过程</li><li>常见 HTTP 协议<ul><li>HTTP 1.0</li><li>⭐️ HTTP 1.1</li><li>HTTP 2</li><li>HTTP 3</li></ul></li><li>⭐️ HTTP 请求类别</li><li>⭐️ 常见状态码<ul><li>1xx 信息</li><li>2xx 成功</li><li>3xx 重定向</li><li>4xx 客户端错误</li><li>5xx 服务器错误</li></ul></li><li>WebSocket</li><li>⭐️ Cookie</li><li>Session</li><li>⭐️ HTTPS</li></ul></li></ul><h3 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h3><h4 id="✅-算法和数据结构"><a href="#✅-算法和数据结构" class="headerlink" title="✅ 算法和数据结构"></a>✅ 算法和数据结构</h4><ul><li><p>⭐️ 时间 / 空间复杂度分析</p></li><li><p>数据结构</p><ul><li>数组</li><li>字符串</li><li>队列</li><li>栈</li><li>链表</li><li>集合</li><li>哈希表</li><li>二叉树</li></ul></li><li><p>算法</p><ul><li>排序</li><li>双指针</li><li>查找</li><li>分治</li><li>动态规划</li><li>递归</li><li>回溯</li><li>贪心</li><li>位运算</li><li>DFS</li><li>BFS</li><li>图</li></ul></li></ul><h4 id="✅-计算机网络"><a href="#✅-计算机网络" class="headerlink" title="✅ 计算机网络"></a>✅ 计算机网络</h4><ul><li>HTTP 协议</li><li>网络模型</li><li>UDP / TCP 协议</li></ul><h4 id="✅-操作系统"><a href="#✅-操作系统" class="headerlink" title="✅ 操作系统"></a>✅ 操作系统</h4><ul><li>进程、线程</li><li>进程 / 线程间通讯方式</li><li>进程调度算法</li><li>进程 / 线程状态</li><li>死锁</li><li>内存管理</li></ul><h3 id="软件开发基础"><a href="#软件开发基础" class="headerlink" title="软件开发基础"></a>软件开发基础</h3><h4 id="✅-设计模式"><a href="#✅-设计模式" class="headerlink" title="✅ 设计模式"></a>✅ 设计模式</h4><ul><li>单例模式</li><li>代理模式</li><li>工厂模式</li><li>装饰者模式</li><li>观察者模式</li><li>策略模式</li><li>门面模式</li></ul><h4 id="⭐️-Git-版本控制"><a href="#⭐️-Git-版本控制" class="headerlink" title="⭐️ Git 版本控制"></a>⭐️ Git 版本控制</h4><ul><li>常用命令</li></ul><h4 id="✅-Linux-服务器"><a href="#✅-Linux-服务器" class="headerlink" title="✅ Linux 服务器"></a>✅ Linux 服务器</h4><ul><li>常用命令</li></ul><h4 id="✅-正则表达式"><a href="#✅-正则表达式" class="headerlink" title="✅ 正则表达式"></a>✅ 正则表达式</h4><h2 id="三、前端工程化"><a href="#三、前端工程化" class="headerlink" title="三、前端工程化"></a>三、前端工程化</h2><ul><li><p>💬 描述：前端工程化是使用软件工程的技术和方法来进行前端的开发流程、技术、工具、经验等规范化、标准化，其主要目的为了提高开发过程中的开发效率，减少不必要的重复工作时间。</p></li><li><p>📚 资源</p><ul><li>什么是前端工程化？<a href="https://www.zhihu.com/question/433854153/answer/1713597311">https://www.zhihu.com/question/433854153/answer/1713597311</a></li></ul></li><li><p>🎯 目标：至少学会一门主流的前端开发框架（Vue / React），并配合脚手架、组件库、工具等从 0 开始独立搭建并开发一个完整的前端网站，可以试着仿一些知名站点。要求遵循企业开发规范，将项目代码提交到代码仓库中，并独立发布上线，供他人访问。此外，建议抓住机会参与一些团队项目，感受团队开发模式和前端工程化的优势。</p></li></ul><h3 id="⭐️-研发流程"><a href="#⭐️-研发流程" class="headerlink" title="⭐️ 研发流程"></a>⭐️ 研发流程</h3><ol><li>技术选型</li><li>初始化</li><li>开发</li><li>本地测试</li><li>代码提交</li><li>编译、打包、构建</li><li>部署</li><li>集成测试</li><li>发布上线</li><li>监控运维</li></ol><h3 id="⭐️-代码托管"><a href="#⭐️-代码托管" class="headerlink" title="⭐️ 代码托管"></a>⭐️ 代码托管</h3><ul><li><p>💬 描述：集中存储、备份你的代码，还能和团队成员协作开发。</p></li><li><p>⭐️ GitHub</p></li><li><p>Gitee</p></li><li><p>GitLab</p></li></ul><h3 id="✅-Node-JS"><a href="#✅-Node-JS" class="headerlink" title="✅ Node.JS"></a>✅ Node.JS</h3><ul><li>💬 描述：一个开源与跨平台的 JavaScript 运行时环境。 它是一个可用于几乎任何项目的流行工具！</li><li>📚 资源<ul><li>Node.js 官方教程：<a href="http://nodejs.cn/learn">http://nodejs.cn/learn</a></li><li>Node.js 入门：<a href="https://cnodejs.org/getstart">https://cnodejs.org/getstart</a></li></ul></li></ul><h4 id="⭐️-包管理"><a href="#⭐️-包管理" class="headerlink" title="⭐️ 包管理"></a>⭐️ 包管理</h4><ul><li><p>💬 描述：用于安装 Node.js 的扩展、工具等。</p></li><li><p>⭐️ npm</p></li><li><p>⭐️ yarn</p></li><li><p>❌ bower</p></li><li><p>✅ npx</p></li></ul><h4 id="开发框架"><a href="#开发框架" class="headerlink" title="开发框架"></a>开发框架</h4><ul><li>Express</li><li>Koa</li><li>Egg</li></ul><h3 id="开发框架-1"><a href="#开发框架-1" class="headerlink" title="开发框架"></a>开发框架</h3><ul><li>💬 描述：解决特定的问题,提高<em>开发</em>效率、简化我们的代码复杂度。</li></ul><h4 id="⭐️-CSS-框架"><a href="#⭐️-CSS-框架" class="headerlink" title="⭐️ CSS 框架"></a>⭐️ CSS 框架</h4><ul><li>✅ BootStrap</li><li>⭐️ Tailwind CSS</li></ul><h4 id="⭐️-JavaScript-框架"><a href="#⭐️-JavaScript-框架" class="headerlink" title="⭐️ JavaScript 框架"></a>⭐️ JavaScript 框架</h4><h5 id="⭐️-Vue"><a href="#⭐️-Vue" class="headerlink" title="⭐️ Vue"></a>⭐️ Vue</h5><ul><li>Vue Router</li><li>Vuex</li></ul><h5 id="⭐️-React"><a href="#⭐️-React" class="headerlink" title="⭐️ React"></a>⭐️ React</h5><ul><li>React DOM</li><li>React Router</li><li>Redux</li><li>MobX</li><li>React Hooks</li></ul><h5 id="❌-Angular"><a href="#❌-Angular" class="headerlink" title="❌ Angular"></a>❌ Angular</h5><ul><li>RxJS</li><li>NgRx</li></ul><h5 id="✅-Svelte"><a href="#✅-Svelte" class="headerlink" title="✅ Svelte"></a>✅ Svelte</h5><h5 id="✅-UmiJS"><a href="#✅-UmiJS" class="headerlink" title="✅ UmiJS"></a>✅ UmiJS</h5><h3 id="封装库"><a href="#封装库" class="headerlink" title="封装库"></a>封装库</h3><h4 id="⭐️-组件库"><a href="#⭐️-组件库" class="headerlink" title="⭐️ 组件库"></a>⭐️ 组件库</h4><ul><li>✅ LayUI</li><li>⭐️ ElementUI（Vue）</li><li>✅ VantUI（Vue）</li><li>⭐️ Ant Design（React）</li><li>Material UI</li></ul><h4 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h4><ul><li>✅ AntV</li><li>Apache ECharts</li><li>HighCharts</li><li>D3.js</li></ul><h4 id="组件（插件）"><a href="#组件（插件）" class="headerlink" title="组件（插件）"></a>组件（插件）</h4><ul><li>富文本编辑器</li><li>弹窗</li><li>轮播图</li></ul><h4 id="工具库"><a href="#工具库" class="headerlink" title="工具库"></a>工具库</h4><ul><li>✅ jQuery</li><li>✅ Lodash</li><li>✅ Axios</li><li>时间处理 Moment.js</li></ul><h4 id="动效库"><a href="#动效库" class="headerlink" title="动效库"></a>动效库</h4><ul><li>✅ Animate.css</li><li>Ant Motion</li></ul><h4 id="字体图标库"><a href="#字体图标库" class="headerlink" title="字体图标库"></a>字体图标库</h4><ul><li>⭐️ IconFont</li><li>IconPark</li><li>Font Awesome</li></ul><h3 id="⭐️-脚手架"><a href="#⭐️-脚手架" class="headerlink" title="⭐️ 脚手架"></a>⭐️ 脚手架</h3><ul><li><p>💬 描述：快速生成新项目的目录模板，提升开发效率和开发舒适性。</p></li><li><p>📚 资源：<a href="https://www.jianshu.com/p/25ce8cf2e6a7">https://www.jianshu.com/p/25ce8cf2e6a7</a></p></li><li><p>Vue CLI</p></li><li><p>create-react-app</p></li><li><p>✅ Yeoman</p></li></ul><h3 id="⭐️-前端架构设计"><a href="#⭐️-前端架构设计" class="headerlink" title="⭐️ 前端架构设计"></a>⭐️ 前端架构设计</h3><ul><li><p>💬 描述：一系列工具和流程的集合，旨在提升前端代码的质量，并实现高效可持续的工作流。</p></li><li><p>模块化</p></li><li><p>组件化</p></li><li><p>✅ MVVM</p></li><li><p>设计原则</p></li><li><p>⭐️ SPA 单页应用</p></li><li><p>⭐️ 多页应用</p></li><li><p>✅ 前端路由</p></li><li><p>PWA</p></li><li><p>有损服务</p></li></ul><h4 id="✅-服务端渲染"><a href="#✅-服务端渲染" class="headerlink" title="✅ 服务端渲染"></a>✅ 服务端渲染</h4><ul><li><p>💬 描述：在服务端渲染 HTML 页面的模式。</p></li><li><p>📚 资源：<a href="https://www.zhihu.com/question/379563505">https://www.zhihu.com/question/379563505</a></p></li><li><p>Next.js（React）</p></li><li><p>Nuxt.js（Vue）</p></li><li><p>❌ Universal（Angular）</p></li></ul><h4 id="BFF"><a href="#BFF" class="headerlink" title="BFF"></a>BFF</h4><ul><li><p>💬 描述：Backend For Frontend（服务于前端的后端），就是服务器设计 API 时会考虑前端的使用，并在服务端直接进行业务逻辑的处理。</p></li><li><p>📚 资源：<a href="https://www.jianshu.com/p/eb1875c62ad3">https://www.jianshu.com/p/eb1875c62ad3</a></p></li><li><p>GraphQL</p></li></ul><h4 id="✅-微前端"><a href="#✅-微前端" class="headerlink" title="✅ 微前端"></a>✅ 微前端</h4><ul><li><p>💬 描述：将前端应用分解成一些更小、更简单的能够独立开发、测试、部署的小块，从而解决庞大的一整块后端服务带来的变更与扩展方面的限制。</p></li><li><p>📚 资源：<a href="https://zhuanlan.zhihu.com/p/96464401">https://zhuanlan.zhihu.com/p/96464401</a></p></li><li><p>qiankun</p></li><li><p>single-spa</p></li></ul><h3 id="CSS-in-JS"><a href="#CSS-in-JS" class="headerlink" title="CSS in JS"></a>CSS in JS</h3><ul><li><p>💬 描述：用 JavaScript 来写 CSS。</p></li><li><p>📚 资源：<a href="http://www.ruanyifeng.com/blog/2017/04/css_in_js.html">http://www.ruanyifeng.com/blog/2017/04/css_in_js.html</a></p></li><li><p>内联样式</p></li><li><p>声明样式</p></li><li><p>引入样式</p></li></ul><h4 id="⭐️-CSS-模块化"><a href="#⭐️-CSS-模块化" class="headerlink" title="⭐️ CSS 模块化"></a>⭐️ CSS 模块化</h4><ul><li>⭐️ CSS Modules</li><li>✅ styled-components</li><li>✅ Styled JSX</li><li>Emotion</li></ul><h3 id="✅-开发调试"><a href="#✅-开发调试" class="headerlink" title="✅ 开发调试"></a>✅ 开发调试</h3><ul><li><p>💬 描述：本地开发时热更新，提升开发效率。</p></li><li><p>webpack-dev-server</p></li><li><p>serve</p></li></ul><h4 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h4><ul><li><p>💬 描述：将内网外网通过 nat 隧道打通，让内网的网站、数据让外网可以访问。</p></li><li><p>Ngrok</p></li><li><p>NATAPP</p></li></ul><h3 id="⭐️-CSS-预编译"><a href="#⭐️-CSS-预编译" class="headerlink" title="⭐️ CSS 预编译"></a>⭐️ CSS 预编译</h3><ul><li><p>💬 描述：使用新的扩展语言以增强 CSS 的能力，并通过预编译的方式将其转换为浏览器认识的 CSS 代码。</p></li><li><p>⭐️ SASS</p></li><li><p>✅ PostCSS</p></li><li><p>Stylus</p></li><li><p>❌ LESS</p></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="测试分类"><a href="#测试分类" class="headerlink" title="测试分类"></a>测试分类</h4><ul><li>⭐️ UT 单元测试</li><li>SIT 系统集成测试</li><li>E2E 端到端测试</li><li>UAT 用户验收测试</li></ul><h4 id="✅-Mock"><a href="#✅-Mock" class="headerlink" title="✅ Mock"></a>✅ Mock</h4><ul><li><p>💬 描述：通过随机数据，模拟各种场景，增加单元测试的真实性。</p></li><li><p>Mock.js</p></li></ul><h4 id="✅-测试框架"><a href="#✅-测试框架" class="headerlink" title="✅ 测试框架"></a>✅ 测试框架</h4><ul><li><p>✅ Jest</p></li><li><p>Enzyme</p></li><li><p>✅ Puppeteer（Headless Browser）</p></li><li><p>Mocha</p></li><li><p>Jasmine</p></li></ul><h3 id="✅-代码质量"><a href="#✅-代码质量" class="headerlink" title="✅ 代码质量"></a>✅ 代码质量</h3><h4 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h4><ul><li><p>💬 描述：依照规范写出的代码会更加合理。</p></li><li><p>📚 资源：Airbnb 代码规范 <a href="https://github.com/BingKui/javascript-zh">https://github.com/BingKui/javascript-zh</a></p></li><li><p>CSS Style Guide</p></li><li><p>JavaScript Style Guide</p></li></ul><h4 id="类型校验"><a href="#类型校验" class="headerlink" title="类型校验"></a>类型校验</h4><ul><li>TypeScript</li></ul><h4 id="代码检查"><a href="#代码检查" class="headerlink" title="代码检查"></a>代码检查</h4><ul><li>ESLint</li><li>StyleLint</li></ul><h4 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h4><ul><li><p>💬 描述：根据配置自动格式化代码，统一格式。</p></li><li><p>Prettier</p></li></ul><h4 id="提交规范"><a href="#提交规范" class="headerlink" title="提交规范"></a>提交规范</h4><ul><li>约定式提交</li></ul><h4 id="提交检查"><a href="#提交检查" class="headerlink" title="提交检查"></a>提交检查</h4><ul><li><p>💬 描述：在提交代码时触发一些操作，比如检查代码的风格等。</p></li><li><p>pre-commit</p></li><li><p>husky</p></li></ul><h3 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><h4 id="自动化构建"><a href="#自动化构建" class="headerlink" title="自动化构建"></a>自动化构建</h4><ul><li><p>💬 描述：按照配置好的流程自动打包构建项目，提高团队的开发效率，降低项目的维护难度。</p></li><li><p>Gulp</p></li><li><p>✅ npm script</p></li><li><p>Grunt</p></li></ul><h4 id="打包工具"><a href="#打包工具" class="headerlink" title="打包工具"></a>打包工具</h4><ul><li><p>💬 描述：将各种零散的📚 资源文件打包为可在浏览器等环境运行的代码。</p></li><li><p>⭐️ Webpack</p></li><li><p>✅ Rollup</p></li><li><p>✅ Vite</p></li><li><p>Parcel</p></li><li><p>Snowpack</p></li></ul><h3 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI / CD"></a>CI / CD</h3><ul><li>💬 描述：通过在应用开发阶段引入自动化来频繁向客户交付应用。</li><li>GitLab CI</li><li>✅ Jenkins</li></ul><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="⭐️-Web-服务器"><a href="#⭐️-Web-服务器" class="headerlink" title="⭐️ Web 服务器"></a>⭐️ Web 服务器</h4><h5 id="⭐️-Nginx"><a href="#⭐️-Nginx" class="headerlink" title="⭐️ Nginx"></a>⭐️ Nginx</h5><ul><li><p>💬 描述：高性能的 HTTP 和反向代理 web 服务器。</p></li><li><p>📚 资源：腾讯云动手实验室 <a href="https://cloud.tencent.com/developer/labs/gallery">https://cloud.tencent.com/developer/labs/gallery</a></p></li><li><p>反向代理</p></li><li><p>解决跨域</p></li><li><p>改写请求</p></li></ul><h5 id="✅-Apache"><a href="#✅-Apache" class="headerlink" title="✅ Apache"></a>✅ Apache</h5><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><h5 id="✅-Docker"><a href="#✅-Docker" class="headerlink" title="✅ Docker"></a>✅ Docker</h5><ul><li><p>💬 描述：容器是一个标准化的软件单元，它将代码及其所有依赖关系打包，以便应用程序从一个计算环境可靠快速地运行到另一个计算环境。Docker容器镜像是一个轻量的独立的可执行的软件包。包含程序运行的时候所需的一切：代码，运行时间，系统工具，系统库和设置。</p></li><li><p>📚 资源：Docker 从入门到实践 <a href="https://vuepress.mirror.docker-practice.com/">https://vuepress.mirror.docker-practice.com/</a></p></li><li><p>Dockerfile</p></li></ul><h5 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h5><h4 id="部署策略"><a href="#部署策略" class="headerlink" title="部署策略"></a>部署策略</h4><ul><li>全量发布</li><li>蓝绿部署</li><li>滚动发布</li><li>灰度发布</li></ul><h3 id="监控告警"><a href="#监控告警" class="headerlink" title="监控告警"></a>监控告警</h3><ul><li>前端埋点</li><li>错误监控</li><li>性能监控</li><li>行为监控</li></ul><h2 id="四、前端优化"><a href="#四、前端优化" class="headerlink" title="四、前端优化"></a>四、前端优化</h2><ul><li><p>💬 描述：通过分析和优化手段，提高网站的性能和用户体验。</p></li><li><p>🎯 目标：实践前端优化方法，从多个方面优化自己做过的项目，最好能将优化后的网站与原网站进行对比，得到一些数据和体验上的明显提升。</p></li></ul><h3 id="✅-性能优化"><a href="#✅-性能优化" class="headerlink" title="✅ 性能优化"></a>✅ 性能优化</h3><h4 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h4><ul><li><p>💬 描述：用于衡量一个 Web 页面的性能。</p></li><li><p>📚 资源：<a href="https://juejin.cn/post/6844904153869713416">https://juejin.cn/post/6844904153869713416</a></p></li><li><p>FP（First Paint）</p><ul><li>💬 描述：从开始加载到浏览器首次绘制像素到屏幕上的时间，也就是页面在屏幕上首次发生视觉变化的时间。</li></ul></li><li><p>FCP（First Contentful Paint）</p><ul><li>💬 描述：浏览器首次绘制来自 DOM 的内容的时间。</li></ul></li><li><p>FMP（First Meaningful Paint）</p><ul><li>💬 描述：页面的主要内容绘制到屏幕上的时间。</li></ul></li><li><p>FSP（First Screen Paint）</p><ul><li>💬 描述：页面从开始加载到首屏内容全部绘制完成的时间，用户可以看到首屏的全部内容。</li></ul></li><li><p>TTI（Time to Interactive）</p><ul><li>💬 描述：表示网页第一次完全达到可交互状态的时间点，浏览器已经可以持续性的响应用户的输入。</li></ul></li></ul><h4 id="优化手段"><a href="#优化手段" class="headerlink" title="优化手段"></a>优化手段</h4><ul><li><p>性能监控</p><ul><li>Performance API</li></ul></li><li><p>样式优化</p></li><li><p>JavaScript 优化</p><ul><li>防抖</li><li>节流</li></ul></li><li><p>代码分割</p></li><li><p>📚 资源压缩</p></li><li><p>打包优化</p></li><li><p>服务器优化</p></li><li><p>缓存优化</p><ul><li>Service Worker</li></ul></li><li><p>动画性能</p></li><li><p>dns-prefetch</p></li><li><p>Lazy loading</p></li><li><p>优化启动性能</p><ul><li>异步化</li></ul></li><li><p>渲染优化</p></li><li><p>网络优化</p></li><li><p>移动端性能优化</p></li><li><p>✅ CDN</p><ul><li>💬 描述：内容分发网络，是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</li><li>📚 资源：BootCDN <a href="https://www.bootcdn.cn/">https://www.bootcdn.cn/</a></li></ul></li></ul><h3 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h3><ul><li>设计系统</li><li>骨架屏</li></ul><h3 id="✅-兼容性"><a href="#✅-兼容性" class="headerlink" title="✅ 兼容性"></a>✅ 兼容性</h3><h4 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h4><ul><li>normalize.css</li><li>html5shiv.js</li><li>respond.js</li><li>Babel</li><li>Polyfill</li></ul><h4 id="屏幕分辨率兼容性"><a href="#屏幕分辨率兼容性" class="headerlink" title="屏幕分辨率兼容性"></a>屏幕分辨率兼容性</h4><h4 id="跨平台兼容性"><a href="#跨平台兼容性" class="headerlink" title="跨平台兼容性"></a>跨平台兼容性</h4><h3 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h3><ul><li><p>💬 描述：搜索引擎优化，利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。</p></li><li><p>📚 资源：百度搜索📚 资源平台 <a href="https://ziyuan.baidu.com/cooperateresource/index">https://ziyuan.baidu.com/cooperateresource/index</a></p></li><li><p>robots.txt</p></li><li><p>description</p></li><li><p>keywords</p></li><li><p>SiteMap</p></li><li><p>HTML 标签优化</p></li><li><p>站内链接建设</p></li><li><p>友情链接</p></li></ul><h3 id="✅-安全"><a href="#✅-安全" class="headerlink" title="✅ 安全"></a>✅ 安全</h3><ul><li>⭐️ XSS</li><li>CSRF</li><li>反爬虫</li><li>SQL 注入</li><li>DDoS</li></ul><h2 id="五、前端生态"><a href="#五、前端生态" class="headerlink" title="五、前端生态"></a>五、前端生态</h2><ul><li><p>💬 描述：如今，前端领域的范围越来越广，出现了更多前端工程师需要了解和关注的技术。</p></li><li><p>🎯 目标：能用学到的前端技术去做更多的事情，比如开发个人博客、文档网站、小程序、APP 等。</p></li></ul><h3 id="⭐️-静态站点构建"><a href="#⭐️-静态站点构建" class="headerlink" title="⭐️ 静态站点构建"></a>⭐️ 静态站点构建</h3><h4 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h4><ul><li>React Static</li></ul><h4 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h4><ul><li>✅ Gatsby.js</li><li>✅ Docusaurus</li><li>Hugo</li><li>Hexo</li></ul><h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><ul><li>JekyII</li><li>⭐️ Docsify</li><li>VuePress</li><li>✅ Dumi</li></ul><h3 id="✅-大前端"><a href="#✅-大前端" class="headerlink" title="✅ 大前端"></a>✅ 大前端</h3><p>💬 描述：前端技术的融合更加紧密，应用的领域也更加广泛，前端领域的内容呈现多样化，除了网站外，还可以用前端技术跨平台开发 Android、iOS、小程序、虚拟现实、增强现实等。</p><h4 id="移动应用"><a href="#移动应用" class="headerlink" title="移动应用"></a>移动应用</h4><ul><li>Hybrid</li><li>WebView</li><li>React Native</li><li>Flutter</li></ul><h4 id="移动应用打包"><a href="#移动应用打包" class="headerlink" title="移动应用打包"></a>移动应用打包</h4><ul><li>Weex</li><li>Cordova</li><li>Phonegap</li><li>Ionic</li></ul><h4 id="桌面应用"><a href="#桌面应用" class="headerlink" title="桌面应用"></a>桌面应用</h4><ul><li>Electron</li><li>NW.js</li><li>Proton Native</li></ul><h4 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h4><ul><li>原生</li><li>WebView</li></ul><h4 id="跨端开发框架"><a href="#跨端开发框架" class="headerlink" title="跨端开发框架"></a>跨端开发框架</h4><ul><li>✅ uni-app</li><li>✅ Taro</li><li>Flutter</li><li>Chameleon</li><li>Wepy</li><li>Rax</li></ul><h4 id="移动端调试"><a href="#移动端调试" class="headerlink" title="移动端调试"></a>移动端调试</h4><ul><li>Chrome Dev Tools</li><li>Android Simulator</li><li>IOS Simulator</li></ul><h3 id="✅-Serverless"><a href="#✅-Serverless" class="headerlink" title="✅ Serverless"></a>✅ Serverless</h3><ul><li>💬 描述：一种构建和管理基于微服务架构的完整流程，允许你在服务部署级别而不是服务器部署级别来管理你的应用部署，你甚至可以管理某个具体功能或端口的部署，这就能让开发者快速迭代，更快速地开发软件。</li></ul><h3 id="✅-云开发"><a href="#✅-云开发" class="headerlink" title="✅ 云开发"></a>✅ 云开发</h3><ul><li><p>💬 描述：云端一体化的后端云服务 ，采用 Serverless 架构，免去了移动应用构建中繁琐的服务器搭建和运维。同时云开发提供的静态托管、命令行工具（CLI）、Flutter SDK 等能力降低了应用开发的门槛。使用云开发可以构建完整的小程序/小游戏、H5、Web、移动 App 等应用。</p></li><li><p>✅ 腾讯云云开发</p></li><li><p>阿里云云开发</p></li></ul><h3 id="低代码"><a href="#低代码" class="headerlink" title="低代码"></a>低代码</h3><ul><li><p>💬 描述：无需编码（零代码）或通过少量代码就可以快速生成应用程序的开发平台。通过可视化进行应用程序开发的方法，使具有不同经验水平的开发人员可以通过图形化的用户界面，使用拖拽组件和模型驱动的逻辑来创建网页和移动应用程序。</p></li><li><p>腾讯云低码</p></li><li><p>阿里宜搭</p></li></ul><h2 id="六、前端求职"><a href="#六、前端求职" class="headerlink" title="六、前端求职"></a>六、前端求职</h2><ul><li><p>💬 描述：求职是一个漫长的过程，建议拉长战线，尽早准备。</p></li><li><p>🎯 目标：找到理想的工作。</p></li></ul><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ul><li>2020 秋招面经汇总：<a href="https://www.nowcoder.com/discuss/205497">https://www.nowcoder.com/discuss/205497</a></li></ul><h3 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h3><ul><li>超级简历</li></ul><h3 id="面试题库"><a href="#面试题库" class="headerlink" title="面试题库"></a>面试题库</h3><ul><li>牛客前端工程师面试宝典：<a href="https://www.nowcoder.com/tutorial/96/f5212664ab664984882b00635066ded2">https://www.nowcoder.com/tutorial/96/f5212664ab664984882b00635066ded2</a></li><li>前端面试每日 3+1：<a href="https://github.com/haizlin/fe-interview">https://github.com/haizlin/fe-interview</a></li><li>React 面试题目 &amp; 题解：<a href="https://github.com/sudheerj/reactjs-interview-questions">https://github.com/sudheerj/reactjs-interview-questions</a></li></ul><h3 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h3><ul><li>前端面经汇总：<a href="https://www.nowcoder.com/discuss/experience?tagId=644">https://www.nowcoder.com/discuss/experience?tagId=644</a></li></ul><h3 id="面试实战"><a href="#面试实战" class="headerlink" title="面试实战"></a>面试实战</h3><ul><li>AI 模拟面试：<a href="https://www.nowcoder.com/interview/ai/cover?jobTagId=644">https://www.nowcoder.com/interview/ai/cover?jobTagId=644</a></li></ul><h2 id="七、前端未来"><a href="#七、前端未来" class="headerlink" title="七、前端未来"></a>七、前端未来</h2><ul><li><p>💬 描述：前端未来可能的发展趋势和热门技术。</p></li><li><p>🎯 目标：关注前沿，持续进步。</p></li><li><p>WebAssembly</p></li><li><p>智能 UI</p></li><li><p>React Server Component</p></li><li><p>CSS Houdini</p></li></ul><h3 id="WebComponents"><a href="#WebComponents" class="headerlink" title="WebComponents"></a>WebComponents</h3><ul><li>HTML templates（HTML模板）</li><li>Custom elements（自定义元素）</li><li>Shadow DOM（影子DOM）</li></ul><h2 id="我的前端学习路线"><a href="#我的前端学习路线" class="headerlink" title="我的前端学习路线"></a>我的前端学习路线</h2><p>虽然上面整理的学习路线知识点非常多，但是大家也别太担心，其实按照一定顺序和方法来学习，并不会很难，聊聊我的学习经历。</p><h3 id="1-快速入门，培养兴趣"><a href="#1-快速入门，培养兴趣" class="headerlink" title="1. 快速入门，培养兴趣"></a>1. 快速入门，培养兴趣</h3><p>刚开始学习前端时，一定要以培养兴趣、快速入门为目标。我入门前端时，由于没有基础、啥都不懂，因此选择在线实战教程网站来学习，跟着教程案例一行行把代码敲下来，实时浏览显示效果，很轻松地就把 HTML、CSS、JavaScript 的语法基础过了一遍。但是这时，我对看过的知识点没有什么印象，基本是看了就忘，当我想要自己写一个网站，也根本无从下手。</p><p>于是，我开始试着死记硬背代码，结果发现背了之后还是不会写。那干脆一不做二不休，直接打开编辑器和教程网站，把之前在线实战时敲过的代码复制粘贴到编辑器中，然后再修改保存，到浏览器中打开文件。这样虽然要在编辑器和浏览器中来回切换，但起码能看到自己的网页文件运行的效果了。后来，我利用浏览器开发者工具提升了自己开发网站的调试效率，敲出的代码达不到满意的效果时，就再去查，再改，再浏览，最后终于完成了一个留言板网站！</p><p>通过这件事，我明白了一个道理，既然记不住知识，那就先别强行记忆，上手多写，忘了就去查不就好了？不要担心自己知识不够做不出来，只要你去试，都一定能实现。</p><h3 id="2-多看多写，巩固基础"><a href="#2-多看多写，巩固基础" class="headerlink" title="2. 多看多写，巩固基础"></a>2. 多看多写，巩固基础</h3><p>在这种操作下，我虽然能使用基础三件套开发简易网站了，但做的很慢，还老出问题。于是，我开始完整地看了几本前端入门和项目实战书籍，有三件套入门的，也有响应式网站设计的，还有 JavaScript 综合讲解的，以及一套完整的视频教程，通过这些来复习巩固之前学过的知识，打好了基础，并且了解了更多实战教程上没见到的知识。</p><p>看书和视频的过程中，我跟着做了几个简易的网站，也是边看边做。在这之后，我发现自己渐渐地能够脱离文档来写网站了！</p><h3 id="3-框架学习，学以致用"><a href="#3-框架学习，学以致用" class="headerlink" title="3. 框架学习，学以致用"></a>3. 框架学习，学以致用</h3><p>但是，总感觉开发网站时，什么都要自己写，重复的代码写一大堆，很麻烦。于是，我试着上网搜了解决这些问题的方法，发现可以用组件库减少重复编写 HTML 和 CSS 代码，于是学了 LayUI，其实和之前一样的，就是打开官网找到要用的组件，然后复制到项目中修改就行了，写的多了竟然还真记住了一些（虽然这个没必要记）。</p><p>界面和样式代码简化了，但是 JavaScript 写的我依旧头疼。于是我决定进入下一个阶段的学习，当时先看了本书叫《锋利的 jQuery》来学习 jQuery，学会之后使用它趁热打铁做了几个网站，发现的确能大大简化繁琐的 JavaScript DOM 操作，让我尝到了甜头，又有了继续学习前端的动力。</p><p>在那之后大概半年，我开始学习主流前端框架 Vue，也是跟着视频教程学，并且结合 ElementUI 组件库开发了一个响应式网站。不得不说，习惯了用原生 JavaScript 和 jQuery 开发后，再去用 Vue 开发，真的是爽飞了，小有成就感。</p><h3 id="4-根据需要，自主学习"><a href="#4-根据需要，自主学习" class="headerlink" title="4. 根据需要，自主学习"></a>4. 根据需要，自主学习</h3><p>在那之后，我就是通过不断地做项目来积累经验，既然编程知识太多学不完，那我就随需随学，逐渐拓宽自己的知识面。举个例子，我要做一个移动端 H5 页面，那就去搜 Vue 的移动端组件库，学会了 MintUI、VantUI 等；项目中要处理日期，那我就去搜日期处理库，学会了 Moment.js；项目重复文件和代码太多，我就去网上搜一些组件化、模块化的最佳实践；项目代码太大、加载太慢，我就去网上搜一些前端压缩、性能优化的方式；要把开发好的项目变成 APP，那我就去网上搜到了 Cordova 等打包工具；跟其他同学一起做项目时比较混乱、开发效率低，我就去搜了一些代码规范、前端工程化等；遇到 Bug 时，也是自己去网上搜索解决方案，并且还要看看有没有知识点是我遗漏的，我会再去弥补学习。通过不断实践、不断遇到问题和自主解决问题，我始终保持着学习的积极性，学到了越来越多前端的知识，并通过归纳总结来加深印象。</p><h3 id="5-渐入佳境，拓宽视野"><a href="#5-渐入佳境，拓宽视野" class="headerlink" title="5. 渐入佳境，拓宽视野"></a>5. 渐入佳境，拓宽视野</h3><p>在那之后，我学前端技术非常快了，像 React、TypeScript、Redux、Dva、Umi、Lerna 等等都随用随学，随学随用。此外，我不仅仅关注前端网页开发本身，还同时关注前端的生态和发展，学习了微前端、Serverless、云开发、低代码等技术，因此个人的能力提升也很大。如今在鹅厂工作中也是，面对各种不同技术栈的前端项目，我都能迎难而上，毕竟不会就学嘛！</p><p>哦，写的渐入佳境，我都忘了，自己是一名后端工程师，还搁这儿吹牛逼呢（ 所以本路线难免会有不专业的地方，请大家见谅~</p><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h3><p>总结一下，学前端的路线其实就一句话：基础三件套 =&gt; 巩固基础 =&gt; 学习框架 =&gt; 多做项目 =&gt; 按需学习 =&gt; 拓宽视野。还有一个学任何编程技术都要注意的点，全程多敲代码！多敲代码！多敲代码！</p><h2 id="尾声-持续学习"><a href="#尾声-持续学习" class="headerlink" title="尾声 - 持续学习"></a>尾声 - 持续学习</h2><h3 id="优秀前端人的特质"><a href="#优秀前端人的特质" class="headerlink" title="优秀前端人的特质"></a>优秀前端人的特质</h3><ul><li><p>深厚的功底</p></li><li><p>良好的编码习惯</p></li><li><p>发现问题的洞察力</p></li><li><p>思维灵活，善于思考</p></li><li><p>追求技术，紧跟前沿</p></li><li><p>有创造力，有行动力</p></li><li><p>追求用户体验</p></li><li><p>时刻保持好奇</p></li><li><p>全栈意识</p></li><li><p>解决问题的能力强</p></li><li><p>懂得合作和高效沟通</p></li><li><p>重视工作，同样重视生活</p></li><li><p>责任心和全局观</p></li><li><p>个人的进步能带动团队的进步</p></li></ul><h3 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h3><ul><li>编程导航（包含以下所有资源，强烈推荐 👍）：<a href="https://www.code-nav.cn/">https://www.code-nav.cn</a></li><li>freeCodecamp 在线编程：<a href="https://learn.freecodecamp.one/">https://learn.freecodecamp.one/</a></li><li>阿里云前端实战学习：<a href="https://edu.aliyun.com/roadmap/frontend">https://edu.aliyun.com/roadmap/frontend</a></li><li>W3Cschool 编程入门实战：<a href="https://www.w3cschool.cn/codecamp/">https://www.w3cschool.cn/codecamp/</a></li><li>腾讯云动手实验室：<a href="https://cloud.tencent.com/developer/labs/gallery">https://cloud.tencent.com/developer/labs/gallery</a></li><li>pink老师前端入门教程：<a href="https://www.bilibili.com/video/BV14J4114768">https://www.bilibili.com/video/BV14J4114768</a></li><li>MDN 前端文档：<a href="https://developer.mozilla.org/zh-CN">https://developer.mozilla.org/zh-CN</a></li><li>Node.js 入门：<a href="https://cnodejs.org/getstart">https://cnodejs.org/getstart</a></li><li>前端清单：<a href="https://cheatsheets.devtool.tech/">https://cheatsheets.devtool.tech/</a></li><li>前端小课：<a href="https://lefex.github.io/">https://lefex.github.io/</a></li><li>被删的前端游乐场：<a href="http://www.godbasin.com/">http://www.godbasin.com/</a></li><li>《ES6 入门教程》：<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></li><li>谷歌 Web 开发者：<a href="https://developers.google.com/web">https://developers.google.com/web</a></li><li>JavaScript 明星项目：<a href="https://risingstars.js.org/2020/zh">https://risingstars.js.org/2020/zh</a></li><li>Best of JS：<a href="https://bestofjs.org/">https://bestofjs.org/</a></li><li>Codewars：<a href="https://www.codewars.com/?language=javascript">https://www.codewars.com/?language=javascript</a></li><li>Vue.js examples：<a href="https://vuejsexamples.com/">https://vuejsexamples.com/</a></li></ul><h3 id="前端资讯"><a href="#前端资讯" class="headerlink" title="前端资讯"></a>前端资讯</h3><ul><li>掘金资讯：<a href="https://juejin.cn/news">https://juejin.cn/news</a></li><li>InfoQ：<a href="https://www.infoq.cn/topic/Front-end">https://www.infoq.cn/topic/Front-end</a></li><li>daily.dev：<a href="https://daily.dev/">https://daily.dev/</a></li></ul><h3 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h3><ul><li><p>掘金：<a href="https://juejin.cn/frontend">https://juejin.cn/frontend</a></p></li><li><p>腾讯前端 IMWEB：<a href="http://imweb.io/">http://imweb.io</a></p></li><li><p>腾讯 Web 前端团队 Alloy Team：<a href="http://www.alloyteam.com/">http://www.alloyteam.com</a></p></li><li><p>淘宝前端团队：<a href="http://taobaofed.org/">http://taobaofed.org</a></p></li><li><p>百度 Web 前端研发部：<a href="http://fex.baidu.com/">http://fex.baidu.com</a></p></li><li><p>京东凹凸实验室：<a href="https://aotu.io/">https://aotu.io</a></p></li><li><p>360 奇舞团：<a href="https://75team.com/">https://75team.com</a></p></li><li><p>七牛团队技术博客：<a href="http://blog.qiniu.com/">http://blog.qiniu.com</a></p></li><li><p>有赞技术团队：<a href="https://tech.youzan.com/tag/front-end/">https://tech.youzan.com/tag/front-end/</a></p></li><li><p>百度 EFE Tech：<a href="https://efe.baidu.com/">https://efe.baidu.com/</a></p></li><li><p>css-tricks：<a href="https://css-tricks.com/archives">https://css-tricks.com/archives</a></p></li><li><p>web.dev：<a href="https://web.dev/blog/">https://web.dev/blog/</a></p></li></ul><h3 id="学习要点"><a href="#学习要点" class="headerlink" title="学习要点"></a>学习要点</h3><ul><li>前期学习以培养兴趣为主，不要过于追求深层理解。</li><li>前端学习不能靠死记硬背，要多敲代码、多做项目实践。</li><li>不要急于求成，踏实积累才是硬道理。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一线大厂研发流程</title>
      <link href="/2023/08/07/%E5%A4%A7%E5%8E%82%E7%A0%94%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
      <url>/2023/08/07/%E5%A4%A7%E5%8E%82%E7%A0%94%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一线大厂研发流程"><a href="#一线大厂研发流程" class="headerlink" title="一线大厂研发流程"></a>一线大厂研发流程</h1><p>可以分为很多个阶段，用一张思维导图来概括: </p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230720204405979.png" alt="一线大厂研发流程导图" style="zoom:50%;" /><blockquote><p>需要注意的是，以上阶段并不是完全按从上到下的顺序执行，阶段间可能存在交叉，比如 <strong>技术选型</strong> 其实在 <strong>设计阶段</strong> 就应该考虑。</p></blockquote><p>正式工作一年多，我也是经历过多次项目的完整研发流程的。下面就以我的视角，带大家快速过一遍~</p><p>（为了内容更有趣，以下故事有虚构成分）</p><h3 id="需求阶段"><a href="#需求阶段" class="headerlink" title="需求阶段"></a>需求阶段</h3><p>今天是周一，鱼皮像往常一样骑着他的小电动车来到公司，殊不知，等待他的是一场噩梦的开始。</p><h4 id="需求产生"><a href="#需求产生" class="headerlink" title="需求产生"></a>需求产生</h4><p>上午十点，产品妹子找到鱼皮，告诉他：咱们的系统上线后，用户表示很多功能并不好用，需要大改。</p><p>老板也找到鱼皮，告诉他：我今天打开页面竟然加载了十几秒，咱们这个系统的性能太烂了吧！</p><p>鱼皮心想：呕豁，完蛋！估计得做个新的项目了，又要开会了。</p><p>果然，没过多久，屏幕上弹出了一条 “欢迎加入会议” 的邀请。</p><h4 id="需求评审"><a href="#需求评审" class="headerlink" title="需求评审"></a>需求评审</h4><p>第二天上午，老板、产品、测试、几位开发大哥和鱼皮一起来到会议室，具体讨论昨天提到的那些需求 <strong>是否合理、要不要做</strong> ？</p><p>产品妹子打开文档，说到：这一期呢，我们要做这几个需求，下面我来详细讲一下，大家一起评估下有没有问题。</p><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>接下来，产品妹子正在对着屏幕侃侃而谈、疯狂输出时，旁边的开发大哥坐不住了。</p><p>开发大哥：这个需求不合理啊！</p><p>产品：为啥不合理？用户就是有这个需求啊！</p><p>开发大哥：我知道，实现不了啊！</p><p>于是开始了经典的产品开发撕逼大战。。。</p><p>而鱼皮正躲在角落冷静分析 <strong>这个需求怎么做</strong> ，过了一会儿，提出了一种改动低、实现快的解决方案，平息了这场战争。</p><h4 id="排期"><a href="#排期" class="headerlink" title="排期"></a>排期</h4><p>确定需求合理、可实现之后，产品妹子问到：那这个需求啥时候能上线呀？</p><p>开发大哥：我这周忙，下周吧。</p><p>产品：用户可能比较着急，这周就要呢！</p><p>开发大哥：我知道，做不完啊！</p><p>于是开始了经典的产品开发撕逼大战。。。</p><p>鱼皮：要不我们把这个需求拆解为功能 A 和功能 B，这周我先把功能 A 做了，功能 B 排到下周二测试，下周四上线？</p><p>就这样，我们一个个安排了需求的计划完成日期。</p><h3 id="设计阶段"><a href="#设计阶段" class="headerlink" title="设计阶段"></a>设计阶段</h3><p>终于开完会了，看了下时间，都该下班了！</p><p>唉，需求讨论完了，产品的工作是完成了一些，可鱼皮的工作才刚刚开始。</p><p>急着开始写代码么？</p><p><strong>不，想好怎么写代码比写代码更重要。</strong></p><h4 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h4><p>鱼皮打开写文档软件和画图软件，开始梳理整个系统，从整体到局部，依次设计出系统的层次结构、各层间交互的接口和通讯方式、每层之间包含哪些重要模块、模块选择何种物理部署方式等。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E7%9F%A5%E5%90%8D%E6%A1%86%E6%9E%B6%20Dubbo%20%E7%9A%84%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1" alt="image-20230720204623646" style="zoom:80%;" /><h4 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h4><p>写完架构设计后，鱼皮开始对着产品妹子写的 PRD（产品需求文档），分析需求，然后依然是从整体到局部，先整理出系统需要的功能模块，再分析每个功能模块内有哪些子模块。</p><p>和抽象的架构设计相比，概要设计和需求的关系更紧密，是对架构设计的细化。</p><p>打个比方大家就明白了，你要盖一栋楼，架构设计就是从整体来考虑，总共有几层、每层管道怎么接、每层有几户、地基怎么打等；而概要设计就是考虑每户套件的内部怎么划分，哪里是客厅、哪里是卫生间。</p><blockquote><p>很多情况下，概要设计和架构设计可能会在一个文档中进行，划分并不明确。</p></blockquote><h4 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h4><p>想好系统有哪些功能后，鱼皮就开始具体分析每个功能如何实现，用到哪些算法、需要注重哪些细节等。</p><h4 id="方案对齐"><a href="#方案对齐" class="headerlink" title="方案对齐"></a>方案对齐</h4><p>写好设计文档后，下次会议上，鱼皮和其他的开发同学（前端、后端等）一起针对自己设计的方案展开讨论，最终产生一个统一的方案，然后大家分工去做就好了。</p><h4 id="测试用例设计"><a href="#测试用例设计" class="headerlink" title="测试用例设计"></a>测试用例设计</h4><p>为了保证系统功能的正常稳定，测试同学（或者叫 QA）是非常重要的，测试不是像我们自己做项目一样对着网页点几下就 ok 了。</p><p>在大公司中，为了保证测试的覆盖度、提高测试效率，一般是要设计测试用例的，比如：用户点击 “登录”，未传任何数据，期望结果是警告用户输入用户名和密码。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%AE%A1%E7%90%86.png" alt="image-20230720204739963" style="zoom:80%;" /><p>测试用例设计完后，需要其他同学一起来评审把关，而不是只交给测试同学。因为一个人很容易忽略掉很多测试细节，最好让更熟悉代码的开发同学一起帮忙补充。</p><p>鱼皮自己也写了几个测试可能会遗漏的用例，和测试同学一起进行了确认，尽量让问题暴露在测试阶段而不是线上。</p><h3 id="研发准备"><a href="#研发准备" class="headerlink" title="研发准备"></a>研发准备</h3><p>写了快一周的设计文档，终于准备开始动手搭建项目了。但在此之前，还有一些准备工作要进行。</p><h4 id="技术预研"><a href="#技术预研" class="headerlink" title="技术预研"></a>技术预研</h4><p>如今技术发展太快，新技术层出不穷，所以鱼皮首先对项目中需要或可能需要用到的技术进行了调研。</p><h4 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h4><p>通过调研，鱼皮得到了几个可以满足需求的技术，但他开始纠结：这么多技术，我该用哪一个呢？是用 SSM 框架还是 Play 框架呢？用 guava 包还是 Apache Commons 呢？</p><p>鱼皮又打开了写文档软件，开始对比不同技术的优劣，头疼啊，技术选型要考量的因素太多了，比如：</p><ul><li>单从技术考虑：性能、易用性、稳定性、主流程度和生态、文档详细度</li><li>结合团队：团队成员对技术的熟悉度、掌控度（有无精通该技术的人）</li><li>结合业务：是否适应业务的量级（单机 or 微服务）、是否适应业务（读多、写多 or 分析多）</li></ul><p>对于关键的项目，鱼皮自己还不敢完全确定选型，因此在写好自己的选型文档后，与同事和 Leader 一起讨论，才最终确认。</p><h4 id="资源申请"><a href="#资源申请" class="headerlink" title="资源申请"></a>资源申请</h4><p>确认好技术后，就要申请资源。比如鱼皮用到了 MySQL 数据库，但是这个 MySQL 从哪儿来呢？</p><p>以前的话，鱼皮都是去买一台云服务器，自己搭建 MySQL。但是在企业中，一般是有集中管理和分配资源的平台的，直接到平台填写预算、等领导审批、然后等着下发资源就好了。千万不能私自用自己的或买外部的服务器来部署项目，不安全！</p><p>鱼皮这次直接申请到了 2 万多一年的云数据库，真的是爽死了。</p><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>申请好数据库等资源后，鱼皮按照申请机器的版本搭建了一模一样的本地开发环境和测试环境，后面就可以直接连接了。</p><h4 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h4><p>环境准备妥当后，由于是新项目，鱼皮要搞一个最小可运行的初始化项目 Demo，使用 <strong>脚手架</strong> 自动生成代码，而不是从零开始一个个新建文件、手敲重复代码。</p><h4 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h4><p>生成了项目代码后，鱼皮使用包管理工具（前端 yarn、Java Maven /  Gradle 等）自动安装依赖，然后项目 Demo 就可以运行啦！</p><h3 id="研发阶段"><a href="#研发阶段" class="headerlink" title="研发阶段"></a>研发阶段</h3><p>前期准备完成后，这才到了程序员朋友们最熟悉的写代码环节，也是鱼皮最爱的环节。</p><p>因为之前设计方案时需要保持冷静、仔细思考，没法边听歌儿边做；而方案设计好后，已经明确了该怎么做，写代码实现就很简单了，顶多是遇到一些坑，上网搜索去解决就好了。</p><h4 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h4><p>开发时，一般鱼皮会先在本地写代码，通过配置热更新工具，实现代码更新时自动重新编译打包，而不用手动重启项目，大大提高了开发效率。</p><p>对了，企业开发都会使用版本控制系统的，比如 Git，开发前记得先创建一个自己的分支，在这个分支上开发。</p><h4 id="远程开发"><a href="#远程开发" class="headerlink" title="远程开发"></a>远程开发</h4><p>现在还有一种比较流行的远程开发方式，就是可以像编辑本地文件一样编辑远程文件，直接修改服务器上的代码。一般我们每位研发同学是有自己的开发机的，通过远程开发就省去了反复部署调试的麻烦，提高效率。一般用 VSCode 等开发工具，安装远程开发插件就可以实现了。</p><h4 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h4><p>鱼皮在写代码的时候，始终保持主动优化代码的好习惯，注重代码的时空复杂度；并且当重复代码多了，会想办法抽象成函数或者使用设计模式。之前专门写文章分享过我的编程习惯：<a href="https://mp.weixin.qq.com/s/df5JMmBbw294y2sAPMwGbA">我写代码时的小倔强</a> 。</p><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><p>注意！不要听到测试就以为是测试同学的工作，开发同学也同样需要编写小粒度的测试来为自己的代码负责。</p><p>鱼皮一般会为每个数据库读写函数和业务逻辑函数编写单元测试，像 Java 的话一般用 JUnit 等工具，还可以用 Jacoco 生成测试覆盖度报告。每次修改关键代码后，都要执行一遍单元测试，防止意外错误。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/Jacoco%20%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E5%BA%A6%E6%8A%A5%E5%91%8A.png" alt="image-20230720204909400" style="zoom:80%;" /><h4 id="开发联调"><a href="#开发联调" class="headerlink" title="开发联调"></a>开发联调</h4><p>鱼皮终于写好了后端代码，也自测完成了，下面就是把写好的代码打包构建，然后把可执行项目包发布到测试服务器上，和前端同学一起联调，让他请求我的接口，验证系统的功能是否可用。</p><h3 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h3><p>鱼皮和前端联调完毕后，告知了测试和产品同学。</p><p>测试验证是企业中至关重要的环节，甚至可以说是最后一道防线。测试的目的是找 Bug，尽量发现系统中的问题，把它们扼杀在测试阶段。</p><p>在企业中，测试验证又有很多类型。</p><h4 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h4><p>集成测试比单元测试粒度更大，是把多个模块或代码单元放在一起，验证模块之间的集成和调用关系。</p><p>因为单个函数的执行可能是正常的，但把多个函数组合在一起顺序调用，可能就会出现问题。</p><p>打个比方，我们有个吃面包系统：</p><p>功能 A：小鱼吃一个面包</p><p>功能 B：小皮吃一个面包</p><p>每次只有一个面包，独立执行功能 A 和 B 都是允许的。但如果两个一起执行，后执行的那个功能就会报错。</p><h4 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h4><p>系统测试比集成测试的粒度更大，测试对象是整个系统，不仅包括软件，还可能覆盖对硬件的测试。</p><h4 id="产品体验"><a href="#产品体验" class="headerlink" title="产品体验"></a>产品体验</h4><p>除了测试同学要验证系统可用性，产品妹子也要体验下功能是否符合预期、是否易用。大多数情况下，产品会在体验时提出修改建议，开发可能还要再去做一些修改。</p><h4 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h4><p>测试和产品妹子终于表示没有问题啦，那就到了最后一步，把整个产品或功能给最终的用户来体验。<del>老板</del> 用户说没问题，才是真的没问题！</p><h3 id="提交阶段"><a href="#提交阶段" class="headerlink" title="提交阶段"></a>提交阶段</h3><p>系统没问题之后，鱼皮就可以把代码发布到远程仓库了，一般使用 Git 和 SVN 等版本控制系统。</p><h4 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h4><p>鱼皮首先在本地触发代码提交（git commit），为保证规范，在大项目中一般会使用提交检测插件，防止你把错误的代码进行了提交。</p><h4 id="代码推送"><a href="#代码推送" class="headerlink" title="代码推送"></a>代码推送</h4><p>下一步就是把本地的提交推送到远程的同名分支。一般大厂会有推送检测工具，检测代码的错误、圈复杂度、代码规范等，和提交检测一样，防止你把错误或不规范的代码进行了推送。</p><h4 id="合并请求"><a href="#合并请求" class="headerlink" title="合并请求"></a>合并请求</h4><p>代码分支推送到远程之后，鱼皮发起了一个分支合并请求（MR），希望把该分支的代码合并到主干分支（没问题的代码）。</p><h4 id="代码审查"><a href="#代码审查" class="headerlink" title="代码审查"></a>代码审查</h4><p>并不是发起了合并请求就能直接合并，还要通过代码审查，即 CR。</p><p>审查又分为两种方式：人审和机审。</p><p>相信不少同学都知道人审，一般是由你的上级和其他项目负责人来阅读和评论你的代码，觉得没问题就 Approve（通过），否则打回去修改。</p><p>那机审是个啥呢？其实就是机器自动检测你的代码是否符合规范，是否能够成功自动化构建等，一般是由项目负责人配置的，可以帮助发现一些人工难以发现的问题。</p><p>刚接触新项目的时候，鱼皮经常被机审折磨得苦不堪言，经常被提示一些莫名其妙的代码问题，比如加号要换行，文件行末要加空行等。但后来注意编码习惯后，就很自然地适应了，的确不错。</p><h3 id="发布阶段"><a href="#发布阶段" class="headerlink" title="发布阶段"></a>发布阶段</h3><p>代码审查通过后，鱼皮的项目代码就可以发布上线啦。</p><h4 id="打包构建"><a href="#打包构建" class="headerlink" title="打包构建"></a>打包构建</h4><p>传统上线方式是开发人员到正式服务器上拉取代码，然后安装依赖，再通过工具把代码打包构建，得到部署包，通过 Nginx、Tomcat、Docker 等技术运行。</p><p>但这样效率很低，有很多重复工作。所以大厂一般是用自动化构建的，像 Jenkins、各种 CI / CD 工具等。代码合并到主分之后，由机器把代码打包构建为最终的部署包。</p><h4 id="预发布"><a href="#预发布" class="headerlink" title="预发布"></a>预发布</h4><p>为了防止上线出问题，一般我们会先在预发布环境部署项目，再观察一下是否能够正常运行。</p><h4 id="正式发布"><a href="#正式发布" class="headerlink" title="正式发布"></a>正式发布</h4><p>预发布测试正常后，鱼皮终于等到了上线的这一刻。大项目一般都会部署在多台机器上，所以不可能一台台登录机器去发布部署包。</p><p>通常公司会提供可视化发布平台，点选需要发布机器（一般先灰度，选一小部分机器，再全量发布），点击一键发布，等项目管理员审批通过之后，就交给机器自动部署吧！</p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>鱼皮曾天真地以为项目上线之后，就可以高枕无忧了。但后来发现，项目上线之后，同样需要保持警觉。虽然已经测试过，但仍然时不时会出现个预期之外的小 Bug，还是很考验心态的。</p><p>来看看上线之后，鱼皮做了哪些事呢？</p><h4 id="监控运维"><a href="#监控运维" class="headerlink" title="监控运维"></a>监控运维</h4><p>鱼皮会定期查看项目的监控面板，观察项目的运行情况，机器的负载等。</p><h4 id="统计分析"><a href="#统计分析" class="headerlink" title="统计分析"></a>统计分析</h4><p>鱼皮在代码中添加了一些日志，可以利用 ELK 等日志收集可视化平台对这些日志进行分析，从而感知到用户的行为，进一步优化业务和系统。</p><p>比如我会统计用户执行 SQL 查询的耗时，对重复率高的慢 SQL 进行针对性地优化。</p><h4 id="事件反馈"><a href="#事件反馈" class="headerlink" title="事件反馈"></a>事件反馈</h4><p>有的时候，用户自己都不能清楚地描述 Bug，而且历史 Bug 也不方便找到。所以公司内部一般会有事件反馈平台，产品等内部同学在接收到 Bug 时，会在该平台发布一个 Bug 事件，详细描述 Bug 出现的时间、状况、详情等，便于我们开发集中分析和处理问题。</p><h4 id="文档沉淀"><a href="#文档沉淀" class="headerlink" title="文档沉淀"></a>文档沉淀</h4><p>每次上线了新功能和项目，鱼皮都会通过写文档来记录项目的背景、设计方案、开发过程和一些坑点，便于后续其他同学了解项目，这是非常重要的！利人利己。</p><p>曾经分享过我的写文档技巧：<a href="https://mp.weixin.qq.com/s/oQTksFE-cPYRKGJnr71-kw">如何写好文档？</a></p><h4 id="迭代优化"><a href="#迭代优化" class="headerlink" title="迭代优化"></a>迭代优化</h4><p>最后，一个需求的结束往往只是另一个需求的开始。像鱼皮最近在跟进的项目，一期做完做二期，二期还没做完三期就来了；还要抽出时间去优化以前的代码，这日子遥遥无期，没盼头啊！</p><hr><p>看完本文后，欢迎阅读我之前的这篇文章：<a href="https://mp.weixin.qq.com/s/RyqO8ry29zAL40ToVitxTQ">大厂机密！30 个提升团队研发效能的锦囊</a> ，了解更多大厂技术。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习路线</title>
      <link href="/2023/08/07/Linux%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2023/08/07/Linux%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-学习路线"><a href="#Linux-学习路线" class="headerlink" title="Linux 学习路线"></a>Linux 学习路线</h1><blockquote><p>Linux 学习路线 by 程序员鱼皮</p></blockquote><p>💂 + 💻 = 👴🏽</p><p>建议先观看视频入门：<a href="https://www.bilibili.com/video/BV1ev411G7VE/">https://www.bilibili.com/video/BV1ev411G7VE/</a></p><h2 id="为什么学-Linux？"><a href="#为什么学-Linux？" class="headerlink" title="为什么学 Linux？"></a>为什么学 Linux？</h2><p>相比于 Windows，Linux 免费、开源、安全、灵活、稳定、便于开发，所以更受企业青睐，甚至 <strong>90% 以上</strong> 的企业应用都是用 Linux 服务器部署的。</p><p>无论是前端、后端、算法、测试、运维等计算机相关岗位的同学，都建议学习下 Linux，大有裨益。</p><h2 id="学习境界"><a href="#学习境界" class="headerlink" title="学习境界"></a>学习境界</h2><p>首先，Linux 入门很简单，但想学的透彻难上加难！</p><p>因此，在学习之前要明确目标。</p><p>可以 Linux 的学习分为几种境界：</p><ol><li>明劲，就是了解 Linux 的基本概念，会敲常用命令来应对工作。对于大多数想从事开发和运维岗位的同学，学到这就足够找到工作了。</li><li>暗劲，又分为两种境界，能理解 Linux 尤其是其内核的设计思想，为小圆满；能将其思想应用到系统的架构设计中，为大圆满。暗劲境界的高手，冲击大厂、做架构师、从事底层开发，都不成问题。</li><li>化劲，可谓出神入化，不仅熟知 Linux 的使用、思想和细节，更能推陈出新，自主创造新的系统。</li></ol><p>当然，一般情况下，会用就够了，想进大厂最好也学习一些内核的设计思想。找到工作后，是否要深入学习完全取决于你自己。</p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><img src="https://qiniuyun.code-nav.cn/img/%E9%B1%BC%E7%9A%AE%20-%20Linux%20%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.png" alt="鱼皮 - Linux 学习路线"></p><h2 id="路线"><a href="#路线" class="headerlink" title="路线"></a>路线</h2><h3 id="Linux-基础知识"><a href="#Linux-基础知识" class="headerlink" title="Linux 基础知识"></a>Linux 基础知识</h3><ul><li>发展历史</li><li>⭐ 特点和优势</li><li>应用场景</li><li>⭐ 常见 Linux 系统版本（推荐 CentOS 7+）<ul><li>⭐ CentOS</li><li>⭐ Ubuntu</li><li>Debian</li><li>Fedora</li></ul></li><li>何为开源？</li></ul><h3 id="Linux-环境"><a href="#Linux-环境" class="headerlink" title="Linux 环境"></a>Linux 环境</h3><ul><li><p>搭建方式</p><ul><li>⭐ 虚拟机</li><li>⭐ 云服务器</li><li>在线工具</li><li>WSL</li><li>Docker 容器</li></ul></li><li><p>远程连接</p><ul><li>⭐ SSH</li><li>连接工具<ul><li>⭐ XShell</li><li>⭐ MobaXterm</li><li>SecureCRT</li><li>Putty</li></ul></li></ul></li></ul><h3 id="Linux-常用命令"><a href="#Linux-常用命令" class="headerlink" title="Linux 常用命令"></a>Linux 常用命令</h3><blockquote><p>此处只列举命令名称，命令的具体用法可直接在手册中（<a href="https://www.linuxcool.com/%EF%BC%89%E6%9F%A5%E8%AF%A2">https://www.linuxcool.com/）查询</a></p></blockquote><h4 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h4><ul><li>uname 查看系统信息</li><li>hostname 查看主机名</li><li>cat /proc/cpuinfo 查看 CPU 信息</li><li>lsmod 查看已加载的系统模块</li><li>top 查看系统使用情况</li><li>df 查看磁盘使用情况</li><li>fdisk 查看磁盘分区</li><li>du 查看目录使用情况</li><li>iostat 查看 I / O 使用情况</li><li>free 显示系统内存情况</li><li>env 查看环境变量</li><li>uptime 查看系统运行时间、用户数、负载</li></ul><h4 id="系统操作"><a href="#系统操作" class="headerlink" title="系统操作"></a>系统操作</h4><ul><li>shutdown 关机</li><li>reboot 重启</li><li>mount 挂载设备</li><li>umount 卸载设备</li></ul><h4 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h4><ul><li>su 切换用户</li><li>sudo 以管理员身份执行</li><li>who 查看当前用户名</li><li>ssh 远程连接</li><li>logout 注销</li><li>useradd 创建用户</li><li>userdel 删除用户</li><li>usermod 修改用户</li><li>groupadd 创建用户组</li><li>groupdel 删除用户组</li><li>groupmod 修改用户组</li><li>passwd 修改密码</li><li>last 显示用户或终端的登录情况</li></ul><h4 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h4><ul><li>cd 切换目录</li><li>ls 查看目录列表</li><li>tree 打印目录树</li><li>mkdir 创建目录</li><li>rm 删除目录</li><li>touch 新建文件</li><li>cp 复制文件</li><li>mv 移动文件</li><li>ln 创建文件链接</li><li>find 搜索文件</li><li>locate 定位文件</li><li>whereis 查看可执行文件路径</li><li>which 在 PATH 指定的路径中，搜索某系统命令的位置</li><li>chmod 设置目录权限</li><li>cat / more / less 查看文件</li><li>tac 倒序查看文件</li><li>head / tail 查看文件开头 / 结尾</li><li>paste 合并文件</li><li>zip / tar / gzip 压缩文件</li><li>unzip / tar / gunzip 解压文件</li><li>grep / sed / awk 文本处理</li><li>vim 文本编辑</li></ul><h4 id="程序相关"><a href="#程序相关" class="headerlink" title="程序相关"></a>程序相关</h4><ul><li>crontab 计划任务</li><li>nohup 后台运行程序</li><li>jobs 查看系统任务</li><li>ps 查看进程</li><li>kill 杀死进程</li><li>rpm / yum / apt / apt-get / dpkg 软件包管理</li><li>service / systemctl 服务管理</li></ul><h4 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h4><ul><li>ifconfig 查看网络属性</li><li>netstat 查看网络状态</li><li>iptables 查看 iptables 规则</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><p>date 显示系统时间</p></li><li><p>cal 显示日历</p></li><li><p>history 显示与操作历史</p></li><li><p>help 帮助</p></li><li><p>alias 别名</p></li></ul><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ul><li>用户</li><li>用户组</li><li>ACL 权限管理</li><li>用户切换</li><li>管理员</li></ul><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><ul><li>文件操作<ul><li>创建</li><li>修改</li><li>复制</li><li>移动</li><li>删除</li></ul></li><li>文件浏览</li><li>文件搜索</li><li>文件权限</li><li>软硬链接</li><li>压缩 / 解压</li></ul><h3 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h3><ul><li>正则表达式</li><li>grep</li><li>sed</li><li>awk</li></ul><h3 id="VIM-编辑器"><a href="#VIM-编辑器" class="headerlink" title="VIM 编辑器"></a>VIM 编辑器</h3><ul><li><p>基本操作</p></li><li><p>模式</p></li><li><p>快捷键</p></li><li><p>VIM 定制</p></li><li><p>插件增强</p></li></ul><p>送张 VIM 键盘图：</p><p><img src="https://qiniuyun.code-nav.cn/img/vi-vim-cheat-sheet-sch.gif"></p><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><ul><li>使用情况查询</li><li>磁盘分区</li><li>挂载</li></ul><h3 id="驱动管理"><a href="#驱动管理" class="headerlink" title="驱动管理"></a>驱动管理</h3><ul><li>驱动加载</li><li>驱动更新</li><li>网卡</li><li>显卡</li></ul><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><ul><li>启动进程</li><li>杀死进程</li><li>查看进程</li><li>前台 / 后台任务</li><li>进程监控</li></ul><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><ul><li>crond 服务</li><li>crontab 命令</li></ul><h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><ul><li>IP</li><li>端口</li><li>主机名</li><li>hosts</li><li>网络配置</li><li>网络状态</li><li>网络监控</li></ul><h3 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h3><ul><li><p>系统设置</p><ul><li>日期时间</li><li>语言</li><li>字符集</li></ul></li><li><p>系统服务</p></li><li><p>环境变量</p></li><li><p>日志</p></li><li><p>系统关机 / 重启</p></li><li><p>数据备份与恢复</p></li></ul><h3 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h3><ul><li>服务查看</li><li>启动服务</li><li>禁用服务</li><li>删除服务</li><li>开机自启</li></ul><h3 id="软件管理"><a href="#软件管理" class="headerlink" title="软件管理"></a>软件管理</h3><ul><li><p>软件包管理器</p><ul><li>⭐ rpm</li><li>⭐ yum</li><li>apt</li><li>apt-get</li><li>dpkg</li></ul></li><li><p>软件安装</p></li><li><p>软件更新</p></li><li><p>软件卸载</p></li><li><p>源码安装</p></li></ul><h3 id="常用软件-服务搭建"><a href="#常用软件-服务搭建" class="headerlink" title="常用软件 / 服务搭建"></a>常用软件 / 服务搭建</h3><ul><li><p>HTTP</p></li><li><p>Mail</p></li><li><p>NFS</p></li><li><p>DNS</p></li><li><p>FTP</p></li><li><p>mysql</p></li><li><p>LVS + Keepalived</p></li><li><p>Apache</p></li><li><p>Nginx</p></li><li><p>Redis</p></li><li><p>日志服务</p></li></ul><h3 id="Shell-脚本编程"><a href="#Shell-脚本编程" class="headerlink" title="Shell 脚本编程"></a>Shell 脚本编程</h3><ul><li><p>默认变量</p></li><li><p>运算符</p></li><li><p>条件</p></li><li><p>循环</p></li><li><p>执行</p></li><li><p>函数</p><ul><li>系统函数</li><li>自定义函数</li></ul></li><li><p>规范</p></li><li><p>调试方法</p></li><li><p>管道</p></li><li><p>I/O 重定向</p></li></ul><h3 id="Linux-启动过程"><a href="#Linux-启动过程" class="headerlink" title="Linux 启动过程"></a>Linux 启动过程</h3><ul><li>BIOS 启动引导</li><li>引导加载程序</li><li>内核加载</li><li>系统初始化（init）</li><li>运行级别</li><li>启动内核</li><li>执行初始化脚本</li><li>用户登录</li></ul><h3 id="Linux-内核"><a href="#Linux-内核" class="headerlink" title="Linux 内核"></a>Linux 内核</h3><ul><li>内核的组成</li><li>目录结构</li><li>版本</li><li>模块</li><li>编译</li><li>裁剪</li></ul><p>具体路线图参考：</p><p><img src="https://qiniuyun.code-nav.cn/img/%E5%86%85%E6%A0%B8%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB.jpg" alt="内核知识体系 by 0Voice"></p><h3 id="第三方工具"><a href="#第三方工具" class="headerlink" title="第三方工具"></a>第三方工具</h3><ul><li><p>Ansible</p></li><li><p>Webmin</p></li><li><p>宝塔 Linux </p></li></ul><h2 id="岗位"><a href="#岗位" class="headerlink" title="岗位"></a>岗位</h2><ul><li><p>后端开发（Java / Go / C++）</p></li><li><p>底层开发（C / C++）</p></li><li><p>运维开发</p></li><li><p>大数据</p></li><li><p>云计算</p></li><li><p>自动化运维</p></li><li><p>嵌入式开发</p></li><li><p>网络工程师</p></li></ul><h2 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h2><p>多动手实践，建议自己购买一台云服务器，并且在本地搭建 Linux 虚拟机环境。</p><p>一定要自己从 0 开始手敲命令安装软件、部署服务，熟悉整个项目的上线流程。</p><p>每个命令至少要跟着敲一遍，了解它们的作用，并通过自然地练习，熟悉常用的 Linux 命令。</p><p>记不住没关系，用文档查就行了。</p><p>先会用，再理解。</p><p>时间不多的话，可以通过面试题来了解一些 Linux 设计思想，而不是直接去深入学习内核，虽说学会了的确大有裨益，但性价比不高。</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li><p>视频</p><ul><li>⭐ 2021 韩顺平 一周学会Linux：<a href="https://www.bilibili.com/video/BV1Sv411r7vd%EF%BC%88%E5%9F%BA%E4%BA%8E">https://www.bilibili.com/video/BV1Sv411r7vd（基于</a> CentOS 7.6 版本较新，视频长度刚刚好，也比较完整）</li><li>【千锋】Linux 云计算基础视频教程 650 集入门：<a href="https://www.bilibili.com/video/BV1pz4y1D73n%EF%BC%88%E5%BE%88%E5%85%A8%E9%9D%A2%EF%BC%8C%E9%80%82%E5%90%88%E6%97%B6%E9%97%B4%E8%B6%B3%E5%A4%9F%E3%80%81%E6%83%B3%E8%AE%A4%E7%9C%9F%E5%AD%A6%E7%9A%84%E5%90%8C%E5%AD%A6%EF%BC%89">https://www.bilibili.com/video/BV1pz4y1D73n（很全面，适合时间足够、想认真学的同学）</a></li><li>【狂神说Java】Linux 教程 - 阿里云真实环境学习：<a href="https://www.bilibili.com/video/BV187411y7hF%EF%BC%88%E7%AE%97%E6%98%AF%E4%B8%AA%E5%B0%8F%E7%9A%84%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E5%90%A7%EF%BC%8C%E6%97%B6%E9%97%B4%E8%B6%B3%E5%A4%9F%E7%9A%84%E8%AF%9D%E8%BF%98%E6%98%AF%E6%8E%A8%E8%8D%90%E7%9C%8B%E6%9B%B4%E5%AE%8C%E6%95%B4%E7%9A%84%EF%BC%89">https://www.bilibili.com/video/BV187411y7hF（算是个小的入门教程吧，时间足够的话还是推荐看更完整的）</a></li><li>细说Linux - 从入门到精通：<a href="https://study.163.com/course/courseMain.htm?courseId=983014%EF%BC%88%E6%84%9F%E8%A7%89%E6%9C%89%E7%82%B9%E5%95%B0%E5%97%A6%EF%BC%8C%E4%BD%9C%E4%B8%BA%E5%A4%87%E7%94%A8%E5%90%A7%EF%BC%89">https://study.163.com/course/courseMain.htm?courseId=983014（感觉有点啰嗦，作为备用吧）</a></li><li>玩转Vim 从放弃到爱不释手：<a href="https://www.imooc.com/learn/1129%EF%BC%88%E5%A5%BD%E8%AF%84%E5%BE%88%E5%A4%9A%EF%BC%89">https://www.imooc.com/learn/1129（好评很多）</a></li><li>阿里云 Linux 运维学习路线：<a href="https://edu.aliyun.com/roadmap/linux">https://edu.aliyun.com/roadmap/linux</a></li></ul></li><li><p>书籍</p><ul><li>《鸟哥的 Linux 私房菜 —— 基础篇》：<a href="http://cn.linux.vbird.org/linux_basic/linux_basic.php%EF%BC%88%E7%BB%8F%E5%85%B8%EF%BC%89">http://cn.linux.vbird.org/linux_basic/linux_basic.php（经典）</a></li><li>《深入理解 LINUX 内核》：<a href="https://book.douban.com/subject/1767120/">https://book.douban.com/subject/1767120/</a></li><li>《深入Linux内核架构》：<a href="https://book.douban.com/subject/4843567/">https://book.douban.com/subject/4843567/</a></li><li>《Linux内核完全剖析》：<a href="https://book.douban.com/subject/3229243/">https://book.douban.com/subject/3229243/</a></li><li>《Linux内核设计与实现(原书第3版)》：<a href="https://book.douban.com/subject/6097773/">https://book.douban.com/subject/6097773/</a></li></ul></li><li><p>文档</p><ul><li><p>Linux  教程（菜鸟教程）：<a href="https://www.runoob.com/linux/linux-tutorial.html">https://www.runoob.com/linux/linux-tutorial.html</a></p></li><li><p>Linux 教程（W3CSchool）：<a href="https://www.w3cschool.cn/linux/">https://www.w3cschool.cn/linux/</a></p></li><li><p>Linux 工具快速教程：<a href="https://linuxtools-rst.readthedocs.io(基础、工具进阶、工具参考)/">https://linuxtools-rst.readthedocs.io（基础、工具进阶、工具参考）</a></p></li></ul></li><li><p>合集</p><ul><li>Linux内核学习资料：<a href="https://github.com/0voice/linux_kernel_wiki">https://github.com/0voice/linux_kernel_wiki</a></li><li>GitHub Linux 专区：<a href="https://github.com/topics/linux%EF%BC%88%E5%BE%88%E5%A4%9A%E5%A5%BD%E9%A1%B9%E7%9B%AE%EF%BC%89">https://github.com/topics/linux（很多好项目）</a></li><li>GitHub Linux 合集：<a href="https://github.com/inputsh/awesome-linux%EF%BC%88Linux">https://github.com/inputsh/awesome-linux（Linux</a> 系列技术）</li><li>StackOverflow：<a href="https://stackoverflow.com/questions/tagged/linux%EF%BC%88%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E5%BF%85%E5%A4%87%EF%BC%89">https://stackoverflow.com/questions/tagged/linux（解决问题必备）</a></li><li>掘金 Linux 专区：<a href="https://juejin.cn/tag/Linux%EF%BC%88%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%EF%BC%89">https://juejin.cn/tag/Linux（技术文章）</a></li></ul></li><li><p>实战</p><ul><li>⭐ 蓝桥云课 Linux 基础入门：<a href="https://www.lanqiao.cn/courses/1%EF%BC%88%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90%EF%BC%89">https://www.lanqiao.cn/courses/1（强烈推荐）</a></li><li>腾讯云动手实验室：<a href="https://cloud.tencent.com/developer/labs">https://cloud.tencent.com/developer/labs</a></li><li>阿里云体验实验室：<a href="https://developer.aliyun.com/adc/labs/">https://developer.aliyun.com/adc/labs/</a></li><li>阿里云知行实验室：<a href="https://start.aliyun.com/">https://start.aliyun.com/</a></li><li>华为云沙箱实验室：<a href="https://lab.huaweicloud.com/">https://lab.huaweicloud.com/</a></li></ul></li><li><p>社区（国内倒的差不多了）</p><ul><li>Linux 中国：<a href="https://linux.cn/">https://linux.cn/</a></li><li>开源中国：<a href="https://www.oschina.net/%EF%BC%88%E7%BB%BC%E5%90%88%E7%9A%84%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%EF%BC%89">https://www.oschina.net/（综合的开源社区）</a></li><li>红帽官网：<a href="https://www.redhat.com/zh">https://www.redhat.com/zh</a></li></ul></li><li><p>工具</p><ul><li>DistroTest 在线操作系统测试：<a href="https://distrotest.net/">https://distrotest.net</a></li><li>⭐ Linux 命令搜索：<a href="https://wangchujiang.com/linux-command">https://wangchujiang.com/linux-command</a></li><li>Linux 命令大全手册：<a href="https://man.linuxde.net/">https://man.linuxde.net/</a></li><li>Linux 命令大全手册：<a href="https://www.linuxcool.com/">https://www.linuxcool.com/</a></li><li>Linux 命令示例：<a href="http://linux-commands-examples.com/">http://linux-commands-examples.com/</a></li><li>宝塔 Linux 面板：<a href="https://www.bt.cn/">https://www.bt.cn/</a></li><li>在线 Shell 脚本检查：<a href="https://www.shellcheck.net/">https://www.shellcheck.net</a></li></ul></li><li><p>面试题</p><ul><li>牛客网 Linux 专项练习：<a href="https://www.nowcoder.com/intelligentTest">https://www.nowcoder.com/intelligentTest</a></li><li>牛客网 Linux 面试题：<a href="https://www.nowcoder.com/search?query=linux%E9%9D%A2%E8%AF%95%E9%A2%98&amp;type=question">https://www.nowcoder.com/search?query=linux%E9%9D%A2%E8%AF%95%E9%A2%98&amp;type=question</a></li><li>Linux 常见面试题整理：<a href="https://zhuanlan.zhihu.com/p/376749877">https://zhuanlan.zhihu.com/p/376749877</a></li><li>Linux 常见面试题整理：<a href="https://github.com/0voice/linux_kernel_wiki#-%E9%9D%A2%E8%AF%95%E9%A2%98">https://github.com/0voice/linux_kernel_wiki#-%E9%9D%A2%E8%AF%95%E9%A2%98</a></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java学习路线</title>
      <link href="/2023/08/07/Java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2023/08/07/Java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-学习路线"><a href="#Java-学习路线" class="headerlink" title="Java 学习路线"></a>Java 学习路线</h1><blockquote><p>Java 学习路线一条龙版 by 程序员鱼皮</p></blockquote><p>💂 + 💻 = 👴🏽</p><p>建议先观看视频导读：<a href="https://www.bilibili.com/video/BV1Qf4y1K7ff/">https://www.bilibili.com/video/BV1Qf4y1K7ff/</a></p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><img src="https://qiniuyun.code-nav.cn/img/image-20211127235325557.png" alt="image-20211127235325557"></p><h2 id="路线特点"><a href="#路线特点" class="headerlink" title="路线特点"></a>路线特点</h2><ol><li>最新，完整一条龙的大厂 Java 学习路线，从入门到入土</li><li>同时适用于想全面学习 / 快速求职的同学，可以根据符号来定制自己的专属学习路线</li><li>给出目标、学习建议、关键知识点、最优资源以及各类资源推荐（视频、书籍、文档、项目、工具等）</li><li>鱼皮自己是 Java 开发者，融入个人自学和从业的经历 + 思考，让路线有灵魂</li><li>划分阶段、更有计划，且在最后给出持续学习的方向、探索 Java 程序员发展的无限可能</li><li>完全开源，回馈社区，持续更新！</li></ol><h2 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h2><p>可以通过路线知识点前的表情字符，根据自己的实际情况选择学习：</p><ul><li>🌕 所有同学必须学习！！！</li><li>🌖 非常急着找工作，才可不学；目标大厂，必须学习！</li><li>🌗 急着找工作的话，可不学；目标大厂，建议学习</li><li>🌘 时间充足的话，再去学</li><li>⭐ 表示推荐资源</li></ul><h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><p>首先呢，我们要了解 Java 的应用场景和就业方向，看看和自己的学习目的是否一致。</p><p>目前，Java 由于其优秀的特性以及火爆的生态，岗位需求量大，是后台开发、安卓开发、大数据开发的主流编程语言，因此学习资源也很丰富，值得学习！</p><p>有关更多编程语言的选择，大家可以看我的视频了解：<a href="https://www.bilibili.com/video/BV1y3411r7pX/">https://www.bilibili.com/video/BV1y3411r7pX/</a></p><h2 id="阶段-0：前期准备"><a href="#阶段-0：前期准备" class="headerlink" title="阶段 0：前期准备"></a>阶段 0：前期准备</h2><ol><li>准备好一款在线、随时随地写代码的工具，不用在本地去安装和配置，是初学者的好帮手。<ul><li>推荐网站 - 菜鸟工具：<a href="https://c.runoob.com/compile/10">https://c.runoob.com/compile/10</a></li></ul></li><li>准备一款记笔记的软件，学编程的过程中老师的思路、自己遇到的问题、解决问题的方法、心得感悟、遇到的好资料，都要记下来哦，好记性不如烂笔头，可以帮助你事半功倍。<ul><li>推荐本地软件 Typora：<a href="https://www.typora.io/">https://www.typora.io/</a> （线上可以用 xx 文档）</li><li>推荐使用 Markdown 语法编写，鱼皮教程：<a href="https://www.bilibili.com/video/BV1no4y1k7YT/">https://www.bilibili.com/video/BV1no4y1k7YT/</a></li></ul></li><li>想学好编程，别背代码，要多写，把这句话刻到脑子里。</li><li>选视频和找资料的小技巧：多看评论区、多看隔壁评论区、不要看过期的视频。</li><li>如何访问 GitHub：<a href="https://mp.weixin.qq.com/s/uBFsuThsZ4kdkZgqfX12qA">https://mp.weixin.qq.com/s/uBFsuThsZ4kdkZgqfX12qA</a> （上面有很多免费的编程学习资源、项目源码，程序员必备）</li></ol><h2 id="阶段-1：Java-入门"><a href="#阶段-1：Java-入门" class="headerlink" title="阶段 1：Java 入门"></a>阶段 1：Java 入门</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>培养兴趣、快速上手，能运行和编写简单的 Java 程序。</p><p>学完本阶段后，可以试着用 Java 解决一些数学计算问题、编写图书管理系统等桌面端 GUI 程序，甚至是五子棋之类的小游戏。</p><h3 id="🌕-Java-编程基础（45-天）"><a href="#🌕-Java-编程基础（45-天）" class="headerlink" title="🌕 Java 编程基础（45 天）"></a>🌕 Java 编程基础（45 天）</h3><h4 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h4><ul><li>Java 特点（看不懂没事，别背！）</li><li>环境搭建</li><li>IDEA 开发工具<ul><li>新建项目</li><li>运行调试</li><li>界面配置</li><li>插件管理</li></ul></li><li><strong>Java 基础语法</strong><ul><li>数据类型</li><li>流程控制</li></ul></li><li>数组</li><li><strong>面向对象</strong><ul><li>方法</li><li>重载</li><li>封装</li><li>继承</li><li>多态</li></ul></li><li>抽象类</li><li>接口</li><li>枚举</li><li>常用类<ul><li>String</li><li>日期时间</li></ul></li><li>集合类</li><li>泛型</li><li>注解</li><li>异常处理</li><li>多线程</li><li>IO 流</li><li>反射</li></ul><h4 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h4><p>初学一门语言时，一定要持续学习，不能中断！</p><p>想要学好编程，一定要多敲代码！建议先跟着书上的例子敲一遍代码，然后试着自主编写代码，并完成课后练习。</p><p>不理解代码也没关系，可以学习 Debug 后，一行一行地打断点执行，查看程序的执行过程。千万不要觉得麻烦，养成习惯后真的能节省很多重复学习的时间。</p><h4 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>为什么重写 equals 还要重写 hashcode？</li><li>== 和 equals 比较的区别</li><li>为啥有时会出现 4.0 - 3.6 = 0.40000001 这种现象？</li><li>final 关键字的作用</li><li>介绍 Java 的集合类</li><li>ArrayList 和 LinkedList 的区别</li></ol><h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li>⭐ 韩顺平 - 零基础 30 天学会 Java：<a href="https://www.bilibili.com/video/BV1fh411y7R8">https://www.bilibili.com/video/BV1fh411y7R8</a> （900 多集，顺序安排很合理，每个知识真正的打碎了，通俗、有示例、有实战、有思想）</li></ul></li><li><p>文档</p><ul><li><p>⭐ 菜鸟教程：<a href="https://www.runoob.com/java/java-tutorial.html">https://www.runoob.com/java/java-tutorial.html</a> （可以在线练习）</p></li><li><p>廖雪峰 Java 教程：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744">https://www.liaoxuefeng.com/wiki/1252599548343744</a></p></li><li><p>IDEA 中文教程：<a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial">https://github.com/judasn/IntelliJ-IDEA-Tutorial</a></p></li><li><p>IDEA Mac 快捷键指南，地址：<a href="https://www.jianshu.com/p/454c71172c46">https://www.jianshu.com/p/454c71172c46</a></p></li><li><p>IDEA Win 常用快捷键，地址：<a href="https://www.jianshu.com/p/5de7cca0fefc">https://www.jianshu.com/p/5de7cca0fefc</a></p></li></ul></li><li><p>书籍</p><ul><li>《Head First Java》</li></ul></li><li><p>在线游戏</p><ul><li>Codegym：<a href="https://codegym.cc/zh">https://codegym.cc/zh</a> （玩玩前几关培养兴趣不错，但后面收费了）</li></ul></li></ul><h3 id="🌖-Java-8（3-天）"><a href="#🌖-Java-8（3-天）" class="headerlink" title="🌖 Java 8（3 天）"></a>🌖 Java 8（3 天）</h3><h4 id="知识-1"><a href="#知识-1" class="headerlink" title="知识"></a>知识</h4><ul><li>Stream API</li><li>Lambda 表达式</li><li>新日期时间 API</li><li>接口默认方法</li></ul><h4 id="学习建议-1"><a href="#学习建议-1" class="headerlink" title="学习建议"></a>学习建议</h4><p>Java 8 是如今企业开发中最主流的 Java 稳定版本，在这个版本出现了很多实用的新特性，虽然面试考点不多，但能够提升编程效率，建议学习。</p><h4 id="经典面试题-1"><a href="#经典面试题-1" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>java 8 有哪些新特性？</li><li>HashMap 在 jdk 1.7 和 1.8 的区别？</li></ol><h4 id="资源-1"><a href="#资源-1" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li>⭐ 宋红康 - 全网最全Java零基础入门教程：<a href="https://www.bilibili.com/video/BV1Kb411W75N">https://www.bilibili.com/video/BV1Kb411W75N</a> （只看 Java 8 部分即可）</li></ul></li><li><p>文档</p><ul><li>⭐ 菜鸟教程：<a href="https://www.runoob.com/java/java8-new-features.html">https://www.runoob.com/java/java8-new-features.html</a></li></ul></li><li><p>书籍</p><ul><li>《Java 8 实战》</li></ul></li><li><p>工具</p><ul><li>⭐ 在线编写运行  Java 8：<a href="https://www.tutorialspoint.com/compile_java8_online.php">https://www.tutorialspoint.com/compile_java8_online.php</a></li></ul></li><li><p>其他</p><ul><li>Java 8 小代码片段：<a href="https://github.com/biezhi/30-seconds-of-java8">https://github.com/biezhi/30-seconds-of-java8</a></li></ul></li></ul><h3 id="练手项目"><a href="#练手项目" class="headerlink" title="练手项目"></a>练手项目</h3><ul><li>Java 实现简单计算器：<a href="https://www.lanqiao.cn/courses/185">https://www.lanqiao.cn/courses/185</a></li><li>Eclipse 实现 Java 编辑器：<a href="https://www.lanqiao.cn/courses/287">https://www.lanqiao.cn/courses/287</a></li><li>一本糊涂账：<a href="https://how2j.cn/module/104.html">https://how2j.cn/module/104.html</a></li><li>Java 五子棋：<a href="https://blog.csdn.net/cnlht/article/details/8176130">https://blog.csdn.net/cnlht/article/details/8176130</a></li><li>Java 中国象棋：<a href="https://blog.csdn.net/cnlht/article/details/8205733">https://blog.csdn.net/cnlht/article/details/8205733</a></li><li>JAVA GUI 图书馆管理系统：<a href="https://github.com/uboger/LibraryManager">https://github.com/uboger/LibraryManager</a></li><li>JAVA 坦克大战小游戏：<a href="https://github.com/wangzhengyi/TankWar">https://github.com/wangzhengyi/TankWar</a></li><li>Swing 编写的俄罗斯方块：<a href="https://github.com/HelloClyde/Tetris-Swing">https://github.com/HelloClyde/Tetris-Swing</a></li><li>小小记账本：<a href="https://github.com/xenv/SmallAccount">https://github.com/xenv/SmallAccount</a> （适合了解数据库的同学）</li></ul><h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>学完了 Java 基础后，有些同学会感到迷茫了啊，感觉好像啥也做不出来，不知道下一步做什么，我这一身的本领该如何施展啊？</p><p>不要慌，也不要急着去学新技术，接下来我们要多用 Java 来写代码了，巩固基础，但是写什么呢？</p><p>当然是数据结构和算法！</p><h2 id="阶段-2：巩固基础"><a href="#阶段-2：巩固基础" class="headerlink" title="阶段 2：巩固基础"></a>阶段 2：巩固基础</h2><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><p>想学好编程，计算机基础知识要学好。</p><p>比如算法，是程序员的灵魂。学好算法有助于我们理解程序、开拓思路，因此也是很多公司面试时考察的关键，在找工作前，还是要刷个上百道算法题目的。</p><p>我们这个阶段的目标是：熟练使用 Java 语言来编写程序，巩固 Java 基础。（那直接用 Java 来写算法题目，一举两得，岂不美哉？）</p><p>此外，建议大家利用零碎时间多去了解 <strong>计算机基础知识</strong> ，比如操作系统、计算机网络等，对你后面学习开发框架之类的知识都有帮助。</p><h3 id="Java-基础（30-天）"><a href="#Java-基础（30-天）" class="headerlink" title="Java 基础（30 天）"></a>Java 基础（30 天）</h3><h4 id="学习建议-2"><a href="#学习建议-2" class="headerlink" title="学习建议"></a>学习建议</h4><p>建议大家去阅读 《Java 核心技术卷 1》，这本书堪称经典，是帮助你复习巩固  Java 的不二之选，其中图形界面章节可以选择不看。</p><p>之后可以刷牛客的 Java 练习题，检验自己的水平，我当时刷了两遍 1000 题（每天 30 题，1 个月也就刷完了，二刷会更快！）。虽然都是选择题，但能学到很多 Java 语言的特性、避免写代码时容易犯的错误。</p><p>如果你时间不够，只是想快速找到工作，那么本章节甚至可以完全跳过，后面慢慢弥补即可。</p><h4 id="资源-2"><a href="#资源-2" class="headerlink" title="资源"></a>资源</h4><ul><li>书籍<ul><li>⭐《Java 核心技术卷 1》</li></ul></li><li>练习<ul><li>⭐ 牛客题库：<a href="https://www.nowcoder.com/intelligentTest">https://www.nowcoder.com/intelligentTest</a></li></ul></li></ul><h3 id="🌖-数据结构与算法"><a href="#🌖-数据结构与算法" class="headerlink" title="🌖 数据结构与算法"></a>🌖 数据结构与算法</h3><h4 id="知识-2"><a href="#知识-2" class="headerlink" title="知识"></a>知识</h4><ul><li><p><strong>时间 / 空间复杂度分析</strong></p></li><li><p>数据结构</p><ul><li>数组</li><li>字符串</li><li>队列</li><li>栈</li><li>链表</li><li>集合</li><li>哈希表</li><li>树<ul><li>二叉树</li><li>多叉树</li><li>字典树</li></ul></li></ul></li><li><p>算法</p><ul><li>排序</li><li>双指针</li><li>查找</li><li>分治</li><li>动态规划</li><li>递归</li><li>回溯</li><li>贪心</li><li>位运算</li><li>DFS</li><li>BFS</li><li>图</li></ul></li></ul><h4 id="学习建议-3"><a href="#学习建议-3" class="headerlink" title="学习建议"></a>学习建议</h4><p>学算法一定要多思考、多练习！！！</p><p>在复习 Java、巩固基础的过程中，每天可以坚持用 Java 做 2 - 3 道算法题目。</p><p>不用担心看不懂，直接进入 LeetCode 学习板块 LeetBook，提供了免费的教程，文字、图解、动画讲算法、在线练习应有尽有，从 0 开始，跟着学习基础知识、跟着教程刷一些同类题目，培养算法思路。</p><p>之后再由简单到复杂、由通过率高到低，自主刷题，多看题解，举一反三。一定要把自己做过的每道题目代码都自行保存好，定期复习。时间足够的话，也可以试着自己写写题解，在网上分享一下自己的刷题思路，找到自己坚持的动力。</p><p>有条件的朋友也可以试着参与竞赛，没什么门槛，可以帮助你集中精神，而且周赛的题目还是挺友好的~</p><h4 id="经典面试题-2"><a href="#经典面试题-2" class="headerlink" title="经典面试题"></a>经典面试题</h4><ul><li>LeetCode 精选 100 道：<a href="https://leetcode-cn.com/problem-list/2cktkvj/">https://leetcode-cn.com/problem-list/2cktkvj/</a></li><li>LeetCode 精选算法 200 题：<a href="https://leetcode-cn.com/problem-list/qg88wci/">https://leetcode-cn.com/problem-list/qg88wci/</a></li></ul><h4 id="资源-3"><a href="#资源-3" class="headerlink" title="资源"></a>资源</h4><ul><li>文章<ul><li>⭐ 刷了 1000 多道算法题，一点心得：<a href="https://t.1yb.co/oT9q">https://t.1yb.co/oT9q</a> （鱼皮原创）</li></ul></li><li>在线教程<ul><li>⭐ LeetCode LeetBook：<a href="https://leetcode-cn.com/leetbook/">https://leetcode-cn.com/leetbook/</a></li></ul></li><li>在线刷题<ul><li>⭐ LeetCode：<a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a></li></ul></li><li>书籍<ul><li>⭐《小灰的漫画算法》</li><li>⭐《剑指 Offer》</li><li>《程序员代码面试指南》</li><li>图解算法数据结构：<a href="https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/">https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/</a></li><li>LeetCode 101（C++）：<a href="https://github.com/changgyhub/leetcode_101">https://github.com/changgyhub/leetcode_101</a></li><li>LeetCode 题解（C++）：<a href="https://github.com/soulmachine/leetcode">https://github.com/soulmachine/leetcode</a></li><li>LeetCode Cookbook（Go 语言）：<a href="https://github.com/halfrost/LeetCode-Go">https://github.com/halfrost/LeetCode-Go</a></li></ul></li><li>视频<ul><li>尚硅谷 Java 数据结构与算法：<a href="https://www.bilibili.com/video/BV1E4411H73v">https://www.bilibili.com/video/BV1E4411H73v</a> （难度比面试的要求大一些，适合希望更全面学习的朋友）</li><li>Leetcode 真题解析：<a href="https://www.bilibili.com/video/BV1a54y1b74k">https://www.bilibili.com/video/BV1a54y1b74k</a></li></ul></li><li>工具<ul><li>VisuAlgo 数据结构和算法动态可视化：<a href="https://visualgo.net/zh">https://visualgo.net/zh</a></li><li>数据结构可视化：<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></li><li>RegExr：<a href="https://www.code-nav.cn/rd/?rid=79550af2601114e9012110711798772b">https://www.code-nav.cn/rd/?rid=79550af2601114e9012110711798772b</a> （学习、创建和测试正则表达式的在线可视化工具）</li></ul></li><li>网站<ul><li>五分钟学算法：<a href="https://www.cxyxiaowu.com/">https://www.cxyxiaowu.com/</a></li></ul></li></ul><h3 id="🌘-计算机导论"><a href="#🌘-计算机导论" class="headerlink" title="🌘 计算机导论"></a>🌘 计算机导论</h3><h4 id="知识-3"><a href="#知识-3" class="headerlink" title="知识"></a>知识</h4><ul><li>计算机发展历史</li><li>计算机应用领域</li><li>计算机发展方向</li><li>计算机基本组成</li><li>二进制</li><li>编程语言发展</li></ul><h4 id="学习建议-4"><a href="#学习建议-4" class="headerlink" title="学习建议"></a>学习建议</h4><p>大学计算机专业的同学一般刚开学就会上这门课，虽说学习它并不会直接提高你的编程技能，但能够让你更了解计算机和编程，从而在一定程度上帮助你培养学习兴趣、确定学习方向。</p><p>自学的话，不用刻意去学习计算机导论，而是可以通过看视频、阅读课外读物的方式慢慢地了解计算机的故事。</p><h4 id="资源-4"><a href="#资源-4" class="headerlink" title="资源"></a>资源</h4><ul><li>视频<ul><li>《计算机科学速成课》：<a href="https://www.bilibili.com/video/BV1EW411u7th">https://www.bilibili.com/video/BV1EW411u7th</a> （从底层到上层的计算机知识科普，强烈推荐）</li></ul></li><li>书籍<ul><li>《半小时漫画计算机》</li></ul></li></ul><h3 id="🌖-操作系统"><a href="#🌖-操作系统" class="headerlink" title="🌖 操作系统"></a>🌖 操作系统</h3><h4 id="知识-4"><a href="#知识-4" class="headerlink" title="知识"></a>知识</h4><ul><li>操作系统的组成</li><li>进程、线程</li><li>进程 / 线程间通讯方式</li><li>进程调度算法</li><li>进程 / 线程同步方式</li><li>进程 / 线程状态</li><li>死锁</li><li>内存管理</li><li>局部性原理</li></ul><h4 id="学习建议-5"><a href="#学习建议-5" class="headerlink" title="学习建议"></a>学习建议</h4><p>说实话，操作系统这一块知识挺枯燥的。你说说我现在项目都不会做，你又让我看这些理论，是不是想让我头秃？</p><p>我的建议是，可以先利用课余时间看一些网课或者有趣的课外书，对一些操作系统的概念先有个大致的印象，比如进程、线程、死锁，等后面有时间了再系统学习、等到找工作了再去背相关八股文。</p><p>还在校园就跟着学校的进度学习就成，自学的话可以看下《清华操作系统原理》视频，有实力的小伙伴，能看懂大黑书就更好了，但如果看不懂也别担心，这并不影响你后续知识的学习。</p><h4 id="经典面试题-3"><a href="#经典面试题-3" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>什么是死锁？死锁产生的条件？</li><li>线程有哪几种状态？</li><li>有哪些进程调度算法？</li><li>什么是缓冲区溢出？</li></ol><h4 id="资源-5"><a href="#资源-5" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li>《清华操作系统原理》：<a href="https://www.bilibili.com/video/BV1uW411f72n">https://www.bilibili.com/video/BV1uW411f72n</a></li></ul></li><li><p>书籍</p><ul><li>《编码》</li><li>《30天自制操作系统》</li><li>《现代操作系统》（难度较大，不推荐新手看）</li><li>《深入理解计算机系统》（难度较大，不推荐新手看）</li><li>《 自己动手写操作系统》（国产好书，网上可以下载）</li></ul></li><li><p>大学课件</p><ul><li>浙大操作系统：<a href="https://github.com/QSCTech/zju-icicles">https://github.com/QSCTech/zju-icicles</a></li></ul></li></ul><h3 id="🌖-计算机网络"><a href="#🌖-计算机网络" class="headerlink" title="🌖 计算机网络"></a>🌖 计算机网络</h3><h4 id="知识-5"><a href="#知识-5" class="headerlink" title="知识"></a>知识</h4><ul><li>网络分层模型</li><li>网络传输过程</li><li>IP、端口</li><li>HTTP / HTTPS 协议</li><li>UDP / TCP 协议</li><li>ARP 地址解析协议</li><li>网络安全</li><li>DNS 域名解析</li></ul><h4 id="学习建议-6"><a href="#学习建议-6" class="headerlink" title="学习建议"></a>学习建议</h4><p>很多学习 Java 开发的同学最后都是从事 <strong>后端开发</strong> 的工作，而计算机网络知识是后端开发的重点。</p><p>和操作系统一样，自学网络可能会很枯燥，建议先看有趣的课外书，比如《图解 HTTP》；或者有趣的视频，比如《计算机网络微课堂》。后面要找工作面试前，再重点去背一些八股文就好了。还在学校的同学好好上课一般就没问题。</p><p>学习基础能帮助自己今后发展更稳定，且更容易接受新知识，所以请不要相信基础无用论。</p><h4 id="经典面试题-4"><a href="#经典面试题-4" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>计算机网络各层有哪些协议？</li><li>TCP 和 UDP 协议的区别？</li><li>TCP 为什么需要三次握手和四次挥手？</li><li>HTTP 和 HTTPS 协议的区别？</li></ol><h4 id="资源-6"><a href="#资源-6" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li>《计算机网络微课堂》：<a href="https://www.bilibili.com/video/BV1c4411d7jb">https://www.bilibili.com/video/BV1c4411d7jb</a></li></ul></li><li><p>书籍</p><ul><li>⭐《图解 HTTP》</li><li>《网络是怎样连接的》</li><li>⭐《图解 TCP / IP》</li></ul></li><li><p>大学课件</p><ul><li>浙大计算机网络基础：<a href="https://github.com/QSCTech/zju-icicles">https://github.com/QSCTech/zju-icicles</a></li></ul></li></ul><h3 id="尾声-1"><a href="#尾声-1" class="headerlink" title="尾声"></a>尾声</h3><p>巩固基础要花至少 1 个月的时间，当你读完《Java 核心技术卷1》并且不用查询文档也能熟练地用 Java 做题时，就可以接着往下了。</p><h2 id="阶段-3：Java-企业开发基础"><a href="#阶段-3：Java-企业开发基础" class="headerlink" title="阶段 3：Java 企业开发基础"></a>阶段 3：Java 企业开发基础</h2><h3 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h3><p>面向薪资编程，学习实际后台开发工作要用的基础技术和框架，并能 <strong>独立</strong> 做出一个具有完整功能的 Java Web 项目。</p><p>学完这个阶段后，你应该已经能独立开发出大多数常见的后台系统了，比如各种管理系统、商城系统等。</p><h3 id="🌕-MySQL-数据库（7-天）"><a href="#🌕-MySQL-数据库（7-天）" class="headerlink" title="🌕 MySQL 数据库（7 天）"></a>🌕 MySQL 数据库（7 天）</h3><p>企业中大部分业务数据都是用关系型数据库存储的，因此数据库是后台开发同学的必备技能，其中 MySQL 数据库是目前的主流，也是面试时的重点。</p><h4 id="知识-6"><a href="#知识-6" class="headerlink" title="知识"></a>知识</h4><ul><li>基本概念</li><li>MySQL 搭建</li><li>SQL 语句编写</li><li>约束</li><li>索引</li><li>事务</li><li>锁机制</li><li>设计数据库表</li><li>性能优化</li></ul><h4 id="学习建议-7"><a href="#学习建议-7" class="headerlink" title="学习建议"></a>学习建议</h4><p>其中，<strong>SQL 语句编写</strong> 和 <strong>设计数据库表</strong> 这两个能力一定要有！</p><p>比如让你做一个学生管理系统，你要能想到需要哪些表，比如学生表、班级表；每个表需要哪些字段、字段类型。</p><p>这就要求大家多写 SQL、多根据实际的业务场景去练习设计能力。</p><h4 id="经典面试题-5"><a href="#经典面试题-5" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>MySQL 索引的最左原则</li><li>InnoDB 和 MyIsam 引擎的区别？</li><li>有哪些优化数据库性能的方法？</li><li>如何定位慢查询？</li><li>MySQL 支持行锁还是表锁？分别有哪些优缺点？</li></ol><h4 id="资源-7"><a href="#资源-7" class="headerlink" title="资源"></a>资源</h4><ul><li>视频<ul><li>⭐ 老杜 - mysql入门基础 + 数据库实战：<a href="https://www.bilibili.com/video/BV1Vy4y1z7EX">https://www.bilibili.com/video/BV1Vy4y1z7EX</a> （较新、内容相对精炼，有习题）</li><li>尚硅谷 - MySQL基础教程：<a href="https://www.bilibili.com/video/BV1xW411u7ax">https://www.bilibili.com/video/BV1xW411u7ax</a> （小姐姐讲课，但感觉音质一般）</li></ul></li><li>在线练习<ul><li>⭐ SQL 自学网：<a href="http://xuesql.cn/">http://xuesql.cn/</a></li><li>⭐ SQL 在线运行：<a href="https://www.bejson.com/runcode/sql/">https://www.bejson.com/runcode/sql/</a></li></ul></li><li>文档<ul><li>SQL - 菜鸟教程：<a href="https://www.runoob.com/sql/sql-tutorial.html">https://www.runoob.com/sql/sql-tutorial.html</a></li><li>MySQL - 菜鸟教程：<a href="https://www.runoob.com/mysql/mysql-tutorial.html">https://www.runoob.com/mysql/mysql-tutorial.html</a></li></ul></li><li>网站<ul><li><a href="https://www.code-nav.cn/rd/?rid=b00064a76012546b016e274a3724c5f0">数据库大全</a>：果创云收录的各种数据库表设计</li></ul></li></ul><h3 id="🌕-开发框架（60-天）"><a href="#🌕-开发框架（60-天）" class="headerlink" title="🌕 开发框架（60 天）"></a>🌕 开发框架（60 天）</h3><p>Java 之所以能成为主流的企业开发语言，很大一部分原因是它完善的框架生态，用好框架，不仅能够大大提升开发效率，还能提高项目的稳定性、减少维护成本。</p><p>开发框架是后台开发工作中不可或缺的，也是面试考察的重点，一定要好好学！</p><p>不知道 Java 能做什么的朋友们，学完开发框架，就会有答案啦。</p><p>下面给大家推荐的都是企业中应用最多的主流开发框架，知识点比较零碎，就放在一起讲了。</p><h4 id="知识-7"><a href="#知识-7" class="headerlink" title="知识"></a>知识</h4><h5 id="🌕-Java-Web"><a href="#🌕-Java-Web" class="headerlink" title="🌕 Java Web"></a>🌕 Java Web</h5><ul><li><p>描述：Java 网页应用开发基础</p></li><li><p>一丢丢前端基础</p></li><li><p>XML</p></li><li><p>JSON</p></li><li><p>Servlet</p></li><li><p>Filter</p></li><li><p>Listener</p></li><li><p>JSP</p></li><li><p>JSTL</p></li><li><p>Cookie</p></li><li><p>Session</p></li></ul><h5 id="🌕-Spring-5"><a href="#🌕-Spring-5" class="headerlink" title="🌕 Spring 5"></a>🌕 Spring 5</h5><ul><li>描述：Java 轻量级应用框架</li><li>IOC</li><li>AOP</li><li>事务</li></ul><h5 id="🌕-SpringMVC"><a href="#🌕-SpringMVC" class="headerlink" title="🌕 SpringMVC"></a>🌕 SpringMVC</h5><ul><li>描述：Java 轻量级 web 开发框架</li><li>什么是 MVC？</li><li>请求与响应</li><li>Restful API</li><li>拦截器</li><li>配置</li><li>执行过程</li></ul><h5 id="🌕-MyBatis"><a href="#🌕-MyBatis" class="headerlink" title="🌕 MyBatis"></a>🌕 MyBatis</h5><ul><li>描述：数据访问框架，操作数据库进行增删改查等操作</li><li>增删改查</li><li>全局配置</li><li>动态 SQL</li><li>缓存</li><li>和其他框架的整合</li><li>逆向工程</li></ul><h5 id="🌗-MyBatis-Plus"><a href="#🌗-MyBatis-Plus" class="headerlink" title="🌗 MyBatis Plus"></a>🌗 MyBatis Plus</h5><ul><li>描述：Mybatis 的增强工具，能够简化开发、提高效率</li><li>引入</li><li>通用 CRUD</li><li>条件构造器</li><li>代码生成器</li><li>插件扩展</li><li>自定义全局操作</li></ul><h5 id="🌕-SpringBoot-2"><a href="#🌕-SpringBoot-2" class="headerlink" title="🌕 SpringBoot 2"></a>🌕 SpringBoot 2</h5><ul><li>描述：简化 Spring 应用的初始搭建以及开发过程，提高效率</li><li>常用注解</li><li>资源整合</li><li>高级特性</li><li>本地热部署</li></ul><h5 id="🌗-Spring-Security"><a href="#🌗-Spring-Security" class="headerlink" title="🌗 Spring Security"></a>🌗 Spring Security</h5><ul><li>描述：Spring 的安全管理框架</li><li>用户认证</li><li>权限管理</li><li>相关技术：Shiro</li></ul><h5 id="🌗-Maven-Gradle"><a href="#🌗-Maven-Gradle" class="headerlink" title="🌗 Maven / Gradle"></a>🌗 Maven / Gradle</h5><ul><li>描述：项目管理工具</li><li>构建</li><li>依赖管理</li><li>插件</li><li>配置</li><li>子父工程</li><li>多模块打包构建</li><li>Nexus 私服搭建</li></ul><h4 id="学习建议-8"><a href="#学习建议-8" class="headerlink" title="学习建议"></a>学习建议</h4><p>由于技术较多，且框架之间存在一定的联系，因此建议大家看同一系列的视频教程（尚硅谷、狂神说等等都可以），以保证学习内容的连续以及体验上的一致。</p><p>学这些技术的时候，<strong>千万不能懒</strong> ！一定要多记笔记，并且跟着老师写代码。原理部分不要太过纠结，先以能跟着敲出代码、写出可运行的项目为主，有些东西做出来也能帮助你更好地理解理论。</p><p>学习顺序挺重要的，建议按我推荐的顺序学，不要一上手就学 Spring Boot。只有先学习下自己整合框架的方法，才能帮你理解 SpringBoot 解决的问题，感受到它的方便和高效。</p><p>Maven / Gradle 当成工具用就好，面试基本不问，跟着框架教程去用就行了，急着找工作的话，先不用花太多时间去深入学。大厂面试问这个的也不多。</p><h4 id="经典面试题-6"><a href="#经典面试题-6" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>Spring 的 IOC 和 AOP 是什么，有哪些优点？</li><li>Spring 框架用到了哪些设计模式？</li><li>介绍 Spring Bean 的生命周期</li><li>MyBatis 如何实现延迟加载？</li><li>介绍 MyBatis 的多级缓存机制</li></ol><h4 id="资源-8"><a href="#资源-8" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频（按顺序看）</p><ul><li><p>⭐ 尚硅谷最新版 JavaWeb 全套教程：<a href="https://www.bilibili.com/video/BV1Y7411K7zz">https://www.bilibili.com/video/BV1Y7411K7zz</a> （前端部分最好也看下）</p></li><li><p>⭐ 尚硅谷 - Spring 5 框架最新版教程（idea版）：<a href="https://www.bilibili.com/video/BV1Vf4y127N5">https://www.bilibili.com/video/BV1Vf4y127N5</a></p></li><li><p>⭐ 尚硅谷 - SpringMVC 2021 最新教程：<a href="https://www.bilibili.com/video/BV1Ry4y1574R">https://www.bilibili.com/video/BV1Ry4y1574R</a></p></li><li><p>⭐ 尚硅谷 - MyBatis 实战教程全套完整版：<a href="https://www.bilibili.com/video/BV1mW411M737">https://www.bilibili.com/video/BV1mW411M737</a></p></li><li><p>⭐ 尚硅谷 - MyBatisPlus 教程：<a href="https://www.bilibili.com/video/BV1Ds411E76Y">https://www.bilibili.com/video/BV1Ds411E76Y</a></p></li><li><p>Maven 零基础入门教程：<a href="https://www.bilibili.com/video/BV1TW411g7hP">https://www.bilibili.com/video/BV1TW411g7hP</a> （搞不懂 Maven 可以看看）</p></li><li><p>⭐ 雷丰阳 2021 版 SpringBoot2 零基础入门：<a href="https://www.bilibili.com/video/BV19K4y1L7MT">https://www.bilibili.com/video/BV19K4y1L7MT</a></p></li><li><p>尚硅谷 - SpringSecurity 框架教程：<a href="https://www.bilibili.com/video/BV15a411A7kP">https://www.bilibili.com/video/BV15a411A7kP</a></p></li></ul></li></ul><h3 id="🌘-开发规范（3-天）"><a href="#🌘-开发规范（3-天）" class="headerlink" title="🌘 开发规范（3 天）"></a>🌘 开发规范（3 天）</h3><p>开发不规范，同事两行泪。</p><p>开发规范是团队开发中必须遵守的，有利于提高项目的开发效率、降低维护成本。</p><h4 id="知识-8"><a href="#知识-8" class="headerlink" title="知识"></a>知识</h4><ul><li>代码规范<ul><li>代码风格</li><li>命名</li><li>其他规则</li></ul></li><li>代码校验（CheckStyle）</li><li>提交规范</li></ul><h4 id="学习建议-9"><a href="#学习建议-9" class="headerlink" title="学习建议"></a>学习建议</h4><p>有时间的话，简单过一遍大厂团队的代码规范手册就好了，以后做项目的时候能想起来的话就去使用，或者从书中、网上查规范文档，再去遵守。</p><p>项目做得多了，自然会养成好的习惯，不用刻意去记（毕竟每个团队规范也不完全相同，背了也没用）。也可以直接利用开发工具自带的一些代码检查插件，帮忙养成好的编码习惯。</p><h4 id="资源-9"><a href="#资源-9" class="headerlink" title="资源"></a>资源</h4><ul><li><p>书籍</p><ul><li>⭐ 阿里巴巴 Java 开发手册：<a href="https://developer.aliyun.com/graph/java">https://developer.aliyun.com/graph/java</a> （搜索《Java开发手册》）</li></ul></li><li><p>视频</p><ul><li>华山版《Java开发手册》独家讲解：<a href="https://developer.aliyun.com/live/1201">https://developer.aliyun.com/live/1201</a></li></ul></li><li><p>文档</p><ul><li>Google Java Style Guide：<a href="https://google.github.io/styleguide/javaguide.html">https://google.github.io/styleguide/javaguide.html</a> （谷歌 Java 代码规范）</li></ul></li></ul><h3 id="🌕-Git（3-天）"><a href="#🌕-Git（3-天）" class="headerlink" title="🌕 Git（3 天）"></a>🌕 Git（3 天）</h3><p>此前大家可能听说过 GitHub，一流的代码开源托管平台。</p><p>Git 和它可不一样，是一个版本控制工具，可以更好地管理和共享项目代码，比如把自己的代码传到 GitHub 上、或者从远程下载。</p><p>无论自己做项目、还是团队开发，Git 都是现在不可或缺的神器。</p><h4 id="知识-9"><a href="#知识-9" class="headerlink" title="知识"></a>知识</h4><ul><li>区分 Git 和 GitHub</li><li>工作区</li><li>分支</li><li>代码提交、推送、拉取、回退、重置</li><li>分支操作</li><li>代码合并、解决冲突</li><li>标签</li><li>cherry-pick</li><li>Git Flow</li><li>相关技术：SVN（比较老）</li></ul><h4 id="学习建议-10"><a href="#学习建议-10" class="headerlink" title="学习建议"></a>学习建议</h4><p>每个命令跟着敲一遍，有个大致的印象，会用即可。</p><p>建议平时大家可以多把自己的代码使用 Git 命令上传到 GitHub 上，用的多了自然就熟悉了。</p><h4 id="经典面试题-7"><a href="#经典面试题-7" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>如何解决提交冲突？</li><li>提交不小心出现误操作，如何撤销？</li><li>什么是 Git Flow，它有什么好处？</li></ol><h4 id="资源-10"><a href="#资源-10" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li>⭐【尚硅谷】5h打通Git全套教程丨2021最新IDEA版 <a href="https://www.bilibili.com/video/BV1vy4y1s7k6">https://www.bilibili.com/video/BV1vy4y1s7k6</a></li></ul></li><li><p>书籍</p><ul><li>猴子都能懂的 Git 入门 <a href="https://backlog.com/git-tutorial/cn/">https://backlog.com/git-tutorial/cn/</a></li><li>⭐ GitHub 漫游指南 <a href="https://github.phodal.com/">https://github.phodal.com/</a></li></ul></li><li><p>文档</p><ul><li>GitHub 官方文档：<a href="https://docs.github.com/cn">https://docs.github.com/cn</a></li></ul></li><li><p>游戏</p><ul><li>Learning Git Branching：<a href="https://learngitbranching.js.org/?locale=zh_CN">https://learngitbranching.js.org/?locale=zh_CN</a></li></ul></li></ul><h3 id="🌖-Linux（10-天）"><a href="#🌖-Linux（10-天）" class="headerlink" title="🌖 Linux（10 天）"></a>🌖 Linux（10 天）</h3><p>企业中的很多前后台项目都是部署在 Linux 服务器上的，因此很有必要熟悉 Linux 的操作和脚本的编写。</p><p>后面学微服务、学架构都是在多台服务器操作，如果你不熟悉 Linux，会有点吃力。</p><h4 id="知识-10"><a href="#知识-10" class="headerlink" title="知识"></a>知识</h4><ul><li>Linux 系统安装</li><li>环境变量</li><li>文件管理</li><li>用户管理</li><li>内存管理</li><li>磁盘管理</li><li>进程管理</li><li>网络管理</li><li>软件包管理</li><li>服务管理</li><li>日志管理</li><li>Linux 内核</li><li><strong>常用命令</strong></li><li><strong>常用环境搭建</strong></li><li><strong>Shell 脚本编程</strong></li><li><strong>VIM 的使用</strong></li></ul><h4 id="学习建议-11"><a href="#学习建议-11" class="headerlink" title="学习建议"></a>学习建议</h4><p>多动手实践，建议自己购买一台云服务器，并且在本地搭建 Linux 虚拟机环境。</p><p>一定要自己从 0 开始手敲命令安装软件、部署服务，熟悉整个项目的上线流程。</p><p>每个命令至少要跟着敲一遍，了解它们的作用，并通过自然地练习，熟悉常用的 Linux 命令。</p><p>记不住没关系，用文档查就行了。</p><p>先会用，再理解。一般面试问的 Linux 题目也不会很难，面试前去背一下八股文就没什么问题，感兴趣的话可以去看看 Linux 内核设计。</p><h4 id="经典面试题-8"><a href="#经典面试题-8" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>如何查看某个进程的运行状态？</li><li>如何在 Linux 上查看 2 G 的大文件？</li><li>Linux 软链接和硬链接的区别</li></ol><h4 id="资源-11"><a href="#资源-11" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li>⭐ 2021 韩顺平 一周学会Linux <a href="https://www.bilibili.com/video/BV1Sv411r7vd">https://www.bilibili.com/video/BV1Sv411r7vd</a> （基于 CentOS 7.6 版本较新）</li></ul></li><li><p>书籍</p><ul><li>《鸟哥的 Linux 私房菜 —— 基础篇》<a href="http://cn.linux.vbird.org/linux_basic/linux_basic.php">http://cn.linux.vbird.org/linux_basic/linux_basic.php</a> （经典）</li></ul></li><li><p>文档</p><ul><li>Linux 工具快速教程：<a href="https://linuxtools-rst.readthedocs.io/">https://linuxtools-rst.readthedocs.io</a> （基础、工具进阶、工具参考）</li></ul></li><li><p>实战</p><ul><li>⭐ 蓝桥云课 Linux 基础入门：<a href="https://www.lanqiao.cn/courses/1">https://www.lanqiao.cn/courses/1</a></li><li>腾讯云动手实验室：<a href="https://cloud.tencent.com/developer/labs">https://cloud.tencent.com/developer/labs</a></li><li>阿里云体验实验室：<a href="https://developer.aliyun.com/adc/labs/">https://developer.aliyun.com/adc/labs/</a></li><li>阿里云知行实验室：<a href="https://start.aliyun.com/">https://start.aliyun.com/</a></li><li>华为云沙箱实验室：<a href="https://lab.huaweicloud.com/">https://lab.huaweicloud.com/</a></li></ul></li><li><p>社区</p><ul><li>Linux 中国：<a href="https://linux.cn/">https://linux.cn/</a></li></ul></li><li><p>工具</p><ul><li>⭐ Linux 命令搜索：<a href="https://wangchujiang.com/linux-command">https://wangchujiang.com/linux-command</a></li><li>Linux 命令大全手册：<a href="https://www.linuxcool.com/">https://www.linuxcool.com/</a></li><li>Linux 命令示例：<a href="http://linux-commands-examples.com/">http://linux-commands-examples.com/</a></li><li>宝塔 Linux 面板：<a href="https://www.bt.cn/">https://www.bt.cn/</a></li></ul></li></ul><h3 id="🌘-前端基础（14-天）"><a href="#🌘-前端基础（14-天）" class="headerlink" title="🌘 前端基础（14 天）"></a>🌘 前端基础（14 天）</h3><p>虽然 Java 程序员面试时基本不会出现前端相关问题，但是在企业中，往往需要前后端程序员配合完成工作。会一些前端，不仅可以提高你们的协作效率，还能提高自己对整个项目的了解和掌控力，甚至能独立开发出一个完整项目！这点也是能给面试加分的。</p><h4 id="知识-11"><a href="#知识-11" class="headerlink" title="知识"></a>知识</h4><ul><li>HTML</li><li>CSS</li><li>JavaScript<ul><li>Ajax</li></ul></li><li>Vue</li></ul><h4 id="学习建议-12"><a href="#学习建议-12" class="headerlink" title="学习建议"></a>学习建议</h4><p>不需要学习太多的前端技术，熟悉下基础的前端三件套，了解前端是如何向后端发送请求来做数据交互的一般就够了。有时间的话可以学下 Vue ，是比较容易上手的主流前端开发框架，Vue + SpringBoot 还是很香的。</p><h4 id="资源-12"><a href="#资源-12" class="headerlink" title="资源"></a>资源</h4><p>参见鱼皮原创的前端学习路线：<a href="https://mp.weixin.qq.com/s/HbzLEt6NOP9Is9F3GOnbUQ">https://mp.weixin.qq.com/s/HbzLEt6NOP9Is9F3GOnbUQ</a></p><h3 id="练手项目-1"><a href="#练手项目-1" class="headerlink" title="练手项目"></a>练手项目</h3><blockquote><p>更多请见本路线阶段 5：[项目源码（50 套）](###项目源码（50 套）) 。</p></blockquote><ul><li>HotelSystem：<a href="https://github.com/misterchaos/HotelSystem">https://github.com/misterchaos/HotelSystem</a> （酒店管理系统 Java,tomcat,mysql,servlet,jsp实现，没有使用任何框架）</li><li>超市管理系统：<a href="https://github.com/zhanglei-workspace/shopping-management-system">https://github.com/zhanglei-workspace/shopping-management-system</a></li><li>Mall4j：<a href="https://github.com/gz-yami/mall4j">https://github.com/gz-yami/mall4j</a> （Spring Boot 电商系统）</li><li>newbee-mall：<a href="https://github.com/newbee-ltd/newbee-mall">https://github.com/newbee-ltd/newbee-mall</a> （基于 Spring Boot 2.X 的全栈电商系统）</li><li>litemall：<a href="https://github.com/linlinjava/litemall">https://github.com/linlinjava/litemall</a> （小商城系统，Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端）</li><li>forum-java：<a href="https://github.com/Qbian61/forum-java">https://github.com/Qbian61/forum-java</a> （一款用 Java Spring Boot 实现的现代化社区系统）</li></ul><h3 id="尾声-2"><a href="#尾声-2" class="headerlink" title="尾声"></a>尾声</h3><p>学完这个阶段的知识后，一定要再串起来回忆一遍，必须自己独立开发一个 Java Web 项目（量级可以不大，但你学过的技术尽可能地用上），能发布到 Linux 服务器上让其他小伙伴访问就更好了~</p><p>如果你只是对 Java 感兴趣、或者只是想试着自己开发后台，并不是想靠 Java 找工作的话，学到这里就可以了。可以把更多时间投入到你主方向的学习中。</p><p>但如果你是想找 Java 方向的工作，尤其是想进大厂的话，一定要继续努力，用心学习下个阶段的企业开发进阶知识。</p><h2 id="阶段-4：Java-企业开发进阶"><a href="#阶段-4：Java-企业开发进阶" class="headerlink" title="阶段 4：Java 企业开发进阶"></a>阶段 4：Java 企业开发进阶</h2><h3 id="目标-3"><a href="#目标-3" class="headerlink" title="目标"></a>目标</h3><p>学习更多企业级开发技术和编程思想，能够结合多种技术，独立开发出架构合理的完整系统，<strong>解决实际问题</strong> 。</p><p>要了解为什么需要这个技术？什么时候用这个技术？某个需求该用哪些技术？</p><p>当然，这个阶段的内容有些过于丰富，不是所有的东西都要学，大家可以根据自己的实际情况（时间），有选择地学习。</p><h3 id="🌘-软件工程"><a href="#🌘-软件工程" class="headerlink" title="🌘 软件工程"></a>🌘 软件工程</h3><p>软件开发和管理的一些概念、原则、技术、方法、工具和经验。</p><h4 id="知识-12"><a href="#知识-12" class="headerlink" title="知识"></a>知识</h4><ul><li>软件的本质</li><li>软件特性</li><li>软件过程</li><li>软件开发原则<ul><li>开闭原则</li><li>里氏替换原则</li><li>依赖倒置原则</li><li>单一职责原则</li><li>接口隔离原则</li><li>迪米特法则</li></ul></li><li>软件过程模型</li><li>敏捷开发</li><li>软件开发模型</li><li>需求建模</li><li>软件设计</li><li>UML</li><li>体系结构设计</li><li>设计模式</li><li>软件质量管理</li><li>评审</li><li>软件质量保证</li><li>软件测试<ul><li>单元测试</li><li>集成测试</li><li>系统测试</li><li>压力测试</li><li>部署测试</li></ul></li><li>软件配置管理</li><li>软件项目管理</li><li>软件项目估算</li><li>项目进度安排</li><li>风险管理</li><li>软件过程改进<ul><li>成熟度模型</li></ul></li></ul><h4 id="学习建议-13"><a href="#学习建议-13" class="headerlink" title="学习建议"></a>学习建议</h4><p>大学软件专业的必修课，偏理论，能学到很多企业软件开发的方法，也是对软件开发同学综合能力的提升，有时间的话可以了解下。但对想要快速找工作的同学来说，忽略即可，面试基本不会问。</p><h4 id="资源-13"><a href="#资源-13" class="headerlink" title="资源"></a>资源</h4><ul><li><p>书籍</p><ul><li>《软件工程：实践者的研究方法》：<a href="https://book.douban.com/subject/6047742/">https://book.douban.com/subject/6047742/</a> （经典大黑书，讲的非常全面，但同样完整读下来还是有些难度的）</li><li>《软件开发的 201 个原则》：<a href="https://book.douban.com/subject/35628886/">https://book.douban.com/subject/35628886/</a> （工具书，看一遍挺好的）</li></ul></li><li><p>视频</p><ul><li>清华大学软件工程：<a href="https://www.bilibili.com/video/BV1eE411V7Cr">https://www.bilibili.com/video/BV1eE411V7Cr</a></li><li>北京大学软件工程：<a href="https://www.bilibili.com/video/BV1Vt411V72G">https://www.bilibili.com/video/BV1Vt411V72G</a></li><li>大连工业大学软件工程：<a href="https://www.bilibili.com/video/BV1Ns41177VM">https://www.bilibili.com/video/BV1Ns41177VM</a></li></ul></li><li><p>大学课件</p><ul><li>浙大计算机软件工程：<a href="https://github.com/QSCTech/zju-icicles">https://github.com/QSCTech/zju-icicles</a></li></ul></li></ul><h3 id="🌖-设计模式（21-天）"><a href="#🌖-设计模式（21-天）" class="headerlink" title="🌖 设计模式（21 天）"></a>🌖 设计模式（21 天）</h3><p>设计模式是软件开发中解决一类问题的通用方法。</p><p>使用设计模式能让你写出更优雅、可维护的代码，也正因如此，很多框架源码都用到了设计模式，你不学很难看懂。</p><h4 id="知识-13"><a href="#知识-13" class="headerlink" title="知识"></a>知识</h4><ul><li><p>创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程</p><ul><li>单例模式</li><li>工厂方法模式</li><li>抽象工厂</li><li>建造者模式</li><li>原型模式</li></ul></li><li><p>结构型模式：把类或对象结合在一起形成一个更大的结构</p><ul><li>适配器模式</li><li>组合模式</li><li>装饰器模式</li><li>代理模式</li><li>享元模式</li><li>外观模式</li><li>桥接模式</li></ul></li><li><p>行为型模式：类和对象如何交互，及划分责任和算法</p><ul><li>迭代器模式</li><li>模板方法模式</li><li>策略模式</li><li>命令模式</li><li>状态模式</li><li>责任链模式</li><li>备忘录模式</li><li>观察者模式</li><li>访问者模式</li><li>中介者模式</li><li>解释器模式</li></ul></li></ul><h4 id="学习建议-14"><a href="#学习建议-14" class="headerlink" title="学习建议"></a>学习建议</h4><p>先理解概念，了解每个设计模式的特点和应用场景，再多加练习，运用到实际项目。</p><h4 id="经典面试题-9"><a href="#经典面试题-9" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>单例模式有哪些实现方式？有哪些优缺点？请手写其中一种</li><li>你用过哪些设计模式，为什么用它？</li></ol><h4 id="资源-14"><a href="#资源-14" class="headerlink" title="资源"></a>资源</h4><ul><li><p>书籍</p><ul><li>⭐《图解设计模式》（强烈推荐这本书，正是用 Java 语言实现，图多、有示例代码、有习题和答案，很不错）</li><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li>《设计模式：可复用面向对象软件的基础》（大黑书，有能力的话也可以去读）</li></ul></li><li><p>视频</p><ul><li>尚硅谷图解 Java 设计模式：<a href="https://www.bilibili.com/video/BV1G4411c7N4">https://www.bilibili.com/video/BV1G4411c7N4</a></li></ul></li><li><p>文档</p><ul><li>菜鸟教程：<a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">https://www.runoob.com/design-pattern/design-pattern-tutorial.html</a></li><li>图说设计模式：<a href="https://design-patterns.readthedocs.io/zh_CN/latest/">https://design-patterns.readthedocs.io/zh_CN/latest/</a></li></ul></li></ul><h3 id="🌕-缓存（14-天）"><a href="#🌕-缓存（14-天）" class="headerlink" title="🌕 缓存（14 天）"></a>🌕 缓存（14 天）</h3><p>缓存是高并发系统不可或缺的技术，可以提高系统的性能和并发，因此是后台开发必学的知识点，也是面试重点。</p><h4 id="知识-14"><a href="#知识-14" class="headerlink" title="知识"></a>知识</h4><ul><li>什么是缓存？</li><li>本地缓存<ul><li>Caffeine 库</li></ul></li><li>多级缓存</li><li>Redis 分布式缓存<ul><li>数据类型</li><li>常用操作</li><li>Java 操作 Redis<ul><li>Spring Boot Redis Template</li><li>Redisson</li></ul></li><li>主从模型搭建</li><li>哨兵集群搭建</li><li>日志持久化</li></ul></li><li>缓存（Redis）应用场景<ul><li>数据共享</li><li>单点登录</li><li>计数器</li><li>限流</li><li>点赞</li><li>实时排行榜</li><li>分布式锁</li></ul></li><li>缓存常见问题<ul><li>缓存雪崩</li><li>缓存击穿</li><li>缓存穿透</li><li>缓存更新一致性</li></ul></li><li>相关技术：Memcached、Ehcache</li></ul><h4 id="学习建议-15"><a href="#学习建议-15" class="headerlink" title="学习建议"></a>学习建议</h4><p>学会如何简单地使用缓存并不难，和数据库类似，无非就是调用 API 对数据进行增删改查。</p><p>因此，建议先能够独立使用它，了解缓存的应用场景；再学习如何在 Java 中操作缓存中间件，并尝试和项目相结合，提高系统的性能。</p><p>跟着视频教程实操一遍即可，可以等到面试前再去深入了解原理和高级特性。</p><h4 id="经典面试题-10"><a href="#经典面试题-10" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>Redis 为什么快？</li><li>Redis 有哪些常用的数据结构？</li><li>Redis RDB 和 AOF 持久化的区别，如何选择？</li><li>如何解决缓存击穿、缓存穿透、雪崩问题？</li><li>如何用 Redis 实现点赞功能，怎么设计 Key / Value？</li></ol><h4 id="资源-15"><a href="#资源-15" class="headerlink" title="资源"></a>资源</h4><ul><li>视频<ul><li>⭐ 尚硅谷 - 2021 最新 Redis 6 入门到精通教程：<a href="https://www.bilibili.com/video/BV1Rv41177Af">https://www.bilibili.com/video/BV1Rv41177Af</a> （基于 Redis 6 的，推荐）</li></ul></li><li>文档<ul><li>Redis 命令参考：<a href="http://redisdoc.com/">http://redisdoc.com/</a></li><li>Redis 面试题整理：<a href="https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis%E9%97%AE%E9%A2%98.md">https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis%E9%97%AE%E9%A2%98.md</a></li></ul></li><li>书籍<ul><li>《Redis 实战》（经典）</li></ul></li><li>工具<ul><li>⭐ Redis 在线练习：<a href="https://try.redis.io/">https://try.redis.io/</a> （强烈推荐）</li></ul></li></ul><h3 id="🌖-消息队列（14-天）"><a href="#🌖-消息队列（14-天）" class="headerlink" title="🌖 消息队列（14 天）"></a>🌖 消息队列（14 天）</h3><p>消息队列是用于传输和保存消息的容器，也是大型分布式系统中常用的技术，主要解决应用耦合、异步消息、流量削锋等问题。后台开发必学，也是面试重点。</p><h4 id="知识-15"><a href="#知识-15" class="headerlink" title="知识"></a>知识</h4><ul><li>消息队列的作用</li><li>RabbitMQ 消息队列<ul><li>生产消费模型</li><li>交换机模型</li><li>死信队列</li><li>延迟队列</li><li>消息持久化</li><li>Java 操作</li><li>集群搭建</li></ul></li><li>相关技术：Kafka、ActiveMQ、TubeMQ、RocketMQ</li></ul><h4 id="学习建议-16"><a href="#学习建议-16" class="headerlink" title="学习建议"></a>学习建议</h4><p>和缓存一样，学会如何使用消息队列并不难，无非就是调用 API 去生产、转发和消费消息。</p><p>因此，建议先能够独立使用它，了解消息队列的应用场景；再学习如何在 Java 中操作消息队列中间件，并尝试和项目相结合，感受消息队列带来的好处。</p><p>这里我建议初学者先学习 RabbitMQ，比 Kafka 要好理解一些。跟着视频教程实操一遍即可，可以等到面试前再去深入了解原理和高级特性。</p><h4 id="经典面试题-11"><a href="#经典面试题-11" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>使用消息队列有哪些优缺点？</li><li>如何保证消息消费的幂等性？</li><li>消息队列有哪些路由模型？</li><li>你是否用过消息队列，解决过什么问题？</li></ol><h4 id="资源-16"><a href="#资源-16" class="headerlink" title="资源"></a>资源</h4><ul><li>视频<ul><li>⭐ 尚硅谷 - 2021 最新 RabbitMQ 教程：<a href="https://www.bilibili.com/video/BV1cb4y1o7zz">https://www.bilibili.com/video/BV1cb4y1o7zz</a> （很新很全面）</li></ul></li><li>文档<ul><li>RabbitMQ 中文文档：<a href="http://rabbitmq.mr-ping.com/">http://rabbitmq.mr-ping.com/</a></li></ul></li><li>书籍<ul><li>《RabbitMQ 实战：高效部署分布式消息队列》（经典）</li></ul></li><li>工具<ul><li>⭐ RabbitMQ 在线模拟器：<a href="http://tryrabbitmq.com/">http://tryrabbitmq.com/</a></li></ul></li></ul><h3 id="🌖-Nginx（14-天）"><a href="#🌖-Nginx（14-天）" class="headerlink" title="🌖 Nginx（14 天）"></a>🌖 Nginx（14 天）</h3><p>Nginx 是主流的、开源的、高性能的 HTTP 和反向代理 web 服务器，可以用于挂载网站、请求转发、负载均衡、网关路由等。前后端开发同学都需要学习，在后端开发的面试中有时会考到。</p><h4 id="知识-16"><a href="#知识-16" class="headerlink" title="知识"></a>知识</h4><ul><li>Nginx 作用</li><li>正向代理</li><li>反向代理（负载均衡）</li><li>常用命令</li><li>配置</li><li>动静分离（网站部署）</li><li>集群搭建</li><li>相关技术：HAProxy、Apache</li></ul><h4 id="学习建议-17"><a href="#学习建议-17" class="headerlink" title="学习建议"></a>学习建议</h4><p>Nginx 的基本使用非常简单，甚至不需要看任何的视频，跟着一篇文章就能够用它来提供网站访问能力、实现反向代理。</p><p>但是在企业中，Nginx 的使用往往没那么简单，作为负载均衡、请求转发的重要组件，往往需要针对实际场景去写一些特定的配置。因此建议有时间的话，实践下 Nginx 的配置方法，了解 Nginx 基本的设计思想，对今后自己设计系统时也有帮助。</p><h4 id="经典面试题-12"><a href="#经典面试题-12" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>Nginx 有哪些作用？</li><li>Nginx 为什么支持高并发？</li><li>Nginx 有哪些负载均衡策略？</li><li>什么是 Nginx 惊群问题，如何解决它？</li></ol><h4 id="资源-17"><a href="#资源-17" class="headerlink" title="资源"></a>资源</h4><ul><li>视频<ul><li>⭐ 尚硅谷 - Nginx 教程由浅入深：<a href="https://www.bilibili.com/video/BV1zJ411w7SV">https://www.bilibili.com/video/BV1zJ411w7SV</a> （讲的比较全面）</li><li>⭐ Nginx 鱼皮 - 手把手带你从0搭建个人网站：<a href="https://www.bilibili.com/video/BV1rU4y1J785/">https://www.bilibili.com/video/BV1rU4y1J785/</a> （简单演示 Nginx 部署网站）</li></ul></li><li>文档<ul><li>Nginx 中文文档：<a href="https://www.nginx.cn/doc/index.html">https://www.nginx.cn/doc/index.html</a></li></ul></li><li>工具<ul><li>Nginx 配置在线生成：<a href="https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN">https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN</a></li></ul></li></ul><h3 id="🌗-Netty-网络编程（21-天）"><a href="#🌗-Netty-网络编程（21-天）" class="headerlink" title="🌗 Netty 网络编程（21 天）"></a>🌗 Netty 网络编程（21 天）</h3><p>开源的 Java 网络编程框架，用于开发高性能（事件驱动、异步非阻塞）、高可靠的网络服务器和客户端程序。</p><p>很多网络框架和服务器程序都用到了 Netty 作为底层，学好 Netty 不仅可以让我们自己实现高性能服务器，也能更好地理解其他的框架应用、阅读源码。</p><h4 id="知识-17"><a href="#知识-17" class="headerlink" title="知识"></a>知识</h4><ul><li>IO 模型（BIO / NIO）</li><li>Channel</li><li>Buffer</li><li>Seletor</li><li>Netty 模型</li><li>WebSocket 编程（动手做个聊天室）</li><li>相关技术：Vertx（中文文档：<a href="http://vertxchina.github.io/vertx-translation-chinese/">http://vertxchina.github.io/vertx-translation-chinese/</a> ，比 Netty 简单多了，实在看不懂 Netty 也可以学习下这个）</li></ul><h4 id="学习建议-18"><a href="#学习建议-18" class="headerlink" title="学习建议"></a>学习建议</h4><p>不同于之前学的 SSM 框架，Netty 还是需要一定学习成本的，一方面是国内资源太缺乏，另一方面很多重要的概念（比如 NIO）还是要多动手写代码调试才能理解。</p><p>还是建议先从视频入门，并且不建议在 Netty 上花太多时间，面试的时候一般也就考察一些 Netty 背后的思想（比如 NIO）而非框架本身的语法细节。</p><h4 id="经典面试题-13"><a href="#经典面试题-13" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>Netty 有哪些优点？</li><li>什么是 NIO？</li><li>介绍 Netty 的零拷贝机制</li></ol><h4 id="资源-18"><a href="#资源-18" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li><p>⭐ 尚硅谷Netty教程：<a href="https://www.bilibili.com/video/BV1DJ411m7NR">https://www.bilibili.com/video/BV1DJ411m7NR</a></p></li><li><p>Netty 技术演讲（中文字幕版）：<a href="https://www.youtube.com/watch?v=I8yy2Cy7dDI">https://www.youtube.com/watch?v=I8yy2Cy7dDI</a></p></li></ul></li><li><p>文档</p><ul><li>Netty 4 用户指南：<a href="https://www.w3cschool.cn/netty_4_user_guide/">https://www.w3cschool.cn/netty_4_user_guide/</a></li></ul></li><li><p>书籍</p><ul><li>《Netty 实战》</li></ul></li></ul><h3 id="🌖-微服务（60-天）"><a href="#🌖-微服务（60-天）" class="headerlink" title="🌖 微服务（60 天）"></a>🌖 微服务（60 天）</h3><p>随着互联网的发展，项目越来越复杂，单机且庞大的巨石项目已无法满足开发、运维、并发、可靠性等需求。</p><p>因此，后台架构不断演进，可以将庞大的项目拆分成一个个职责明确、功能独立的细小模块，模块可以部署在多台服务器上，相互配合协作，提供完整的系统能力。</p><p>换言之，想做大型项目，这块儿一定要好好学！</p><h4 id="知识-18"><a href="#知识-18" class="headerlink" title="知识"></a>知识</h4><h5 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h5><ul><li>架构演进</li><li>RPC</li><li>Zookeeper</li><li>服务提供者</li><li>服务消费者</li><li>项目搭建</li><li>相关技术：DubboX（对 Dubbo 的扩展）</li></ul><h5 id="🌖-微服务"><a href="#🌖-微服务" class="headerlink" title="🌖 微服务"></a>🌖 微服务</h5><ul><li>微服务概念</li><li>Spring Cloud 框架<ul><li>子父工程</li><li>服务注册与发现</li><li>注册中心 Eureka、Zookeeper、Consul</li><li>Ribbon 负载均衡</li><li>Feign 服务调用</li><li>Hystrix 服务限流、降级、熔断</li><li>Resilience4j 服务容错</li><li>Gateway（Zuul）微服务网关</li><li>Config 分布式配置中心</li><li>分布式服务总线</li><li>Sleuth + Zipkin 分布式链路追踪</li></ul></li><li>Spring Cloud Alibaba<ul><li>Nacos 注册、配置中心</li><li>OpenFeign 服务调用</li><li>Sentinel 流控</li><li>Seata 分布式事务</li></ul></li></ul><h5 id="接口管理"><a href="#接口管理" class="headerlink" title="接口管理"></a>接口管理</h5><ul><li>Swagger 接口文档</li><li>Postman 接口测试</li><li>相关技术：YApi、ShowDoc</li></ul><h4 id="学习建议-19"><a href="#学习建议-19" class="headerlink" title="学习建议"></a>学习建议</h4><p>时间不急的话，建议先从 Dubbo 学起，对分布式、RPC、微服务有些基本的了解，再去食用 Spring Cloud 全家桶会更香。学完 Spring Cloud 全家桶后，再去学 Spring Cloud Alibaba 就很简单了。</p><p>这部分内容的学习，原理 + 实践都很重要，也不要被各种高大上的词汇唬住了，都是上层（应用层）的东西，基本没有什么算法，跟着视频教程学，其实还是很好理解的。</p><p>分布式相关知识非常多，但这里不用刻意去背，先通过视频教程实战使用一些微服务框架，也能对其中的概念有基本的了解。</p><p>大厂面试的时候很少问 Spring Cloud 框架的细节，更多的是微服务以及各组件的一些思想，比如网关的好处、消息总线的好处等。</p><h4 id="经典面试题-14"><a href="#经典面试题-14" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>什么是微服务，有哪些优缺点？</li><li>什么是注册中心，能解决什么问题？</li></ol><h4 id="资源-19"><a href="#资源-19" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li><p>⭐ 尚硅谷 Dubbo 教程：<a href="https://www.bilibili.com/video/BV1ns411c7jV">https://www.bilibili.com/video/BV1ns411c7jV</a></p></li><li><p>⭐ 尚硅谷 SpringCloud（H版&amp;alibaba）框架开发教程（微服务分布式架构）：<a href="https://www.bilibili.com/video/BV18E411x7eT">https://www.bilibili.com/video/BV18E411x7eT</a> （把国外的 Spring Cloud 和国内的 Spring Cloud Alibaba 结合在一起对比着去讲，主流技术栈、知识点都讲到了，真心不错！）</p></li></ul></li><li><p>文档</p><ul><li>Apache Dubbo 官方文档：<a href="https://dubbo.apache.org/zh/">https://dubbo.apache.org/zh/</a></li><li>Spring Cloud Alibaba 官方文档：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></li><li>⭐ Swagger 教学文档：<a href="https://doc.xiaominfo.com/">https://doc.xiaominfo.com/</a> （跟着快速开始直接用就好了）</li></ul></li></ul><h3 id="🌖-容器（7-天）"><a href="#🌖-容器（7-天）" class="headerlink" title="🌖 容器（7 天）"></a>🌖 容器（7 天）</h3><p>将应用和环境进行封装，相互隔离、独立部署、便于移植，提高安全性、提高开发和维护效率。</p><p>便于实现微服务、持续集成和交付。</p><h4 id="知识-19"><a href="#知识-19" class="headerlink" title="知识"></a>知识</h4><ul><li>🌖 Docker<ul><li>容器概念</li><li>镜像</li><li>部署服务</li><li>Dockerfile</li><li>Docker Compose</li><li>Docker Machine</li><li>Docker Swarm</li><li>多阶段构建</li></ul></li><li>🌘 K8S（Kubernetes）<ul><li>K8S 架构</li><li>工作负载<ul><li>资源类型</li><li>Pod</li><li>Pod 生命周期</li><li>Pod 安全策略</li></ul></li><li>K8S 组件</li><li>K8S 对象</li><li>部署应用</li><li>服务<ul><li>Ingress</li></ul></li><li>Kubectl 命令行</li><li>集群管理</li></ul></li><li>相关技术：Apache Mesos、Mesosphere</li></ul><h4 id="学习建议-20"><a href="#学习建议-20" class="headerlink" title="学习建议"></a>学习建议</h4><p>业务上云是趋势，但是对于开发同学来说，会用 Docker / K8S 部署项目和服务就行。实际工作中，企业一般都有现成的平台直接用，面试考察的也不多，不用花太多时间。</p><h4 id="经典面试题-15"><a href="#经典面试题-15" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>什么是容器？</li><li>使用  Docker 有哪些好处？</li><li>如何快速启动多个 Docker 节点？</li></ol><h4 id="资源-20"><a href="#资源-20" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li>⭐【狂神说】Docker 最新超详细版教程通俗易懂：<a href="https://www.bilibili.com/video/BV1og4y1q7M4">https://www.bilibili.com/video/BV1og4y1q7M4</a></li><li>K8S 视频教程：<a href="https://www.bilibili.com/video/BV1K5411N7j8">https://www.bilibili.com/video/BV1K5411N7j8</a></li></ul></li><li><p>书籍</p><ul><li>《深入浅出 Docker》：<a href="https://www.zhihu.com/pub/reader/119632192">https://www.zhihu.com/pub/reader/119632192</a></li></ul></li><li><p>文档</p><ul><li>Docker — 从入门到实践：<a href="https://vuepress.mirror.docker-practice.com/">https://vuepress.mirror.docker-practice.com/</a></li><li>菜鸟教程 Docker：<a href="https://www.runoob.com/docker/docker-tutorial.html">https://www.runoob.com/docker/docker-tutorial.html</a></li><li>国外 Docker 官方文档：<a href="https://docs.docker.com/get-started/">https://docs.docker.com/get-started/</a></li></ul></li><li><p>网站</p><ul><li>Docker 中文社区：<a href="https://www.docker.org.cn/">https://www.docker.org.cn/</a> （强烈推荐，有很多 Docker 技术文章和学习笔记）</li><li>Docker Blog：<a href="https://www.docker.com/blog/">https://www.docker.com/blog/</a> （国外 Docker 技术博客）</li></ul></li><li><p>镜像源</p><ul><li>Docker Hub：<a href="https://hub.docker.com/">https://hub.docker.com</a></li><li>腾讯软件源：<a href="http://mirrors.tencent.com/#/index">http://mirrors.tencent.com/#/index</a></li><li>阿里云 Docker 仓库：<a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com/</a></li></ul></li></ul><h3 id="🌗-CI-CD（3-天）"><a href="#🌗-CI-CD（3-天）" class="headerlink" title="🌗 CI / CD（3 天）"></a>🌗 CI / CD（3 天）</h3><p>持续集成 / 持续交付，贯穿整个研发到项目上线的过程，提高效率。</p><p>大公司一般都有自己的 CI / CD 平台。</p><h4 id="知识-20"><a href="#知识-20" class="headerlink" title="知识"></a>知识</h4><ul><li>什么是 CI / CD</li><li>CI / CD 有什么好处</li><li>使用任一 CI / CD 平台</li><li>相关技术：Jenkins、GitLab、微信云托管</li></ul><h4 id="学习建议-21"><a href="#学习建议-21" class="headerlink" title="学习建议"></a>学习建议</h4><p>了解它是什么，并且实战使用任一 CI / CD 平台，感受它和传统开发运维到底有什么不同，就足够了。其实很简单，不要花太多时间。</p><p>真正要自己去搭建的时候，跟着官方文档来就行。</p><h4 id="资源-21"><a href="#资源-21" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li>⭐【狂神说】CI/CD到底是什么？十分钟理解企业级DevOps：<a href="https://www.bilibili.com/video/BV1zf4y127vu">https://www.bilibili.com/video/BV1zf4y127vu</a> （讲的非常棒！带你快速理解 CI / CD 的作用和部分原理）</li><li>尚硅谷 - Jenkins 持续集成工具教程：<a href="https://www.bilibili.com/video/BV1GW411w7pn">https://www.bilibili.com/video/BV1GW411w7pn</a> （实在要用到 Jenkins 再去学）</li></ul></li><li><p>文档</p><ul><li>Jenkins 官方文档：<a href="https://www.jenkins.io/zh/">https://www.jenkins.io/zh/</a> （有很多案例，要用的时候查一下就行了）</li></ul></li><li><p>实战平台</p><ul><li>⭐ 微信云托管：<a href="https://cloud.weixin.qq.com/cloudrun">https://cloud.weixin.qq.com/cloudrun</a> （直播演示过，鱼皮后面会给大家出视频教程）</li><li>前端托管 Webify：<a href="https://cloud.tencent.com/product/webify">https://cloud.tencent.com/product/webify</a> （鱼皮给大家出过视频教程的 <a href="https://www.bilibili.com/video/BV11V411p7vf/%EF%BC%89">https://www.bilibili.com/video/BV11V411p7vf/）</a></li></ul></li></ul><h3 id="练手项目-2"><a href="#练手项目-2" class="headerlink" title="练手项目"></a>练手项目</h3><blockquote><p>更多请见本路线阶段 5：[项目源码（50 套）](###项目源码（50 套）) 。</p></blockquote><ul><li><p>mall-learning：<a href="https://github.com/macrozheng/mall-learningmall">https://github.com/macrozheng/mall-learningmall</a> （学习教程，架构、业务、技术要点全方位解析）</p></li><li><p>miaosha：<a href="https://github.com/qiurunze123/miaosha">https://github.com/qiurunze123/miaosha</a> （秒杀系统设计与实现）</p></li><li><p>Mall：<a href="https://github.com/macrozheng/mall">https://github.com/macrozheng/mall</a> （包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现）</p></li><li><p>Spring-Cloud-Admin：<a href="https://github.com/wxiaoqi/Spring-Cloud-AdminCloud-Admin">https://github.com/wxiaoqi/Spring-Cloud-AdminCloud-Admin</a> （基于 Spring Cloud 微服务化开发平台，具有统一授权、认证的后台管理系统）</p></li><li><p>paascloud-master：<a href="https://github.com/paascloud/paascloud-master">https://github.com/paascloud/paascloud-master</a> （基于 spring cloud + vue + oAuth2.0，前后端分离商城系统）</p></li><li><p>mall-swarm：<a href="https://github.com/macrozheng/mall-swarm">https://github.com/macrozheng/mall-swarm</a> （一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统）</p></li><li><p>SecKill：<a href="https://github.com/hfbin/Seckill">https://github.com/hfbin/Seckill</a> （基于 SpringBoot+Mybatis+Redis+RabbitMQ 秒杀系统）</p></li><li><p>jeecg-boot：<a href="https://github.com/zhangdaiscott/jeecg-boot">https://github.com/zhangdaiscott/jeecg-boot</a> （低代码开发平台）</p></li><li><p>PassJava-Platform：<a href="https://github.com/Jackson0714/PassJava-Platform">https://github.com/Jackson0714/PassJava-Platform</a> （一款面试刷题的 Spring Cloud 开源系统）</p></li></ul><h3 id="尾声-3"><a href="#尾声-3" class="headerlink" title="尾声"></a>尾声</h3><p>看到这里，相信你已经感叹：编程语言一辈子学不完了！</p><p>但是，不用担心，通过对这么多知识点的学习，相信你已经有了一定的积累，也不知不觉地锻炼了自主学习能力、资源检索能力、代码阅读能力、问题解决能力，之后的学习会越来越轻松。</p><p>接下来，可以试着用你学到的技术来解决实际的问题，自主从 0 开始做一些项目，保持编程手感。</p><h2 id="阶段-5：项目实战"><a href="#阶段-5：项目实战" class="headerlink" title="阶段 5：项目实战"></a>阶段 5：项目实战</h2><h3 id="目标-4"><a href="#目标-4" class="headerlink" title="目标"></a>目标</h3><p>综合所学技术从 0 到 1 开发和上线一个全面、有特色的、可以写进简历的个人项目。</p><h3 id="学习建议-22"><a href="#学习建议-22" class="headerlink" title="学习建议"></a>学习建议</h3><p>其实在之前的框架学习视频中应该就做过几个项目了，但相对不够完整和体系化。</p><p>有想法的同学可以做任何自己想做的项目，推荐参加一些作品类竞赛，练手、拿奖、收获项目经历一举三得。</p><p>暂时没想法的朋友，建议先跟着专门带做项目的视频教程做 1 - 2 套 Java 完整项目，一定要从 0 到 1 自己手写！</p><p>有能力的朋友也可以试着用 GitHub 上的源码来学习啦~</p><p>做一个完整的项目的确很不容易，建议大家根据自己的 <strong>时间、兴趣</strong> 选择 <strong>较新的</strong>、<strong>有配套源码的</strong> 教程，保持耐心。</p><p>如何选择编程学习资源，可以看下我的原创文章：<a href="https://mp.weixin.qq.com/s/mlMql9RJCd7THt6rpGb8UA">https://mp.weixin.qq.com/s/mlMql9RJCd7THt6rpGb8UA</a></p><p>下面推荐一些优质的、较新的项目实战视频教程 + 50 套项目源码。</p><h3 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h3><ul><li><p>尚硅谷 - 谷粒学院 - 微服务 + 全栈 - 在线教育实战项目：<a href="https://www.bilibili.com/video/BV1dQ4y1A75e">https://www.bilibili.com/video/BV1dQ4y1A75e</a> （全栈项目，前后端讲得都很全面）</p></li><li><p>尚硅谷 - 尚筹网 - Java项目实战开发教程 - SSM 框架 + 微服务架构：<a href="https://www.bilibili.com/video/BV1bE411T7oZ%EF%BC%88500">https://www.bilibili.com/video/BV1bE411T7oZ（500</a> 多集，包含完整的用户权限管理，功能丰富、讲得很细致全面）</p></li><li><p>黑马 - 24 小时搞定 Java 毕设电商项目：<a href="https://www.bilibili.com/video/BV13f4y1r7fS">https://www.bilibili.com/video/BV13f4y1r7fS</a></p></li><li><p>黑马程序员 Java 项目《传智健康》，超完整的企业级医疗行业项目：<a href="https://www.bilibili.com/video/BV1Bo4y117zV">https://www.bilibili.com/video/BV1Bo4y117zV</a></p></li><li><p>黑马程序员 Java 项目《万信金融》企业级开发实战，互联网金融行业解决方案：<a href="https://www.bilibili.com/video/BV1Ub4y1f7rk">https://www.bilibili.com/video/BV1Ub4y1f7rk</a></p></li><li><p>黑马程序员 Java 项目 SaaS 移动办公完整版《iHRM 人力资源管理系统》，跨行业 SaaS 办公整合性解决方案：<a href="https://www.bilibili.com/video/BV18A411L7UX">https://www.bilibili.com/video/BV18A411L7UX</a></p></li><li><p>黑马程序员 Java 大型分布式微服务闪聚支付项目，Java 移动支付全生态系统：<a href="https://www.bilibili.com/video/BV17v411V79c">https://www.bilibili.com/video/BV17v411V79c</a></p></li><li><p>黑马程序员 Java 项目《好客租房》：<a href="https://www.bilibili.com/video/BV1sZ4y1F7PD">https://www.bilibili.com/video/BV1sZ4y1F7PD</a></p></li></ul><h3 id="常用类库"><a href="#常用类库" class="headerlink" title="常用类库"></a>常用类库</h3><h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><ul><li>Guava：谷歌开发的 Java 工具库（<a href="https://github.com/google/guava%EF%BC%89">https://github.com/google/guava）</a></li><li>Apache Commons：各类工具库，比如 commons-lang、commons-io、commons-collections 等（<a href="https://github.com/apache/commons-lang%EF%BC%89">https://github.com/apache/commons-lang）</a></li><li>Hutool：Java 工具集库（<a href="https://github.com/looly/hutool%EF%BC%89">https://github.com/looly/hutool）</a></li><li>Lombok：Java 增强库（<a href="https://github.com/projectlombok/lombok%EF%BC%89">https://github.com/projectlombok/lombok）</a></li><li>Apache HttpComponents Client：HTTP 客户端库（<a href="https://github.com/apache/httpcomponents-client%EF%BC%89">https://github.com/apache/httpcomponents-client）</a></li><li>OkHttp：适用于 JVM、Android 等平台的 Http 客户端（<a href="https://github.com/square/okhttp%EF%BC%89">https://github.com/square/okhttp）</a></li><li>Gson：谷歌的 JSON 处理库（<a href="https://github.com/google/gson%EF%BC%89">https://github.com/google/gson）</a></li><li>Jcommander：Java 命令行参数解析框架（<a href="https://github.com/cbeust/jcommander%EF%BC%89">https://github.com/cbeust/jcommander）</a></li><li>Apache PDFBox：PDF 操作库（<a href="https://github.com/apache/pdfbox%EF%BC%89">https://github.com/apache/pdfbox）</a></li><li>EasyExcel：阿里的 Excel 处理库（<a href="https://github.com/alibaba/easyexcel%EF%BC%89">https://github.com/alibaba/easyexcel）</a></li><li>Apache POI：表格文件处理库（<a href="https://github.com/apache/poi%EF%BC%89">https://github.com/apache/poi）</a></li></ul><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul><li>JUnit：Java 测试框架（<a href="https://github.com/junit-team/junit4%EF%BC%89">https://github.com/junit-team/junit4）</a></li><li>Mockito：Java 单元测试 Mock 框架（<a href="https://github.com/mockito/mockito%EF%BC%89">https://github.com/mockito/mockito）</a></li><li>Selenium：浏览器自动化框架（<a href="https://github.com/SeleniumHQ/selenium%EF%BC%89">https://github.com/SeleniumHQ/selenium）</a></li><li>htmlunit：Java 模拟浏览器（<a href="https://github.com/HtmlUnit/htmlunit%EF%BC%89">https://github.com/HtmlUnit/htmlunit）</a></li><li>TestNG：Java 测试框架（<a href="https://github.com/cbeust/testng%EF%BC%89">https://github.com/cbeust/testng）</a></li><li>Jacoco：Java 代码覆盖度库（<a href="https://github.com/jacoco/jacoco%EF%BC%89">https://github.com/jacoco/jacoco）</a></li></ul><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul><li>cglib：字节码生成库（<a href="https://github.com/cglib/cglib%EF%BC%89">https://github.com/cglib/cglib）</a></li><li>Arthas：Java 诊断工具（<a href="https://github.com/alibaba/arthas%EF%BC%89">https://github.com/alibaba/arthas）</a></li><li>config：针对 JVM 的配置库（<a href="https://github.com/lightbend/config%EF%BC%89">https://github.com/lightbend/config）</a></li><li>Quasar：Java 纤程库（<a href="https://github.com/puniverse/quasar%EF%BC%89">https://github.com/puniverse/quasar）</a></li><li>drools：Java 规则引擎（<a href="https://github.com/kiegroup/drools%EF%BC%89">https://github.com/kiegroup/drools）</a></li><li>Caffeine：Java 高性能缓存库（<a href="https://github.com/ben-manes/caffeine%EF%BC%89">https://github.com/ben-manes/caffeine）</a></li><li>Disruptor：高性能线程间消息传递库（<a href="https://github.com/LMAX-Exchange/disruptor%EF%BC%89">https://github.com/LMAX-Exchange/disruptor）</a></li><li>Knife4j：Swagger 文档增强（<a href="https://doc.xiaominfo.com/%EF%BC%89">https://doc.xiaominfo.com/）</a></li><li>Thumbnailator：Java 缩略图生成库（<a href="https://github.com/coobird/thumbnailator%EF%BC%89">https://github.com/coobird/thumbnailator）</a></li><li>Logback：Java 日志库（<a href="https://github.com/qos-ch/logback%EF%BC%89">https://github.com/qos-ch/logback）</a></li><li>Apache Camel：消息传输集成框架（<a href="https://github.com/apache/camel%EF%BC%89">https://github.com/apache/camel）</a></li><li>Quartz：定时任务调度库（<a href="https://github.com/quartz-scheduler/quartz%EF%BC%89">https://github.com/quartz-scheduler/quartz）</a></li><li>Apache Mahout：机器学习库（<a href="https://github.com/apache/mahout%EF%BC%89">https://github.com/apache/mahout）</a></li><li>Apache OpenNLP：NLP 工具库（<a href="https://github.com/apache/opennlp%EF%BC%89">https://github.com/apache/opennlp）</a></li><li>RxJava：JVM 反应式编程框架（<a href="https://github.com/ReactiveX/RxJava%EF%BC%89">https://github.com/ReactiveX/RxJava）</a></li><li>JProfiler：性能分析库（<a href="https://www.ej-technologies.com/products/jprofiler/overview.html%EF%BC%89">https://www.ej-technologies.com/products/jprofiler/overview.html）</a></li><li>jsoup：HTML 文档解析库（<a href="https://jsoup.org/%EF%BC%89">https://jsoup.org/）</a></li><li>webmagic：Java 爬虫框架（<a href="https://github.com/code4craft/webmagic/%EF%BC%89">https://github.com/code4craft/webmagic/）</a></li></ul><h3 id="IDEA-插件"><a href="#IDEA-插件" class="headerlink" title="IDEA 插件"></a>IDEA 插件</h3><p>综合实用性、易用性、流行度、维护频率，精选了以下插件，简单分类为天地二品。</p><h4 id="精选地品插件"><a href="#精选地品插件" class="headerlink" title="精选地品插件"></a>精选地品插件</h4><p>简单好用、增强功能</p><ul><li><p>Background Image Plus +</p><ul><li>描述：给编辑器设置背景图片（小姐姐图片）</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/11247-background-image-plus-">https://plugins.jetbrains.com/plugin/11247-background-image-plus-</a></li></ul></li><li><p>Chinese Language Pack</p><ul><li>描述：中文支持</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----">https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----</a></li></ul></li><li><p>Translation</p><ul><li>描述：翻译插件，鼠标选中文本，点击右键即可自动翻译成多国语言。</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8579-translation/">https://plugins.jetbrains.com/plugin/8579-translation/</a></li></ul></li><li><p>Key Promoter X</p><ul><li>描述：快捷键提示插件。当你执行鼠标操作时，如果该操作可被快捷键代替，会给出提示，帮助你自然形成使用快捷键的习惯，告别死记硬背。</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/9792-key-promoter-x/">https://plugins.jetbrains.com/plugin/9792-key-promoter-x/</a></li></ul></li><li><p>Rainbow Brackets</p><ul><li>描述：给括号添加彩虹色，使开发者通过颜色区分括号嵌套层级，便于阅读</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/">https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/</a></li></ul></li><li><p>CodeGlance</p><ul><li>描述：在编辑器右侧生成代码小地图，可以拖拽小地图光标快速定位代码，阅读行数很多的代码文件时非常实用。</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7275-codeglance/">https://plugins.jetbrains.com/plugin/7275-codeglance/</a></li></ul></li><li><p>WakaTime</p><ul><li>描述：代码统计和跟踪插件</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7425-wakatime">https://plugins.jetbrains.com/plugin/7425-wakatime</a></li></ul></li><li><p>Statistic</p><ul><li>描述：代码统计</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/4509-statistic">https://plugins.jetbrains.com/plugin/4509-statistic</a></li></ul></li></ul><h4 id="精选天品插件"><a href="#精选天品插件" class="headerlink" title="精选天品插件"></a>精选天品插件</h4><p>提高开发效率和代码质量</p><ul><li><p>String Manipulation</p><ul><li>描述：字符串快捷处理</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/2162-string-manipulation">https://plugins.jetbrains.com/plugin/2162-string-manipulation</a></li></ul></li><li><p>Tabnine AI Code Completion</p><ul><li>描述：使用 AI 去自动提示和补全代码，比 IDEA 自带的代码补全更加智能化</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more">https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more</a></li></ul></li><li><p>GsonFormatPlus</p><ul><li>描述：根据 json 生成对象</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/14949-gsonformatplus">https://plugins.jetbrains.com/plugin/14949-gsonformatplus</a></li></ul></li><li><p>JUnitGenerator V2.0</p><ul><li>描述：自动生成单元测试</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0">https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0</a></li></ul></li><li><p>RestfulTool</p><ul><li>描述：辅助 web 开发的工具集</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/14280-restfultool">https://plugins.jetbrains.com/plugin/14280-restfultool</a></li></ul></li><li><p>SequenceDiagram</p><ul><li>描述：自动生成方法调用时序图</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8286-sequencediagram">https://plugins.jetbrains.com/plugin/8286-sequencediagram</a></li></ul></li><li><p>CheckStyle-IDEA</p><ul><li>描述：自动检查 Java 代码规范</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/1065-checkstyle-idea">https://plugins.jetbrains.com/plugin/1065-checkstyle-idea</a></li></ul></li><li><p>Alibaba Java Coding Guidelines</p><ul><li>描述：代码规范检查插件</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines">https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines</a></li></ul></li><li><p>SonarLint</p><ul><li>描述：帮助你发现和修复代码的错误和漏洞</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7973-sonarlint">https://plugins.jetbrains.com/plugin/7973-sonarlint</a></li></ul></li><li><p>MybatisX</p><ul><li>描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码，优化体验</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">https://plugins.jetbrains.com/plugin/10119-mybatisx</a></li></ul></li></ul><h4 id="美化类"><a href="#美化类" class="headerlink" title="美化类"></a>美化类</h4><ul><li><p>Extra Icons</p><ul><li>描述：图标美化插件，支持更多文件类型</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/11058-extra-icons">https://plugins.jetbrains.com/plugin/11058-extra-icons</a></li></ul></li><li><p>Chinese Language Pack</p><ul><li>描述：中文支持</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----">https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----</a></li></ul></li><li><p>Grep Console</p><ul><li>描述：自定义设置控制台输出颜色</li><li>官网：<a href="https://plugins.jetbrains.com/idea/plugin/7125-grep-console">https://plugins.jetbrains.com/idea/plugin/7125-grep-console</a></li></ul></li><li><p>Material Theme UI</p><ul><li>描述：美观的主题</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8006-material-theme-ui">https://plugins.jetbrains.com/plugin/8006-material-theme-ui</a></li></ul></li><li><p>Nyan Progress Bar</p><ul><li>描述：进度条美化</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8575-nyan-progress-bar">https://plugins.jetbrains.com/plugin/8575-nyan-progress-bar</a></li></ul></li><li><p>activate-power-mode</p><ul><li>描述：打字特效</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8330-activate-power-mode">https://plugins.jetbrains.com/plugin/8330-activate-power-mode</a></li></ul></li><li><p>Power Mode II</p><ul><li>描述：打字特效插件升级版</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8251-power-mode-ii">https://plugins.jetbrains.com/plugin/8251-power-mode-ii</a></li></ul></li><li><p>Rainbow Brackets</p><ul><li>描述：给括号添加彩虹色，使开发者通过颜色区分括号嵌套层级，便于阅读</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/">https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/</a></li></ul></li><li><p>Background Image Plus +</p><ul><li>描述：给编辑器设置背景图片</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/11247-background-image-plus-">https://plugins.jetbrains.com/plugin/11247-background-image-plus-</a></li></ul></li></ul><h4 id="代码生成类"><a href="#代码生成类" class="headerlink" title="代码生成类"></a>代码生成类</h4><ul><li><p>Codota AI Autocomplete for Java and JavaScript</p><ul><li>描述：使用 AI 去自动提示和补全代码，比 IDEA 自带的代码补全更加智能化</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7638-codota-ai-autocomplete-for-java-and-javascript">https://plugins.jetbrains.com/plugin/7638-codota-ai-autocomplete-for-java-and-javascript</a></li></ul></li><li><p>Tabnine AI Code Completion</p><ul><li>描述：使用 AI 来自动提示和补全代码，比 IDEA 自带的代码补全更加智能化</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more">https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more</a></li></ul></li><li><p>UUID Generator</p><ul><li>描述：生成随机的 UUID</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8320-uuid-generator">https://plugins.jetbrains.com/plugin/8320-uuid-generator</a></li></ul></li><li><p>Randomness</p><ul><li>描述：生成随机值</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/9836-randomness">https://plugins.jetbrains.com/plugin/9836-randomness</a></li></ul></li><li><p>.ignore</p><ul><li>描述：生成不同语言的版本控制忽略文件</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7495--ignore">https://plugins.jetbrains.com/plugin/7495--ignore</a></li></ul></li><li><p>Auto filling Java call arguments</p><ul><li>描述：通过快捷键自动补全函数的调用参数</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8638-auto-filling-java-call-arguments/">https://plugins.jetbrains.com/plugin/8638-auto-filling-java-call-arguments/</a></li></ul></li><li><p>GenerateAllSetter</p><ul><li>描述：快速生成调用对象 setter 方法的代码</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/9360-generateallsetter">https://plugins.jetbrains.com/plugin/9360-generateallsetter</a></li></ul></li><li><p>GenerateSerialVersionUID</p><ul><li>描述：一键为实现 Serializable 接口的类生成 SerialVersionUID</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/185-generateserialversionuid/">https://plugins.jetbrains.com/plugin/185-generateserialversionuid/</a></li></ul></li><li><p>GsonFormatPlus</p><ul><li>描述：根据 json 生成对象</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/14949-gsonformatplus">https://plugins.jetbrains.com/plugin/14949-gsonformatplus</a></li></ul></li><li><p>Lombok</p><ul><li><p>描述：配合 Lombok 依赖及注解使用，能够大大减少 Java 对象的代码量。IDEA 已自带，无需安装。</p></li><li><p>官网：<a href="https://plugins.jetbrains.com/plugin/6317-lombok/">https://plugins.jetbrains.com/plugin/6317-lombok/</a></p></li></ul></li><li><p>Easy Code</p><ul><li>描述：根据数据库表生成 Java entity、dao、mapper、service、controller 等代码</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10954-easy-code">https://plugins.jetbrains.com/plugin/10954-easy-code</a></li></ul></li><li><p>Easy Javadoc</p><ul><li>描述：快速生成 Javadoc 文档</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/12977-easy-javadoc">https://plugins.jetbrains.com/plugin/12977-easy-javadoc</a></li></ul></li><li><p>JavaDoc</p><ul><li>描述：生成 Javadoc 文档</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7157-javadoc">https://plugins.jetbrains.com/plugin/7157-javadoc</a></li></ul></li><li><p>Json2Pojo</p><ul><li>描述：根据 JSON 生成 POJO，根据 POJO 生成 JSON</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8533-json2pojo">https://plugins.jetbrains.com/plugin/8533-json2pojo</a></li></ul></li><li><p>JUnitGenerator V2.0</p><ul><li>描述：自动生成单元测试</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0">https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0</a></li></ul></li><li><p>Jindent - Source Code Formatter</p><ul><li>描述：根据自定义模板来生成 javadoc 注释</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8309-jindent--source-code-formatter">https://plugins.jetbrains.com/plugin/8309-jindent--source-code-formatter</a></li></ul></li><li><p>MybatisX</p><ul><li>描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码，优化体验</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">https://plugins.jetbrains.com/plugin/10119-mybatisx</a></li></ul></li><li><p>MyBatisCodeHelperPro</p><ul><li>描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码（收费）</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro">https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro</a></li></ul></li></ul><h4 id="功能提效类"><a href="#功能提效类" class="headerlink" title="功能提效类"></a>功能提效类</h4><h5 id="源码阅读"><a href="#源码阅读" class="headerlink" title="源码阅读"></a>源码阅读</h5><ul><li>Call Graph<ul><li>描述：生成调用关系图，便于查看源码</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/12304-call-graph">https://plugins.jetbrains.com/plugin/12304-call-graph</a></li></ul></li><li>Jump to Line<ul><li>描述：支持跳转到任意行进行调试</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/14877-jump-to-line">https://plugins.jetbrains.com/plugin/14877-jump-to-line</a></li></ul></li><li>SequenceDiagram<ul><li>描述：自动生成方法调用时序图</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8286-sequencediagram">https://plugins.jetbrains.com/plugin/8286-sequencediagram</a></li></ul></li><li>jclasslib Bytecode Viewer<ul><li>描述：字节码查看器</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer">https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer</a></li></ul></li><li>BrowseWordAtCaret<ul><li>描述： 快速在相同单词间进行跳转</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/201-browsewordatcaret">https://plugins.jetbrains.com/plugin/201-browsewordatcaret</a></li></ul></li><li>CodeGlance<ul><li>描述：在编辑器右侧生成代码小地图，可以拖拽小地图光标快速定位代码，阅读行数很多的代码文件时非常实用。</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7275-codeglance/">https://plugins.jetbrains.com/plugin/7275-codeglance/</a></li></ul></li></ul><h5 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h5><ul><li>CheckStyle-IDEA<ul><li>描述：自动检查 Java 代码规范</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/1065-checkstyle-idea">https://plugins.jetbrains.com/plugin/1065-checkstyle-idea</a></li></ul></li><li>Alibaba Java Coding Guidelines<ul><li>描述：代码规范检查插件</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines">https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines</a></li></ul></li><li>SonarLint<ul><li>描述：帮助你发现和修复代码的错误和漏洞</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7973-sonarlint">https://plugins.jetbrains.com/plugin/7973-sonarlint</a></li></ul></li><li>FindBugs-IDEA<ul><li>描述：帮你找出代码中潜藏的 Bug</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/3847-findbugs-idea">https://plugins.jetbrains.com/plugin/3847-findbugs-idea</a></li></ul></li><li>MetricsReloaded<ul><li>描述：代码复杂度分析</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/93?pr=idea">https://plugins.jetbrains.com/plugin/93?pr=idea</a></li></ul></li></ul><h5 id="格式处理"><a href="#格式处理" class="headerlink" title="格式处理"></a>格式处理</h5><ul><li><p>CamelCase</p><ul><li>描述：快速字符串格式转换工具，如驼峰式</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7160-camelcase">https://plugins.jetbrains.com/plugin/7160-camelcase</a></li></ul></li><li><p>Json Parser</p><ul><li>描述：验证和格式化 Json 字符串的工具</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10650-json-parser">https://plugins.jetbrains.com/plugin/10650-json-parser</a></li></ul></li><li><p>Properties to YAML Converter</p><ul><li>描述：把 Properties 文件的格式转为 YAML 格式</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8000-properties-to-yaml-converter">https://plugins.jetbrains.com/plugin/8000-properties-to-yaml-converter</a></li></ul></li><li><p>String Manipulation</p><ul><li>描述：字符串快捷处理</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/2162-string-manipulation">https://plugins.jetbrains.com/plugin/2162-string-manipulation</a></li></ul></li></ul><h5 id="代码统计"><a href="#代码统计" class="headerlink" title="代码统计"></a>代码统计</h5><ul><li>WakaTime<ul><li>描述：代码统计和跟踪插件</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7425-wakatime">https://plugins.jetbrains.com/plugin/7425-wakatime</a></li></ul></li><li>Statistic<ul><li>描述：代码统计</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/4509-statistic">https://plugins.jetbrains.com/plugin/4509-statistic</a></li></ul></li></ul><h5 id="代码检索"><a href="#代码检索" class="headerlink" title="代码检索"></a>代码检索</h5><ul><li>OnlineSearch<ul><li>描述：选择文本后支持不同搜索引擎进行搜索</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8298-onlinesearch/">https://plugins.jetbrains.com/plugin/8298-onlinesearch/</a></li></ul></li><li>CodeSearch<ul><li>描述：快捷地打开搜索引擎进行搜索</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/12578-codesearch">https://plugins.jetbrains.com/plugin/12578-codesearch</a></li></ul></li></ul><h5 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h5><ul><li><p>Leetcode Editor</p><ul><li>描述：在 IDEA 里刷算法题</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/12132-leetcode-editor">https://plugins.jetbrains.com/plugin/12132-leetcode-editor</a></li></ul></li><li><p>File Watchers</p><ul><li>描述：监听文件，当其发生变化时自动执行命令</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7177-file-watchers">https://plugins.jetbrains.com/plugin/7177-file-watchers</a></li></ul></li><li><p>PlantUML integration</p><ul><li>描述：UML 建模工具，只需简单的代码就能画出复杂的 UML 类图</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7017-plantuml-integration">https://plugins.jetbrains.com/plugin/7017-plantuml-integration</a></li></ul></li><li><p>Bytecode Editor</p><ul><li>描述：字节码编辑工具</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8461-bytecode-editor">https://plugins.jetbrains.com/plugin/8461-bytecode-editor</a></li></ul></li><li><p>Alibaba Cloud Toolkit</p><ul><li>描述：阿里云工具集</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/11386-alibaba-cloud-toolkit">https://plugins.jetbrains.com/plugin/11386-alibaba-cloud-toolkit</a></li></ul></li><li><p>Tencent Cloud Toolkit</p><ul><li>描述：腾讯云工具集</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/15653-tencent-cloud-toolkit">https://plugins.jetbrains.com/plugin/15653-tencent-cloud-toolkit</a></li></ul></li><li><p>EduTools</p><ul><li>描述：面向教育者，允许创建、分享和加入练习</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10081-edutools">https://plugins.jetbrains.com/plugin/10081-edutools</a></li></ul></li><li><p>IDE Features Trainer</p><ul><li>描述：IntelliJ IDEA 官方出的学习辅助插件</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8554-ide-features-trainer">https://plugins.jetbrains.com/plugin/8554-ide-features-trainer</a></li></ul></li><li><p>JRebel Plugin</p><ul><li>描述：项目热更新，提高效率（可惜要收费）</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/4441-jrebel-and-xrebel-for-intellij">https://plugins.jetbrains.com/plugin/4441-jrebel-and-xrebel-for-intellij</a></li></ul></li><li><p>Key Promoter X</p><ul><li>描述：快捷键提示插件。当你执行鼠标操作时，如果该操作可被快捷键代替，会给出提示，帮助你自然形成使用快捷键的习惯，告别死记硬背。</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/9792-key-promoter-x/">https://plugins.jetbrains.com/plugin/9792-key-promoter-x/</a></li></ul></li><li><p>Translation</p><ul><li>描述：翻译插件，鼠标选中文本，点击右键即可自动翻译成多国语言。</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8579-translation/">https://plugins.jetbrains.com/plugin/8579-translation/</a></li></ul></li><li><p>idea_seat</p><ul><li>描述：自动提醒，防止你久坐不动</li><li>官网：<a href="https://github.com/s-unscrupulous/idea_seat">https://github.com/s-unscrupulous/idea_seat</a></li></ul></li><li><p>RestfulTool</p><ul><li>描述：辅助 web 开发的工具集</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/14280-restfultool">https://plugins.jetbrains.com/plugin/14280-restfultool</a></li></ul></li><li><p>Multirun</p><ul><li>描述：同时启动多应用</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7248-multirun">https://plugins.jetbrains.com/plugin/7248-multirun</a></li></ul></li></ul><h4 id="扩展增强类"><a href="#扩展增强类" class="headerlink" title="扩展增强类"></a>扩展增强类</h4><ul><li>Free Mybatis Plugin<ul><li>描述：MyBatis 增强插件，支持 mapper =&gt; xml 的跳转、代码生成等功能</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin">https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin</a></li></ul></li><li>MyBatis Log Plugin<ul><li>描述：MyBatis SQL 提取和格式化输出</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10065-mybatis-log-plugin">https://plugins.jetbrains.com/plugin/10065-mybatis-log-plugin</a></li></ul></li><li>Maven Helper<ul><li>描述：Maven 辅助插件</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7179-maven-helper">https://plugins.jetbrains.com/plugin/7179-maven-helper</a></li></ul></li><li>Gradle View<ul><li>描述：Gradle 项目管理工具的扩展</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7150-gradle-view">https://plugins.jetbrains.com/plugin/7150-gradle-view</a></li></ul></li><li>Arthas Idea<ul><li>描述： Arthas 命令生成插件。Arthas 是阿里开源的 Java 在线诊断工具，该插件可以自动生成 Arthas 在线 Java 代码诊断命令，不用再到官网翻文档拼命令啦！</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/13581-arthas-idea/">https://plugins.jetbrains.com/plugin/13581-arthas-idea/</a></li></ul></li><li>GitToolBox<ul><li>描述： Git 增强插件。在自带的 Git 功能之上，新增了查看 Git 状态、自动拉取代码、提交通知等功能。最好用的是可以查看到每一行代码的最近一次提交信息。</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7499-gittoolbox/">https://plugins.jetbrains.com/plugin/7499-gittoolbox/</a></li></ul></li><li>BashSupport<ul><li>描述：支持 Bash 脚本文件的高亮和提示等</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/4230-bashsupport">https://plugins.jetbrains.com/plugin/4230-bashsupport</a></li></ul></li><li>Git Flow Integration<ul><li>描述：Git Flow 的图形界面操作</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7315-git-flow-integration">https://plugins.jetbrains.com/plugin/7315-git-flow-integration</a></li></ul></li><li>Gitee<ul><li>描述：开源中国的码云插件</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8383-gitee">https://plugins.jetbrains.com/plugin/8383-gitee</a></li></ul></li><li>Drools<ul><li>描述：规则引擎的扩展</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/16871-drools">https://plugins.jetbrains.com/plugin/16871-drools</a></li></ul></li><li>EnvFile<ul><li>描述：对多环境配置文件的支持</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7861-envfile">https://plugins.jetbrains.com/plugin/7861-envfile</a></li></ul></li><li>Kubernetes<ul><li>描述：容器管理的扩展</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10485-kubernetes">https://plugins.jetbrains.com/plugin/10485-kubernetes</a></li></ul></li><li>Vue.js<ul><li>描述：Vue.js 前端框架的扩展</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/9442-vue-js">https://plugins.jetbrains.com/plugin/9442-vue-js</a></li></ul></li><li>Scala<ul><li>描述：Scala 语言的扩展</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/1347-scala">https://plugins.jetbrains.com/plugin/1347-scala</a></li></ul></li><li>Zookeeper<ul><li>描述：Zookeeper 中间件的扩展</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/7364-zookeeper">https://plugins.jetbrains.com/plugin/7364-zookeeper</a></li></ul></li><li>Jms messenger<ul><li>描述：对 Java 消息服务的扩展</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10949-jms-messenger">https://plugins.jetbrains.com/plugin/10949-jms-messenger</a></li></ul></li><li>MapStruct Support<ul><li>描述：对 MapStruct 对象转换的支持</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10036-mapstruct-support">https://plugins.jetbrains.com/plugin/10036-mapstruct-support</a></li></ul></li><li>Big Data Tools<ul><li>描述：提供了 HDFS 等大数据框架的工具集</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/12494-big-data-tools">https://plugins.jetbrains.com/plugin/12494-big-data-tools</a></li></ul></li><li>CSV<ul><li>描述：支持 CSV 文件的高亮和提示等</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/10037-csv">https://plugins.jetbrains.com/plugin/10037-csv</a></li></ul></li><li>Ideolog<ul><li>描述：识别和格式化 log 日志文件</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/9746-ideolog">https://plugins.jetbrains.com/plugin/9746-ideolog</a></li></ul></li><li>Toml<ul><li>描述：支持 toml 文件的高亮和提示等</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/8195-toml">https://plugins.jetbrains.com/plugin/8195-toml</a></li></ul></li><li>.env files support<ul><li>描述：支持 .env 文件的高亮和提示等</li><li>官网：<a href="https://plugins.jetbrains.com/plugin/9525--env-files-support">https://plugins.jetbrains.com/plugin/9525--env-files-support</a></li></ul></li></ul><h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><p><strong>以下部分软件可在【公众号：程序员鱼皮】回复【软件】获取~</strong></p><h5 id="开发相关"><a href="#开发相关" class="headerlink" title="开发相关"></a>开发相关</h5><ul><li>JetBrains IDEA：Java 集成开发环境，凭学生邮箱可申请免费使用（<a href="https://www.jetbrains.com/idea/%EF%BC%89">https://www.jetbrains.com/idea/）</a></li><li>Reset Jetbrains：你懂的</li><li>Visual Studio Code：插件化代码编辑器（<a href="https://code.visualstudio.com/%EF%BC%89">https://code.visualstudio.com/）</a></li><li>Sublime Text：轻量代码编辑器（<a href="https://www.sublimetext.com/%EF%BC%89">https://www.sublimetext.com/）</a></li><li>Navicat：数据库管理软件（<a href="https://www.navicat.com.cn/%EF%BC%89">https://www.navicat.com.cn/）</a></li><li>JMeter：Java 性能测试工具（<a href="https://jmeter.apache.org/%EF%BC%89">https://jmeter.apache.org/）</a></li><li>JVisual VM：Java 运行状态可视化工具（<a href="https://visualvm.github.io/%EF%BC%89">https://visualvm.github.io/）</a></li><li>XShell：SSH 连接软件（<a href="https://www.netsarang.com/zh/xshell/%EF%BC%89">https://www.netsarang.com/zh/xshell/）</a></li><li>XFtp：FTP 连接软件（<a href="https://www.netsarang.com/zh/xftp/%EF%BC%89">https://www.netsarang.com/zh/xftp/）</a></li><li>Redis Desktop Manager：Redis 可视化管理工具（<a href="https://github.com/uglide/RedisDesktopManager%EF%BC%89">https://github.com/uglide/RedisDesktopManager）</a></li><li>Postman：接口测试工具（<a href="https://www.postman.com/%EF%BC%89">https://www.postman.com/）</a></li><li>VMware：虚拟机软件（<a href="https://www.vmware.com/%EF%BC%89">https://www.vmware.com/）</a></li><li>Chocolatey：Windows 软件包管理器（<a href="https://chocolatey.org/%EF%BC%89">https://chocolatey.org/）</a></li><li>Typora：写文档软件（<a href="https://typora.io/%EF%BC%89">https://typora.io/）</a></li></ul><h5 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h5><ul><li>Ditto：强大的剪切板（<a href="https://ditto-cp.sourceforge.io/%EF%BC%89">https://ditto-cp.sourceforge.io/）</a></li><li>uTools：插件化的效率工具（<a href="https://u.tools/%EF%BC%89">https://u.tools/）</a></li><li>XMind：思维导图软件（<a href="https://www.xmind.cn/%EF%BC%89">https://www.xmind.cn/）</a></li><li>Qdir：Windows 多窗口管理器（<a href="https://q-dir.en.softonic.com/%EF%BC%89">https://q-dir.en.softonic.com/）</a></li></ul><h3 id="项目源码（50-套）"><a href="#项目源码（50-套）" class="headerlink" title="项目源码（50 套）"></a>项目源码（50 套）</h3><h4 id="电商秒杀"><a href="#电商秒杀" class="headerlink" title="电商秒杀"></a>电商秒杀</h4><ul><li><p>天猫整站 J2EE：<a href="https://how2j.cn/module/115.htm">https://how2j.cn/module/115.htm</a></p></li><li><p>天猫整站 SSM：<a href="https://how2j.cn/module/134.html">https://how2j.cn/module/134.html</a></p></li><li><p>天猫整站 Springboot：<a href="https://how2j.cn/module/156.html">https://how2j.cn/module/156.html</a></p></li><li><p>mall-learning：<a href="https://github.com/macrozheng/mall-learningmall">https://github.com/macrozheng/mall-learningmall</a> （学习教程，架构、业务、技术要点全方位解析）</p></li><li><p>SpringBoot 电商商城系统 Mall4j：<a href="https://github.com/gz-yami/mall4j">https://github.com/gz-yami/mall4j</a></p></li><li><p>SpringBoot 完整电商系统 Mall：<a href="https://github.com/macrozheng/mall">https://github.com/macrozheng/mall</a> （包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现）</p></li><li><p>newbee-mall：<a href="https://github.com/newbee-ltd/newbee-mall">https://github.com/newbee-ltd/newbee-mall</a> （一套电商系统，包括 newbee-mall 商城系统及 newbee-mall-admin 商城后台管理系统，基于 Spring Boot 2.X 及相关技术栈开发）</p></li><li><p>paascloud-master：<a href="https://github.com/paascloud/paascloud-master">https://github.com/paascloud/paascloud-master</a> （基于 spring cloud + vue + oAuth2.0，前后端分离商城系统）</p></li><li><p>mall-swarm：<a href="https://github.com/macrozheng/mall-swarm">https://github.com/macrozheng/mall-swarm</a> （一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统）</p></li><li><p>onemall：<a href="https://github.com/YunaiV/onemall">https://github.com/YunaiV/onemall</a> （mall 商城，基于微服务的思想，构建在 B2C 电商场景下的项目实战。核心技术栈，是 Spring Boot + Dubbo 。未来，会重构成 Spring Cloud Alibaba）</p></li><li><p>litemall：<a href="https://github.com/linlinjava/litemall">https://github.com/linlinjava/litemall</a> （又一个小商城，litemall = Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端）</p></li><li><p>xmall：<a href="https://github.com/Exrick/xmall">https://github.com/Exrick/xmall</a> （基于SOA架构的分布式电商购物商城 前后端分离 前台商城:Vue全家桶 后台管理系统）</p></li><li><p>miaosha：<a href="https://github.com/qiurunze123/miaosha">https://github.com/qiurunze123/miaosha</a> （秒杀系统设计与实现）</p></li><li><p>SecKill：<a href="https://github.com/hfbin/Seckill">https://github.com/hfbin/Seckill</a> （基于 SpringBoot+Mybatis+Redis+RabbitMQ 秒杀系统）</p></li></ul><h4 id="博客论坛"><a href="#博客论坛" class="headerlink" title="博客论坛"></a>博客论坛</h4><ul><li><p><a href="https://github.com/langhsu/mblog">Mblog</a>：开源 Java 博客系统</p></li><li><p><a href="https://github.com/halo-dev/halo">halo</a>：一个优秀的开源博客发布应用</p></li><li><p><a href="https://github.com/Qbian61/forum-java">forum-java</a>：一款用 Java（spring boot） 实现的现代化社区（论坛/问答/BBS/社交网络/博客）系统平台</p></li><li><p><a href="https://github.com/lenve/vhr">vhr</a>：微人事是一个前后端分离的人力资源管理系统，项目采用 SpringBoot+Vue 开发。</p></li><li><p><a href="https://github.com/cloudfavorites/favorites-web">favorites-web</a>:云收藏 Spring Boot 2.X 开源项目。云收藏是一个使用 Spring Boot 构建的开源网站，可以让用户在线随时随地收藏的一个网站，在网站上分类整理收藏的网站或者文章。</p></li><li><p><a href="https://github.com/codedrinker/community">community</a>：码问，开源论坛、问答系统，现有功能提问、回复、通知、最新、最热、消除零回复功能。技术栈 Spring、Spring Boot、MyBatis、MySQL/H2、Bootstrap</p></li><li><p><a href="https://github.com/yourkevin/NiterForum">NiterForum</a>：尼特社区-NiterForum-一个论坛/社区程序。后端Springboot/MyBatis/Maven/MySQL，前端Thymeleaf/Layui。可供初学者，学习、交流使用。</p></li><li><p><a href="https://github.com/lenve/VBlog">VBlog</a>：V部落，Vue+SpringBoot实现的多用户博客管理平台!</p></li><li><p><a href="https://github.com/damoqiongqiu/NiceFish">NiceFish</a>：SpringBoot/SpringCloud 前后端分离项目</p></li><li><p><a href="https://github.com/ZHENFENG13/My-Blog">My-Blog</a>： My Blog 是由 SpringBoot + Mybatis + Thymeleaf 等技术实现的 Java 博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验。</p></li><li><p><a href="https://github.com/ZHENFENG13/My-Blog-layui">My-Blog-layui</a>：layui 版本的 My-Blog : A simple &amp; beautiful blogging system implemented with spring-boot &amp; layui &amp; thymeleaf &amp; mybatis My Blog 是由  SpringBoot + Layui + Mybatis + Thymeleaf 等技术实现的 Java  博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验</p></li><li><p><a href="https://github.com/88250/symphony">symphony</a>：Java 实现的现代化社区</p></li></ul><h4 id="管理系统"><a href="#管理系统" class="headerlink" title="管理系统"></a>管理系统</h4><ul><li><p><a href="https://github.com/wxiaoqi/Spring-Cloud-Admin">Spring-Cloud-Admin</a>：Cloud-Admin 是国内首个基于 Spring Cloud 微服务化开发平台，具有统一授权、认证后台管理系统，其中包含具备用户管理、资源权限管理、网关 API 管理等多个模块，支持多业务系统并行开发，可以作为后端服务的开发脚手架。代码简洁，架构清晰，适合学习和直接项目中使用。核心技术采用 Spring Boot2 以及 Spring Cloud Gateway 相关核心组件，前端采用 vue-element-admin 组件。</p></li><li><p><a href="https://github.com/tomsun28/bootshiro">bootshiro</a>：基于 springboot+shiro+jwt 的资源无状态认证权限管理系统后端</p></li><li><p><a href="https://github.com/72crm/72crm-java">悟空CRM</a>：基于jfinal+vue+ElementUI的前后端分离CRM系统</p></li><li><p><a href="https://github.com/elunez/eladmin">EL-ADMIN</a>：基于 SpringBoot 的后台管理系统</p></li><li><p><a href="https://gitee.com/log4j/pig">pig</a>：基于 Spring Boot 2.2、 Spring Cloud Hoxton &amp; Alibaba、 OAuth2 的 RBAC 权限管理系统。</p></li><li><p><a href="https://github.com/wuyouzhuguli/FEBS-Shiro">FEBS-Shiro</a>：Spring Boot 2.1.3，Shiro1.4.0 &amp; Layui 2.5.4 权限管理系统。</p></li><li><p><a href="https://github.com/Heeexy/SpringBoot-Shiro-Vue">Spring Boot-Shiro-Vue</a>：基于Spring Boot-Shiro-Vue 的权限管理</p></li><li><p><a href="https://github.com/ZeroWdd/studentmanager">studentmanager</a>：基于springboot+mybatis学生管理系统</p></li><li><p><a href="https://github.com/jishenghua/jshERP">jshERP</a>：华夏ERP基于SpringBoot框架和SaaS模式，立志为中小企业提供开源好用的ERP软件，目前专注进销存+财务功能。主要模块有零售管理、采购管理、销售管理、仓库管理、财务管理、报表查询、系统管理等。支持预付款、收入支出、仓库调拨、组装拆卸、订单等特色功能。拥有库存状况、出入库统计等报表。同时对角色和权限进行了细致全面控制，精确到每个按钮和菜单。</p></li><li><p><a href="https://github.com/misterchaos/HotelSystem">HotelSystem</a>：酒店管理系统 Java,tomcat,mysql,servlet,jsp实现，没有使用任何框架</p></li></ul><h4 id="开发平台"><a href="#开发平台" class="headerlink" title="开发平台"></a>开发平台</h4><ul><li><a href="https://github.com/2014shijina2014/open-capacity-platform">open-capacity-platform</a>：微服务能力开发平台</li><li><a href="https://github.com/zhangdaiscott/jeecg-boot">jeecg-boot</a>：JeecgBoot是一款基于BPM的低代码平台！前后端分离架构 SpringBoot 2.x，SpringCloud，Ant  Design&amp;Vue，Mybatis-plus，Shiro，JWT，支持微服务。强大的代码生成器让前后端代码一键生成，实现低代码开发！</li></ul><h4 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a>其他</h4><ul><li><p><a href="https://github.com/mindskip/xzs">学之思在线考试系统</a>：一款 java + vue 的前后端分离的考试系统</p></li><li><p><a href="https://github.com/Jackson0714/PassJava-Platform">PassJava-Platform</a>：一款面试刷题的 Spring Cloud 开源系统</p></li><li><p><a href="https://github.com/kekingcn/kkFileView">kkFileView</a>：使用spring boot打造文件文档在线预览项目</p></li><li><p><a href="https://github.com/baomidou/dynamic-datasource-spring-boot-starter">dynamic-datasource</a>：一个基于springboot的快速集成多数据源的启动器</p></li><li><p><a href="https://github.com/373675032/moti-cloud">moti-cloud</a>：莫提网盘，基于 SpringBoot+MyBatis+ThymeLeaf+BootStrap，适合初学者</p></li><li><p><a href="https://github.com/qiurunze123/threadandjuc">threadandjuc</a>：three-high-import 高可用\高可靠\高性能，三高多线程导入系统（该项目意义为理论贯通)</p></li><li><p><a href="https://github.com/proxyee-down-org/proxyee-down">proxyee-down</a>：http下载工具，基于http代理，支持多连接分块下载</p></li><li><p><a href="https://github.com/sfturing/hosp_order">hosp_order</a>：医院预约挂号系统，基于 SSM 框架</p></li><li><p><a href="https://how2j.cn/module/170.html">趋势投资 SpringCloud</a></p></li><li><p><a href="https://how2j.cn/module/176.html">DiyTomcat</a></p></li></ul><h2 id="阶段-6：Java-高级"><a href="#阶段-6：Java-高级" class="headerlink" title="阶段 6：Java 高级"></a>阶段 6：Java 高级</h2><h3 id="目标-5"><a href="#目标-5" class="headerlink" title="目标"></a>目标</h3><p>不满足于能做，而是通过更 <strong>深入</strong> 和 <strong>广泛</strong> 的学习，实现高质量的代码和更优秀的架构，培养解决问题的能力。</p><p>已经到了这个阶段，建议除了看完成的教程外，平时多自主搜索信息去学习，积少成多。比如遇到了一个不了解的名词，可以去网上搜一下，感兴趣的话再进行下一步的学习。</p><h3 id="🌖-并发编程（21-天）"><a href="#🌖-并发编程（21-天）" class="headerlink" title="🌖 并发编程（21 天）"></a>🌖 并发编程（21 天）</h3><p>对 Java 后端开发程序员来说，懂得如何利用有限的系统资源来提高系统的性能是很重要的，也是大厂面试考察的重点，因此并发编程（尤其是 Java 并发包的使用）这块的知识很重要。</p><p>把它放到高级，是因为在学并发编程前，需要有一定的编程经验、了解一定的操作系统知识。</p><h4 id="知识-21"><a href="#知识-21" class="headerlink" title="知识"></a>知识</h4><ul><li>线程和进程</li><li>线程状态</li><li>并行和并发</li><li>同步和异步</li><li>Synchronized</li><li>Volatile 关键字</li><li>Lock 锁</li><li>死锁</li><li>可重入锁</li><li>线程安全</li><li>线程池</li><li>JUC 的使用</li><li>AQS</li><li>Fork Join</li><li>CAS</li></ul><h4 id="学习建议-23"><a href="#学习建议-23" class="headerlink" title="学习建议"></a>学习建议</h4><p>并发编程入门不难，依然是 <strong>先学会使用</strong> 基础的 Java 并发包， 再通过大量地实践和测试，了解一些原理，才能真正掌握何时使用、如何更合理地使用并发编程。而不是张口闭口多线程，上天入地高并发。</p><h4 id="经典面试题-16"><a href="#经典面试题-16" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>volatile 关键字的作用</li><li>使用线程池有哪些好处？</li><li>线程池参数如何设置？</li><li>什么是线程安全问题，如何解决？</li><li>介绍 synchronized 的锁升级机制</li><li>CopyOnWriteArrayList 适用于哪种场景？</li></ol><h4 id="资源-22"><a href="#资源-22" class="headerlink" title="资源"></a>资源</h4><ul><li><p>视频</p><ul><li>⭐【尚硅谷】大厂必备技术之JUC并发编程2021最新版：<a href="https://www.bilibili.com/video/BV1Kw411Z7dF">https://www.bilibili.com/video/BV1Kw411Z7dF</a> （特点是短、精、新）</li><li>黑马程序员全面深入学习Java并发编程：<a href="https://www.bilibili.com/video/BV16J411h7Rd">https://www.bilibili.com/video/BV16J411h7Rd</a> （讲的很细、全面深入）</li></ul></li><li><p>书籍</p><ul><li>⭐《Java并发编程实战》（国外的经典）</li><li>⭐《Java 并发编程艺术》（国人写的，理论思想内容较多，有时间建议反复看）</li></ul></li><li><p>项目</p><ul><li>⭐ Java 并发知识点总结：<a href="https://github.com/CL0610/Java-concurrency">https://github.com/CL0610/Java-concurrency</a></li></ul></li></ul><h3 id="🌖-JVM（30-天）"><a href="#🌖-JVM（30-天）" class="headerlink" title="🌖 JVM（30 天）"></a>🌖 JVM（30 天）</h3><p>想要深入理解 Java，探秘 Java 跨平台的奥秘，一定要了解 Java 底层的虚拟机技术。</p><p>了解虚拟机、掌握虚拟机性能调优方法，有助于你写出更高性能、资源占用更小的优质程序。</p><p>在学习 JVM 的过程中，也能学到很多精妙的设计，开拓思路。</p><h4 id="知识-22"><a href="#知识-22" class="headerlink" title="知识"></a>知识</h4><ul><li>JVM 内存结构</li><li>JVM 生命周期</li><li>主流虚拟机</li><li>Java 代码执行流程</li><li>类加载<ul><li>类加载器</li><li>类加载过程</li><li>双亲委派机制</li></ul></li><li>垃圾回收<ul><li>垃圾回收器</li><li>垃圾回收策略</li><li>垃圾回收算法</li><li>StopTheWorld</li></ul></li><li>字节码</li><li>内存分配和回收</li><li>JVM 性能调优<ul><li>性能分析方法</li><li>常用工具</li><li>参数设置</li></ul></li><li>Java 探针</li><li>线上故障分析</li></ul><h4 id="学习建议-24"><a href="#学习建议-24" class="headerlink" title="学习建议"></a>学习建议</h4><p>JVM 的知识略显枯燥，建议先看视频，有实操的地方一定要实操！自己多去分析。</p><p>第一遍不理解没有关系，可以再看书来巩固，想要真正学好，《深入理解 Java 虚拟机（第三版）》一定要读。</p><p>如果只是为了通过面试可以直接看更精简的视频，比如狂神的。</p><h4 id="经典面试题-17"><a href="#经典面试题-17" class="headerlink" title="经典面试题"></a>经典面试题</h4><ol><li>介绍 JVM 的内存模型？</li><li>JVM 内存为什么要分代？</li><li>介绍一次完整的 GC 流程</li><li>介绍双亲委派模型，为什么需要它？</li></ol><h4 id="资源-23"><a href="#资源-23" class="headerlink" title="资源"></a>资源</h4><ul><li>视频<ul><li>⭐ 尚硅谷宋红康 - JVM 全套教程详解：<a href="https://www.bilibili.com/video/BV1PJ411n7xZ">https://www.bilibili.com/video/BV1PJ411n7xZ</a> （讲得相当全面！附有实操）</li><li>【狂神说Java】JVM快速入门篇：<a href="https://www.bilibili.com/video/BV1iJ411d7jS">https://www.bilibili.com/video/BV1iJ411d7jS</a> （讲得有点浅，但都是面试重点，时间紧的小伙伴可以直接看这个）</li></ul></li><li>书籍<ul><li>⭐《深入理解 Java 虚拟机（第三版）》（有理论有实践，内容丰富，不可多得的 JVM 学习神书，就是有点废头发）</li></ul></li><li>项目<ul><li>⭐ Java 虚拟机底层原理知识总结：<a href="https://github.com/doocs/jvm">https://github.com/doocs/jvm</a></li></ul></li><li>实战<ul><li>阿里云 JVM 实战：<a href="https://developer.aliyun.com/graph/java/point/64">https://developer.aliyun.com/graph/java/point/64</a></li></ul></li><li>工具<ul><li>Arthas 开源 Java 诊断工具：<a href="https://github.com/alibaba/arthas">https://github.com/alibaba/arthas</a></li></ul></li></ul><h3 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h3><h4 id="🌖-分布式"><a href="#🌖-分布式" class="headerlink" title="🌖 分布式"></a>🌖 分布式</h4><ul><li>分布式理论<ul><li>CAP</li><li>BASE</li></ul></li><li>分布式缓存<ul><li>Redis</li><li>Memcached</li><li>Etcd</li></ul></li><li>一致性算法<ul><li>Raft</li><li>Paxos</li><li>一致性哈希</li></ul></li><li>分布式事务<ul><li>解决方案<ul><li>2PC</li><li>3PC</li><li>TCC</li><li>本地消息表</li><li>MQ 事务消息</li><li>最大努力通知</li></ul></li><li>LCN 分布式事务框架：<a href="https://github.com/codingapi/tx-lcn">https://github.com/codingapi/tx-lcn</a></li></ul></li><li>分布式 id 生成<ul><li>Leaf 分布式 id 生成服务：<a href="https://github.com/Meituan-Dianping/Leaf">https://github.com/Meituan-Dianping/Leaf</a></li></ul></li><li>分布式任务调度<ul><li>XXL-JOB 调度平台：<a href="https://www.xuxueli.com/xxl-job/">https://www.xuxueli.com/xxl-job/</a></li><li>elastic-job：<a href="https://gitee.com/elasticjob/elastic-job">https://gitee.com/elasticjob/elastic-job</a></li></ul></li><li>分布式服务调用<ul><li>trpc</li></ul></li><li>分布式存储<ul><li>HDFS</li><li>Ceph</li></ul></li><li>分布式数据库<ul><li>TiDB</li><li>OceanBase</li></ul></li><li>分布式文件系统<ul><li>HDFS</li></ul></li><li>分布式协调<ul><li>Zookeeper</li></ul></li><li>分布式监控<ul><li>Prometheus</li><li>Zabbix</li></ul></li><li>分布式消息队列<ul><li>RabbitMQ</li><li>Kafka</li><li>Apache Pulsar</li></ul></li><li>分布式日志收集<ul><li>Elastic Stack</li><li>Loki</li></ul></li><li>分布式搜索引擎<ul><li>Elasticsearch</li></ul></li><li>分布式链路追踪<ul><li>Apache SkyWalking</li></ul></li><li>分布式配置中心<ul><li>Apollo</li><li>Nacos</li></ul></li></ul><h4 id="🌗-高可用"><a href="#🌗-高可用" class="headerlink" title="🌗 高可用"></a>🌗 高可用</h4><ul><li>限流</li><li>降级熔断</li><li>冷备</li><li>双机热备</li><li>同城双活</li><li>异地双活</li><li>异地多活</li><li>容灾备份</li></ul><h4 id="🌗-高并发"><a href="#🌗-高并发" class="headerlink" title="🌗 高并发"></a>🌗 高并发</h4><ul><li>数据库<ul><li>分库分表<ul><li>MyCat 中间件</li><li>Apache ShardingSphere 中间件</li></ul></li><li>读写分离</li></ul></li><li>缓存<ul><li>缓存雪崩</li><li>缓存击穿</li><li>缓存穿透</li></ul></li><li>负载均衡<ul><li>负载均衡算法</li><li>软硬件负载均衡（2、3、4、7 层）</li></ul></li></ul><h4 id="🌘-服务网格"><a href="#🌘-服务网格" class="headerlink" title="🌘 服务网格"></a>🌘 服务网格</h4><p>服务网格用来描述组成应用程序的微服务网络以及它们之间的交互。服务网格的规模和复杂性不断的增长，它将会变得越来越难以理解和管理，常见的需求包括服务发现、负载均衡、故障恢复、度量和监控等。</p><h5 id="知识-23"><a href="#知识-23" class="headerlink" title="知识"></a>知识</h5><ul><li>Istio<ul><li>流量管理</li><li>安全性</li><li>可观测性</li></ul></li><li>Envoy（开源的边缘和服务代理）</li></ul><h5 id="资源-24"><a href="#资源-24" class="headerlink" title="资源"></a>资源</h5><ul><li>资料大全：<a href="https://www.servicemesher.com/awesome-servicemesh/">https://www.servicemesher.com/awesome-servicemesh/</a></li><li>istio 官方文档：<a href="https://preliminary.istio.io/latest/zh">https://preliminary.istio.io/latest/zh</a></li><li>istio 视频教程：<a href="https://www.bilibili.com/video/BV1Lf4y1x7j8">https://www.bilibili.com/video/BV1Lf4y1x7j8</a></li><li>在线体验 istio：<a href="https://katacoda.com/courses/istio/">https://katacoda.com/courses/istio/</a></li></ul><h4 id="🌘-DDD-领域驱动设计"><a href="#🌘-DDD-领域驱动设计" class="headerlink" title="🌘 DDD 领域驱动设计"></a>🌘 DDD 领域驱动设计</h4><p>将数据、业务流程抽象成容易理解的领域模型，通过用代码实现领域模型，来组成完整的业务系统。</p><h5 id="知识-24"><a href="#知识-24" class="headerlink" title="知识"></a>知识</h5><ul><li>DDD 的优势</li><li>DDD 的适用场景</li><li>DDD 核心概念<ul><li>领域模型分类：失血、贫血、充血、涨血</li><li>子域划分：核心域、通用域、支撑域</li><li>限界上下文</li><li>实体和值对象</li><li>聚合设计</li><li>领域事件</li></ul></li><li>DDD 实践</li></ul><h5 id="资源-25"><a href="#资源-25" class="headerlink" title="资源"></a>资源</h5><ul><li>DDD 入门：<a href="https://juejin.cn/post/7004002483601145863">https://juejin.cn/post/7004002483601145863</a></li><li>DDD 编码实践：<a href="https://juejin.cn/post/6844903903104860174">https://juejin.cn/post/6844903903104860174</a></li><li>DDD 实践教程：<a href="https://www.bilibili.com/video/BV1Y341167Xp">https://www.bilibili.com/video/BV1Y341167Xp</a></li></ul><h4 id="🌘-其他"><a href="#🌘-其他" class="headerlink" title="🌘 其他"></a>🌘 其他</h4><ul><li>Sidecar</li><li>Serverless</li><li>云原生</li></ul><h4 id="学习建议-25"><a href="#学习建议-25" class="headerlink" title="学习建议"></a>学习建议</h4><p>架构设计的学习没有顶点，多看文章，思考每种设计的优缺点和适用场景，有机会的话在企业中实践即可。</p><p>还在学校、或者初入这行的同学切记，千万不要一味地去背诵架构设计的八股文。你可以背，但是这一块的知识只有结合具体的项目才有意义，所以要多做项目去实践设计的合理性，而不是什么设计都咔咔往系统里去怼。比如面试问到分布式事务，能结合自己项目中用分布式事务解决问题的经验去回答最好。</p><h3 id="🌘-其他技术"><a href="#🌘-其他技术" class="headerlink" title="🌘 其他技术"></a>🌘 其他技术</h3><ul><li>热数据探测技术：京东 HotKey</li><li>数据库流水订阅：阿里 Canal</li><li>监控告警</li><li>应用安全</li><li>故障演练</li><li>流量回放</li></ul><h2 id="阶段-7：Java-求职"><a href="#阶段-7：Java-求职" class="headerlink" title="阶段 7：Java 求职"></a>阶段 7：Java 求职</h2><h3 id="目标-6"><a href="#目标-6" class="headerlink" title="目标"></a>目标</h3><p>找到好工作</p><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><ol><li>尽早做规划，可以通过大厂招聘官网的岗位描述来了解岗位的要求</li><li>雕琢一份优秀的简历，推荐阅读：<a href="https://mp.weixin.qq.com/s/wfabzdpOPdq89faFFpZ4NA">https://mp.weixin.qq.com/s/wfabzdpOPdq89faFFpZ4NA</a></li><li>多读面经，坚持刷算法</li><li>多参与面试，持续复盘总结</li></ol><h3 id="资源-26"><a href="#资源-26" class="headerlink" title="资源"></a>资源</h3><h4 id="校招岗位"><a href="#校招岗位" class="headerlink" title="校招岗位"></a>校招岗位</h4><ul><li>⭐ 牛客求职校招版：<a href="https://www.nowcoder.com/recommend/campus">https://www.nowcoder.com/recommend/campus</a></li><li>阿里 Java 开发：<a href="https://campus.alibaba.com/position.htm?refno=12699">https://campus.alibaba.com/position.htm?refno=12699</a></li><li>腾讯后台开发：<a href="https://join.qq.com/post_detail.html?pid=1&amp;id=101&amp;tid=2">https://join.qq.com/post_detail.html?pid=1&amp;id=101&amp;tid=2</a></li><li>腾讯全栈开发：<a href="https://join.qq.com/post_detail.html?pid=1&amp;id=137&amp;tid=2">https://join.qq.com/post_detail.html?pid=1&amp;id=137&amp;tid=2</a></li><li>腾讯运营开发：<a href="https://join.qq.com/post_detail.html?pid=1&amp;id=105&amp;tid=2">https://join.qq.com/post_detail.html?pid=1&amp;id=105&amp;tid=2</a></li><li>美团后端开发：<a href="https://campus.meituan.com/jobs?jobFamily=1&amp;jobId=4005&amp;jobType=1&amp;pageNo=2">https://campus.meituan.com/jobs?jobFamily=1&amp;jobId=4005&amp;jobType=1&amp;pageNo=2</a></li><li>华为软件开发：<a href="https://career.huawei.com/reccampportal/portal5/campus-recruitment-detail.html?jobId=176044">https://career.huawei.com/reccampportal/portal5/campus-recruitment-detail.html?jobId=176044</a></li></ul><h4 id="社招岗位"><a href="#社招岗位" class="headerlink" title="社招岗位"></a>社招岗位</h4><ul><li>⭐ 牛客求职社招版：<a href="https://www.nowcoder.com/recommend/fulltime">https://www.nowcoder.com/recommend/fulltime</a></li><li>阿里社招：<a href="https://job.alibaba.com/zhaopin/positionList.htm">https://job.alibaba.com/zhaopin/positionList.htm</a></li><li>腾讯社招：<a href="https://careers.tencent.com/search.html">https://careers.tencent.com/search.html</a></li></ul><h4 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h4><ul><li>⭐ 牛客实习广场：<a href="https://nowpick.nowcoder.com/w/intern/center">https://nowpick.nowcoder.com/w/intern/center</a></li><li>实习僧：<a href="https://www.shixiseng.com/">https://www.shixiseng.com/</a></li></ul><h4 id="内推"><a href="#内推" class="headerlink" title="内推"></a>内推</h4><ul><li>牛客内推：<a href="https://www.nowcoder.com/discuss/referral/index">https://www.nowcoder.com/discuss/referral/index</a></li></ul><h4 id="鱼皮经历"><a href="#鱼皮经历" class="headerlink" title="鱼皮经历"></a>鱼皮经历</h4><ul><li><p>从 0 开始的编程学习进大厂经历</p><ul><li>⭐ 我学计算机的四年，共勉：<a href="https://mp.weixin.qq.com/s/Nc7Ee2UyrPg6hGseQUCzeg">https://mp.weixin.qq.com/s/Nc7Ee2UyrPg6hGseQUCzeg</a></li></ul></li><li><p>实习经历</p><ul><li><p>⭐ 我的第一份实习：<a href="https://mp.weixin.qq.com/s/SwGiRzyTkCOOCUXfXPR1Pw">https://mp.weixin.qq.com/s/SwGiRzyTkCOOCUXfXPR1Pw</a></p></li><li><p>⭐ 我的第二份实习，字节跳动：<a href="https://mp.weixin.qq.com/s/3q-YIfuZBjPjSnamNwOraw">https://mp.weixin.qq.com/s/3q-YIfuZBjPjSnamNwOraw</a></p></li></ul></li></ul><h4 id="知识总结"><a href="#知识总结" class="headerlink" title="知识总结"></a>知识总结</h4><ul><li>⭐ 牛客 Java 面试宝典：<a href="https://www.nowcoder.com/tutorial/94">https://www.nowcoder.com/tutorial/94</a></li><li>⭐ JavaGuide：<a href="https://snailclimb.gitee.io/javaguide/#/">https://snailclimb.gitee.io/javaguide/#/</a></li><li>⭐ CS-Notes：<a href="http://www.cyc2018.xyz/">http://www.cyc2018.xyz/</a></li><li>阿里 Java 技术图谱：<a href="https://developer.aliyun.com/graph/java">https://developer.aliyun.com/graph/java</a></li></ul><h4 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h4><ul><li><p>⭐ 牛客面经：<a href="https://www.nowcoder.com/discuss/experience?tagId=639">https://www.nowcoder.com/discuss/experience?tagId=639</a></p></li><li><p>秋招总结&amp;Java心得（双非硕士，已拿11+5家Offer）：<a href="https://www.nowcoder.com/discuss/327041">https://www.nowcoder.com/discuss/327041</a></p></li><li><p>被疫情逼得gap year的完全菜鸡的春招之路。：<a href="https://www.nowcoder.com/discuss/427812">https://www.nowcoder.com/discuss/427812</a></p></li><li><p>谨以此文纪念2019年春招：<a href="https://www.nowcoder.com/discuss/181212">https://www.nowcoder.com/discuss/181212</a></p></li><li><p>2019秋招经验谈：<a href="https://www.nowcoder.com/discuss/122463">https://www.nowcoder.com/discuss/122463</a></p></li><li><p>秋招心得：<a href="https://www.nowcoder.com/discuss/317888">https://www.nowcoder.com/discuss/317888</a></p></li><li><p>非科班本科菜鸡投的337家(Java后台)：<a href="https://www.nowcoder.com/discuss/133333">https://www.nowcoder.com/discuss/133333</a></p></li><li><p>2018 这一年：<a href="https://www.nowcoder.com/discuss/137593">https://www.nowcoder.com/discuss/137593</a></p></li><li><p>双非的秋招，感谢牛客：<a href="https://www.nowcoder.com/discuss/142181">https://www.nowcoder.com/discuss/142181</a></p></li><li><p>二本本科Java上岸(滴滴京东58)2019秋招心得+面经：<a href="https://www.nowcoder.com/discuss/333912">https://www.nowcoder.com/discuss/333912</a></p></li><li><p>碎碎念流水账特别长 of 自己的 Java 秋招：<a href="https://www.nowcoder.com/discuss/354154">https://www.nowcoder.com/discuss/354154</a></p></li><li><p>秋招之路：个人历程以及面经总结：<a href="https://www.nowcoder.com/discuss/344311">https://www.nowcoder.com/discuss/344311</a></p></li><li><p>【秋招面经总结】菜逼的坎坷之路（JAVA后台研发）：<a href="https://www.nowcoder.com/discuss/352030">https://www.nowcoder.com/discuss/352030</a></p></li><li><p>阿里11面+EMC+网易+美团面经：<a href="https://www.nowcoder.com/discuss/105302">https://www.nowcoder.com/discuss/105302</a></p></li><li><p>2018秋招阿里巴巴java笔试试题：<a href="https://www.nowcoder.com/discuss/67379">https://www.nowcoder.com/discuss/67379</a></p></li><li><p>我的秋招经验分享（已拿BAT头条网易）：<a href="https://www.nowcoder.com/discuss/117071">https://www.nowcoder.com/discuss/117071</a></p></li><li><p>20届的阿里 头条 网易  滴滴 百度 小米等Java面经：<a href="https://www.nowcoder.com/discuss/68289">https://www.nowcoder.com/discuss/68289</a></p></li><li><p>拿了5个offer，回馈牛友发一波面经（长文详细）：<a href="https://www.nowcoder.com/discuss/79051">https://www.nowcoder.com/discuss/79051</a></p></li><li><p>【总结】零基础学习一年拿到BAT三家offer：<a href="https://www.nowcoder.com/discuss/188241">https://www.nowcoder.com/discuss/188241</a></p></li><li><p>本科生秋招经验总结帖：<a href="https://www.nowcoder.com/discuss/296586">https://www.nowcoder.com/discuss/296586</a></p></li><li><p>双非渣硕校招总结+Java面经（网易阿里百度等）：<a href="https://www.nowcoder.com/discuss/134850">https://www.nowcoder.com/discuss/134850</a></p></li><li><p>2018秋招笔试科大讯飞java笔试试题：<a href="https://www.nowcoder.com/discuss/67684">https://www.nowcoder.com/discuss/67684</a></p></li><li><p>头条后台研发面经（共三面）：<a href="https://www.nowcoder.com/discuss/94233">https://www.nowcoder.com/discuss/94233</a></p></li><li><p>一点点小经验和几家Java面经：<a href="https://www.nowcoder.com/discuss/138434">https://www.nowcoder.com/discuss/138434</a></p></li><li><p>感谢牛客网！发一波面经！阿里、网易游戏、京东等offer。：<a href="https://www.nowcoder.com/discuss/101712">https://www.nowcoder.com/discuss/101712</a></p></li><li><p>非科班水硕的春招实习总结- Java 后台开发：<a href="https://www.nowcoder.com/discuss/186528">https://www.nowcoder.com/discuss/186528</a></p></li><li><p>十面阿里，七面头条，六个Offer，春招结束：<a href="https://www.nowcoder.com/discuss/80156">https://www.nowcoder.com/discuss/80156</a></p></li><li><p>成功上岸，最后一波回馈：<a href="https://www.nowcoder.com/discuss/176434">https://www.nowcoder.com/discuss/176434</a></p></li><li><p>【Java后台开发面经】阿里|网易|头条|腾讯|华为：<a href="https://www.nowcoder.com/discuss/108655">https://www.nowcoder.com/discuss/108655</a></p></li><li><p>三跨学生的面经（头条、拼多多、华为、vivo）：<a href="https://www.nowcoder.com/discuss/195640">https://www.nowcoder.com/discuss/195640</a></p></li></ul><h4 id="面试题解"><a href="#面试题解" class="headerlink" title="面试题解"></a>面试题解</h4><ul><li>⭐ 2021 最新 Java 笔试、面试题合集：<a href="https://pan.baidu.com/s/1DE4HAu-DS80n7VOaGpU_KQ">https://pan.baidu.com/s/1DE4HAu-DS80n7VOaGpU_KQ</a> （密码：lkw1）</li><li>牛客网 Java开发校招面试考点汇总（附面试题和答案）：<a href="https://www.nowcoder.com/discuss/161991">https://www.nowcoder.com/discuss/161991</a></li><li>50w字+的技术类校招面试题汇总（附答案+考点）：<a href="https://www.nowcoder.com/discuss/164726">https://www.nowcoder.com/discuss/164726</a></li><li>硬件，软件（后端开发，算法，数据分析等）历年企业笔试真题汇总：<a href="https://www.nowcoder.com/discuss/212783">https://www.nowcoder.com/discuss/212783</a></li></ul><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><ul><li><p>⭐ 尚硅谷 2021 逆袭版 Java 面试题第三季：<a href="https://www.bilibili.com/video/BV1Hy4y1B78T">https://www.bilibili.com/video/BV1Hy4y1B78T</a></p></li><li><p>⭐ 阿里大佬透彻讲解 Java 面试 500 道必考题：<a href="https://www.bilibili.com/video/BV1yU4y1J7Bb">https://www.bilibili.com/video/BV1yU4y1J7Bb</a></p></li></ul><h2 id="阶段-8：持续学习"><a href="#阶段-8：持续学习" class="headerlink" title="阶段 8：持续学习"></a>阶段 8：持续学习</h2><h3 id="目标-7"><a href="#目标-7" class="headerlink" title="目标"></a>目标</h3><p>持续追求技术的深度和广度，培养自己的 <strong>核心竞争力</strong> 和 <strong>不可替代性</strong> ，学无止境！</p><h3 id="学习建议-26"><a href="#学习建议-26" class="headerlink" title="学习建议"></a>学习建议</h3><p>自主学习，自主搜索教程，多看书，多阅读技术博客，多实践。</p><h3 id="学习方向"><a href="#学习方向" class="headerlink" title="学习方向"></a>学习方向</h3><h4 id="框架源码"><a href="#框架源码" class="headerlink" title="框架源码"></a>框架源码</h4><ul><li>Spring</li><li>SpringBoot</li><li>SpringMVC</li><li>MyBatis</li><li>Netty</li><li>Dubbo</li><li>SpringCloud</li></ul><h4 id="计算机原理"><a href="#计算机原理" class="headerlink" title="计算机原理"></a>计算机原理</h4><ul><li>《算法导论》：<a href="https://www.bilibili.com/video/av48922404">https://www.bilibili.com/video/av48922404</a></li><li>《现代操作系统》：<a href="https://www.bilibili.com/video/av9555596">https://www.bilibili.com/video/av9555596</a></li><li>《深入理解计算机系统》：<a href="https://www.bilibili.com/video/av31289365">https://www.bilibili.com/video/av31289365</a></li><li>《编译原理》： <a href="https://www.bilibili.com/video/av17649289">https://www.bilibili.com/video/av17649289</a></li><li>《计算机网络：自顶向下方法》：<a href="https://www.bilibili.com/video/BV1JV411t7ow">https://www.bilibili.com/video/BV1JV411t7ow</a></li><li>《计算机程序的构造和解释》：<a href="https://www.bilibili.com/video/av8515129">https://www.bilibili.com/video/av8515129</a></li><li>《数据库系统概论》：<a href="https://www.bilibili.com/video/BV1G54y1d7ZK">https://www.bilibili.com/video/BV1G54y1d7ZK</a></li></ul><h4 id="数据库-中间件-分布式"><a href="#数据库-中间件-分布式" class="headerlink" title="数据库 / 中间件 / 分布式"></a>数据库 / 中间件 / 分布式</h4><ul><li>数据库<ul><li>MySQL</li><li>PostgreSQL</li></ul></li><li>缓存<ul><li>Redis</li></ul></li><li>队列<ul><li>Apache Kafka</li><li>Apache Pulsar</li></ul></li><li>搜索引擎<ul><li>Elastic Stack<ul><li>Elasticsearch</li><li>logstash</li><li>kibana</li><li>beats</li></ul></li></ul></li><li>容器<ul><li>Docker</li><li>K8S</li></ul></li></ul><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>广告系统</li><li>电商系统</li><li>搜索系统</li><li>支付转账</li><li>游戏后台</li><li>即时通讯</li><li>社交系统</li><li>CMS 系统</li><li>ERP 系统</li><li>OA 系统</li><li>代码生成</li><li>权限管理</li><li>秒杀活动</li></ul><h4 id="架构设计-1"><a href="#架构设计-1" class="headerlink" title="架构设计"></a>架构设计</h4><p>同阶段 6 架构设计部分</p><h4 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h4><ul><li>5V 特点</li><li>Hadoop</li><li>HDFS</li><li>MapReduce</li><li>Spark</li><li>Flink</li><li>Storm</li><li>Hive</li><li>HBase</li><li>Druid</li><li>Kylin</li><li>Pig</li><li>Mahout</li></ul><h4 id="前沿技术"><a href="#前沿技术" class="headerlink" title="前沿技术"></a>前沿技术</h4><ul><li>云原生：<a href="https://www.jianshu.com/p/a37baa7c3eff">https://www.jianshu.com/p/a37baa7c3eff</a><ul><li>Quasar Framework：<a href="http://www.quasarchs.com/">http://www.quasarchs.com/</a></li></ul></li><li>服务网格：<a href="https://www.redhat.com/zh/topics/microservices/what-is-a-service-mesh">https://www.redhat.com/zh/topics/microservices/what-is-a-service-mesh</a><ul><li>istio：<a href="https://github.com/istio/istio">https://github.com/istio/istio</a></li></ul></li><li>GraalVM：<a href="https://juejin.cn/post/6850418120570437646">https://juejin.cn/post/6850418120570437646</a> （高性能的通用虚拟机）<ul><li>官网：<a href="https://www.graalvm.org/">https://www.graalvm.org/</a></li></ul></li><li>ZGC：<a href="https://juejin.cn/post/6859276583656980493">https://juejin.cn/post/6859276583656980493</a> （新一代垃圾回收器）<ul><li>官网：<a href="http://openjdk.java.net/projects/zgc/">http://openjdk.java.net/projects/zgc/</a></li></ul></li></ul><h3 id="自学-Java-专题资源"><a href="#自学-Java-专题资源" class="headerlink" title="自学 Java 专题资源"></a>自学 Java 专题资源</h3><ul><li>⭐ GitHub Java 专区：<a href="https://github.com/topics/java">https://github.com/topics/java</a></li><li>⭐ GitHub Java 合集：<a href="https://github.com/akullpp/awesome-java">https://github.com/akullpp/awesome-java</a></li><li>StackOverflow：<a href="https://stackoverflow.com/questions/tagged/java">https://stackoverflow.com/questions/tagged/java</a> （解决问题必备）</li><li>⭐ 掘金 Java 专区：<a href="https://juejin.cn/tag/Java">https://juejin.cn/tag/Java</a></li><li>美团技术团队：<a href="https://tech.meituan.com/">https://tech.meituan.com/</a></li><li>阿里技术团队：<a href="https://102.alibaba.com/tech/list/">https://102.alibaba.com/tech/list/</a></li><li>有赞技术团队：<a href="https://tech.youzan.com/tag/back-end/">https://tech.youzan.com/tag/back-end/</a></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="程序员重要能力"><a href="#程序员重要能力" class="headerlink" title="程序员重要能力"></a>程序员重要能力</h3><p>想成为大佬，就是要通过学习和积累，提升自己的各方面能力，比较抽象，共勉！</p><ol><li><p>团队协作能力</p></li><li><p>高效沟通能力</p></li><li><p>需求分析能力</p></li><li><p>架构设计能力</p></li><li><p>抽象复用能力</p></li><li><p>独立创造能力</p></li><li><p>问题解决能力</p></li><li><p>归纳总结能力</p></li><li><p>自主学习能力</p></li><li><p>工具利用能力</p></li><li><p>高效编码能力</p></li><li><p>信息检索能力</p></li><li><p>开源建设能力</p></li><li><p>源码阅读能力</p></li><li><p>自测审查能力</p></li><li><p>文档编写能力</p></li><li><p>知识表达能力</p></li><li><p>绘图描述能力</p></li><li><p>兴趣驱动（长期学习能力）</p></li><li><p>保持好奇心</p></li><li><p>其他（狗头）</p><ul><li><p>复制粘贴能力</p></li><li><p>打架能力</p></li><li><p>PPT 制作能力</p></li></ul></li></ol><h3 id="编程误区"><a href="#编程误区" class="headerlink" title="编程误区"></a>编程误区</h3><ol><li>我不适合学编程？❌（兴趣比天赋更重要，不要怀疑自己）</li><li>忽视基础，急于求成 ❌（勿以浮沙筑高台）</li><li>数学、英语差，就学不好编程 ❌（开发工作基本不用高等数学，英语可以使用翻译软件、工作中提升）</li><li>编程时，刻意记忆代码 ❌（知道每行代码的意义，能看文档写出来就行）</li><li>每行代码都要追求完美 ❌（何为完美？每个人的定义不同）</li><li>用百度搜索、复制粘贴的都是菜鸡程序员 ❌（艹）</li><li>我做的项目太小了，就不整理了 ❌（自己的每个项目都要整理，可以记录自己的成长）</li><li>跟别人交流很麻烦，我更愿意自己写代码 ❌（1 + 1 &gt; 2，切勿闭门造车，不过也要找到合适的同学去交流）</li><li>做别人做过的项目没有意义 ❌（连别人做过的项目都做不出，还想造新轮子？）</li><li>遇到 Bug，想办法绕过而不是寻找解决方案 ❌（Bug 最能使人成长）</li><li>遇到问题，第一时间去问别人而非自己解决 ❌（建议阅读《提问的智慧》）</li><li>花了很多时间、看了很多书，就能学好编程 ❌（编程最忌讳纸上谈兵）</li><li>只向前学习，不整理学过的知识 ❌（建议每学完一个知识，都去回想、总结、写心得，这个时间的花费是值得的）</li><li>单元测试不重要 ❌（一棍打死）</li><li>写文档不重要 ❌（一棍打死）</li><li>和我无关的工作，就不需要了解 ❌（了解团队、同行是很重要的，全局视野）</li><li>收藏的资源从来不看，就不收藏了 ❌（万一以后用到了呢？）</li><li>不去考虑需求的价值，而是一味寻求解决方案 ❌（不要成为需求机器，要有自己的独立思考）</li></ol><h3 id="高效法则"><a href="#高效法则" class="headerlink" title="高效法则"></a>高效法则</h3><ol><li>不要过分追求完美，完成比完美更重要。</li><li>有现成的代码，就不要自己写，避免重复劳动（学习除外）。</li><li>学会使用软件及快捷键来提升自己的编码效率。</li><li>做项目前，要先想清楚怎么做，做好充分的预研和设计。这样不仅便于后续的程序扩展，也能避免无意义的返工。</li><li>将大的目标进行拆解，做好计划，分清主次。不要因为觉得目标遥不可及而拖延，也不要盲目乐观而松懈。</li><li>养成好的作息习惯，找到自己适合工作的黄金时间。</li><li>记性不好，就多记录、多总结、定期复习。哪怕实在记不住，也可以借助文档、收藏夹软件来当自己的第二大脑。</li><li>积累属于自己的工具库，配合搜索软件实现随用随取。</li><li>多和其他同行交流或订阅技术推送，拓宽知识渠道，从而了解更多的工具和方法。有些东西你只要听说过，要用时也许就能节省大量查找时间。</li><li>找到让自己进入专注做事的状态的方法，比如戴上耳机、嚼口香糖等。</li><li>做事高效，离不开经验的积累，因此要多写代码、多做项目。</li></ol><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol><li><p>按照这份路线学习，每天要学多少个小时，总共要学多久？</p><p>回答：每个人学习能力不同，当然没有固定标准。我当时平均每天可以学习 6 个小时，寒暑假能保证 8 小时以上的学习，路线中的时长是我当时学习时长 * 1.5 倍的参考值。实话说，我的学习效率真的不高，对编程感兴趣，多学就好了。与其纠结这个时长，倒不妨多抽点时间，每天多学一点。</p></li><li><p>这份路线上推荐的资源，鱼皮都看完了么？</p><p>回答：我是特么神仙啊？怎么可能都看完了！这份路线的本质是以网上现有的、死板的 Java 大学习框架为基础，结合我自己实际学习的知识、经验和感悟给它注入灵魂，从而希望给大家带来更大的帮助和价值。路线中的资源都是利用我自己的资源检索能力和渠道，通过试看、反复对比和参考评价精选出来的，不是主观臆断、空穴来风。</p></li><li><p>我学到这份路线的哪个位置，可以找工作？</p><p>回答：这和你自己的领悟能力和教育背景有关。夸张点说，有些清华大学的同学，可能之前都没学过 Java，照样能找到大厂 Java 开发工作。学到同一阶段的同学，学习过程中的认真程度、积累总结数、做项目个数、基础学习的好坏不同，找到的工作肯定也不同。但一般情况下，想要进大厂，建议至少学完阶段 4 的微服务部分，然后去做一个完整的项目，用上之前学习的技术；不想进大厂的同学，学完第 3 阶段后，学下缓存和队列，一般也能找到 Java 开发的工作。</p></li><li><p>学完这份路线就能进大厂么？</p><p>回答：你先学完，再问这个问题。没有绝对进大厂的保证，但是相信我，把这份路线上的大部分知识学了，再做做项目，哪怕进不了大厂，你拿到的薪水也绝对比松散学习的同学高！</p></li><li><p>我可以相信你么？</p><p>回答：不要相信我，应该相信你自己。想进大厂，就不要怀疑自己的能力！</p></li></ol><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>觉得看文字累的朋友，欢迎看下视频版，带大家导读一下：<a href="https://www.bilibili.com/video/BV1Qf4y1K7ff/">https://www.bilibili.com/video/BV1Qf4y1K7ff/</a></p><p>以上就是鱼皮熬了几天大夜、结合个人经验、并且参考了大量网上的文章和评论总结而成的学习路线，真的是非常不容易，如果大家觉得满意请务必 <strong>三连</strong> 支持下。</p><p>我是鱼皮，持续分享编程干货的程序员，欢迎关注，下期再见~</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2023/08/07/MySQL%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/07/MySQL%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL笔记"><a href="#MySQL笔记" class="headerlink" title="MySQL笔记"></a>MySQL笔记</h1><h2 id="登录和退出MySQL服务器"><a href="#登录和退出MySQL服务器" class="headerlink" title="登录和退出MySQL服务器"></a>登录和退出MySQL服务器</h2><pre class=" language-shell"><code class="language-shell"># 登录MySQL$ mysql -u root -p12345612# 退出MySQL数据库服务器exit;</code></pre><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><pre class=" language-mysql"><code class="language-mysql">-- 显示所有数据库show databases;-- 创建数据库CREATE DATABASE test;-- 切换数据库use test;-- 显示数据库中的所有表show tables;-- 创建数据表CREATE TABLE pet (    name VARCHAR(20),    owner VARCHAR(20),    species VARCHAR(20),    sex CHAR(1),    birth DATE,    death DATE);-- 查看数据表结构-- describe pet;desc pet;-- 查询表SELECT * from pet;-- 插入数据INSERT INTO pet VALUES ('puffball', 'Diane', 'hamster', 'f', '1990-03-30', NULL);-- 修改数据UPDATE pet SET name = 'squirrel' where owner = 'Diane';-- 删除数据DELETE FROM pet where name = 'squirrel';-- 删除表DROP TABLE myorder;</code></pre><h2 id="建表约束"><a href="#建表约束" class="headerlink" title="建表约束"></a>建表约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><pre class=" language-mysql"><code class="language-mysql">-- 主键约束-- 使某个字段不重复且不得为空，确保表内所有数据的唯一性。CREATE TABLE user (    id INT PRIMARY KEY,    name VARCHAR(20));-- 联合主键-- 联合主键中的每个字段都不能为空，并且加起来不能和已设置的联合主键重复。CREATE TABLE user (    id INT,    name VARCHAR(20),    password VARCHAR(20),    PRIMARY KEY(id, name));-- 自增约束-- 自增约束的主键由系统自动递增分配。CREATE TABLE user (    id INT PRIMARY KEY AUTO_INCREMENT,    name VARCHAR(20));-- 添加主键约束-- 如果忘记设置主键，还可以通过SQL语句设置（两种方式）：ALTER TABLE user ADD PRIMARY KEY(id);ALTER TABLE user MODIFY id INT PRIMARY KEY;-- 删除主键ALTER TABLE user drop PRIMARY KEY;</code></pre><h3 id="唯一主键"><a href="#唯一主键" class="headerlink" title="唯一主键"></a>唯一主键</h3><pre class=" language-mysql"><code class="language-mysql">-- 建表时创建唯一主键CREATE TABLE user (    id INT,    name VARCHAR(20),    UNIQUE(name));-- 添加唯一主键-- 如果建表时没有设置唯一建，还可以通过SQL语句设置（两种方式）：ALTER TABLE user ADD UNIQUE(name);ALTER TABLE user MODIFY name VARCHAR(20) UNIQUE;-- 删除唯一主键ALTER TABLE user DROP INDEX name;</code></pre><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><pre class=" language-mysql"><code class="language-mysql">-- 建表时添加非空约束-- 约束某个字段不能为空CREATE TABLE user (    id INT,    name VARCHAR(20) NOT NULL);-- 移除非空约束ALTER TABLE user MODIFY name VARCHAR(20);</code></pre><h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><pre class=" language-mysql"><code class="language-mysql">-- 建表时添加默认约束-- 约束某个字段的默认值CREATE TABLE user2 (    id INT,    name VARCHAR(20),    age INT DEFAULT 10);-- 移除非空约束ALTER TABLE user MODIFY age INT;</code></pre><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><pre class=" language-mysql"><code class="language-mysql">-- 班级CREATE TABLE classes (    id INT PRIMARY KEY,    name VARCHAR(20));-- 学生表CREATE TABLE students (    id INT PRIMARY KEY,    name VARCHAR(20),    -- 这里的 class_id 要和 classes 中的 id 字段相关联    class_id INT,    -- 表示 class_id 的值必须来自于 classes 中的 id 字段值    FOREIGN KEY(class_id) REFERENCES classes(id));-- 1. 主表（父表）classes 中没有的数据值，在副表（子表）students 中，是不可以使用的；-- 2. 主表中的记录被副表引用时，主表不可以被删除。</code></pre><h2 id="数据库的三大设计范式"><a href="#数据库的三大设计范式" class="headerlink" title="数据库的三大设计范式"></a>数据库的三大设计范式</h2><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><p>只要字段值还可以继续拆分，就不满足第一范式。</p><p>范式设计得越详细，对某些实际操作可能会更好，但并非都有好处，需要对项目的实际情况进行设定。</p><h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><p>在满足第一范式的前提下，其他列都必须完全依赖于主键列。如果出现不完全依赖，只可能发生在联合主键的情况下：</p><pre class=" language-mysql"><code class="language-mysql">-- 订单表CREATE TABLE myorder (    product_id INT,    customer_id INT,    product_name VARCHAR(20),    customer_name VARCHAR(20),    PRIMARY KEY (product_id, customer_id));</code></pre><p>实际上，在这张订单表中，<code>product_name</code> 只依赖于 <code>product_id</code> ，<code>customer_name</code> 只依赖于 <code>customer_id</code> 。也就是说，<code>product_name</code> 和 <code>customer_id</code> 是没用关系的，<code>customer_name</code> 和 <code>product_id</code> 也是没有关系的。</p><p>这就不满足第二范式：其他列都必须完全依赖于主键列！</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE myorder (    order_id INT PRIMARY KEY,    product_id INT,    customer_id INT);CREATE TABLE product (    id INT PRIMARY KEY,    name VARCHAR(20));CREATE TABLE customer (    id INT PRIMARY KEY,    name VARCHAR(20));</code></pre><p>拆分之后，<code>myorder</code> 表中的 <code>product_id</code> 和 <code>customer_id</code> 完全依赖于 <code>order_id</code> 主键，而 <code>product</code> 和 <code>customer</code> 表中的其他字段又完全依赖于主键。满足了第二范式的设计！</p><h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><p>在满足第二范式的前提下，除了主键列之外，其他列之间不能有传递依赖关系。</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE myorder (    order_id INT PRIMARY KEY,    product_id INT,    customer_id INT,    customer_phone VARCHAR(15));</code></pre><p>表中的 <code>customer_phone</code> 有可能依赖于 <code>order_id</code> 、 <code>customer_id</code> 两列，也就不满足了第三范式的设计：其他列之间不能有传递依赖关系。</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE myorder (    order_id INT PRIMARY KEY,    product_id INT,    customer_id INT);CREATE TABLE customer (    id INT PRIMARY KEY,    name VARCHAR(20),    phone VARCHAR(15));</code></pre><p>修改后就不存在其他列之间的传递依赖关系，其他列都只依赖于主键列，满足了第三范式的设计！</p><h2 id="查询练习"><a href="#查询练习" class="headerlink" title="查询练习"></a>查询练习</h2><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><pre class=" language-mysql"><code class="language-mysql">-- 创建数据库CREATE DATABASE select_test;-- 切换数据库USE select_test;-- 创建学生表CREATE TABLE student (    no VARCHAR(20) PRIMARY KEY,    name VARCHAR(20) NOT NULL,    sex VARCHAR(10) NOT NULL,    birthday DATE, -- 生日    class VARCHAR(20) -- 所在班级);-- 创建教师表CREATE TABLE teacher (    no VARCHAR(20) PRIMARY KEY,    name VARCHAR(20) NOT NULL,    sex VARCHAR(10) NOT NULL,    birthday DATE,    profession VARCHAR(20) NOT NULL, -- 职称    department VARCHAR(20) NOT NULL -- 部门);-- 创建课程表CREATE TABLE course (    no VARCHAR(20) PRIMARY KEY,    name VARCHAR(20) NOT NULL,    t_no VARCHAR(20) NOT NULL, -- 教师编号    -- 表示该 tno 来自于 teacher 表中的 no 字段值    FOREIGN KEY(t_no) REFERENCES teacher(no) );-- 成绩表CREATE TABLE score (    s_no VARCHAR(20) NOT NULL, -- 学生编号    c_no VARCHAR(20) NOT NULL, -- 课程号    degree DECIMAL,    -- 成绩    -- 表示该 s_no, c_no 分别来自于 student, course 表中的 no 字段值    FOREIGN KEY(s_no) REFERENCES student(no),        FOREIGN KEY(c_no) REFERENCES course(no),    -- 设置 s_no, c_no 为联合主键    PRIMARY KEY(s_no, c_no));-- 查看所有表SHOW TABLES;-- 添加学生表数据INSERT INTO student VALUES('101', '曾华', '男', '1977-09-01', '95033');INSERT INTO student VALUES('102', '匡明', '男', '1975-10-02', '95031');INSERT INTO student VALUES('103', '王丽', '女', '1976-01-23', '95033');INSERT INTO student VALUES('104', '李军', '男', '1976-02-20', '95033');INSERT INTO student VALUES('105', '王芳', '女', '1975-02-10', '95031');INSERT INTO student VALUES('106', '陆军', '男', '1974-06-03', '95031');INSERT INTO student VALUES('107', '王尼玛', '男', '1976-02-20', '95033');INSERT INTO student VALUES('108', '张全蛋', '男', '1975-02-10', '95031');INSERT INTO student VALUES('109', '赵铁柱', '男', '1974-06-03', '95031');-- 添加教师表数据INSERT INTO teacher VALUES('804', '李诚', '男', '1958-12-02', '副教授', '计算机系');INSERT INTO teacher VALUES('856', '张旭', '男', '1969-03-12', '讲师', '电子工程系');INSERT INTO teacher VALUES('825', '王萍', '女', '1972-05-05', '助教', '计算机系');INSERT INTO teacher VALUES('831', '刘冰', '女', '1977-08-14', '助教', '电子工程系');-- 添加课程表数据INSERT INTO course VALUES('3-105', '计算机导论', '825');INSERT INTO course VALUES('3-245', '操作系统', '804');INSERT INTO course VALUES('6-166', '数字电路', '856');INSERT INTO course VALUES('9-888', '高等数学', '831');-- 添加添加成绩表数据INSERT INTO score VALUES('103', '3-105', '92');INSERT INTO score VALUES('103', '3-245', '86');INSERT INTO score VALUES('103', '6-166', '85');INSERT INTO score VALUES('105', '3-105', '88');INSERT INTO score VALUES('105', '3-245', '75');INSERT INTO score VALUES('105', '6-166', '79');INSERT INTO score VALUES('109', '3-105', '76');INSERT INTO score VALUES('109', '3-245', '68');INSERT INTO score VALUES('109', '6-166', '81');-- 查看表结构SELECT * FROM course;SELECT * FROM score;SELECT * FROM student;SELECT * FROM teacher;</code></pre><h3 id="1-到-10"><a href="#1-到-10" class="headerlink" title="1 到 10"></a>1 到 10</h3><pre class=" language-mysql"><code class="language-mysql">-- 查询 student 表的所有行SELECT * FROM student;-- 查询 student 表中的 name、sex 和 class 字段的所有行SELECT name, sex, class FROM student;-- 查询 teacher 表中不重复的 department 列-- department: 去重查询SELECT DISTINCT department FROM teacher;-- 查询 score 表中成绩在60-80之间的所有行（区间查询和运算符查询）-- BETWEEN xx AND xx: 查询区间, AND 表示 "并且"SELECT * FROM score WHERE degree BETWEEN 60 AND 80;SELECT * FROM score WHERE degree > 60 AND degree < 80;-- 查询 score 表中成绩为 85, 86 或 88 的行-- IN: 查询规定中的多个值SELECT * FROM score WHERE degree IN (85, 86, 88);-- 查询 student 表中 '95031' 班或性别为 '女' 的所有行-- or: 表示或者关系SELECT * FROM student WHERE class = '95031' or sex = '女';-- 以 class 降序的方式查询 student 表的所有行-- DESC: 降序，从高到低-- ASC（默认）: 升序，从低到高SELECT * FROM student ORDER BY class DESC;SELECT * FROM student ORDER BY class ASC;-- 以 c_no 升序、degree 降序查询 score 表的所有行SELECT * FROM score ORDER BY c_no ASC, degree DESC;-- 查询 "95031" 班的学生人数-- COUNT: 统计SELECT COUNT(*) FROM student WHERE class = '95031';-- 查询 score 表中的最高分的学生学号和课程编号（子查询或排序查询）。-- (SELECT MAX(degree) FROM score): 子查询，算出最高分SELECT s_no, c_no FROM score WHERE degree = (SELECT MAX(degree) FROM score);--  排序查询-- LIMIT r, n: 表示从第r行开始，查询n条数据SELECT s_no, c_no, degree FROM score ORDER BY degree DESC LIMIT 0, 1;</code></pre><h3 id="分组计算平均成绩"><a href="#分组计算平均成绩" class="headerlink" title="分组计算平均成绩"></a>分组计算平均成绩</h3><p><strong>查询每门课的平均成绩。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- AVG: 平均值SELECT AVG(degree) FROM score WHERE c_no = '3-105';SELECT AVG(degree) FROM score WHERE c_no = '3-245';SELECT AVG(degree) FROM score WHERE c_no = '6-166';-- GROUP BY: 分组查询SELECT c_no, AVG(degree) FROM score GROUP BY c_no;</code></pre><h3 id="分组条件与模糊查询"><a href="#分组条件与模糊查询" class="headerlink" title="分组条件与模糊查询"></a>分组条件与模糊查询</h3><p><strong>查询 <code>score</code> 表中至少有 2 名学生选修，并以 3 开头的课程的平均分数。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score;-- c_no 课程编号+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>分析表发现，至少有 2 名学生选修的课程是 <code>3-105</code> 、<code>3-245</code> 、<code>6-166</code> ，以 3 开头的课程是 <code>3-105</code> 、<code>3-245</code> 。也就是说，我们要查询所有 <code>3-105</code> 和 <code>3-245</code> 的 <code>degree</code> 平均分。</p><pre class=" language-mysql"><code class="language-mysql">-- 首先把 c_no, AVG(degree) 通过分组查询出来SELECT c_no, AVG(degree) FROM score GROUP BY c_no+-------+-------------+| c_no  | AVG(degree) |+-------+-------------+| 3-105 |     85.3333 || 3-245 |     76.3333 || 6-166 |     81.6667 |+-------+-------------+-- 再查询出至少有 2 名学生选修的课程-- HAVING: 表示持有HAVING COUNT(c_no) >= 2-- 并且是以 3 开头的课程-- LIKE 表示模糊查询，"%" 是一个通配符，匹配 "3" 后面的任意字符。AND c_no LIKE '3%';-- 把前面的SQL语句拼接起来，-- 后面加上一个 COUNT(*)，表示将每个分组的个数也查询出来。SELECT c_no, AVG(degree), COUNT(*) FROM score GROUP BY c_noHAVING COUNT(c_no) >= 2 AND c_no LIKE '3%';+-------+-------------+----------+| c_no  | AVG(degree) | COUNT(*) |+-------+-------------+----------+| 3-105 |     85.3333 |        3 || 3-245 |     76.3333 |        3 |+-------+-------------+----------+</code></pre><h3 id="多表查询-1"><a href="#多表查询-1" class="headerlink" title="多表查询 - 1"></a>多表查询 - 1</h3><p><strong>查询所有学生的 <code>name</code>，以及该学生在 <code>score</code> 表中对应的 <code>c_no</code> 和 <code>degree</code> 。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT no, name FROM student;+-----+-----------+| no  | name      |+-----+-----------+| 101 | 曾华      || 102 | 匡明      || 103 | 王丽      || 104 | 李军      || 105 | 王芳      || 106 | 陆军      || 107 | 王尼玛    || 108 | 张全蛋    || 109 | 赵铁柱    |+-----+-----------+SELECT s_no, c_no, degree FROM score;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>通过分析可以发现，只要把 <code>score</code> 表中的 <code>s_no</code> 字段值替换成 <code>student</code> 表中对应的 <code>name</code> 字段值就可以了，如何做呢？</p><pre class=" language-mysql"><code class="language-mysql">-- FROM...: 表示从 student, score 表中查询-- WHERE 的条件表示为，只有在 student.no 和 score.s_no 相等时才显示出来。SELECT name, c_no, degree FROM student, score WHERE student.no = score.s_no;+-----------+-------+--------+| name      | c_no  | degree |+-----------+-------+--------+| 王丽      | 3-105 |     92 || 王丽      | 3-245 |     86 || 王丽      | 6-166 |     85 || 王芳      | 3-105 |     88 || 王芳      | 3-245 |     75 || 王芳      | 6-166 |     79 || 赵铁柱    | 3-105 |     76 || 赵铁柱    | 3-245 |     68 || 赵铁柱    | 6-166 |     81 |+-----------+-------+--------+</code></pre><h3 id="多表查询-2"><a href="#多表查询-2" class="headerlink" title="多表查询 - 2"></a>多表查询 - 2</h3><p><strong>查询所有学生的 <code>no</code> 、课程名称 ( <code>course</code> 表中的 <code>name</code> ) 和成绩 ( <code>score</code> 表中的 <code>degree</code> ) 列。</strong></p><p>只有 <code>score</code> 关联学生的 <code>no</code> ，因此只要查询 <code>score</code> 表，就能找出所有和学生相关的 <code>no</code> 和 <code>degree</code> ：</p><pre class=" language-mysql"><code class="language-mysql">SELECT s_no, c_no, degree FROM score;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>然后查询 <code>course</code> 表：</p><pre class=" language-mysql"><code class="language-mysql">+-------+-----------------+| no    | name            |+-------+-----------------+| 3-105 | 计算机导论      || 3-245 | 操作系统        || 6-166 | 数字电路        || 9-888 | 高等数学        |+-------+-----------------+</code></pre><p>只要把 <code>score</code> 表中的 <code>c_no</code> 替换成 <code>course</code> 表中对应的 <code>name</code> 字段值就可以了。</p><pre class=" language-mysql"><code class="language-mysql">-- 增加一个查询字段 name，分别从 score、course 这两个表中查询。-- as 表示取一个该字段的别名。SELECT s_no, name as c_name, degree FROM score, courseWHERE score.c_no = course.no;+------+-----------------+--------+| s_no | c_name          | degree |+------+-----------------+--------+| 103  | 计算机导论      |     92 || 105  | 计算机导论      |     88 || 109  | 计算机导论      |     76 || 103  | 操作系统        |     86 || 105  | 操作系统        |     75 || 109  | 操作系统        |     68 || 103  | 数字电路        |     85 || 105  | 数字电路        |     79 || 109  | 数字电路        |     81 |+------+-----------------+--------+</code></pre><h3 id="三表关联查询"><a href="#三表关联查询" class="headerlink" title="三表关联查询"></a>三表关联查询</h3><p><strong>查询所有学生的 <code>name</code> 、课程名 ( <code>course</code> 表中的 <code>name</code> ) 和 <code>degree</code> 。</strong></p><p>只有 <code>score</code> 表中关联学生的学号和课堂号，我们只要围绕着 <code>score</code> 这张表查询就好了。</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>只要把 <code>s_no</code> 和 <code>c_no</code> 替换成 <code>student</code> 和 <code>srouse</code> 表中对应的 <code>name</code> 字段值就好了。</p><p>首先把 <code>s_no</code> 替换成 <code>student</code> 表中的 <code>name</code> 字段：</p><pre class=" language-mysql"><code class="language-mysql">SELECT name, c_no, degree FROM student, score WHERE student.no = score.s_no;+-----------+-------+--------+| name      | c_no  | degree |+-----------+-------+--------+| 王丽      | 3-105 |     92 || 王丽      | 3-245 |     86 || 王丽      | 6-166 |     85 || 王芳      | 3-105 |     88 || 王芳      | 3-245 |     75 || 王芳      | 6-166 |     79 || 赵铁柱    | 3-105 |     76 || 赵铁柱    | 3-245 |     68 || 赵铁柱    | 6-166 |     81 |+-----------+-------+--------+</code></pre><p>再把 <code>c_no</code> 替换成 <code>course</code> 表中的 <code>name</code> 字段：</p><pre class=" language-mysql"><code class="language-mysql">-- 课程表SELECT no, name FROM course;+-------+-----------------+| no    | name            |+-------+-----------------+| 3-105 | 计算机导论      || 3-245 | 操作系统        || 6-166 | 数字电路        || 9-888 | 高等数学        |+-------+-----------------+-- 由于字段名存在重复，使用 "表名.字段名 as 别名" 代替。SELECT student.name as s_name, course.name as c_name, degree FROM student, score, courseWHERE student.NO = score.s_noAND score.c_no = course.no;</code></pre><h3 id="子查询加分组求平均分"><a href="#子查询加分组求平均分" class="headerlink" title="子查询加分组求平均分"></a>子查询加分组求平均分</h3><p><strong>查询 <code>95031</code> 班学生每门课程的平均成绩。</strong></p><p>在 <code>score</code> 表中根据 <code>student</code>  表的学生编号筛选出学生的课堂号和成绩：</p><pre class=" language-mysql"><code class="language-mysql">-- IN (..): 将筛选出的学生号当做 s_no 的条件查询SELECT s_no, c_no, degree FROM scoreWHERE s_no IN (SELECT no FROM student WHERE class = '95031');+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><p>这时只要将 <code>c_no</code> 分组一下就能得出 <code>95031</code> 班学生每门课的平均成绩：</p><pre class=" language-mysql"><code class="language-mysql">SELECT c_no, AVG(degree) FROM scoreWHERE s_no IN (SELECT no FROM student WHERE class = '95031')GROUP BY c_no;+-------+-------------+| c_no  | AVG(degree) |+-------+-------------+| 3-105 |     82.0000 || 3-245 |     71.5000 || 6-166 |     80.0000 |+-------+-------------+</code></pre><h3 id="子查询-1"><a href="#子查询-1" class="headerlink" title="子查询 - 1"></a>子查询 - 1</h3><p><strong>查询在 <code>3-105</code> 课程中，所有成绩高于 <code>109</code> 号同学的记录。</strong></p><p>首先筛选出课堂号为 <code>3-105</code> ，在找出所有成绩高于 <code>109</code> 号同学的的行。</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score WHERE c_no = '3-105'AND degree > (SELECT degree FROM score WHERE s_no = '109' AND c_no = '3-105');</code></pre><h3 id="子查询-2"><a href="#子查询-2" class="headerlink" title="子查询 - 2"></a>子查询 - 2</h3><p><strong>查询所有成绩高于 <code>109</code> 号同学的 <code>3-105</code> 课程成绩记录。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 不限制课程号，只要成绩大于109号同学的3-105课程成绩就可以。SELECT * FROM scoreWHERE degree > (SELECT degree FROM score WHERE s_no = '109' AND c_no = '3-105');</code></pre><h3 id="YEAR-函数与带-IN-关键字查询"><a href="#YEAR-函数与带-IN-关键字查询" class="headerlink" title="YEAR 函数与带 IN 关键字查询"></a>YEAR 函数与带 IN 关键字查询</h3><p><strong>查询所有和 <code>101</code> 、<code>108</code> 号学生同年出生的 <code>no</code> 、<code>name</code> 、<code>birthday</code> 列。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- YEAR(..): 取出日期中的年份SELECT no, name, birthday FROM studentWHERE YEAR(birthday) IN (SELECT YEAR(birthday) FROM student WHERE no IN (101, 108));</code></pre><h3 id="多层嵌套子查询"><a href="#多层嵌套子查询" class="headerlink" title="多层嵌套子查询"></a>多层嵌套子查询</h3><p><strong>查询 <code>&#39;张旭&#39;</code> 教师任课的学生成绩表。</strong></p><p>首先找到教师编号：</p><pre class=" language-mysql"><code class="language-mysql">SELECT NO FROM teacher WHERE NAME = '张旭'</code></pre><p>通过 <code>sourse</code> 表找到该教师课程号：</p><pre class=" language-mysql"><code class="language-mysql">SELECT NO FROM course WHERE t_no = ( SELECT NO FROM teacher WHERE NAME = '张旭' );</code></pre><p>通过筛选出的课程号查询成绩表：</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score WHERE c_no = (    SELECT no FROM course WHERE t_no = (         SELECT no FROM teacher WHERE NAME = '张旭'     ));</code></pre><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p><strong>查询某选修课程多于5个同学的教师姓名。</strong></p><p>首先在 <code>teacher</code> 表中，根据 <code>no</code> 字段来判断该教师的同一门课程是否有至少5名学员选修：</p><pre class=" language-mysql"><code class="language-mysql">-- 查询 teacher 表SELECT no, name FROM teacher;+-----+--------+| no  | name   |+-----+--------+| 804 | 李诚   || 825 | 王萍   || 831 | 刘冰   || 856 | 张旭   |+-----+--------+SELECT name FROM teacher WHERE no IN (    -- 在这里找到对应的条件);</code></pre><p>查看和教师编号有有关的表的信息：</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM course;-- t_no: 教师编号+-------+-----------------+------+| no    | name            | t_no |+-------+-----------------+------+| 3-105 | 计算机导论      | 825  || 3-245 | 操作系统        | 804  || 6-166 | 数字电路        | 856  || 9-888 | 高等数学        | 831  |+-------+-----------------+------+</code></pre><p>我们已经找到和教师编号有关的字段就在 <code>course</code> 表中，但是还无法知道哪门课程至少有5名学生选修，所以还需要根据 <code>score</code> 表来查询：</p><pre class=" language-mysql"><code class="language-mysql">-- 在此之前向 score 插入一些数据，以便丰富查询条件。INSERT INTO score VALUES ('101', '3-105', '90');INSERT INTO score VALUES ('102', '3-105', '91');INSERT INTO score VALUES ('104', '3-105', '89');-- 查询 score 表SELECT * FROM score;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 101  | 3-105 |     90 || 102  | 3-105 |     91 || 103  | 3-105 |     92 || 103  | 3-245 |     86 || 103  | 6-166 |     85 || 104  | 3-105 |     89 || 105  | 3-105 |     88 || 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+-- 在 score 表中将 c_no 作为分组，并且限制 c_no 持有至少 5 条数据。SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) > 5;+-------+| c_no  |+-------+| 3-105 |+-------+</code></pre><p>根据筛选出来的课程号，找出在某课程中，拥有至少5名学员的教师编号：</p><pre class=" language-mysql"><code class="language-mysql">SELECT t_no FROM course WHERE no IN (    SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) > 5);+------+| t_no |+------+| 825  |+------+</code></pre><p>在 <code>teacher</code> 表中，根据筛选出来的教师编号找到教师姓名：</p><pre class=" language-mysql"><code class="language-mysql">SELECT name FROM teacher WHERE no IN (    -- 最终条件    SELECT t_no FROM course WHERE no IN (        SELECT c_no FROM score GROUP BY c_no HAVING COUNT(*) > 5    ));</code></pre><h3 id="子查询-3"><a href="#子查询-3" class="headerlink" title="子查询 - 3"></a>子查询 - 3</h3><p><strong>查询 “计算机系” 课程的成绩表。</strong></p><p>思路是，先找出 <code>course</code> 表中所有 <code>计算机系</code> 课程的编号，然后根据这个编号查询 <code>score</code> 表。</p><pre class=" language-mysql"><code class="language-mysql">-- 通过 teacher 表查询所有 `计算机系` 的教师编号SELECT no, name, department FROM teacher WHERE department = '计算机系'+-----+--------+--------------+| no  | name   | department   |+-----+--------+--------------+| 804 | 李诚   | 计算机系     || 825 | 王萍   | 计算机系     |+-----+--------+--------------+-- 通过 course 表查询该教师的课程编号SELECT no FROM course WHERE t_no IN (    SELECT no FROM teacher WHERE department = '计算机系');+-------+| no    |+-------+| 3-245 || 3-105 |+-------+-- 根据筛选出来的课程号查询成绩表SELECT * FROM score WHERE c_no IN (    SELECT no FROM course WHERE t_no IN (        SELECT no FROM teacher WHERE department = '计算机系'    ));+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-245 |     86 || 105  | 3-245 |     75 || 109  | 3-245 |     68 || 101  | 3-105 |     90 || 102  | 3-105 |     91 || 103  | 3-105 |     92 || 104  | 3-105 |     89 || 105  | 3-105 |     88 || 109  | 3-105 |     76 |+------+-------+--------+</code></pre><h3 id="UNION-和-NOTIN-的使用"><a href="#UNION-和-NOTIN-的使用" class="headerlink" title="UNION 和 NOTIN 的使用"></a>UNION 和 NOTIN 的使用</h3><p><strong>查询 <code>计算机系</code> 与 <code>电子工程系</code> 中的不同职称的教师。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- NOT: 代表逻辑非SELECT * FROM teacher WHERE department = '计算机系' AND profession NOT IN (    SELECT profession FROM teacher WHERE department = '电子工程系')-- 合并两个集UNIONSELECT * FROM teacher WHERE department = '电子工程系' AND profession NOT IN (    SELECT profession FROM teacher WHERE department = '计算机系');</code></pre><h3 id="ANY-表示至少一个-DESC-降序"><a href="#ANY-表示至少一个-DESC-降序" class="headerlink" title="ANY 表示至少一个 - DESC ( 降序 )"></a>ANY 表示至少一个 - DESC ( 降序 )</h3><p><strong>查询课程 <code>3-105</code> 且成绩 <u>至少</u> 高于 <code>3-245</code> 的 <code>score</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score WHERE c_no = '3-105';+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 101  | 3-105 |     90 || 102  | 3-105 |     91 || 103  | 3-105 |     92 || 104  | 3-105 |     89 || 105  | 3-105 |     88 || 109  | 3-105 |     76 |+------+-------+--------+SELECT * FROM score WHERE c_no = '3-245';+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-245 |     86 || 105  | 3-245 |     75 || 109  | 3-245 |     68 |+------+-------+--------+-- ANY: 符合SQL语句中的任意条件。-- 也就是说，在 3-105 成绩中，只要有一个大于从 3-245 筛选出来的任意行就符合条件，-- 最后根据降序查询结果。SELECT * FROM score WHERE c_no = '3-105' AND degree > ANY(    SELECT degree FROM score WHERE c_no = '3-245') ORDER BY degree DESC;+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 || 102  | 3-105 |     91 || 101  | 3-105 |     90 || 104  | 3-105 |     89 || 105  | 3-105 |     88 || 109  | 3-105 |     76 |+------+-------+--------+</code></pre><h3 id="表示所有的-ALL"><a href="#表示所有的-ALL" class="headerlink" title="表示所有的 ALL"></a>表示所有的 ALL</h3><p><strong>查询课程 <code>3-105</code> 且成绩高于 <code>3-245</code> 的 <code>score</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 只需对上一道题稍作修改。-- ALL: 符合SQL语句中的所有条件。-- 也就是说，在 3-105 每一行成绩中，都要大于从 3-245 筛选出来全部行才算符合条件。SELECT * FROM score WHERE c_no = '3-105' AND degree > ALL(    SELECT degree FROM score WHERE c_no = '3-245');+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 101  | 3-105 |     90 || 102  | 3-105 |     91 || 103  | 3-105 |     92 || 104  | 3-105 |     89 || 105  | 3-105 |     88 |+------+-------+--------+</code></pre><h3 id="复制表的数据作为条件查询"><a href="#复制表的数据作为条件查询" class="headerlink" title="复制表的数据作为条件查询"></a>复制表的数据作为条件查询</h3><p><strong>查询某课程成绩比该课程平均成绩低的 <code>score</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 查询平均分SELECT c_no, AVG(degree) FROM score GROUP BY c_no;+-------+-------------+| c_no  | AVG(degree) |+-------+-------------+| 3-105 |     87.6667 || 3-245 |     76.3333 || 6-166 |     81.6667 |+-------+-------------+-- 查询 score 表SELECT degree FROM score;+--------+| degree |+--------+|     90 ||     91 ||     92 ||     86 ||     85 ||     89 ||     88 ||     75 ||     79 ||     76 ||     68 ||     81 |+--------+-- 将表 b 作用于表 a 中查询数据-- score a (b): 将表声明为 a (b)，-- 如此就能用 a.c_no = b.c_no 作为条件执行查询了。SELECT * FROM score a WHERE degree < (    (SELECT AVG(degree) FROM score b WHERE a.c_no = b.c_no));+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 105  | 3-245 |     75 || 105  | 6-166 |     79 || 109  | 3-105 |     76 || 109  | 3-245 |     68 || 109  | 6-166 |     81 |+------+-------+--------+</code></pre><h3 id="子查询-4"><a href="#子查询-4" class="headerlink" title="子查询 - 4"></a>子查询 - 4</h3><p><strong>查询所有任课 ( 在 <code>course</code> 表里有课程 ) 教师的 <code>name</code> 和 <code>department</code></strong> 。</p><pre class=" language-mysql"><code class="language-mysql">SELECT name, department FROM teacher WHERE no IN (SELECT t_no FROM course);+--------+-----------------+| name   | department      |+--------+-----------------+| 李诚   | 计算机系        || 王萍   | 计算机系        || 刘冰   | 电子工程系      || 张旭   | 电子工程系      |+--------+-----------------+</code></pre><h3 id="条件加组筛选"><a href="#条件加组筛选" class="headerlink" title="条件加组筛选"></a>条件加组筛选</h3><p><strong>查询 <code>student</code> 表中至少有 2 名男生的 <code>class</code> 。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 查看学生表信息SELECT * FROM student;+-----+-----------+-----+------------+-------+| no  | name      | sex | birthday   | class |+-----+-----------+-----+------------+-------+| 101 | 曾华      | 男  | 1977-09-01 | 95033 || 102 | 匡明      | 男  | 1975-10-02 | 95031 || 103 | 王丽      | 女  | 1976-01-23 | 95033 || 104 | 李军      | 男  | 1976-02-20 | 95033 || 105 | 王芳      | 女  | 1975-02-10 | 95031 || 106 | 陆军      | 男  | 1974-06-03 | 95031 || 107 | 王尼玛    | 男  | 1976-02-20 | 95033 || 108 | 张全蛋    | 男  | 1975-02-10 | 95031 || 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 || 110 | 张飞      | 男  | 1974-06-03 | 95038 |+-----+-----------+-----+------------+-------+-- 只查询性别为男，然后按 class 分组，并限制 class 行大于 1。SELECT class FROM student WHERE sex = '男' GROUP BY class HAVING COUNT(*) > 1;+-------+| class |+-------+| 95033 || 95031 |+-------+</code></pre><h3 id="NOTLIKE-模糊查询取反"><a href="#NOTLIKE-模糊查询取反" class="headerlink" title="NOTLIKE 模糊查询取反"></a>NOTLIKE 模糊查询取反</h3><p><strong>查询 <code>student</code> 表中不姓 “王” 的同学记录。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- NOT: 取反-- LIKE: 模糊查询mysql> SELECT * FROM student WHERE name NOT LIKE '王%';+-----+-----------+-----+------------+-------+| no  | name      | sex | birthday   | class |+-----+-----------+-----+------------+-------+| 101 | 曾华      | 男  | 1977-09-01 | 95033 || 102 | 匡明      | 男  | 1975-10-02 | 95031 || 104 | 李军      | 男  | 1976-02-20 | 95033 || 106 | 陆军      | 男  | 1974-06-03 | 95031 || 108 | 张全蛋    | 男  | 1975-02-10 | 95031 || 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 || 110 | 张飞      | 男  | 1974-06-03 | 95038 |+-----+-----------+-----+------------+-------+</code></pre><h3 id="YEAR-与-NOW-函数"><a href="#YEAR-与-NOW-函数" class="headerlink" title="YEAR 与 NOW 函数"></a>YEAR 与 NOW 函数</h3><p><strong>查询 <code>student</code> 表中每个学生的姓名和年龄。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 使用函数 YEAR(NOW()) 计算出当前年份，减去出生年份后得出年龄。SELECT name, YEAR(NOW()) - YEAR(birthday) as age FROM student;+-----------+------+| name      | age  |+-----------+------+| 曾华      |   42 || 匡明      |   44 || 王丽      |   43 || 李军      |   43 || 王芳      |   44 || 陆军      |   45 || 王尼玛    |   43 || 张全蛋    |   44 || 赵铁柱    |   45 || 张飞      |   45 |+-----------+------+</code></pre><h3 id="MAX-与-MIN-函数"><a href="#MAX-与-MIN-函数" class="headerlink" title="MAX 与 MIN 函数"></a>MAX 与 MIN 函数</h3><p><strong>查询 <code>student</code> 表中最大和最小的 <code>birthday</code> 值。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT MAX(birthday), MIN(birthday) FROM student;+---------------+---------------+| MAX(birthday) | MIN(birthday) |+---------------+---------------+| 1977-09-01    | 1974-06-03    |+---------------+---------------+</code></pre><h3 id="多段排序"><a href="#多段排序" class="headerlink" title="多段排序"></a>多段排序</h3><p><strong>以 <code>class</code> 和 <code>birthday</code> 从大到小的顺序查询 <code>student</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM student ORDER BY class DESC, birthday;+-----+-----------+-----+------------+-------+| no  | name      | sex | birthday   | class |+-----+-----------+-----+------------+-------+| 110 | 张飞      | 男  | 1974-06-03 | 95038 || 103 | 王丽      | 女  | 1976-01-23 | 95033 || 104 | 李军      | 男  | 1976-02-20 | 95033 || 107 | 王尼玛    | 男  | 1976-02-20 | 95033 || 101 | 曾华      | 男  | 1977-09-01 | 95033 || 106 | 陆军      | 男  | 1974-06-03 | 95031 || 109 | 赵铁柱    | 男  | 1974-06-03 | 95031 || 105 | 王芳      | 女  | 1975-02-10 | 95031 || 108 | 张全蛋    | 男  | 1975-02-10 | 95031 || 102 | 匡明      | 男  | 1975-10-02 | 95031 |+-----+-----------+-----+------------+-------+</code></pre><h3 id="子查询-5"><a href="#子查询-5" class="headerlink" title="子查询 - 5"></a>子查询 - 5</h3><p><strong>查询 “男” 教师及其所上的课程。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM course WHERE t_no in (SELECT no FROM teacher WHERE sex = '男');+-------+--------------+------+| no    | name         | t_no |+-------+--------------+------+| 3-245 | 操作系统     | 804  || 6-166 | 数字电路     | 856  |+-------+--------------+------+</code></pre><h3 id="MAX-函数与子查询"><a href="#MAX-函数与子查询" class="headerlink" title="MAX 函数与子查询"></a>MAX 函数与子查询</h3><p><strong>查询最高分同学的 <code>score</code> 表。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 找出最高成绩（该查询只能有一个结果）SELECT MAX(degree) FROM score;-- 根据上面的条件筛选出所有最高成绩表，-- 该查询可能有多个结果，假设 degree 值多次符合条件。SELECT * FROM score WHERE degree = (SELECT MAX(degree) FROM score);+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 103  | 3-105 |     92 |+------+-------+--------+</code></pre><h3 id="子查询-6"><a href="#子查询-6" class="headerlink" title="子查询 - 6"></a>子查询 - 6</h3><p><strong>查询和 “李军” 同性别的所有同学 <code>name</code> 。</strong></p><pre class=" language-mysql"><code class="language-mysql">-- 首先将李军的性别作为条件取出来SELECT sex FROM student WHERE name = '李军';+-----+| sex |+-----+| 男  |+-----+-- 根据性别查询 name 和 sexSELECT name, sex FROM student WHERE sex = (    SELECT sex FROM student WHERE name = '李军');+-----------+-----+| name      | sex |+-----------+-----+| 曾华      | 男  || 匡明      | 男  || 李军      | 男  || 陆军      | 男  || 王尼玛    | 男  || 张全蛋    | 男  || 赵铁柱    | 男  || 张飞      | 男  |+-----------+-----+</code></pre><h3 id="子查询-7"><a href="#子查询-7" class="headerlink" title="子查询 - 7"></a>子查询 - 7</h3><p><strong>查询和 “李军” 同性别且同班的同学 <code>name</code> 。</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT name, sex, class FROM student WHERE sex = (    SELECT sex FROM student WHERE name = '李军') AND class = (    SELECT class FROM student WHERE name = '李军');+-----------+-----+-------+| name      | sex | class |+-----------+-----+-------+| 曾华      | 男  | 95033 || 李军      | 男  | 95033 || 王尼玛    | 男  | 95033 |+-----------+-----+-------+</code></pre><h3 id="子查询-8"><a href="#子查询-8" class="headerlink" title="子查询 - 8"></a>子查询 - 8</h3><p><strong>查询所有选修 “计算机导论” 课程的 “男” 同学成绩表。</strong></p><p>需要的 “计算机导论” 和性别为 “男” 的编号可以在 <code>course</code> 和 <code>student</code> 表中找到。</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM score WHERE c_no = (    SELECT no FROM course WHERE name = '计算机导论') AND s_no IN (    SELECT no FROM student WHERE sex = '男');+------+-------+--------+| s_no | c_no  | degree |+------+-------+--------+| 101  | 3-105 |     90 || 102  | 3-105 |     91 || 104  | 3-105 |     89 || 109  | 3-105 |     76 |+------+-------+--------+</code></pre><h3 id="按等级查询"><a href="#按等级查询" class="headerlink" title="按等级查询"></a>按等级查询</h3><p>建立一个 <code>grade</code> 表代表学生的成绩等级，并插入数据：</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE grade (    low INT(3),    upp INT(3),    grade char(1));INSERT INTO grade VALUES (90, 100, 'A');INSERT INTO grade VALUES (80, 89, 'B');INSERT INTO grade VALUES (70, 79, 'C');INSERT INTO grade VALUES (60, 69, 'D');INSERT INTO grade VALUES (0, 59, 'E');SELECT * FROM grade;+------+------+-------+| low  | upp  | grade |+------+------+-------+|   90 |  100 | A     ||   80 |   89 | B     ||   70 |   79 | C     ||   60 |   69 | D     ||    0 |   59 | E     |+------+------+-------+</code></pre><p><strong>查询所有学生的 <code>s_no</code> 、<code>c_no</code> 和 <code>grade</code> 列。</strong></p><p>思路是，使用区间 ( <code>BETWEEN</code> ) 查询，判断学生的成绩 ( <code>degree</code> )  在 <code>grade</code> 表的 <code>low</code> 和 <code>upp</code> 之间。</p><pre class=" language-mysql"><code class="language-mysql">SELECT s_no, c_no, grade FROM score, grade WHERE degree BETWEEN low AND upp;+------+-------+-------+| s_no | c_no  | grade |+------+-------+-------+| 101  | 3-105 | A     || 102  | 3-105 | A     || 103  | 3-105 | A     || 103  | 3-245 | B     || 103  | 6-166 | B     || 104  | 3-105 | B     || 105  | 3-105 | B     || 105  | 3-245 | C     || 105  | 6-166 | C     || 109  | 3-105 | C     || 109  | 3-245 | D     || 109  | 6-166 | B     |+------+-------+-------+</code></pre><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>准备用于测试连接查询的数据：</p><pre class=" language-mysql"><code class="language-mysql">CREATE DATABASE testJoin;CREATE TABLE person (    id INT,    name VARCHAR(20),    cardId INT);CREATE TABLE card (    id INT,    name VARCHAR(20));INSERT INTO card VALUES (1, '饭卡'), (2, '建行卡'), (3, '农行卡'), (4, '工商卡'), (5, '邮政卡');SELECT * FROM card;+------+-----------+| id   | name      |+------+-----------+|    1 | 饭卡      ||    2 | 建行卡    ||    3 | 农行卡    ||    4 | 工商卡    ||    5 | 邮政卡    |+------+-----------+INSERT INTO person VALUES (1, '张三', 1), (2, '李四', 3), (3, '王五', 6);SELECT * FROM person;+------+--------+--------+| id   | name   | cardId |+------+--------+--------+|    1 | 张三   |      1 ||    2 | 李四   |      3 ||    3 | 王五   |      6 |+------+--------+--------+</code></pre><p>分析两张表发现，<code>person</code> 表并没有为 <code>cardId</code> 字段设置一个在 <code>card</code> 表中对应的 <code>id</code> 外键。如果设置了的话，<code>person</code> 中 <code>cardId</code> 字段值为 <code>6</code> 的行就插不进去，因为该 <code>cardId</code> 值在 <code>card</code> 表中并没有。</p><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>要查询这两张表中有关系的数据，可以使用 <code>INNER JOIN</code> ( 内连接 ) 将它们连接在一起。</p><pre class=" language-mysql"><code class="language-mysql">-- INNER JOIN: 表示为内连接，将两张表拼接在一起。-- on: 表示要执行某个条件。SELECT * FROM person INNER JOIN card on person.cardId = card.id;+------+--------+--------+------+-----------+| id   | name   | cardId | id   | name      |+------+--------+--------+------+-----------+|    1 | 张三   |      1 |    1 | 饭卡      ||    2 | 李四   |      3 |    3 | 农行卡    |+------+--------+--------+------+-----------+-- 将 INNER 关键字省略掉，结果也是一样的。-- SELECT * FROM person JOIN card on person.cardId = card.id;</code></pre><blockquote><p>注意：<code>card</code> 的整张表被连接到了右边。</p></blockquote><h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><p>完整显示左边的表 ( <code>person</code> ) ，右边的表如果符合条件就显示，不符合则补 <code>NULL</code> 。</p><pre class=" language-mysql"><code class="language-mysql">-- LEFT JOIN 也叫做 LEFT OUTER JOIN，用这两种方式的查询结果是一样的。SELECT * FROM person LEFT JOIN card on person.cardId = card.id;+------+--------+--------+------+-----------+| id   | name   | cardId | id   | name      |+------+--------+--------+------+-----------+|    1 | 张三   |      1 |    1 | 饭卡      ||    2 | 李四   |      3 |    3 | 农行卡    ||    3 | 王五   |      6 | NULL | NULL      |+------+--------+--------+------+-----------+</code></pre><h4 id="右外链接"><a href="#右外链接" class="headerlink" title="右外链接"></a>右外链接</h4><p>完整显示右边的表 ( <code>card</code> ) ，左边的表如果符合条件就显示，不符合则补 <code>NULL</code> 。</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM person RIGHT JOIN card on person.cardId = card.id;+------+--------+--------+------+-----------+| id   | name   | cardId | id   | name      |+------+--------+--------+------+-----------+|    1 | 张三   |      1 |    1 | 饭卡      ||    2 | 李四   |      3 |    3 | 农行卡    || NULL | NULL   |   NULL |    2 | 建行卡    || NULL | NULL   |   NULL |    4 | 工商卡    || NULL | NULL   |   NULL |    5 | 邮政卡    |+------+--------+--------+------+-----------+</code></pre><h4 id="全外链接"><a href="#全外链接" class="headerlink" title="全外链接"></a>全外链接</h4><p>完整显示两张表的全部数据。</p><pre class=" language-mysql"><code class="language-mysql">-- MySQL 不支持这种语法的全外连接-- SELECT * FROM person FULL JOIN card on person.cardId = card.id;-- 出现错误：-- ERROR 1054 (42S22): Unknown column 'person.cardId' in 'on clause'-- MySQL全连接语法，使用 UNION 将两张表合并在一起。SELECT * FROM person LEFT JOIN card on person.cardId = card.idUNIONSELECT * FROM person RIGHT JOIN card on person.cardId = card.id;+------+--------+--------+------+-----------+| id   | name   | cardId | id   | name      |+------+--------+--------+------+-----------+|    1 | 张三   |      1 |    1 | 饭卡      ||    2 | 李四   |      3 |    3 | 农行卡    ||    3 | 王五   |      6 | NULL | NULL      || NULL | NULL   |   NULL |    2 | 建行卡    || NULL | NULL   |   NULL |    4 | 工商卡    || NULL | NULL   |   NULL |    5 | 邮政卡    |+------+--------+--------+------+-----------+</code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>在 MySQL 中，事务其实是一个最小的不可分割的工作单元。事务能够<strong>保证一个业务的完整性</strong>。</p><p>比如我们的银行转账：</p><pre class=" language-mysql"><code class="language-mysql">-- a -> -100UPDATE user set money = money - 100 WHERE name = 'a';-- b -> +100UPDATE user set money = money + 100 WHERE name = 'b';</code></pre><p>在实际项目中，假设只有一条 SQL 语句执行成功，而另外一条执行失败了，就会出现数据前后不一致。</p><p>因此，在执行多条有关联 SQL 语句时，<strong>事务</strong>可能会要求这些 SQL 语句要么同时执行成功，要么就都执行失败。</p><h3 id="如何控制事务-COMMIT-ROLLBACK"><a href="#如何控制事务-COMMIT-ROLLBACK" class="headerlink" title="如何控制事务 - COMMIT / ROLLBACK"></a>如何控制事务 - COMMIT / ROLLBACK</h3><p>在 MySQL 中，事务的<strong>自动提交</strong>状态默认是开启的。</p><pre class=" language-mysql"><code class="language-mysql">-- 查询事务的自动提交状态SELECT @@AUTOCOMMIT;+--------------+| @@AUTOCOMMIT |+--------------+|            1 |+--------------+</code></pre><p><strong>自动提交的作用</strong>：当我们执行一条 SQL 语句的时候，其产生的效果就会立即体现出来，且不能<strong>回滚</strong>。</p><p>什么是回滚？举个例子：</p><pre class=" language-mysql"><code class="language-mysql">CREATE DATABASE bank;USE bank;CREATE TABLE user (    id INT PRIMARY KEY,    name VARCHAR(20),    money INT);INSERT INTO user VALUES (1, 'a', 1000);SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 |+----+------+-------+</code></pre><p>可以看到，在执行插入语句后数据立刻生效，原因是 MySQL 中的事务自动将它<strong>提交</strong>到了数据库中。那么所谓<strong>回滚</strong>的意思就是，撤销执行过的所有 SQL 语句，使其回滚到<strong>最后一次提交</strong>数据时的状态。</p><p>在 MySQL 中使用 <code>ROLLBACK</code> 执行回滚：</p><pre class=" language-mysql"><code class="language-mysql">-- 回滚到最后一次提交ROLLBACK;SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 |+----+------+-------+</code></pre><p>由于所有执行过的 SQL 语句都已经被提交过了，所以数据并没有发生回滚。那如何让数据可以发生回滚？</p><pre class=" language-mysql"><code class="language-mysql">-- 关闭自动提交SET AUTOCOMMIT = 0;-- 查询自动提交状态SELECT @@AUTOCOMMIT;+--------------+| @@AUTOCOMMIT |+--------------+|            0 |+--------------+</code></pre><p>将自动提交关闭后，测试数据回滚：</p><pre class=" language-mysql"><code class="language-mysql">INSERT INTO user VALUES (2, 'b', 1000);-- 关闭 AUTOCOMMIT 后，数据的变化是在一张虚拟的临时数据表中展示，-- 发生变化的数据并没有真正插入到数据表中。SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 ||  2 | b    |  1000 |+----+------+-------+-- 数据表中的真实数据其实还是：+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 |+----+------+-------+-- 由于数据还没有真正提交，可以使用回滚ROLLBACK;-- 再次查询SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 |+----+------+-------+</code></pre><p>那如何将虚拟的数据真正提交到数据库中？使用 <code>COMMIT</code> : </p><pre class=" language-mysql"><code class="language-mysql">INSERT INTO user VALUES (2, 'b', 1000);-- 手动提交数据（持久性），-- 将数据真正提交到数据库中，执行后不能再回滚提交过的数据。COMMIT;-- 提交后测试回滚ROLLBACK;-- 再次查询（回滚无效了）SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 ||  2 | b    |  1000 |+----+------+-------+</code></pre><blockquote><p><strong>总结</strong></p><ol><li><p><strong>自动提交</strong></p><ul><li><p>查看自动提交状态：<code>SELECT @@AUTOCOMMIT</code> ；</p></li><li><p>设置自动提交状态：<code>SET AUTOCOMMIT = 0</code> 。</p></li></ul></li><li><p><strong>手动提交</strong></p><p><code>@@AUTOCOMMIT = 0</code> 时，使用 <code>COMMIT</code> 命令提交事务。</p></li><li><p><strong>事务回滚</strong></p><p><code>@@AUTOCOMMIT = 0</code> 时，使用 <code>ROLLBACK</code> 命令回滚事务。</p></li></ol></blockquote><p><strong>事务的实际应用</strong>，让我们再回到银行转账项目：</p><pre class=" language-mysql"><code class="language-mysql">-- 转账UPDATE user set money = money - 100 WHERE name = 'a';-- 到账UPDATE user set money = money + 100 WHERE name = 'b';SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |   900 ||  2 | b    |  1100 |+----+------+-------+</code></pre><p>这时假设在转账时发生了意外，就可以使用 <code>ROLLBACK</code> 回滚到最后一次提交的状态：</p><pre class=" language-mysql"><code class="language-mysql">-- 假设转账发生了意外，需要回滚。ROLLBACK;SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 ||  2 | b    |  1000 |+----+------+-------+</code></pre><p>这时我们又回到了发生意外之前的状态，也就是说，事务给我们提供了一个可以反悔的机会。假设数据没有发生意外，这时可以手动将数据真正提交到数据表中：<code>COMMIT</code> 。</p><h3 id="手动开启事务-BEGIN-START-TRANSACTION"><a href="#手动开启事务-BEGIN-START-TRANSACTION" class="headerlink" title="手动开启事务 - BEGIN / START TRANSACTION"></a>手动开启事务 - BEGIN / START TRANSACTION</h3><p>事务的默认提交被开启 ( <code>@@AUTOCOMMIT = 1</code> ) 后，此时就不能使用事务回滚了。但是我们还可以手动开启一个事务处理事件，使其可以发生回滚：</p><pre class=" language-mysql"><code class="language-mysql">-- 使用 BEGIN 或者 START TRANSACTION 手动开启一个事务-- START TRANSACTION;BEGIN;UPDATE user set money = money - 100 WHERE name = 'a';UPDATE user set money = money + 100 WHERE name = 'b';-- 由于手动开启的事务没有开启自动提交，-- 此时发生变化的数据仍然是被保存在一张临时表中。SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |   900 ||  2 | b    |  1100 |+----+------+-------+-- 测试回滚ROLLBACK;SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |  1000 ||  2 | b    |  1000 |+----+------+-------+</code></pre><p>仍然使用 <code>COMMIT</code> 提交数据，提交后无法再发生本次事务的回滚。</p><pre class=" language-mysql"><code class="language-mysql">BEGIN;UPDATE user set money = money - 100 WHERE name = 'a';UPDATE user set money = money + 100 WHERE name = 'b';SELECT * FROM user;+----+------+-------+| id | name | money |+----+------+-------+|  1 | a    |   900 ||  2 | b    |  1100 |+----+------+-------+-- 提交数据COMMIT;-- 测试回滚（无效，因为表的数据已经被提交）ROLLBACK;</code></pre><h3 id="事务的-ACID-特征与使用"><a href="#事务的-ACID-特征与使用" class="headerlink" title="事务的 ACID 特征与使用"></a>事务的 ACID 特征与使用</h3><p><strong>事务的四大特征：</strong></p><ul><li><strong>A 原子性</strong>：事务是最小的单位，不可以再分割；</li><li><strong>C 一致性</strong>：要求同一事务中的 SQL 语句，必须保证同时成功或者失败；</li><li><strong>I 隔离性</strong>：事务1 和 事务2 之间是具有隔离性的；</li><li><strong>D 持久性</strong>：事务一旦结束 ( <code>COMMIT</code> ) ，就不可以再返回了 ( <code>ROLLBACK</code> ) 。</li></ul><h3 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h3><p><strong>事务的隔离性可分为四种 ( 性能从低到高 )</strong> ：</p><ol><li><p><strong>READ UNCOMMITTED ( 读取未提交 )</strong></p><p>如果有多个事务，那么任意事务都可以看见其他事务的<strong>未提交数据</strong>。</p></li><li><p><strong>READ COMMITTED ( 读取已提交 )</strong></p><p>只能读取到其他事务<strong>已经提交的数据</strong>。</p></li><li><p><strong>REPEATABLE READ ( 可被重复读 )</strong></p><p>如果有多个连接都开启了事务，那么事务之间不能共享数据记录，否则只能共享已提交的记录。</p></li><li><p><strong>SERIALIZABLE ( 串行化 )</strong></p><p>所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong>。</p></li></ol><p>查看当前数据库的默认隔离级别：</p><pre class=" language-mysql"><code class="language-mysql">-- MySQL 8.x, GLOBAL 表示系统级别，不加表示会话级别。SELECT @@GLOBAL.TRANSACTION_ISOLATION;SELECT @@TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| REPEATABLE-READ                | -- MySQL的默认隔离级别，可以重复读。+--------------------------------+-- MySQL 5.xSELECT @@GLOBAL.TX_ISOLATION;SELECT @@TX_ISOLATION;</code></pre><p>修改隔离级别：</p><pre class=" language-mysql"><code class="language-mysql">-- 设置系统隔离级别，LEVEL 后面表示要设置的隔离级别 (READ UNCOMMITTED)。SET GLOBAL TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;-- 查询系统隔离级别，发现已经被修改。SELECT @@GLOBAL.TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| READ-UNCOMMITTED               |+--------------------------------+</code></pre><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>测试 <strong>READ UNCOMMITTED ( 读取未提交 )</strong> 的隔离性：</p><pre class=" language-mysql"><code class="language-mysql">INSERT INTO user VALUES (3, '小明', 1000);INSERT INTO user VALUES (4, '淘宝店', 1000);SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 |+----+-----------+-------+-- 开启一个事务操作数据-- 假设小明在淘宝店买了一双800块钱的鞋子：START TRANSACTION;UPDATE user SET money = money - 800 WHERE name = '小明';UPDATE user SET money = money + 800 WHERE name = '淘宝店';-- 然后淘宝店在另一方查询结果，发现钱已到账。SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |   200 ||  4 | 淘宝店    |  1800 |+----+-----------+-------+</code></pre><p>由于小明的转账是在新开启的事务上进行操作的，而该操作的结果是可以被其他事务（另一方的淘宝店）看见的，因此淘宝店的查询结果是正确的，淘宝店确认到账。但就在这时，如果小明在它所处的事务上又执行了 <code>ROLLBACK</code> 命令，会发生什么？</p><pre class=" language-mysql"><code class="language-mysql">-- 小明所处的事务ROLLBACK;-- 此时无论对方是谁，如果再去查询结果就会发现：SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 |+----+-----------+-------+</code></pre><p>这就是所谓的<strong>脏读</strong>，一个事务读取到另外一个事务还未提交的数据。这在实际开发中是不允许出现的。</p><h4 id="读取已提交"><a href="#读取已提交" class="headerlink" title="读取已提交"></a>读取已提交</h4><p>把隔离级别设置为 <strong>READ COMMITTED</strong> ：</p><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;SELECT @@GLOBAL.TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| READ-COMMITTED                 |+--------------------------------+</code></pre><p>这样，再有新的事务连接进来时，它们就只能查询到已经提交过的事务数据了。但是对于当前事务来说，它们看到的还是未提交的数据，例如：</p><pre class=" language-mysql"><code class="language-mysql">-- 正在操作数据事务（当前事务）START TRANSACTION;UPDATE user SET money = money - 800 WHERE name = '小明';UPDATE user SET money = money + 800 WHERE name = '淘宝店';-- 虽然隔离级别被设置为了 READ COMMITTED，但在当前事务中，-- 它看到的仍然是数据表中临时改变数据，而不是真正提交过的数据。SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |   200 ||  4 | 淘宝店    |  1800 |+----+-----------+-------+-- 假设此时在远程开启了一个新事务，连接到数据库。$ mysql -u root -p12345612-- 此时远程连接查询到的数据只能是已经提交过的SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 |+----+-----------+-------+</code></pre><p>但是这样还有问题，那就是假设一个事务在操作数据时，其他事务干扰了这个事务的数据。例如：</p><pre class=" language-mysql"><code class="language-mysql">-- 小张在查询数据的时候发现：SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |   200 ||  4 | 淘宝店    |  1800 |+----+-----------+-------+-- 在小张求表的 money 平均值之前，小王做了一个操作：START TRANSACTION;INSERT INTO user VALUES (5, 'c', 100);COMMIT;-- 此时表的真实数据是：SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 ||  5 | c         |   100 |+----+-----------+-------+-- 这时小张再求平均值的时候，就会出现计算不相符合的情况：SELECT AVG(money) FROM user;+------------+| AVG(money) |+------------+|  820.0000  |+------------+</code></pre><p>虽然 <strong>READ COMMITTED</strong> 让我们只能读取到其他事务已经提交的数据，但还是会出现问题，就是<strong>在读取同一个表的数据时，可能会发生前后不一致的情况。</strong>这被称为<strong>不可重复读现象 ( READ COMMITTED )</strong> 。</p><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><p>将隔离级别设置为 <strong>REPEATABLE READ ( 可被重复读取 )</strong> :</p><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL TRANSACTION ISOLATION LEVEL REPEATABLE READ;SELECT @@GLOBAL.TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| REPEATABLE-READ                |+--------------------------------+</code></pre><p>测试 <strong>REPEATABLE READ</strong> ，假设在两个不同的连接上分别执行 <code>START TRANSACTION</code> :</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 小张 - 成都</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 小王 - 北京</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 小张 - 成都</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span></code></pre><p>当前事务开启后，没提交之前，查询不到，提交后可以被查询到。但是，在提交之前其他事务被开启了，那么在这条事务线上，就不会查询到当前有操作事务的连接。相当于开辟出一条单独的线程。</p><p>无论小张是否执行过 <code>COMMIT</code> ，在小王这边，都不会查询到小张的事务记录，而是只会查询到自己所处事务的记录：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name      <span class="token operator">|</span> money <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">a</span>         <span class="token operator">|</span>   <span class="token number">900</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">b</span>         <span class="token operator">|</span>  <span class="token number">1100</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> 小明      <span class="token operator">|</span>  <span class="token number">1000</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> 淘宝店    <span class="token operator">|</span>  <span class="token number">1000</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">c</span>         <span class="token operator">|</span>   <span class="token number">100</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+-------+</span></code></pre><p>这是<strong>因为小王在此之前开启了一个新的事务 ( <code>START TRANSACTION</code> ) <strong>，那么</strong>在他的这条新事务的线上，跟其他事务是没有联系的</strong>，也就是说，此时如果其他事务正在操作数据，它是不知道的。</p><p>然而事实是，在真实的数据表中，小张已经插入了一条数据。但是小王此时并不知道，也插入了同一条数据，会发生什么呢？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ERROR 1062 (23000): Duplicate entry '6' for key 'PRIMARY'</span></code></pre><p>报错了，操作被告知已存在主键为 <code>6</code> 的字段。这种现象也被称为<strong>幻读，一个事务提交的数据，不能被其他事务读取到</strong>。</p><h4 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h4><p>顾名思义，就是所有事务的<strong>写入操作</strong>全都是串行化的。什么意思？把隔离级别修改成 <strong>SERIALIZABLE</strong> :</p><pre class=" language-mysql"><code class="language-mysql">SET GLOBAL TRANSACTION ISOLATION LEVEL SERIALIZABLE;SELECT @@GLOBAL.TRANSACTION_ISOLATION;+--------------------------------+| @@GLOBAL.TRANSACTION_ISOLATION |+--------------------------------+| SERIALIZABLE                   |+--------------------------------+</code></pre><p>还是拿小张和小王来举例：</p><pre class=" language-mysql"><code class="language-mysql">-- 小张 - 成都START TRANSACTION;-- 小王 - 北京START TRANSACTION;-- 开启事务之前先查询表，准备操作数据。SELECT * FROM user;+----+-----------+-------+| id | name      | money |+----+-----------+-------+|  1 | a         |   900 ||  2 | b         |  1100 ||  3 | 小明      |  1000 ||  4 | 淘宝店    |  1000 ||  5 | c         |   100 ||  6 | d         |  1000 |+----+-----------+-------+-- 发现没有 7 号王小花，于是插入一条数据：INSERT INTO user VALUES (7, '王小花', 1000);</code></pre><p>此时会发生什么呢？由于现在的隔离级别是 <strong>SERIALIZABLE ( 串行化 )</strong> ，串行化的意思就是：假设把所有的事务都放在一个串行的队列中，那么所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong> ( <strong>这意味着队列中同时只能执行一个事务的写入操作</strong> ) 。</p><p>根据这个解释，小王在插入数据时，会出现等待状态，直到小张执行 <code>COMMIT</code> 结束它所处的事务，或者出现等待超时。</p><p>除开null</p><p>select name from customer where ifnull(referee_id, 0)&lt;&gt; 2</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-plus生成代码</title>
      <link href="/2023/08/07/generator/"/>
      <url>/2023/08/07/generator/</url>
      
        <content type="html"><![CDATA[<h1 id="mybatis-plus生成代码"><a href="#mybatis-plus生成代码" class="headerlink" title="mybatis-plus生成代码"></a>mybatis-plus生成代码</h1><h3 id="一、pom-xml"><a href="#一、pom-xml" class="headerlink" title="一、pom.xml"></a>一、pom.xml</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>project xmlns<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0"</span> xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>         xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>modelVersion<span class="token operator">></span><span class="token number">4.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>modelVersion<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>example<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>poverty_alleviation<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>poverty_alleviation<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>description<span class="token operator">></span>poverty_alleviation<span class="token operator">&lt;</span><span class="token operator">/</span>description<span class="token operator">></span>    <span class="token operator">&lt;</span>properties<span class="token operator">></span>        <span class="token operator">&lt;</span>java<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">1.8</span><span class="token operator">&lt;</span><span class="token operator">/</span>java<span class="token punctuation">.</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token punctuation">.</span>build<span class="token punctuation">.</span>sourceEncoding<span class="token operator">></span>        <span class="token operator">&lt;</span>project<span class="token punctuation">.</span>reporting<span class="token punctuation">.</span>outputEncoding<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token punctuation">.</span>reporting<span class="token punctuation">.</span>outputEncoding<span class="token operator">></span>        <span class="token operator">&lt;</span>spring<span class="token operator">-</span>boot<span class="token punctuation">.</span>version<span class="token operator">></span><span class="token number">2.7</span><span class="token punctuation">.</span><span class="token number">13</span><span class="token operator">&lt;</span><span class="token operator">/</span>spring<span class="token operator">-</span>boot<span class="token punctuation">.</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span>    <span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">7</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">7</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span> <span class="token number">8.0</span><span class="token punctuation">.</span><span class="token number">20</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.3</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span>tmp<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.18</span><span class="token punctuation">.</span><span class="token number">10</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>generator<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.4</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>velocity<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>velocity<span class="token operator">-</span>engine<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>freemarker<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>freemarker<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>compile<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.13</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>                     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 防止进入swagger页面报类型转换错误，排除<span class="token number">3.0</span><span class="token punctuation">.</span><span class="token number">0</span>中的引用，手动增加<span class="token number">1.6</span><span class="token punctuation">.</span><span class="token number">2</span>版本 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>swagger<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>swagger<span class="token operator">-</span>models<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.6</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>                     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Swagger3依赖 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>dependency<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>springfox<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>springfox<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>swagger<span class="token punctuation">.</span>version<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>                <span class="token operator">&lt;</span>exclusions<span class="token operator">></span>                    <span class="token operator">&lt;</span>exclusion<span class="token operator">></span>                        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>swagger<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>swagger<span class="token operator">-</span>models<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>exclusion<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>exclusions<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span>build<span class="token operator">></span>        <span class="token operator">&lt;</span>plugins<span class="token operator">></span>            <span class="token operator">&lt;</span>plugin<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>plugin<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>plugins<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>build<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>project<span class="token operator">></span></code></pre><h3 id="二、代码生成器类Generator-class"><a href="#二、代码生成器类Generator-class" class="headerlink" title="二、代码生成器类Generator.class"></a>二、代码生成器类Generator.class</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>itsource<span class="token punctuation">.</span>poverty_alleviation<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>toolkit<span class="token punctuation">.</span>StringPool<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>AutoGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>InjectionConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>po<span class="token punctuation">.</span>TableInfo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>NamingStrategy<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>FreemarkerTemplateEngine<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author sin * @Description */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * RUN THIS     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取控制台的数据</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 代码生成器</span>        AutoGenerator mpg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 全局配置</span>        GlobalConfig gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入文件输出目录的模块或者项目的地址:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String projectPath <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span>projectPath <span class="token operator">+</span> <span class="token string">"/src/main/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//生成文件的输出目录</span>        gc<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"sin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">//作者</span>        gc<span class="token punctuation">.</span><span class="token function">setFileOverride</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">//是否覆蓋已有文件 默认值：false</span>        gc<span class="token punctuation">.</span><span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">//是否打开输出目录 默认值:true</span>        gc<span class="token punctuation">.</span><span class="token function">setBaseColumnList</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">//开启 baseColumnList 默认false</span>        gc<span class="token punctuation">.</span><span class="token function">setBaseResultMap</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment" spellcheck="true">//开启 BaseResultMap 默认false</span><span class="token comment" spellcheck="true">//      gc.setEntityName("%sEntity");            //实体命名方式  默认值：null 例如：%sEntity 生成 UserEntity</span>        gc<span class="token punctuation">.</span><span class="token function">setMapperName</span><span class="token punctuation">(</span><span class="token string">"%sMapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//mapper 命名方式 默认值：null 例如：%sDao 生成 UserDao</span>        gc<span class="token punctuation">.</span><span class="token function">setXmlName</span><span class="token punctuation">(</span><span class="token string">"%sMapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//Mapper xml 命名方式   默认值：null 例如：%sDao 生成 UserDao.xml</span>        gc<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span><span class="token string">"%sService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//service 命名方式   默认值：null 例如：%sBusiness 生成 UserBusiness</span>        gc<span class="token punctuation">.</span><span class="token function">setServiceImplName</span><span class="token punctuation">(</span><span class="token string">"%sServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//service impl 命名方式  默认值：null 例如：%sBusinessImpl 生成 UserBusinessImpl</span>        gc<span class="token punctuation">.</span><span class="token function">setControllerName</span><span class="token punctuation">(</span><span class="token string">"%sController"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//controller 命名方式    默认值：null 例如：%sAction 生成 UserAction</span>        mpg<span class="token punctuation">.</span><span class="token function">setGlobalConfig</span><span class="token punctuation">(</span>gc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 数据源配置</span>        DataSourceConfig dsc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://8.134.220.50/poverty?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// dsc.setSchemaName("public");</span>        dsc<span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dsc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 包配置</span>        PackageConfig pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      pc.setModuleName(scanner("模块名"));</span><span class="token comment" spellcheck="true">//      pc.setParent("com.stu");</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入模块名:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自定义包配置</span>        pc<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setModuleName</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span><span class="token string">"mapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"domain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setServiceImpl</span><span class="token punctuation">(</span><span class="token string">"service.impl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 自定义配置</span>        InjectionConfig cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InjectionConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// to do nothing</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>FileOutConfig<span class="token operator">></span> focList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        focList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutConfig</span><span class="token punctuation">(</span><span class="token string">"/templates/mapper.xml.ftl"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">outputFile</span><span class="token punctuation">(</span>TableInfo tableInfo<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 自定义输入文件名称</span>                <span class="token keyword">return</span> projectPath <span class="token operator">+</span> <span class="token string">"/src/main/resources/mapper/"</span> <span class="token operator">+</span> <span class="token comment" spellcheck="true">/*pc.getModuleName() + "/" +*/</span>                        tableInfo<span class="token punctuation">.</span><span class="token function">getEntityName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Mapper"</span> <span class="token operator">+</span>                        StringPool<span class="token punctuation">.</span>DOT_XML<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cfg<span class="token punctuation">.</span><span class="token function">setFileOutConfigList</span><span class="token punctuation">(</span>focList<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setCfg</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setTemplate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TemplateConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setXml</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 策略配置    数据库表配置，通过该配置，可指定需要生成哪些表或者排除哪些表</span>        StrategyConfig strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//表名生成策略</span>        strategy<span class="token punctuation">.</span><span class="token function">setColumnNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据库表字段映射到实体的命名策略, 未指定按照 naming 执行</span><span class="token comment" spellcheck="true">//        strategy.setCapitalMode(true);                // 全局大写命名 ORACLE 注意</span><span class="token comment" spellcheck="true">//        strategy.setTablePrefix("prefix");            //表前缀</span><span class="token comment" spellcheck="true">//        strategy.setSuperEntityClass("com.stu.domain");    //自定义继承的Entity类全称，带包名</span><span class="token comment" spellcheck="true">//        strategy.setSuperEntityColumns(new String[] &amp;#123; "test_id", "age" &amp;#125;);     //自定义实体，公共字段</span>        strategy<span class="token punctuation">.</span><span class="token function">setEntityLombokModel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//【实体】是否为lombok模型（默认 false</span>        strategy<span class="token punctuation">.</span><span class="token function">setRestControllerStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成 @RestController 控制器</span><span class="token comment" spellcheck="true">//        strategy.setSuperControllerClass("com.baomidou.ant.common.BaseController");    //自定义继承的Controller类全称，带包名</span><span class="token comment" spellcheck="true">//      strategy.setInclude(scanner("表名"));        //需要包含的表名，允许正则表达式（与exclude二选一配置）</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入映射的表名:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String tables <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> tables<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">// 需要生成的表可以多张表</span><span class="token comment" spellcheck="true">//        strategy.setExclude(new String[]&amp;#123;"test"&amp;#125;);      // 排除生成的表</span><span class="token comment" spellcheck="true">//如果数据库有前缀，生成文件时是否要前缀acl_</span><span class="token comment" spellcheck="true">//      strategy.setTablePrefix("bus_");</span><span class="token comment" spellcheck="true">//      strategy.setTablePrefix("sys_");</span>        strategy<span class="token punctuation">.</span><span class="token function">setControllerMappingHyphenStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//驼峰转连字符</span>        strategy<span class="token punctuation">.</span><span class="token function">setTablePrefix</span><span class="token punctuation">(</span>pc<span class="token punctuation">.</span><span class="token function">getModuleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//是否生成实体时，生成字段注解</span>        mpg<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setTemplateEngine</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FreemarkerTemplateEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="三、还需要在启动类中添加-MapperScan-“cn-itsource-java-mapper”-注解扫描的包名，否则会报错"><a href="#三、还需要在启动类中添加-MapperScan-“cn-itsource-java-mapper”-注解扫描的包名，否则会报错" class="headerlink" title="三、还需要在启动类中添加@MapperScan(“cn.itsource.java.mapper”)注解扫描的包名，否则会报错"></a>三、还需要在启动类中添加@MapperScan(“cn.itsource.java.mapper”)注解扫描的包名，否则会报错</h3><h3 id="四、在生成好的mapper接口中加入-Mapper注解，不然后面无法注入使用。"><a href="#四、在生成好的mapper接口中加入-Mapper注解，不然后面无法注入使用。" class="headerlink" title="四、在生成好的mapper接口中加入@Mapper注解，不然后面无法注入使用。"></a>四、在生成好的mapper接口中加入@Mapper注解，不然后面无法注入使用。</h3><p>运行：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230704133701559.png" alt="image-20230704133701559" style="zoom:80%;" /><p>项目结构：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230704135634162.png" alt="image-20230704135634162" style="zoom:80%;" /><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependencies<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">7</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">7</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span> <span class="token number">8.0</span><span class="token punctuation">.</span><span class="token number">20</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>mybatis<span class="token operator">-</span>plus<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.3</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span>tmp<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.18</span><span class="token punctuation">.</span><span class="token number">10</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.13</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Swagger3依赖 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>springfox<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>springfox<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>            <span class="token operator">&lt;</span>exclusions<span class="token operator">></span>                <span class="token operator">&lt;</span>exclusion<span class="token operator">></span>                    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>swagger<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>swagger<span class="token operator">-</span>models<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>exclusion<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>exclusions<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 防止进入swagger页面报类型转换错误，排除<span class="token number">3.0</span><span class="token punctuation">.</span><span class="token number">0</span>中的引用，手动增加<span class="token number">1.6</span><span class="token punctuation">.</span><span class="token number">2</span>版本 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>swagger<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>swagger<span class="token operator">-</span>models<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.6</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 解析客户端操作系统、浏览器等 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>eu<span class="token punctuation">.</span>bitwalker<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>UserAgentUtils<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>bitwalker<span class="token punctuation">.</span>version<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> pagehelper 分页插件 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>pagehelper<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>pagehelper<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>pagehelper<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>version<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 获取系统信息 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>oshi<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>oshi<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>oshi<span class="token punctuation">.</span>version<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis-plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASM</title>
      <link href="/2023/08/07/ASM/"/>
      <url>/2023/08/07/ASM/</url>
      
        <content type="html"><![CDATA[<h3 id="2-2-INT-21H的1号功能，输入一个字符串”Hello-world”-存放在内存，然后倒序输出"><a href="#2-2-INT-21H的1号功能，输入一个字符串”Hello-world”-存放在内存，然后倒序输出" class="headerlink" title="2.2 INT 21H的1号功能，输入一个字符串”Hello,world”,存放在内存，然后倒序输出"></a>2.2 INT 21H的1号功能，输入一个字符串”Hello,world”,存放在内存，然后倒序输出</h3><pre class=" language-ASM"><code class="language-ASM">;2.2 INT 21H的1号功能，输入一个字符串"Hello,world",存放在内存，然后倒序输出S1 SEGMENTS1 ENDSS2 SEGMENT    DW 30H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME CS:S3,DS:S1,SS:S2MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP    ;输入 cx作计数器    SUB CX,CXL1:     MOV AH,1    INT 21H    CMP AL,0DH    JE  L2    XOR AH,AH    PUSH AX    INC CX    JMP L1        ;输出L2:     POP DX    MOV AH,2    INT 21H    LOOP L2    EXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="2-3-INT-21H的A号功能，输入一个字符串”Hello-world”-存放在内存，然后倒序输出"><a href="#2-3-INT-21H的A号功能，输入一个字符串”Hello-world”-存放在内存，然后倒序输出" class="headerlink" title="2.3 INT 21H的A号功能，输入一个字符串”Hello,world”,存放在内存，然后倒序输出"></a>2.3 INT 21H的A号功能，输入一个字符串”Hello,world”,存放在内存，然后倒序输出</h3><pre class=" language-ASM"><code class="language-ASM">;2.3 INT 21H的A号功能，输入一个字符串"Hello,world",存放在内存，然后倒序输出S1 SEGMENT    BUFF DB 250,?,250 DUP(?)    SHOW DB 0DH,0AH,'THE REVERSE STRING IS:$'S1 ENDSS2 SEGMENT STACK    DW 30H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME CS:S3,DS:S1,SS:S2MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP    ;输入    MOV AH,0AH    INT 21H        MOV SI,DX    INC SI    MOV AL,DS:[SI]    ;真实数据总个数    CBW     MOV CX,AX        ;计数器    ADD SI,AX        ;串尾 不包括ODH        ;输出    LEA DX,SHOW    MOV AH,09H    INT 21HL0:        MOV DL,DS:[SI]    MOV AH,2    INT 21H    DEC SI    LOOP L0EXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="3-1-将-BX-中的无符号数以二进制的形式输出"><a href="#3-1-将-BX-中的无符号数以二进制的形式输出" class="headerlink" title="3.1 将 BX 中的无符号数以二进制的形式输出"></a>3.1 将 BX 中的无符号数以二进制的形式输出</h3><pre class=" language-ASM"><code class="language-ASM">;3.1将 BX 中的无符号数以二进制的形式输出S1 SEGMENT    A DW 6C3BH  S1 ENDSS2 SEGMENT    DB 30 DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME CS:S3,DS:S1,SS:S2MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP        MOV CX,10H    MOV BX,AL0:     ROL BX,1    MOV DL,30H    ADC DL,0    MOV AH,2    INT 21H    LOOP L0EXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="3-4-将BX的无符号数以十进制数形式输出"><a href="#3-4-将BX的无符号数以十进制数形式输出" class="headerlink" title="3.4 将BX的无符号数以十进制数形式输出"></a>3.4 将BX的无符号数以十进制数形式输出</h3><pre class=" language-ASM"><code class="language-ASM">;3.4 将 BX 中的无符号数以十进制的形式输出S1 SEGMENT    A DW 2A3BH    CNT DW 0S1 ENDSS2 SEGMENT    DW 30H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME CS:S3,DS:S1,SS:S2MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP        MOV BX,A    MOV AX,BX    MOV CX,0AH        ;转化并入栈    ;DX余数 AX商L0:    XOR DX,DX    DIV CX    PUSH DX        ;余数进栈    INC CNT    CMP AX,0    JNE L0        ;输出    MOV CX,CNTL1:        POP DX    ADD DX,30H    MOV AH,2    INT 21H    LOOP L1EXIT:       MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="3-5-将BX的有符号数以十进制数形式输出"><a href="#3-5-将BX的有符号数以十进制数形式输出" class="headerlink" title="3.5 将BX的有符号数以十进制数形式输出"></a>3.5 将BX的有符号数以十进制数形式输出</h3><pre class=" language-ASM"><code class="language-ASM">;3.5 将BX的有符号数以十进制数形式输出S1 SEGMENT    A DW 8000HS1 ENDSS2 SEGMENT    DW 30H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME CS:S3,DS:S1,SS:S2MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP        MOV BX,A    MOV AX,BX    MOV DI,10    MOV CX,0        ;判断正负数    CMP AX,0    JGE L1        NEG AX    PUSH AX    MOV DL,'-'    MOV AH,2    INT 21H    POP AX    L0:    XOR DX,DX    IDIV DI    ;/10    PUSH DX    ;压余数    INC CX     ;记录除了几次    CMP AX,0   ;比较除完了没    JNE L0    L1:    POP DX    ADD DX,30H    MOV AH,2    INT 21H    LOOP L1EXIT:    MOV AH,4CH    INT 21H    MAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="4-2-输入两个字X-Y，计算Z-X-Y-并把Z的结果显示出来，X-Y的输入可以是任何进制"><a href="#4-2-输入两个字X-Y，计算Z-X-Y-并把Z的结果显示出来，X-Y的输入可以是任何进制" class="headerlink" title="4.2 输入两个字X,Y，计算Z=X+Y,并把Z的结果显示出来，X,Y的输入可以是任何进制"></a>4.2 输入两个字X,Y，计算Z=X+Y,并把Z的结果显示出来，X,Y的输入可以是任何进制</h3><pre class=" language-ASM"><code class="language-ASM">;4.2 输入两个字X,Y，计算Z=X+Y,并把Z的结果显示出来，X,Y的输入可以是任何进制S1 SEGMENT    X DW 0    Y DW 0    Z DW 0S1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME CS:S3,DS:S1,SS:S2MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP        MOV CX,16    XOR BX,BX        ;输入并放置在bxL0:     MOV AH,1    INT 21H    CMP AL,0DH    JE  L1    CMP AL,30H    JB L0    CMP AL,31H    JA L0    SHR AL,1    RCL BX,1    LOOP L0L1:    MOV X,BX    ;吸收回车    MOV AH,1    INT 21H          ;输入并放置在bxL2:     MOV AH,1    INT 21H    CMP AL,0DH    JE  L3    CMP AL,30H    JB L2    CMP AL,31H    JA L2    SHR AL,1    RCL BX,1    LOOP L2L3:    MOV Y,BX            ;两数相加    MOV DX,X    MOV BX,Y    ADD BX,DX    MOV CX,16L4:    ROL BX,1    MOV DX,30H    ADC DX,0    MOV AH,2    INT 21H    LOOP L4    EXIT:    MOV AH,4CH    INT 21H    MAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="4-3-输入一个有符号的十进制数，并以十六进制输出"><a href="#4-3-输入一个有符号的十进制数，并以十六进制输出" class="headerlink" title="4.3 输入一个有符号的十进制数，并以十六进制输出"></a>4.3 输入一个有符号的十进制数，并以十六进制输出</h3><pre class=" language-ASM"><code class="language-ASM">;4.3 输入一个有符号的十进制数，并以十六进制输出S1 SEGMENT    NUM DW 8000    F    DW 0S1 ENDSS2 SEGMENT    DW 30H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME CS:S3,DS:S1,SS:S2MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP    XOR BX,BX    CALL READIN    CMP F,0    JNE    L3L3:    NEG BX    CALL CHANGE    EXIT:        MOV AH,4CH    INT 21HMAIN ENDPREADIN PROC NEAR    ;输入 判断正负L0:    MOV AH,1    INT 21H    CMP AL,0DH    JE  EXIT1    CMP AL,'-'    JNE L1    INC F    L1:    SUB AL,30H    JL  L0    CMP AL,9D    JG    L0    ;->10    CBW    XCHG AX,BX    MOV CX,10D    MUL CX    XCHG BX,AX    ADD BX,AX    JMP L0    EXIT1:    RET    READIN ENDPCHANGE PROC NEAR    ;10->16    MOV CX,4L2:    PUSH CX    MOV CL,4    ROL BX,CL    MOV DL,BL    AND DL,0FH    ADD DL,30H    CMP DL,39H    JBE DISP    ADD DL,7DISP:    MOV AH,2    INT 21H    POP CX    LOOP L2        RETCHANGE ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-1-试编写一个汇编语言程序，要求对键盘输入的小写字母用大写字母显示出来"><a href="#5-1-试编写一个汇编语言程序，要求对键盘输入的小写字母用大写字母显示出来" class="headerlink" title="5.1 试编写一个汇编语言程序，要求对键盘输入的小写字母用大写字母显示出来"></a>5.1 试编写一个汇编语言程序，要求对键盘输入的小写字母用大写字母显示出来</h3><pre class=" language-ASM"><code class="language-ASM">;5.1对键盘输入的小写字母用大写字母显示出来S1 SEGMENTS1 ENDSS2 SEGMENT    DW 30H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME CS:S3,DS:S1,SS:S2MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP     ;输入小写L1:    MOV AH,1    INT 21H    CMP AL,'a'    JB L1    CMP AL,'z'    JA L1    MOV BL,AL        MOV DL,0DH    MOV AH,2    INT 21H    MOV DL,0AH    MOV AH,2    INT 21H        ;变大写输出    MOV DL,BL    SUB DL,20H    MOV AH,2    INT 21HEXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-2编写程序，从键盘接收一个小写字母，然后找出它的前导字符和后续字符，再按顺序显示这三个字符"><a href="#5-2编写程序，从键盘接收一个小写字母，然后找出它的前导字符和后续字符，再按顺序显示这三个字符" class="headerlink" title="5.2编写程序，从键盘接收一个小写字母，然后找出它的前导字符和后续字符，再按顺序显示这三个字符"></a>5.2编写程序，从键盘接收一个小写字母，然后找出它的前导字符和后续字符，再按顺序显示这三个字符</h3><pre class=" language-ASM"><code class="language-ASM">;5.2接收一个小写字母，然后找出前导字符和后续字符，按顺序输出S1 SEGMENTS1 ENDSS2 SEGMENT    DW 30H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME CS:S3,DS:S1,SS:S2MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP     ;输入L0:    MOV AH,1    INT 21H    CMP AL,'a'    JB L0    CMP AL,'z'    JA L0    MOV BL,AL    DEC BL        ;输出    MOV DL,0DH    MOV AH,2    INT 21H    MOV DL,0AH    MOV AH,2    INT 21H            MOV CX,2    MOV DL,BLL1:    MOV AH,2    INT 21H    ADD DL,2    LOOP L1EXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-3将-AX-寄存器中的-16-位数分成-4-组，每组-4-位，然后把这四组数分别放在-AL、BL、CL-和-DL-中"><a href="#5-3将-AX-寄存器中的-16-位数分成-4-组，每组-4-位，然后把这四组数分别放在-AL、BL、CL-和-DL-中" class="headerlink" title="5.3将 AX 寄存器中的 16 位数分成 4 组，每组 4 位，然后把这四组数分别放在 AL、BL、CL 和 DL 中"></a>5.3将 AX 寄存器中的 16 位数分成 4 组，每组 4 位，然后把这四组数分别放在 AL、BL、CL 和 DL 中</h3><pre class=" language-ASM"><code class="language-ASM">;5.3将AX寄存器的16位数分为四组，每组四位，分别放在AL，BL，CL，DL中S1 SEGMENT    A1    DW    0    B1    DW    0    C1    DW    0    D1    DW    0S1 ENDSS2 SEGMENT    DW 30H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME CS:S3,DS:S1,SS:S2MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP        MOV AX,0ABCDH    MOV CL,4        ROL AX,CL    MOV BX,AX    AND BX,000FH    MOV SI,BX    ROL AX,CL    MOV BX,AX    AND BX,000FH    MOV DI,BX    ROL AX,CL    MOV BX,AX    AND BX,000FH    MOV BP,BX    ROL AX,CL    MOV BX,AX    AND BX,000FH    MOV DX,BX        MOV AX,SI    MOV BX,DI    MOV CX,BP        EXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><pre class=" language-ASM"><code class="language-ASM">;5.3将AX寄存器的16位数分为四组，每组四位，分别放在AL，BL，CL，DL中S1 SEGMENTS1 ENDSS2 SEGMENT    DW 30H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME CS:S3,DS:S1,SS:S2MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP        MOV AX,0ABCDH    PUSH AX        MOV CL,4    ROL AX,CL    PUSH AX    AND AX,000FH    POP BX    ROL BX,CL    PUSH BX    AND BX,000FH    POP CX    SHR CX,1    SHR CX,1    SHR CX,1    SHR CX,1    SHR CX,1    SHR CX,1    SHR CX,1    SHR CX,1    PUSH CX    AND CX,00F0H    POP DX    AND DX,000FH    SHR CX,1    SHR CX,1    SHR CX,1    SHR CX,1    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-4比较string1和string2所含字符是否相同，相同’MATCH’-不同’NOTMATCH’"><a href="#5-4比较string1和string2所含字符是否相同，相同’MATCH’-不同’NOTMATCH’" class="headerlink" title="5.4比较string1和string2所含字符是否相同，相同’MATCH’,不同’NOTMATCH’"></a>5.4比较string1和string2所含字符是否相同，相同’MATCH’,不同’NOTMATCH’</h3><pre class=" language-ASM"><code class="language-ASM">;5.4比较string1和string2所含字符是否相同，相同'MATCH',不同'NOTMATCH'S1 SEGMENT    STRING1 DB 'ABCDEFGH$'    STRING2 DB 'QQQQQQQQ$'    MATCH    DB 'MATCH$'    NOTMATCH    DB 'NOTMATCH$'S1 ENDSS2 SEGMENT    DW 30H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME CS:S3,DS:S1,SS:S2MAIN PROC FAR    MOV AX,S2    MOV SS,AX    MOV AX,S1    MOV DS,AX    MOV ES,AX        LEA SI,STRING1    LEA DI,STRING2    MOV CX,8        CLD        REPNE CMPSB    JNE NO    YES:    LEA DX,MATCH    MOV AH,09H    INT 21H    JMP EXITNO:    LEA DX,NOTMATCH    MOV AH,09H    INT 21H    EXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-6将一个含有20个数据的数组M分成两个数组，"><a href="#5-6将一个含有20个数据的数组M分成两个数组，" class="headerlink" title="5.6将一个含有20个数据的数组M分成两个数组，"></a>5.6将一个含有20个数据的数组M分成两个数组，</h3><p>正数组P和负数组N,并分别把两个数组的数据的个数显示出来</p><pre class=" language-ASM"><code class="language-ASM">;5.6 将一个含有20个数据的数组M分成两个数组，;正数组P和负数组N,并分别把两个数组的数据的个数显示出来S1 SEGMENT    COUNT DB 20    M DW 1,-2,3,-4,5,-6,7,-8,9,-10,11,-12,13,-14,15,-16,17,-18,19,20    CNTP DW 0    P DW 20 DUP(?)    CNTN DW 0    N DW 20 DUP(?)    POST DB 0DH,0AH,'Positive:$'    NEGE DB 0DH,0AH,'Negative:$'    ENT DB 0DH,0AH,'$'S1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME CS:S3,DS:S1,SS:S2MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP        MOV SI,0    MOV DI,0    MOV BP,0    MOV CX,20L0:     MOV BX,M[SI]    ADD SI,2    CMP BX,0    JS    L2        ;正数L1:     MOV P[DI],BX    INC CNTP    ADD DI,2    JMP L3        ;负数L2:     MOV N[BP],BX    INC CNTN    ADD BP,2    JMP L3L3:     LOOP L0            ;AH余数 AL商    MOV AX,CNTP    MOV BL,10    DIV BL    MOV BX,AX    LEA DX,POST    MOV AH,9    INT 21H    ADD BL,30H    MOV DL,BL    MOV AH,2    INT 21H    ADD BH,30H    MOV DL,BH    MOV AH,2    INT 21H        LEA DX,ENT    MOV AH,9    INT 21H        MOV AX,CNTN    MOV BL,10    DIV BL    MOV BX,AX    LEA DX,NEGE    MOV AH,9    INT 21H        ADD BL,30H    MOV DL,BL    MOV AH,2    INT 21H    ADD BH,30H    MOV DL,BH    MOV AH,2    INT 21H    EXIT:        MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-7-求出首地址为-DATA-的-100D-字数组中的最小偶数，并存放在-AX-中"><a href="#5-7-求出首地址为-DATA-的-100D-字数组中的最小偶数，并存放在-AX-中" class="headerlink" title="5.7 求出首地址为 DATA 的 100D 字数组中的最小偶数，并存放在 AX 中"></a>5.7 求出首地址为 DATA 的 100D 字数组中的最小偶数，并存放在 AX 中</h3><p>两次循环 前指针找出偶数放在ax 后指针找出偶数放在dx，假设ax是最小偶数，ax和dx进行比较</p><pre class=" language-ASM"><code class="language-ASM">;5.7 求出首地址为 DATA 的 100D 字数组中的最小偶数，并存放在 AX 中S1 SEGMENT    DATA DW 100D DUP(?)S1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME DS:S1,SS:S2,CS:S3MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP    MOV BX,0    MOV CX,100    L0:    MOV AX,DATA[BX]    TEST AX,1    ADD BX,2    LOOPNZ L0    ;ZF=0和CF>0，继续循环    JNZ EXIT    ;循环结束且没有偶数    JCXZ EXIT    ;循环结束且最后一个是偶数，在BX    JZ    L1        ;循环未结束，找到偶数 进行比较L1:    MOV DX,DATA[BX]    TEST DX,1    ADD BX,2    JNZ    L0    CMP DX,AX        JGE    L2        ;继续向下找更小的偶数    MOV AX,DX    ;更新最小偶数值    LOOP L0L2:    LOOP L1EXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-8-把-AX-中存放的-16-位二进制数-K-看作是-8-个二进制的“四分之一字节”"><a href="#5-8-把-AX-中存放的-16-位二进制数-K-看作是-8-个二进制的“四分之一字节”" class="headerlink" title="5.8 把 AX 中存放的 16 位二进制数 K 看作是 8 个二进制的“四分之一字节”"></a>5.8 把 AX 中存放的 16 位二进制数 K 看作是 8 个二进制的“四分之一字节”</h3><h3 id="数一下值为-3-即-11B-的四分之一的字节数，并将该数在终端上显示出来。"><a href="#数一下值为-3-即-11B-的四分之一的字节数，并将该数在终端上显示出来。" class="headerlink" title="数一下值为 3(即 11B)的四分之一的字节数，并将该数在终端上显示出来。"></a>数一下值为 3(即 11B)的四分之一的字节数，并将该数在终端上显示出来。</h3><pre class=" language-ASM"><code class="language-ASM">;5.8 把 AX 中存放的 16 位二进制数 K 看作是 8 个二进制的“四分之一字节”。;数一下值为 3(即 11B)的四分之一字节数，并将该数在终端上显示出来。S1 SEGMENT    K DW 6C3BHS1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME CS:S3,DS:S1,SS:S2MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP        MOV AX,K    MOV BP,8        ;循环次数    MOV CL,2        ;循环位数    XOR DX,DX        ;11B的个数    L0:    CMP BP,0    JE    EXIT    DEC BP        ROL AX,CL    MOV BX,AX    AND BX,3    CMP BX,3        JE    L1    JNE L0    L1:    INC DX    JMP L0    EXIT:    ADD DL,30H    MOV AH,2    INT 21H        MOV AH,4CH    INT 21H    MAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-9输入一个四位的-16-进制数，并在终端上显示等值的二进制数"><a href="#5-9输入一个四位的-16-进制数，并在终端上显示等值的二进制数" class="headerlink" title="5.9输入一个四位的 16 进制数，并在终端上显示等值的二进制数"></a>5.9输入一个四位的 16 进制数，并在终端上显示等值的二进制数</h3><pre class=" language-ASM"><code class="language-ASM">;5.9 输入一个四位的 16 进制数，并在终端上显示等值的二进制数。S1 SEGMENTS1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME DS:S1,SS:S2,CS:S3MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP        ;输入    MOV BX,0    MOV CX,4L0:    PUSH CX    MOV CL,4    ROL BX,CL    MOV AH,1    INT 21H        ;NUMBER    CMP AL,30H    JB    L0    CMP AL,39H    JA    L1    SUB AL,30H    JMP L3    L1:    ;APHAL    CMP AL,41H    JB    L0    CMP AL,46H    JA    L2    SUB AL,37H    JMP L3    L2:    ;SMALL A    CMP AL,61H    JB    L0    CMP AL,66H    JA    L0    SUB AL,57H    JMP L3L3:    ADD BL,AL    POP CX    LOOP L0        MOV DL,0DH    MOV AH,2    INT 21H    MOV DL,0AH    MOV AH,2    INT 21H        MOV CX,16L4:    MOV DL,30H    ROL BX,1    ADC DL,0    MOV AH,2    INT 21H    LOOP L4        MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-10设有一段英文，其字符变量名为-ENG，并以-字符结束。试编写一程序，查对单词-SUN在该文中的出现次数，并以格式“SUN：xxxx”显示出次数。"><a href="#5-10设有一段英文，其字符变量名为-ENG，并以-字符结束。试编写一程序，查对单词-SUN在该文中的出现次数，并以格式“SUN：xxxx”显示出次数。" class="headerlink" title="5.10设有一段英文，其字符变量名为 ENG，并以$字符结束。试编写一程序，查对单词 SUN在该文中的出现次数，并以格式“SUN：xxxx”显示出次数。"></a>5.10设有一段英文，其字符变量名为 ENG，并以$字符结束。试编写一程序，查对单词 SUN在该文中的出现次数，并以格式“SUN：xxxx”显示出次数。</h3><pre class=" language-ASM"><code class="language-ASM">;5.10 一段英文 名ENG，以$结束,计算SUN在该文中出现的字数，格式SUNXXXX显示出次数S1 SEGMENT    ENG DB 'SUNSSUN;;SUN S,,,SUN$'    PUT DB 'SUN'    COUNT DB '0000',0DH,0AH,'$'    SUN DB 'SUN'S1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME CS:S3,DS:S1,SS:S2MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV ES,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP        XOR AX,AX    MOV DX,PUT-ENG-2    CALL CMPSTR    CALL CHANGE    EXIT:    MOV AH,4CH    INT 21HMAIN ENDPCMPSTR PROC NEARL1:    MOV DI,BX    LEA SI,SUN        MOV CX,3    REPE CMPSB    JNZ L2    INC AX    ADD BX,2 ;匹配成功    SUB DX,2L2:    INC BX ;匹配下一个    DEC DX    CMP DX,0    JG L1CMPSTR ENDPCHANGE PROC NEARL3:    MOV CH,4     MOV CL,4    LEA BX,COUNT L4:     ROL AX,CL    MOV DX,AX    AND DL,0FH ;取一位16进制数    ADD DL,30H    CMP DL,39H    JLE L5    ADD DL,07HL5:     MOV [BX],DL    INC BX    DEC CH    JNZ L4         LEA DX,PUT     MOV AH,09H    INT 21HCHANGE ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-11从键盘输入一系列以-为结束符的字符串，对其中非数字字符计数，并显示计数结果。"><a href="#5-11从键盘输入一系列以-为结束符的字符串，对其中非数字字符计数，并显示计数结果。" class="headerlink" title="5.11从键盘输入一系列以$为结束符的字符串，对其中非数字字符计数，并显示计数结果。"></a>5.11从键盘输入一系列以$为结束符的字符串，对其中<u>非数字字符</u>计数，并显示计数结果。</h3><pre class=" language-ASM"><code class="language-ASM">;从键盘输入一系列以$为结束符的字符串，;对其中的非数字字符计数，并显示出计数结果。S1 SEGMENT    STRING DB 100 DUP(?)    CNT DW 0    DISPLAY DB 0DH,0AH,'THE COUNT:$'S1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME DS:S1,SS:S2,CS:S3MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP       LEA BX,STRINGL1:    MOV AH,1        ;输入    INT 21H    MOV [BX],AL    INC BX    CMP AL,'$'        ;结束?    JE    L3                CMP AL,30H        ;0-9    JB    L2    CMP AL,39H    JA    L2    JMP L1    L2:    INC CNT    JMP L1    L3:    ;转成十进制    MOV AX,CNT    MOV BL,10    DIV BL    MOV BX,AX        LEA DX,DISPLAY    MOV AH,9    INT 21H        ;BX放到DX    MOV DL,30H    ADD DL,BL    MOV AH,2    INT 21H        MOV DL,30H    ADD DL,BH    MOV AH,2    INT 21H        MOV DL,0DH    MOV AH,2    INT 21H    MOV DL,0AH    MOV AH,2    INT 21H    EXIT:       MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-12-首地址为-MEM-的-100D-字数组，删除数组中所有为-0-的项，并将后续项向前压缩，最后将数组的剩余部分补上-0"><a href="#5-12-首地址为-MEM-的-100D-字数组，删除数组中所有为-0-的项，并将后续项向前压缩，最后将数组的剩余部分补上-0" class="headerlink" title="5.12 首地址为 MEM 的 100D 字数组，删除数组中所有为 0 的项，并将后续项向前压缩，最后将数组的剩余部分补上 0"></a>5.12 首地址为 MEM 的 100D 字数组，删除数组中所有为 0 的项，并将后续项向前压缩，最后将数组的剩余部分补上 0</h3><pre class=" language-ASM"><code class="language-ASM">;5.12 首地址为 MEM 的 100D 字数组，删除数组中所有为 0 的项，;并将后续项向前压缩，最后将数组的剩余部分补上 0。S1 SEGMENT    MEM DW 1,0,0,0,0,0,0,0,0,0        DW 2,1,0,3,4,5,6,7,8,9        DW 3,0,0,0,0,0,0,0,0,0        DW 4,1,2,0,4,5,6,7,8,9        DW 5,0,0,0,0,0,0,0,0,0        DW 6,1,2,3,4,5,0,7,8,9        DW 7,0,0,0,0,0,0,0,0,0        DW 8,1,2,3,4,5,6,7,0,9        DW 9,0,0,0,0,0,0,0,0,0        DW 0,1,2,3,4,5,6,7,8,0    CNT DW 0S1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME DS:S1,SS:S2,CS:S3MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP        MOV CX,100    MOV SI,0L0:    CMP CX,0    JE    L3        MOV AX,MEM[SI]    MOV DI,SI    ADD SI,2    DEC CX    CMP AX,0    JNE    L0        ;把后面的前移L1:    INC CNT            ;记录数组中0的个数    MOV DX,MEM[SI]    MOV MEM[DI],DX    ;DX是中间量    JMP L0        ;剩余部分补零    MOV CX,CNTL3:    MOV SI,198    MOV MEM[SI],0    SUB SI,2    LOOP L3    EXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-13在-STRING-到-STRING-99-单元中存放着一个字符串"><a href="#5-13在-STRING-到-STRING-99-单元中存放着一个字符串" class="headerlink" title="5.13在 STRING 到 STRING+99 单元中存放着一个字符串"></a>5.13在 STRING 到 STRING+99 单元中存放着一个字符串</h3><p>测试该字符串中是否存在数字，如有则把 CL 的第 5 位置 1，否则将该位置 0。</p><pre class=" language-ASM"><code class="language-ASM">;在 STRING 到 STRING+99 单元中存放着一个字符串;测试该字符串中是否存在数字，如有则把 CL 的第 5 位置 1，否则将该位置 0。S1 SEGMENT    STRING DB 'HELLOABCDE1',90 DUP('A') S1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME CS:S3,DS:S1,SS:S2MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP       MOV CX,100    LEA BX,STRING L0:    MOV AL,[BX]    INC BX    CMP AL,30H    JB    L1    CMP AL,39H    JNA    L2L1:    LOOP L0        ;存在数字L2:    MOV CL,00010000b    JMP EXIT  EXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-14"><a href="#5-14" class="headerlink" title="5.14"></a>5.14</h3><pre class=" language-ASM"><code class="language-ASM">;5.14 在首地址为 TABLE 的数组中按递增次序存放着 100H 个 16 位补码数;把出现次数最多的数及其出现次数分别存放于 AX 和 CX 中S1 SEGMENT    TABEL    DW    6 DUP(-1),10 DUP(1),25 DUP(2),15 DUP(3),200 DUP(4)    TEMP    DW    ?S1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME CS:S3,DS:S1,SS:S2MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP        MOV CX,128    MOV SI,0    ;第二组的个数    MOV DI,0    ;第一组的个数    MOV DX,0    ;出现次数最大的值    LEA BX,TABEL    MOV DX,[BX]    ;一段一段记录个数，相等增加个数，大于则记录下一组，比较存储两组个数，再进行下一轮L1:    CMP CX,0    JE    EXIT    DEC CX        ;后边组的个数是DI   后指针    MOV AX,[BX]    ADD BX,2    INC DI    CMP    AX,[BX]    JNE L2        CMP CX,0    JNE    L1    L2:    CMP DI,SI    JB    L3        ;不用变动    ;后边组的次数更多，需要更新    MOV DX,AX    ;DX保存数值较大值    MOV SI,DI    ;SI保存次数较大值L3:    XOR    DI,DI    JMP L1            EXIT:    MOV CX,SI        MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-15-数据段中已定义了一个有-n-个字数据的数组-M-求出-M-中绝对值最大的数，放在数据段的-M-2n-单元中-最后一个单元-并将该数的偏移地址存放在-M-2-n-1-单元中"><a href="#5-15-数据段中已定义了一个有-n-个字数据的数组-M-求出-M-中绝对值最大的数，放在数据段的-M-2n-单元中-最后一个单元-并将该数的偏移地址存放在-M-2-n-1-单元中" class="headerlink" title="5.15 数据段中已定义了一个有 n 个字数据的数组 M,求出 M 中绝对值最大的数，放在数据段的 M+2n 单元中(最后一个单元),并将该数的偏移地址存放在 M+2(n+1)单元中"></a>5.15 数据段中已定义了一个有 n 个<u>字</u>数据的数组 M,求出 M 中绝对值最大的数，放在数据段的 M+2n 单元中(最后一个单元),并将该数的偏移地址存放在 M+2(n+1)单元中</h3><pre class=" language-ASM"><code class="language-ASM">;5.15 数据段中已定义了一个有 n 个字数据的数组 M，;求出 M 中绝对值最大的数，放在数据段的 M+2n 单元中;并将该数的偏移地址存放在 M+2(n+1)单元中S1 SEGMENT    M DW 10 DUP(5),10 DUP(2),5 DUP(-10)    CNT    DW    ($-M)/2    MAX    DW    ?    ADDRESS DW ?S1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME DS:S1,SS:S2,CS:S3MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP        ;第一次    MOV SI,0    MOV AX,M[SI]    ADD SI,2    CMP AX,0    JGE    L0    NEG AXL0:        MOV MAX,AX    MOV BX,SI        ;N-1次循环比较    MOV CX,CNT    DEC CX L1:    CMP CX,0    JE    L3    MOV AX,M[SI]    ADD SI,2    DEC CX    CMP AX,0    JGE    L2    NEG AX    L2:    CMP MAX,AX    JAE L1    ;出现绝对值更大的数，需更新    MOV MAX,AX    MOV BX,SI    JMP L1        ;存放数据L3:    ADD SI,2    MOV DX,M[BX]    MOV M[SI],DX    ADD SI,2    MOV M[SI],BX    EXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-16在首地址为-DATA-的字数组中存放着-100H-个-16-位补码数"><a href="#5-16在首地址为-DATA-的字数组中存放着-100H-个-16-位补码数" class="headerlink" title="5.16在首地址为 DATA 的字数组中存放着 100H 个 16 位补码数"></a>5.16在首地址为 DATA 的字数组中存放着 100H 个 16 位补码数</h3><p>求出它们的平均值放在 AX 寄存器中,并求出数组中有多少个数小于此平均值，将结果放在 BX 寄存 器中。 </p><pre class=" language-ASM"><code class="language-ASM">;5.16 在首地址为 DATA 的字数组中存放着 100H 个 16 位补码数;求出它们的平均值放在 AX 寄存器中；;并求出数组中有多少个数小于此平均值，将结果放在 BX 寄存 器中。 S1 SEGMENT    DATA DW    3 DUP(-1),4 DUP(1),25 DUP(2),15 DUP(3),200 DUP(4)    AVER DW ?    CNT    DW    0S1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME DS:S1,SS:S2,CS:S3MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP    MOV CX,128    MOV AX,0    MOV SI,0L0:    MOV DX,DATA[SI]    ADD SI,2    ADD AX,DX    ;AX作SUM    LOOP L0        MOV BP,100H    DIV BP    MOV AH,0    MOV AVER,AX    ;遍历比较    MOV SI,0    MOV CX,128L1:     MOV DX,DATA[SI]    ADD SI,2    CMP DX,AVER    JAE L2    INC CNTL2:    LOOP L1        MOV BX,CNTEXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-17把-AX-中的-16-进制数转换为-ASCII-码-并将对应的-ASCII-码依次存放到-MEM-数组中的四个字节中"><a href="#5-17把-AX-中的-16-进制数转换为-ASCII-码-并将对应的-ASCII-码依次存放到-MEM-数组中的四个字节中" class="headerlink" title="5.17把 AX 中的 16 进制数转换为 ASCII 码,并将对应的 ASCII 码依次存放到 MEM 数组中的四个字节中"></a>5.17把 AX 中的 16 进制数转换为 ASCII 码,并将对应的 ASCII 码依次存放到 MEM 数组中的四个字节中</h3><p>例如，当(AX)=2A49H 时，MEM 中的 4 个字节为39H，34H，41H，32H</p><pre class=" language-asm"><code class="language-asm">;5.17 试编制一个程序把 AX 中的 16 进制数转换为 ASCII 码;并将对应的 ASCII 码依次存放到 MEM 数组中的四个字节中;例如，当(AX)=2A49H 时，MEM 中的 4 个字节为39H，34H，41H，32HS1 SEGMENT    MEM DB 4 DUP(?)S1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME DS:S1,SS:S2,CS:S3MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP    MOV AX,2A49H    MOV CX,4    MOV SI,3L0:    PUSH CX    MOV CL,4    ROL AX,CL    MOV DX,AX    AND DX,0FH    ADD DX,30H    CMP DX,3AH    JB    L1    ADD DX,7        ;存放数据    L1:    MOV MEM[SI],DL    DEC SI    POP CX    LOOP L0        EXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-18把-0-100D-之间的-30-个数存入以-GRADE-为首地址的-30-字数组中"><a href="#5-18把-0-100D-之间的-30-个数存入以-GRADE-为首地址的-30-字数组中" class="headerlink" title="5.18把 0~100D 之间的 30 个数存入以 GRADE 为首地址的 30 字数组中"></a>5.18把 0~100D 之间的 30 个数存入以 GRADE 为首地址的 30 字数组中</h3><p>GRADE+i 表示学号为 i+1 的学生的成绩<br>数组 RANK 为 30 个学生的名次表<br>RANK+i 的内容是学号为 i+1 的学生的名次<br>根据 GRADE 中的学生成绩，将学生名次填入 RANK数组中<br>(提示：一个学生的名次等于成绩高于这个学生的人数加 1)</p><pre class=" language-asm"><code class="language-asm">;5.18 把 0~100D 之间的 30 个数存入以 GRADE 为首地址的 30 字数组中;GRADE+i 表示学号为 i+1 的学生的成绩;数组 RANK 为 30 个学生的名次表;RANK+i 的内容是学号为 i+1 的学生的名次;根据 GRADE 中的学生成绩，将学生名次填入 RANK数组中;(提示：一个学生的名次等于成绩高于这个学生的人数加 1。S1 SEGMENT    GRADE DW 13 DUP(90),4 DUP(80),5 DUP(70),2 DUP(60),0064H,6 DUP(95)    NUM DW 0    RANK DW 30 DUP(?)S1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME DS:S1,SS:S2,CS:S3MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP    MOV SI,0    MOV DI,0    MOV CX,30L0:    MOV AX,GRADE[SI]    ADD SI,2    MOV DI,0    MOV NUM,0    L1:    CMP DI,30    JE    L3    MOV BX,GRADE[DI]    ADD DI,2    CMP AX,BX    JA    L2    JMP L1    L2:    INC NUM    JMP L1    L3:    MOV DX,NUM    MOV RANK[SI],DX    LOOP L0    EXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-19-已知数组-A-包含-15-个互不相等的整数，数组-B-包含-20-个互不相等的整数"><a href="#5-19-已知数组-A-包含-15-个互不相等的整数，数组-B-包含-20-个互不相等的整数" class="headerlink" title="5.19 已知数组 A 包含 15 个互不相等的整数，数组 B 包含 20 个互不相等的整数"></a>5.19 已知数组 A 包含 15 个互不相等的整数，数组 B 包含 20 个互不相等的整数</h3><h3 id="把既在-A-中又在-B-中出现的整数存放于数组-C-中"><a href="#把既在-A-中又在-B-中出现的整数存放于数组-C-中" class="headerlink" title="把既在 A 中又在 B 中出现的整数存放于数组 C 中"></a>把既在 A 中又在 B 中出现的整数存放于数组 C 中</h3><pre class=" language-asm"><code class="language-asm">;5.19 已知数组 A 包含 15 个互不相等的整数，数组 B 包含 20 个互不相等的整数;把既在 A 中又在 B 中出现的整数存放于数组 C 中S1 SEGMENT    ARRYA    DB    0,1,2,3,4,5,6,7,8,9,10,11,12,13,14    ARRYB    DB    5,6,7,8,9,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29    ARRYC    DB    15 DUP(?)S1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME DS:S1,SS:S2,CS:S3MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP    MOV SI,0    MOV BX,0    MOV CX,15    ;外循环L0:    PUSH CX    MOV CX,20        MOV AL,ARRYA[SI]    INC SI        ;内循环    MOV DI,0L1:    CMP ARRYB[DI],AL    INC DI    JE L2            LOOP L1        ;接着比较    L2:    MOV ARRYC[BX],AL    INC BX        POP CX        LOOP L0        EXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-20-设在-A、B-和-C-单元中分别存放着三个数。"><a href="#5-20-设在-A、B-和-C-单元中分别存放着三个数。" class="headerlink" title="5.20 设在 A、B 和 C 单元中分别存放着三个数。"></a>5.20 设在 A、B 和 C 单元中分别存放着三个数。</h3><h3 id="若三个数都不是-0，则求出三数之和存放在D-单元中"><a href="#若三个数都不是-0，则求出三数之和存放在D-单元中" class="headerlink" title="若三个数都不是 0，则求出三数之和存放在D 单元中"></a>若三个数都不是 0，则求出三数之和存放在D 单元中</h3><h3 id="若其中有一个数为-0，则把其它两单元也清-0"><a href="#若其中有一个数为-0，则把其它两单元也清-0" class="headerlink" title="若其中有一个数为 0，则把其它两单元也清 0"></a>若其中有一个数为 0，则把其它两单元也清 0</h3><pre class=" language-asm"><code class="language-asm">;5.20 设在 A、B 和 C 单元中分别存放着三个数。;若三个数都不是 0，则求出三数之和存放在D 单元中;若其中有一个数为 0，则把其它两单元也清 0S1 SEGMENT    NUMA    DW    10    NUMB    DW    0    NUMC    DW    0    NUMD    DW    0S1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME DS:S1,SS:S2,CS:S3MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP    XOR DX,DX    MOV AX,NUMA    CMP AX,0    JE  L1    ADD DX,AX        MOV AX,NUMB    CMP AX,0    JE  L1    ADD DX,AX        MOV AX,NUMC    CMP AX,0    JE  L1    ADD DX,AX    JMP L2        ;清零L1:    MOV BX,0    LEA SI,NUMA    MOV [SI],BX    LEA SI,NUMB    MOV [SI],BX    LEA SI,NUMC    MOV [SI],BX    JMP EXIT    L2:    LEA DI,NUMD    MOV DX,[DI]EXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-21比较数组-ARRAY-中的三个-16-位补码数，并根据比较结果在终端上显示如下信息："><a href="#5-21比较数组-ARRAY-中的三个-16-位补码数，并根据比较结果在终端上显示如下信息：" class="headerlink" title="5.21比较数组 ARRAY 中的三个 16 位补码数，并根据比较结果在终端上显示如下信息："></a>5.21比较数组 ARRAY 中的三个 16 位补码数，并根据比较结果在终端上显示如下信息：</h3><h3 id="1-如果三个数都不相等则显示-0；"><a href="#1-如果三个数都不相等则显示-0；" class="headerlink" title="(1) 如果三个数都不相等则显示 0；"></a>(1) 如果三个数都不相等则显示 0；</h3><h3 id="2-如果三个数有二个数相等则显示-1；"><a href="#2-如果三个数有二个数相等则显示-1；" class="headerlink" title="(2) 如果三个数有二个数相等则显示 1；"></a>(2) 如果三个数有二个数相等则显示 1；</h3><h3 id="3-如果三个数都相等则显示-2"><a href="#3-如果三个数都相等则显示-2" class="headerlink" title="(3) 如果三个数都相等则显示 2"></a>(3) 如果三个数都相等则显示 2</h3><pre class=" language-ASM"><code class="language-ASM">;5.21比较数组 ARRAY 中的三个 16 位补码数，并根据比较结果在终端上显示如下信息：;(1) 如果三个数都不相等则显示 0；;(2) 如果三个数有二个数相等则显示 1；;(3) 如果三个数都相等则显示 2S1 SEGMENT    ARRAY    DW    1,2,1S1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME DS:S1,SS:S2,CS:S3MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP    LEA SI,ARRAY    MOV AX,[SI]    ADD SI,2    MOV BX,[SI]    ADD SI,2    MOV DX,[SI]    CMP AX,BX    JE  L1    JNE L2        ;A=BL1:    CMP BX,DX    JE    L3    JNE L4        ;A≠BL2:    CMP BX,DX    JE    L4    CMP AX,DX    JE    L4    JNE L5        ;ALL OKL3:    MOV DL,32H    MOV AH,2    INT 21H    JMP EXIT        ;JUST ONEL4:    MOV DL,31H    MOV AH,2    INT 21H    JMP EXIT        ;ALL NOTL5:    MOV DL,30H    MOV AH,2    INT 21H    JMP EXITEXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-22-从键盘输入一系列字符-以回车符结束-，并按字母、数字、及其它字符分类计数，最后显示出这三类的计数结果-OK"><a href="#5-22-从键盘输入一系列字符-以回车符结束-，并按字母、数字、及其它字符分类计数，最后显示出这三类的计数结果-OK" class="headerlink" title="5.22 从键盘输入一系列字符(以回车符结束)，并按字母、数字、及其它字符分类计数，最后显示出这三类的计数结果 OK"></a>5.22 从键盘输入一系列字符(以回车符结束)，并按字母、数字、及其它字符分类计数，最后显示出这三类的计数结果 OK</h3><pre class=" language-ASM"><code class="language-ASM">;从键盘输入一系列字符(以回车符结束)，并按字母、数字、及其它字符分类计数，;最后显示出这三类的计数结果S1 SEGMENT    BUFF    DB 250,?,250 DUP(?)    CNTA    DW    0    CNTN    DW    0    CNTO    DW    0S1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME DS:S1,SS:S2,CS:S3MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOP    LEA DX,BUFF    MOV    AH,0AH    INT 21H        MOV    SI,1    XOR CH,CH    MOV CL,BUFF[SI]L0:    INC SI    MOV AL,BUFF[SI]    CMP AL,30H    JB    L3    CMP AL,3AH    JB    L2    CMP AL,41H    JB    L3    CMP AL,5AH    JB    L1    CMP AL,61H    JB    L3    CMP AL,7AH    JB    L1L1:    INC CNTA    MOV BX,CNTA    LOOP L0L2:    INC CNTN    MOV DX,CNTN    LOOP L0L3:    INC CNTO    MOV DI,CNTO    LOOP L0        MOV DX,0DH    MOV AH,2    INT 21H    MOV DX,0AH    MOV AH,2    INT 21H    MOV DX,CNTA    MOV AH,2    ADD DX,30H    INT 21H        MOV DX,CNTN    ADD DX,30H    MOV AH,2    INT 21H    MOV DX,0DH    MOV AH,2    INT 21H    MOV DX,0AH    MOV AH,2    INT 21H        MOV DX,CNTO    ADD DX,30H    MOV AH,2    INT 21H    MOV DX,0DH    MOV AH,2    INT 21H    MOV DX,0AH    MOV AH,2    INT 21HEXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre><h3 id="5-23-已定义了两个整数变量-A-和-B，试编写程序完成下列功能："><a href="#5-23-已定义了两个整数变量-A-和-B，试编写程序完成下列功能：" class="headerlink" title="5.23 已定义了两个整数变量 A 和 B，试编写程序完成下列功能："></a>5.23 已定义了两个整数变量 A 和 B，试编写程序完成下列功能：</h3><p>(1) 若两个数中有一个是奇数，则将奇数存入 A 中，偶数存入 B 中；</p><p>(2) 若两个数中均为奇数，则将两数加 1 后存回原变量；</p><p>(3) 若两个数中均为偶数，则两个变量均不改变。</p><pre class=" language-ASM"><code class="language-ASM">;5.23 已定义了两个整数变量 A 和 B;(1) 若两个数中有一个是奇数，则将奇数存入 A 中，偶数存入 B 中；;(2) 若两个数中均为奇数，则将两数加 1 后存回原变量；;(3) 若两个数中均为偶数，则两个变量均不改变。S1 SEGMENT    NUMA    DW    2A32H    NUMB    DW    2A31HS1 ENDSS2 SEGMENT    DW 100H DUP(?)TOP LABEL WORDS2 ENDSS3 SEGMENT    ASSUME DS:S1,SS:S2,CS:S3MAIN PROC FAR    MOV AX,S1    MOV DS,AX    MOV AX,S2    MOV SS,AX    LEA SP,TOPL0:    MOV AX,NUMA    TEST AX,1    JE    L2        ;奇数L1:    MOV BX,NUMB    TEST BX,1    JNE    L4    JMP EXIT            ;偶数L2:        MOV BX,NUMB    TEST BX,1    JNE    L3    JMP EXIT        ;A奇B偶L3:    XCHG AX,BX    JMP EXIT    ;都是奇数，都+1L4:    INC AX    LEA SI,NUMA    MOV [SI],AX    INC BX    LEA SI,NUMB    MOV [SI],BX    EXIT:    MOV AH,4CH    INT 21HMAIN ENDPS3 ENDS    END MAIN</code></pre>]]></content>
      
      
      <categories>
          
          <category> ASM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>about hexo</title>
      <link href="/2023/08/07/about%20hexo/"/>
      <url>/2023/08/07/about%20hexo/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/blinkfox/hexo-theme-matery">blinkfox/hexo-theme-matery：一个漂亮的hexo博客主题，具有材料设计和响应式设计而成的全面、美观的Hexo主题。国内访问：http://blinkfox.com (github.com)</a></p><p><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-3">Hexo博客主题之hexo-theme-matery的介绍 | 闪烁之狐 (blinkfox.github.io)</a></p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111222235606.png" alt="image-20230111222235606"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chapter6</title>
      <link href="/2023/08/04/%E7%AE%97%E6%B3%95/pta/chapter6/"/>
      <url>/2023/08/04/%E7%AE%97%E6%B3%95/pta/chapter6/</url>
      
        <content type="html"><![CDATA[<h1 id="chapter6"><a href="#chapter6" class="headerlink" title="chapter6"></a>chapter6</h1><h2 id="6-1-单链表逆转"><a href="#6-1-单链表逆转" class="headerlink" title="6-1 单链表逆转"></a>6-1 单链表逆转</h2><ol><li><font color="#ff0000"><b>头插法头的变换！！！</b></font></li><li><font color="#ff0000"><b>结构体struct Node *</b></font></li></ol><pre class=" language-c++"><code class="language-c++">List Reverse( List L )&#123;    if(L == NULL || L->Next == NULL)    &#123;        return L;    &#125;    // 利用头插法,不包含头节点    struct Node *old_head = L;    struct Node *new_head = NULL;    struct Node *new_Node;    while(old_head)    &#123;        new_Node = old_head->Next;        old_head->Next = new_head;        //重要！！！头插法头的变换        new_head = old_head;        old_head = new_Node;    &#125;    L = new_head;    return L;&#125;</code></pre><h2 id="6-2-顺序表操作集"><a href="#6-2-顺序表操作集" class="headerlink" title="6-2 顺序表操作集"></a>6-2 顺序表操作集</h2><p>参考：</p><p><a href="https://fmmpmo.blog.csdn.net/article/details/106909416?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-106909416-blog-51701198.235%5Ev38%5Epc_relevant_anti_t3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-106909416-blog-51701198.235%5Ev38%5Epc_relevant_anti_t3&utm_relevant_index=3">6-2 顺序表操作集</a></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230804124917487.png" alt="image-20230804124917487"></p><p>插入只能插【0，last+1】  才能保证顺序表的连续</p><p><font color="#ff0000"><b>sizeof里边不能写List，因为List是指向结构体的指针，并不代表LNode的存储长度，指针的大小是固定的，在32位操作系统中，始终是4个字节！！！！！</b></font></p><p><font color="#ff0000"><b>    List L = (List)(malloc(sizeof(struct LNode)));</b></font></p><pre class=" language-c++"><code class="language-c++">// 创建并返回一个空的线性表；List MakeEmpty()&#123;    //sizeof里边不能写List，因为List是指向结构体的指针，并不代表    //LNode的存储长度，指针的大小是固定的，在32位操作系统中，始终是4个字节    List L = (List)(malloc(sizeof(struct LNode)));    L->Last = -1;    return L;&#125;// 返回线性表中X的位置。若找不到则返回ERROR；Position Find( List L, ElementType X )&#123;    if(L == NULL)    &#123;        return ERROR;    &#125;    for(int i=0;i<=L->Last;i++)    &#123;        if(X == L->Data[i])        &#123;            return i;        &#125;    &#125;    return ERROR;&#125;// 将X插入在位置P并返回true。// 若空间已满，则打印“FULL”并返回false；// 如果参数P指向非法位置，则打印“ILLEGAL POSITION”并返回false；bool Insert( List L, ElementType X, Position P )&#123;    if(L->Last+1 == MAXSIZE)    &#123;        printf("FULL");        return false;    &#125;    if((P < 0) || (P > L->Last+1))    &#123;        printf("ILLEGAL POSITION");        return false;    &#125;    for(int i = L->Last;i>=P;i--)    &#123;        L->Data[i+1] = L->Data[i];    &#125;    L->Data[P] = X;    L->Last++;    return true;&#125;// 将位置P的元素删除并返回true。// 若参数P指向非法位置，则打印“POSITION P EMPTY”（其中P是参数值）并返回false。bool Delete( List L, Position P )&#123;    if(P < 0 || P > L->Last)    &#123;        printf("POSITION %d EMPTY",P);        return false;    &#125;    for(int i = P;i<L->Last;i++)    &#123;        L->Data[i]=L->Data[i+1];    &#125;    L->Last--;    return true;&#125;</code></pre><h2 id="6-3-求链表式的表长"><a href="#6-3-求链表式的表长" class="headerlink" title="6-3 求链表式的表长"></a>6-3 求链表式的表长</h2><pre class=" language-c++"><code class="language-c++">int Length( List L)&#123;    if(L == NULL)    &#123;        return 0;    &#125;    int len = 0;    while(L != NULL)&#123;        len++;        L = L -> Next;    &#125;    return len;&#125;</code></pre><h2 id="6-4-链式表的按序号查找"><a href="#6-4-链式表的按序号查找" class="headerlink" title="6-4 链式表的按序号查找"></a><strong>6-4 链式表的按序号查找</strong></h2><p>第一次的错误写法：</p><p>它会错误地返回第K个节点的后继节点的数据，而不是第K个节点的数据。</p><p><strong>原因在于在while循环中没有正确处理第K个节点。</strong>：</p><p>​    在while这个循环中，<font color="#ff0000"><b>每次循环都让L指向下一个节点</b></font>，并且K减1，直到K小于1为止。</p><p>​    这会导致L指向第K个节点的后继节点，而不是第K个节点本身。<br>​    <font color="#ff0000"><b>最后，它检查L是否为NULL</b></font>，如果不为NULL，则返回L的数据（实际上是第K个节点的后继节点的数据）；否则返回ERROR。</p><p>因此，该函数会错误地返回第K个节点的后继节点的数据，而不是第K个节点的数据。</p><p>正确的实现应该在循环中不仅移动L指针，还应该记录第K个节点的前一个节点。</p><p>当循环结束时，我们就可以通过该前一个节点找到第K个节点的数据。如果链表的长度不足K个节点，应该返回ERROR。</p><pre class=" language-c++"><code class="language-c++">ElementType FindKth( List L, int K )&#123;    if(L == NULL)    &#123;        return ERROR;    &#125;    while(L && K>=1)    &#123;        L = L->Next;        K--;    &#125;    if(L)&#123;        return L->Data;    &#125;    return ERROR;&#125;</code></pre><p>正确：利用一个变量记录</p><pre class=" language-c++"><code class="language-c++">// L是给定单链表，函数FindKth要返回链式表的第K个元素。// 如果该元素不存在，则返回ERROR。ElementType FindKth( List L, int K )&#123;    if(L == NULL || K<1)    &#123;        return ERROR;    &#125;    int i = 1;    while(L && i<K)    &#123;        L = L->Next;        i++;    &#125;    if(L && i== K)&#123;        return L->Data;    &#125;    return ERROR;&#125;</code></pre><h2 id="6-5-链式表操作集"><a href="#6-5-链式表操作集" class="headerlink" title="6-5 链式表操作集"></a><strong>6-5 链式表操作集</strong></h2><pre class=" language-c++"><code class="language-c++"></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> pta </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>code_0612</title>
      <link href="/2023/06/12/%E7%AE%97%E6%B3%95/code_0612/"/>
      <url>/2023/06/12/%E7%AE%97%E6%B3%95/code_0612/</url>
      
        <content type="html"><![CDATA[<h1 id="code-0612"><a href="#code-0612" class="headerlink" title="code_0612"></a>code_0612</h1>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> java </tag>
            
            <tag> 力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVN安装及使用教程图文详解</title>
      <link href="/2023/06/11/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%B1%BB/svn/"/>
      <url>/2023/06/11/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%B1%BB/svn/</url>
      
        <content type="html"><![CDATA[<h1 id="SVN安装及使用教程图文详解"><a href="#SVN安装及使用教程图文详解" class="headerlink" title="SVN安装及使用教程图文详解"></a>SVN安装及使用教程图文详解</h1><h2 id="SVN简介"><a href="#SVN简介" class="headerlink" title="SVN简介"></a>SVN简介</h2><h3 id="什么是SVN"><a href="#什么是SVN" class="headerlink" title="什么是SVN"></a>什么是SVN</h3><blockquote><p>SVN全名Subversion，即版本控制系统。SVN与CVS一样，是一个跨平台的软件，支持大多数常见的操作系统。</p><p>作为一个开源的版本控制系统,Subversion管理着随时间改变的数据。这些数据放置在一个中央资料档案库(repository)中。这个档案库很像一个普通的文件服务器,不过它会记住每一次文件的变动。</p><p>这样你就可以把档案恢复到旧的版本,或是浏览文件的变动历史。Subversion是一个通用的系统,可用来管理任何类型的文件,其中包括了程序源码。</p></blockquote><hr><h3 id="SVN工作原理"><a href="#SVN工作原理" class="headerlink" title="SVN工作原理"></a>SVN工作原理</h3><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/1689754518924.png" alt="1689754518924"></p><hr><h3 id="我们使用SVN能做什么"><a href="#我们使用SVN能做什么" class="headerlink" title="我们使用SVN能做什么"></a>我们使用SVN能做什么</h3><ul><li>多人共享同一的资源，并且可以对资源实现修改和更新。</li><li>记录资源的每一次变更，以及记录更改该资源的人，并且可以恢复到之前的任何一个修改点。</li></ul><h2 id="SVN安装"><a href="#SVN安装" class="headerlink" title="SVN安装"></a>SVN安装</h2><p>SVN的安装分为2部分，第一部分是服务端安装，第二部分的客户端安装。</p><p>注意：一般情况下，我们只需要安装客户端即可，因为在企业中服务端是由运维来维护的，我们只需要开通一个账号即可。</p><h3 id="1-服务端安装（windows）"><a href="#1-服务端安装（windows）" class="headerlink" title="1.服务端安装（windows）"></a>1.服务端安装（windows）</h3><p> 下载客户端visualsvn，可直接通过 <a href="https://www.visualsvn.com/files/VisualSVN-Server-4.3.5-x64.msi">https://www.visualsvn.com/files/VisualSVN-Server-4.3.5-x64.msi</a> 下载。</p><p>也可以通过官网下载服务端   <a href="https://www.visualsvn.com/server/">https://www.visualsvn.com/server/</a> </p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/1689755326002.png" alt="1689755326002"></p><p><img src="1689755821785.png" alt="1689755821785"><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/1689755821785.png" alt="1689755821785"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/1689755929577.png" alt="1689755929577"></p><hr><h3 id="2-客户端安装"><a href="#2-客户端安装" class="headerlink" title="2.客户端安装"></a>2.客户端安装</h3><p> 直接通过 <a href="https://www.visualsvn.com/files/TortoiseSVN-1.14.3.29387-x64-svn-1.14.2.msi">https://www.visualsvn.com/files/TortoiseSVN-1.14.3.29387-x64-svn-1.14.2.msi</a> 下载</p><p>也可以通过官网下载客户端  <a href="https://www.visualsvn.com/visualsvn/">https://www.visualsvn.com/visualsvn/</a> </p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/9738866ee8b540b0b82efce64ff2bd78.png" alt="9738866ee8b540b0b82efce64ff2bd78"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/9d0a8f51233e49f8ae6cb4448c7983db.png" alt="9d0a8f51233e49f8ae6cb4448c7983db"></p><hr><h2 id="SVN配置和使用"><a href="#SVN配置和使用" class="headerlink" title="SVN配置和使用"></a>SVN配置和使用</h2><h3 id="VisualSVN-Server的配置和使用方法"><a href="#VisualSVN-Server的配置和使用方法" class="headerlink" title="VisualSVN Server的配置和使用方法"></a>VisualSVN Server的配置和使用方法</h3><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/1689781843425.png" alt="1689781843425"></p><h4 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1.新建仓库"></a>1.新建仓库</h4><ol><li><p> 在Repositories上右击→选择Create New Repository（或选择新建→Repository…）。</p></li><li><p> 选择常规FSFS存储库，点击【下一步】继续。</p></li><li><p> 填写仓库名后（仓库名可以随便取），点击【下一步】继续。 </p></li><li><p> 第一个选择项是创建一个空的仓库，第二个选择项是创建一个仓库，并在仓库下面创建trunk、branches、tags三个文件夹。这里选择第一个选项，然后点击【下一步】继续。</p></li><li><p> 保留默认设置，然后点击【Create】继续 。</p></li></ol><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/1689782032951.png" alt="1689782032951"></h4><h4 id="2-添加用户"><a href="#2-添加用户" class="headerlink" title="2.添加用户"></a>2.添加用户</h4><ol><li> 右击Users，选择Create User…（或选择新建→User…）。 </li><li> 输入用户名和密码，点击【OK】继续。 </li></ol><h4 id="3-创建组"><a href="#3-创建组" class="headerlink" title="3.创建组"></a>3.创建组</h4><ol><li> 右击Groups，选择Create Group…（或选择新建→Group…）。 </li><li> 填写组名后，点击【Add】添加用户。 </li><li> 选择用户后，点击【OK】继续 </li><li> 用户添加完成后，点击【OK】 </li></ol><h4 id="4-设置权限"><a href="#4-设置权限" class="headerlink" title="4.设置权限"></a>4.设置权限</h4><ol><li> 在对应仓库右击，选择Properties… </li><li> 进行用户权限的配置，这里发现，Everyone的权限为Read/Write，太高了。， 所以建议将Everyone的权限修改为No Access。 </li><li> 接下来进行其他用户权限的配置，点击【Add】添加上文新建的组Rui。       4.  也可以在仓库下再创建多个项目文件夹，然后对每个文件夹进行权限控制。这里不继续演示了      5.  <img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/1689783219709.png" alt="1689783219709"></li></ol><p><a href="http://laptop-7l22jufk:81/svn/hn/">http://LAPTOP-7L22JUFK:81/svn/hn/</a></p><p><a href="http://laptop-7l22jufk:81/svn/hn/trunk">http://LAPTOP-7L22JUFK:81/svn/hn/trunk</a></p><h4 id="5-上传本地文件至svn仓库"><a href="#5-上传本地文件至svn仓库" class="headerlink" title="5.上传本地文件至svn仓库"></a>5.上传本地文件至svn仓库</h4><ol><li>在本地新建测试文件夹【测试】，在文件夹内新建3份文档。如下图：<br><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/1689782560206.png" alt="1689782560206"></li><li> 上传文件：右击文件夹，选择【Import】</li></ol><pre><code>  ![1689783248808](https://raw.githubusercontent.com/c-sin7/picgoIMG/main/1689783248808.png)  </code></pre><ol start="3"><li><p> <img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/1689783495022.png" alt="1689783495022"></p></li><li><p> 刷新仓库的文件夹，查看上传的文件</p></li></ol><hr><h3 id="VisualSVN-客户端使用方法"><a href="#VisualSVN-客户端使用方法" class="headerlink" title="VisualSVN 客户端使用方法"></a>VisualSVN 客户端使用方法</h3><ol><li><p>在本地新建一个文件夹getT</p></li><li><p>右键—检出</p></li><li><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/1689784598100.png" alt="1689784598100"></p></li><li><p>复制仓库地址，选择最新版本</p></li><li><p>拉取成功后可以打开文件查看<br><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/1689784716021.png" alt="1689784716021"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SVN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>code_0611</title>
      <link href="/2023/06/11/%E7%AE%97%E6%B3%95/code_0611/"/>
      <url>/2023/06/11/%E7%AE%97%E6%B3%95/code_0611/</url>
      
        <content type="html"><![CDATA[<h1 id="code-0611"><a href="#code-0611" class="headerlink" title="code_0611"></a>code_0611</h1>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> java </tag>
            
            <tag> 力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>code_0610</title>
      <link href="/2023/06/10/%E7%AE%97%E6%B3%95/code_0610/"/>
      <url>/2023/06/10/%E7%AE%97%E6%B3%95/code_0610/</url>
      
        <content type="html"><![CDATA[<h1 id="code-0610"><a href="#code-0610" class="headerlink" title="code_0610"></a>code_0610</h1><h2 id="比较字符串最小字母出现频次"><a href="#比较字符串最小字母出现频次" class="headerlink" title="比较字符串最小字母出现频次"></a>比较字符串最小字母出现频次</h2><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230611103348916.png" alt="image-20230611103348916" style="zoom:80%;" /><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">numSmallerByFrequency</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> queries<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            count<span class="token punctuation">[</span><span class="token function">f</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> count<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>queries<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> queries<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String s <span class="token operator">=</span> queries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">[</span><span class="token function">f</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token string">'z'</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> ch<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ch <span class="token operator">=</span> c<span class="token punctuation">;</span>                cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> ch<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>复杂度分析</p><p>时间复杂度：O((n+m)p)，其中 n 是 queries 的长度，m 是 words 的长度，p 是 queries 和 words 中的最长字符串的长度。<br>空间复杂度：O(1)。不统计返回值所占用的空间，我们只使用到了常数个变量。</p><pre class=" language-java"><code class="language-java">ListNode dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>这行代码创建了一个新的 <code>ListNode</code> 对象 <code>dummy</code>，它的值为 0。</p><p><code>ListNode</code> 通常用于创建单向链表和双向链表。在这个示例中，它创建了一个单向链表的头结点，值为 0。</p><p>在链表的构造过程中，可以使用一个虚拟的头结点，也就是 dummy 节点，来简化链表的处理过程。<code>dummy</code> 节点的 <code>next</code> 属性指向链表的第一个真实节点，这意味着不需要特殊处理链表头部。同时，还可以保持链表节点数据的一致性和避免代码重复。</p><p>这种方法在很多链表问题中都被广泛使用，适用于链表的插入、删除和查找等操作。由于 dummy 节点不占用数据空间，因此不会引入额外的空间复杂度，所以这种方法被认为是一种优雅的编程技巧。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> java </tag>
            
            <tag> 力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>code_0609</title>
      <link href="/2023/06/09/%E7%AE%97%E6%B3%95/code_0609/"/>
      <url>/2023/06/09/%E7%AE%97%E6%B3%95/code_0609/</url>
      
        <content type="html"><![CDATA[<h1 id="code-0609"><a href="#code-0609" class="headerlink" title="code_0609"></a>code_0609</h1><h2 id="修改图中的边权"><a href="#修改图中的边权" class="headerlink" title="修改图中的边权"></a>修改图中的边权</h2><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230609183408344.png" alt="image-20230609183408344" style="zoom:80%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230609183525281.png" alt="image-20230609183525281" style="zoom:80%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230609183639004.png" alt="image-20230609183639004" style="zoom:80%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230609183745050.png" alt="image-20230609183745050" style="zoom:80%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230609183814640.png" alt="image-20230609183814640" style="zoom:80%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230609184043421.png" alt="image-20230609184043421" style="zoom:80%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230609184117495.png" alt="image-20230609184117495" style="zoom:80%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230609184132359.png" alt="image-20230609184132259" style="zoom:80%;" /><h3 id="图结构的表达"><a href="#图结构的表达" class="headerlink" title="图结构的表达"></a>图结构的表达</h3><p>1）邻接表法</p><p>2）邻接矩阵法</p><p>3）除此之外还有其他众多的方式</p><h3 id="图的宽度优先-amp-深度优先遍历"><a href="#图的宽度优先-amp-深度优先遍历" class="headerlink" title="图的宽度优先&amp;深度优先遍历"></a>图的宽度优先&amp;深度优先遍历</h3><h4 id="宽度优先遍历"><a href="#宽度优先遍历" class="headerlink" title="宽度优先遍历"></a>宽度优先遍历</h4><p>1，利用队列实现</p><p>2，从源节点开始依次按照宽度进队列，然后弹出</p><p>3，每弹出一个点，把该节点所有没有进过队列的邻接点放入队列</p><p>4，直到队列变空</p><h4 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h4><p>1，利用栈实现</p><p>2，从源节点开始把节点按照深度放入栈，然后弹出</p><p>3，每弹出一个点，把该节点下一个没有进过栈的邻接点放入栈</p><p>4，直到栈变空 </p><h3 id="图的拓扑排序算法"><a href="#图的拓扑排序算法" class="headerlink" title="图的拓扑排序算法"></a>图的拓扑排序算法</h3><p>1）在图中找到所有入度为0的点输出</p><p>2）把所有入度为0的点在图中删掉，继续找入度为0的点输出，周而复始</p><p>3）图的所有点都被删除后，依次输出的顺序就是拓扑排序</p><p>要求：有向图且其中没有环应用：事件安排、编译顺序</p><h3 id="最小生成树算法之Kruskal"><a href="#最小生成树算法之Kruskal" class="headerlink" title="最小生成树算法之Kruskal"></a>最小生成树算法之Kruskal</h3><p>1）总是从权值最小的边开始考虑，依次考察权值依次变大的边</p><p>2）当前的边要么进入最小生成树的集合，要么丢弃</p><p>3）如果当前的边进入最小生成树的集合中不会形成环，就要当前边</p><p>4）如果当前的边进入最小生成树的集合中会形成环，就不要当前边</p><p>5）考察完所有边之后，最小生成树的集合也得到了</p><h3 id="最小生成树算法之Prim"><a href="#最小生成树算法之Prim" class="headerlink" title="最小生成树算法之Prim"></a>最小生成树算法之Prim</h3><p>1）可以从任意节点出发来寻找最小生成树</p><p>2）某个点加入到被选取的点中后，解锁这个点出发的所有新的边</p><p>3）在所有解锁的边中选最小的边，然后看看这个边会不会形成环</p><p>4）如果会，不要当前边，继续考察剩下解锁的边中最小的边，重复3）</p><p>5）如果不会，要当前边，将该边的指向点加入到被选取的点中，重复2）</p><p>6）当所有点都被选取，最小生成树就得到了</p><h3 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h3><p>1）Dijkstra算法必须指定一个源点</p><p>2）生成一个源点到各个点的最小距离表，一开始只有一条记录，即原点到自己最小距离为0，源点到其他所有点的最小距离都为正无穷大</p><p>3）从距离表中拿出没拿过记录里的最小记录，通过这个点发出的边，更新源点到各个点的最小距离表，不断重复这一步</p><p>4）源点到所有的点记录如果都被拿过一遍，过程停止，最小距离表得到了</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> java </tag>
            
            <tag> 力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>code_0608</title>
      <link href="/2023/06/08/%E7%AE%97%E6%B3%95/code_0608/"/>
      <url>/2023/06/08/%E7%AE%97%E6%B3%95/code_0608/</url>
      
        <content type="html"><![CDATA[<h1 id="code-0608"><a href="#code-0608" class="headerlink" title="code_0608"></a>code_0608</h1><h4 id="一个int类型的数，提取出二进制中最右侧的1来"><a href="#一个int类型的数，提取出二进制中最右侧的1来" class="headerlink" title="一个int类型的数，提取出二进制中最右侧的1来"></a>一个int类型的数，提取出二进制中最右侧的1来</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> rightestOne <span class="token operator">=</span> eor <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>eor<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>-eor</code> 表示对 <code>eor</code> 取反后再加上 1，即得到 <code>eor</code> 的补码表示中最右侧的 1 所对应的值</p><h4 id="将i位置值设置为1"><a href="#将i位置值设置为1" class="headerlink" title="将i位置值设置为1"></a>将i位置值设置为1</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>ans <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这段代码的作用是将 <code>ans</code> 的第 <code>i</code> 位设置为 1，其它位不变。</p><p>具体地，<code>1 &lt;&lt; i</code> 的值是二进制数 <code>0000...0001</code> 向左移动 <code>i</code> 位后得到的结果，即在第 <code>i</code> 位上是 1，其它位都是 0，</p><p>例如当 <code>i=3</code> 时，<code>1 &lt;&lt; i</code> 的值为 <code>0000...1000</code>。然后使用或运算符 <code>|</code>，将 <code>ans</code> 的第 <code>i</code> 位设置为 1，而其它位则根据 <code>ans</code> 原先的值来保持不变。例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 假设原来的 ans 值为 1011</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置第 1 位为 1，即在第二位上设置为 1</span>ans <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印输出 11011</span></code></pre><p>在上述代码中，原来的 <code>ans</code> 值为 1011（十进制的 11），我们希望将它的第 2 位（从右往左数，即二进制数的第 2 位）设置为 1，即得到二进制数 11011（十进制的 27）。使用上述代码即可实现该目的，输出结果为 <code>11011</code>，与预期相符。</p><h4 id="使用双端队列实现栈有两种方式："><a href="#使用双端队列实现栈有两种方式：" class="headerlink" title="使用双端队列实现栈有两种方式："></a>使用双端队列实现栈有两种方式：</h4><ol><li>在队列头部实现栈的 push 操作，即调用 <code>addFromHead</code> 方法插入元素，在队列头部调用 <code>popFromHead</code> 方法去除元素。</li><li>在队列尾部实现栈的 push 操作，即调用 <code>addFromBottom</code> 方法插入元素，在队列尾部调用 <code>popFromBottom</code> 方法去除元素。</li></ol><h4 id="“打表”"><a href="#“打表”" class="headerlink" title="“打表”"></a>“打表”</h4><p>可以理解为“预处理表格数据”，即将一些数据事先计算好并保存在数据结构中，以供程序运行时直接调用，而无需再进行计算。打表在某些场景下可以提高算法的效率和程序的运行速度，通常使用的数据结构有数组、哈希表、二维矩阵等。</p><p>例如，在计算斐波那契数列的时候，由于每个数的值都只跟前两个数的值有关，可以事先计算出数列中的所有数字并存在一个数组中，程序在需要时直接调用即可，这样可以避免重复计算，提高程序效率。这就是打表的一个常见应用。</p><p>另外，在算法竞赛中，打表也是一种常用的技巧，通过合理的打表可以大幅缩短算法的运行时间，从而在比赛中取得更好的成绩。</p><h4 id="NP-Complete问题"><a href="#NP-Complete问题" class="headerlink" title="NP-Complete问题"></a>NP-Complete问题</h4><p>是指一类非常重要的计算机科学问题，它表示了所有NP问题中最困难的一类问题之一，目前没有已知的有效算法可以在多项式时间内解决它们，即不存在可以在“多项式时间”内解决该问题的算法。</p><p>NP问题是指在多项式时间内可以验证一个解是否正确的问题，例如旅行商问题（TSP问题）和子集和问题（Subset Sum）就是NP问题，因为在多项式时间内可以验证某个解是否是正确的。而NP-Complete问题是一类特殊的NP问题，它具有这样的特性：如果有一种NP问题可以在多项式时间内转化成某个NP-Complete问题，那么这个NP问题就可以被认为是“和NP-Complete问题同样困难”的问题。</p><p>可视化数据网站：<a href="http://int-e.eu/~bf3/squares/view.html#13,11">http://int-e.eu/~bf3/squares/view.html#13,11</a></p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230608200322152.png" alt="image-20230608200322152" style="zoom:80%;" /><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230608200300117.png" alt="image-20230608200300117"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> java </tag>
            
            <tag> 力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>code_0607</title>
      <link href="/2023/06/07/%E7%AE%97%E6%B3%95/code_0607/"/>
      <url>/2023/06/07/%E7%AE%97%E6%B3%95/code_0607/</url>
      
        <content type="html"><![CDATA[<h1 id="code-0607"><a href="#code-0607" class="headerlink" title="code_0607"></a>code_0607</h1><h2 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h2><p>方法一：int-&gt;String</p><p>需要额外的非常量空间来创建问题描述中所不允许的字符串。</p><p>方法二：将数字本身反转<br>问题：</p><p>反转后的数字可能大于 int.MAX，整数溢出。</p><p>为避免数字反转可能导致的溢出问题，考虑只反转数字的一半</p><p>例如，输入 1221，可以将数字 “1221” 的后半部分从 “21” 反转为 “12”，并将其与前半部分 “12” 进行比较，二者相同，是回文。</p><p>算法：</p><p>首先，处理一些临界情况。</p><ol><li>所有负数都不可能是回文</li><li>除了 0 以外，所有个位是 0 的数字不可能是回文</li></ol><p>对于数字 1221，如果执行 1221 % 10，我们将得到最后一位数字 1，要得到倒数第二位数字，我们可以先通过除以 10 把最后一位数字从 1221 中移除，1221 / 10 = 122，再求出上一步结果除以 10 的余数，122 % 10 = 2，就可以得到倒数第二位数字。</p><p>如果我们把最后一位数字乘以 10，再加上倒数第二位数字，1 * 10 + 2 = 12，就得到了我们想要的反转后的数字。如果继续这个过程，我们将得到更多位数的反转数字。</p><p>问题是，如何知道反转数字的位数已经达到原始数字位数的一半？</p><p>由于整个过程不断将原始数字除以 10，然后给反转后的数字乘上 10，所以，当原始数字<strong>小于或等于</strong>反转后的数字时，意味着已经处理了一半位数的数字了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    bool <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 特殊情况：</span>        <span class="token comment" spellcheck="true">// 如上所述，当 x &lt; 0 时，x 不是回文数。</span>        <span class="token comment" spellcheck="true">// 同样地，如果数字的最后一位是 0，为了使该数字为回文，</span>        <span class="token comment" spellcheck="true">// 则其第一位数字也应该是 0</span>        <span class="token comment" spellcheck="true">// 只有 0 满足这一属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> revertedNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">></span> revertedNumber<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            revertedNumber <span class="token operator">=</span> revertedNumber <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。</span>        <span class="token comment" spellcheck="true">// 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，</span>        <span class="token comment" spellcheck="true">// 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。</span>        <span class="token keyword">return</span> x <span class="token operator">==</span> revertedNumber <span class="token operator">||</span> x <span class="token operator">==</span> revertedNumber <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>复杂度分析</p><p>时间复杂度：O(logn)，对于每次迭代，我们会将输入除以 10，因此时间复杂度为 O(logn)。<br>空间复杂度：O(1)。我们只需要常数空间存放若干变量。</p><p>Java 中，可以使用 <code>Integer.toString(int i)</code> 方法将 <code>int</code> 类型的变量转换为 <code>String</code> 类型</p><p>Java中，可以使用 <code>String.valueOf(int i)</code> 方法将 <code>int</code> 类型的变量转换为 <code>String</code> 类型</p><p>Java 中，可以通过 <code>charAt(int index)</code> 方法获取字符串中某个位置上的字符</p><p> Java 中，<code>equal</code> 方法用于判断两个字符串的内容是否相同，而 <code>==</code> 运算符用于判断两个字符串对象的引用是否相同。</p><p> Java 中，可以使用 <code>StringBuilder</code> 和 <code>StringBuffer</code> 类的 <code>reverse()</code> 方法将字符串进行反转（即转置）。具体用法如下：</p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String reversedStr <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="罗马数字-gt-整数"><a href="#罗马数字-gt-整数" class="headerlink" title="罗马数字-&gt;整数"></a>罗马数字-&gt;整数</h2><p>方法一：从左往右，小数在大数左边，减法，否则加法</p><p>方法二：从右往左，记录当前遇到的最大的数字，遇到更大的就加，并且更新最大数，遇到小的就减</p><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，其中 n 是字符串 s的长度。</li><li>空间复杂度：O(1)</li></ul><h2 id="老鼠和奶酪"><a href="#老鼠和奶酪" class="headerlink" title="老鼠和奶酪"></a>老鼠和奶酪</h2><p><a href="https://leetcode.cn/problems/mice-and-cheese/">https://leetcode.cn/problems/mice-and-cheese/</a></p><p>方法一：贪心 + 排序</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230608095852151.png" alt="image-20230608095852151" style="zoom:80%;" /><p>时间复杂度：O(nlog⁡n)，其中 n 是数组 reward1 和 reward2 的长度。创建数组 diffs 需要 O(n) 的时间，将数组 diffs 排序需要 O(nlog⁡n) 的时间，排序后计算 diffs 的 k 个最大值之和需要 O(k) 的时间，其中 k≤n，因此时间复杂度是 O(nlog⁡n)O(nlogn)。</p><p>空间复杂度：O(n)，其中 n 是数组 reward1 和 reward2 的长度。需要创建长度为 n 的数组 diffs 并排序，数组需要 O(n) 的空间，排序需要 O(log⁡n) 的递归调用栈空间，因此空间复杂度是 O(n)</p><p>：</p><p>数组排序Arrays.sort()需要时间为O(nlog⁡n) </p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> java </tag>
            
            <tag> 力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux复习</title>
      <link href="/2023/05/27/linux/Linux%E5%A4%8D%E4%B9%A0/"/>
      <url>/2023/05/27/linux/Linux%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux复习"><a href="#Linux复习" class="headerlink" title="Linux复习"></a>Linux复习</h1><h2 id="第一讲"><a href="#第一讲" class="headerlink" title="第一讲"></a>第一讲</h2><h3 id="Linux的起源、历史、特点、定义"><a href="#Linux的起源、历史、特点、定义" class="headerlink" title="Linux的起源、历史、特点、定义"></a>Linux的起源、历史、特点、定义</h3><ul><li>Linux是一个类Unix内核的可以自由发布的实现版本，是一个<strong>操作系统的底层核心（内核）</strong></li><li>Linux =&gt; 内核</li><li>Linux系统 =&gt; 内核 + 工具 + 配套软件</li><li>特点：</li></ul><blockquote><ul><li>开放性（遵循标准）</li><li>多用户</li><li>多任务</li><li>良好的用户界面</li><li>设备独立性（把外部设备当做文件处理）</li><li>丰富的网络功能</li><li>可靠的系统安全</li><li>良好的可移植性</li></ul></blockquote><h3 id="GNU、GPL"><a href="#GNU、GPL" class="headerlink" title="GNU、GPL"></a>GNU、GPL</h3><ol><li>GNU = GNU‘s Not Unix</li><li>GNU计划：1983年Richard Stallman创办GNU计划，旨在建立一套完全自由和可移植的类Unix操作系统</li><li>GNU GPL：GNU General Public License(GNU通用公共许可证)</li><li>GPL核心思想：<br>保证任何人有共享、修改、发布自由软件的自由<br>自由软件的衍生产品必须以GPL为重新发布的许可证<br>允许公司销售自由软件（硬件/服务），提供源代码</li></ol><h3 id="常见发行版本"><a href="#常见发行版本" class="headerlink" title="常见发行版本"></a>常见发行版本</h3><h3 id="商业、共享、自由和免费软件的区别和联系"><a href="#商业、共享、自由和免费软件的区别和联系" class="headerlink" title="商业、共享、自由和免费软件的区别和联系"></a>商业、共享、自由和免费软件的区别和联系</h3><h4 id="商业软件"><a href="#商业软件" class="headerlink" title="商业软件"></a>商业软件</h4><ul><li>Commercial Software</li><li>由开发者出售拷贝并提供技术服务</li><li><strong>用户只有使用权</strong></li><li><strong>不提供源代码</strong></li></ul><h4 id="共享（试用软件）"><a href="#共享（试用软件）" class="headerlink" title="共享（试用软件）"></a>共享（试用软件）</h4><ul><li>Shareware</li><li>开发者提供软件试用程序拷贝授权、升级和技术服务</li><li><strong>用户在试用该程序拷贝一段时间之后，必须向开发者交纳使用费用，否则不能继续使用</strong></li><li><strong>不提供源代码</strong></li></ul><h4 id="自由软件"><a href="#自由软件" class="headerlink" title="自由软件"></a>自由软件</h4><ul><li>Freeware或Free Software</li><li><strong>源代码必须公开</strong></li><li><strong>任何人都可以自由传播、下载、使用、改写、重新发布</strong></li><li><strong>自由软件不一定免费</strong></li></ul><h4 id="免费软件"><a href="#免费软件" class="headerlink" title="免费软件"></a>免费软件</h4><ul><li>Freeware</li><li><strong>不需付钱，但免费软件不一定提供源代码</strong></li><li><strong>只有当自由软件免费或者免费软件提供源代码的时候才是一样的</strong></li></ul><h2 id="第二讲"><a href="#第二讲" class="headerlink" title="第二讲"></a>第二讲</h2><h3 id="Linux的安装方式（区别和联系，如何选择）、安装过程、远程连接方式"><a href="#Linux的安装方式（区别和联系，如何选择）、安装过程、远程连接方式" class="headerlink" title="Linux的安装方式（区别和联系，如何选择）、安装过程、远程连接方式"></a>Linux的安装方式（区别和联系，如何选择）、安装过程、远程连接方式</h3><h3 id="Linux内核版本号"><a href="#Linux内核版本号" class="headerlink" title="Linux内核版本号"></a>Linux内核版本号</h3><h4 id="内核版本号"><a href="#内核版本号" class="headerlink" title="内核版本号"></a>内核版本号</h4><ul><li><strong>由Linus等人制定和维护，全球统一</strong></li><li>内核版本号格式：x. y. zz</li><li>x为主版本号</li><li>y为次版本号</li><li>zz为次次版本号</li></ul><h5 id="稳定版"><a href="#稳定版" class="headerlink" title="稳定版"></a>稳定版</h5><ul><li>​    内核的特性已经固定，代码运行稳定可靠，不再增加新的特性，要改进也只是修改代码中的错误。</li></ul><h5 id="2-6及以下版本（x-y-zz）"><a href="#2-6及以下版本（x-y-zz）" class="headerlink" title="2.6及以下版本（x.y.zz）"></a>2.6及以下版本（x.<strong>y</strong>.zz）</h5><ul><li><strong>次版本号=偶数 =&gt; 稳定版本</strong></li><li><strong>次版本号=奇数 =&gt; 测试版本</strong></li></ul><h5 id="3-0开始"><a href="#3-0开始" class="headerlink" title="3.0开始"></a>3.0开始</h5><ul><li><strong>次版本号</strong>不再表示一个内核是稳定版本还是测试版本，所有发布出来的正式版本都是稳定版本</li></ul><h4 id="发行版本号"><a href="#发行版本号" class="headerlink" title="发行版本号"></a>发行版本号</h4><ul><li>由各个发行公司或者组织自行制定</li><li>不同公司的发行版本之间无可比性</li></ul><h3 id="Linux目录结构、常见目录的作用和存放内容"><a href="#Linux目录结构、常见目录的作用和存放内容" class="headerlink" title="Linux目录结构、常见目录的作用和存放内容"></a>Linux目录结构、常见目录的作用和存放内容</h3><ul><li><strong>/bin：常见系统程序目录</strong></li><li>/boot：开机设定目录，也是摆放核心vmlinuz的地方</li><li>/dev： 摆放系统设备装置文件的目录</li><li>/etc：系统配置文件，尤其passwd，shadow</li><li>/etc/rc.d/init.d：摆放系统开机的時候载入服务的脚本</li><li><strong>/home：系统使用者的目录</strong></li><li>/lib：Linux执行或编译程序函数库目录</li><li><strong>/mnt：软驱与光驱接入挂载的地方</strong></li><li>/proc：系统核心与执行程序的一些信息</li><li><strong>/root：系统管理员的目录</strong></li><li><strong>/usr/bin，/bin：一般执行文件摆放的地方</strong></li><li><strong>/usr/sbin，/sbin：系统管理员常用指令集</strong></li><li>/var：摆放系统日志文件的地方</li><li>/lost+fount：摆放系统不正常产生错误时遗失的片段</li></ul><h3 id="Linux系统结构图、主要组件构成"><a href="#Linux系统结构图、主要组件构成" class="headerlink" title="Linux系统结构图、主要组件构成"></a>Linux系统结构图、主要组件构成</h3><h4 id="系统结构图"><a href="#系统结构图" class="headerlink" title="系统结构图"></a>系统结构图</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523100917154.png" alt="image-20230523100917154"></p><h4 id="主要组件构成"><a href="#主要组件构成" class="headerlink" title="主要组件构成"></a>主要组件构成</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523101023169.png" alt="image-20230523101023169"></p><h3 id="关机、重启命令"><a href="#关机、重启命令" class="headerlink" title="关机、重启命令"></a>关机、重启命令</h3><p><strong>不允许普通用户关机和重启</strong></p><h4 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h4><ul><li>shutdown -h now</li><li>init 0</li><li>halt -p</li><li>poweroff -p</li></ul><h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><ul><li>shutdown -r now</li><li>init 6</li><li>reboot</li></ul><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523102233716.png" alt="image-20230523102233716"></p><ul><li>例子</li><li>立即关机# shutdown -h now</li><li>指定10分钟后关机# shutdown -h 10</li><li>在关机动作触发前取消关机动作# shutdown -c</li><li>重新启动计算机# shutdown -r now</li></ul><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523102338170.png" alt="image-20230523102338170"></p><ul><li>例子</li><li>切换到图形化界面# init 5</li><li>切换到多用户的字符界面# init 3</li></ul><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523102421758.png" alt="image-20230523102421758"></p><ul><li>例子</li><li>关闭系统后关闭电源# halt -p</li><li>关闭系统，但不留下日记记录# halt -d</li></ul><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523102504768.png" alt="image-20230523102504768"></p><h3 id="说明文档查看"><a href="#说明文档查看" class="headerlink" title="说明文档查看"></a>说明文档查看</h3><p>man | info</p><p>man xxx | info xxx</p><ul><li>回车 下一行</li><li>空格 下一页</li><li>q 退出</li></ul><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523102649602.png" alt="image-20230523102649602" style="zoom:50%;" /><h2 id="第三讲"><a href="#第三讲" class="headerlink" title="第三讲"></a>第三讲</h2><h3 id="Linux交互方式"><a href="#Linux交互方式" class="headerlink" title="Linux交互方式"></a>Linux交互方式</h3><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523103851661.png" alt="image-20230523103851661"></p><h3 id="shell的作用、种类、默认shell"><a href="#shell的作用、种类、默认shell" class="headerlink" title="shell的作用、种类、默认shell"></a>shell的作用、种类、默认shell</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>​    Shell是一个作为<strong>用户与Linux系统间接口的程序</strong>，它允许用户向操作系统输入需要执行的命令，返回执行结果</li><li>在Linux中可存在多种Shell，<strong>一个用户同一时刻只能使用一个shell</strong></li><li>实现自动化运维</li></ul><h4 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h4><ul><li>ash<br>贝尔实验室开发的shell，bsh是对<strong>ash</strong>的<strong>符号链接</strong></li><li>bash<br>GNU的Bourne Again Shell，是GNU Linux操作系统上<strong>默认的Shell</strong>。sh以及bash2都是对它的符号链接</li><li>tcsh</li><li>ksh</li><li>zsh</li></ul><h4 id="默认shell"><a href="#默认shell" class="headerlink" title="默认shell"></a>默认shell</h4><ul><li>GNU Linux工具中使用的是 bash shell</li><li><strong>作为/bin/sh被默认安装</strong></li><li>大多数Linux发行版中，shell程序/bin/sh实际上是对程序/bin/bash的一个链接</li><li>如何知道/bin/sh链接到/bin/bash？<br>ls -l /bin/sh</li></ul><h3 id="shell的功能（命令行提示符、自动补齐、历史记录查看、常用的快捷键、重定向、管道）"><a href="#shell的功能（命令行提示符、自动补齐、历史记录查看、常用的快捷键、重定向、管道）" class="headerlink" title="shell的功能（命令行提示符、自动补齐、历史记录查看、常用的快捷键、重定向、管道）"></a>shell的功能（命令行提示符、自动补齐、历史记录查看、常用的快捷键、重定向、管道）</h3><ul><li><p>#</p><p>root(超级管理员)的命令提示符</p></li><li><p>$<br>非root用户的命令提示符</p></li><li><p>命令自动补齐 </p><ul><li>输入命令/文件/目录的部分字符，按tab键</li><li>列出符合前缀的匹配项列表如果唯一，则自动补齐</li><li>按一下没反应，按两下</li></ul></li><li><p>历史记录查看</p><ul><li><p>键盘↑↓键 上下翻看历史输入命令</p></li><li><p>ctrl + p前一条指令</p></li><li><p>ctrl + n后一条指令</p></li><li><p>ctrl + r 反向搜索命令历史记录</p><blockquote><p>输入内容后，系统会找到最近一个包含这个内容的命令</p><p>找到命令后，按回车执行命令，按上下键查找该命令前后命令，按左右键移动光标并修改命令</p></blockquote></li></ul></li><li><p>光标移动</p><ul><li>ctrl + a 移动光标到行首</li><li>ctrl + e 移动光标到行尾</li><li>ctrl + d 删除光标所在字符</li><li>ctrl + u 剪切到行首</li><li>ctrl + k 剪切到行尾</li></ul></li><li><p>输入输出重定向(&gt;, &gt;&gt;, &lt;)</p><ul><li><p>&lt; 文件</p><p>  输入重定向</p><p>  wc -l &lt; list.txt</p></li><li><p>&gt;文件</p><p>  输出重定向 <em>覆盖原有内容</em></p><p>  ls &gt; list.txt</p></li><li><p>&gt;&gt;文件</p><p>  追加重定向 <em>文件末尾添加</em></p><p>  echo abc &gt;&gt; list.txt</p></li></ul></li><li><p>管道(|)</p><ul><li>把前一个命令的输出作为下一个命令的输入</li><li>格式：命令1 | 命令2 | 命令3 …</li><li>例子：# cat /etc/passwd | grep root | wc -l</li></ul></li></ul><h3 id="clear、echo、ls、cd、pwd、mkdir、rmdir、rm、touch、cat、more、less、head、tail、cp、mv"><a href="#clear、echo、ls、cd、pwd、mkdir、rmdir、rm、touch、cat、more、less、head、tail、cp、mv" class="headerlink" title="clear、echo、ls、cd、pwd、mkdir、rmdir、rm、touch、cat、more、less、head、tail、cp、mv"></a>clear、echo、ls、cd、pwd、mkdir、rmdir、rm、touch、cat、more、less、head、tail、cp、mv</h3><h4 id="命令clear"><a href="#命令clear" class="headerlink" title="命令clear"></a>命令clear</h4><p>作用：清空屏幕</p><p>格式： clear</p><h4 id="命令-echo"><a href="#命令-echo" class="headerlink" title="命令 echo"></a>命令 echo</h4><p>作用：打印内容</p><p>格式：echo [-n] 字符串</p><p>例子 </p><ul><li><p># echo hello world</p></li><li><p># echo -n input something</p></li></ul><h4 id="命令-ls"><a href="#命令-ls" class="headerlink" title="命令: ls"></a>命令: ls</h4><p>作用：显示指定工作目录下的内容</p><p>格式：ls [选项] &lt;路径&gt; …</p><table><thead><tr><th>-a</th><th>all, 列出所有文件，包含隐藏文件</th></tr></thead><tbody><tr><td>-l</td><td>long, 长格式打印</td></tr><tr><td>-i</td><td>inode, 列出inode节点的值</td></tr><tr><td>-t</td><td>time, 按时间排序</td></tr><tr><td>-S</td><td>size, 按文件大小排序</td></tr><tr><td>-d</td><td>directory, 只显示目录，不显示目录下的内容</td></tr><tr><td>-R</td><td>recursive, 递归显示目录及子目录的内容</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523120450776.png" alt="image-20230523120450776"></p><p>例子</p><ul><li># ls -ail</li><li># ls -lR /etc</li><li># ls -lS /var/log</li></ul><h4 id="命令-cd"><a href="#命令-cd" class="headerlink" title="命令 cd"></a>命令 cd</h4><p>作用：切换目录</p><p>格式： cd 路径</p><p>例子</p><ul><li># cd dir1</li><li># cd /</li></ul><h4 id="命令-pwd"><a href="#命令-pwd" class="headerlink" title="命令 pwd"></a>命令 pwd</h4><p>作用：显示当前路径</p><p>格式： pwd</p><p>例子# pwd</p><h4 id="命令-mkdir"><a href="#命令-mkdir" class="headerlink" title="命令 mkdir"></a>命令 mkdir</h4><p>作用：创建目录</p><p>格式：mkdir [选项] &lt;目录&gt;…</p><p>​        -p    自动创建不存在的中间目录</p><p>例子</p><ul><li># mkdir dir1 dir2</li><li># mkdir dir1/dir3</li><li># mkdir dir4/dir5</li><li># mkdir -p dir4/dir5</li></ul><h4 id="命令-rmdir"><a href="#命令-rmdir" class="headerlink" title="命令 rmdir"></a>命令 rmdir</h4><p>作用：删除目录。只能删除空目录</p><p>格式：rmdir [选项] &lt;目录&gt;…</p><p>​        -p    删除路径中的空目录</p><p>例子</p><ul><li># rmdir dir1</li><li># rmdir -p dir3</li></ul><h4 id="命令-rm"><a href="#命令-rm" class="headerlink" title="命令 rm"></a>命令 rm</h4><p>作用：删除文件或目录</p><p>格式： rm [选项] &lt;路径&gt;…</p><table><thead><tr><th>-r</th><th>递归删除子目录的内容</th></tr></thead><tbody><tr><td>-f</td><td>强制不提示</td></tr></tbody></table><p>例子</p><ul><li># rm file</li><li># rm -f file</li><li># rm -r dir1</li><li># rm -rf dir1</li></ul><h4 id="命令-touch"><a href="#命令-touch" class="headerlink" title="命令 touch"></a>命令 touch</h4><p>作用：用于改变文件的时间记录或创建一个空文件</p><p>格式：touch [选项] &lt;文件&gt; … </p><table><thead><tr><th>-a</th><th>改变档案的读取时间记录</th></tr></thead><tbody><tr><td>-m</td><td>改变档案的修改时间记录</td></tr><tr><td>-r</td><td>使用参考档的时间记录</td></tr><tr><td>-d</td><td>设定时间与日期，可以使用各种不同的格式</td></tr></tbody></table><p>例子</p><ul><li># touch file</li><li># touch -r source_file target_file</li></ul><h4 id="命令-cp"><a href="#命令-cp" class="headerlink" title="命令 cp"></a>命令 cp</h4><p>作用：文件或目录的复制</p><p>格式：cp [选项] 原路径… 目标路径</p><table><thead><tr><th>-a</th><th>复制目录时，保留链接、文件属性，并复制目录下的所有内容</th></tr></thead><tbody><tr><td>-f</td><td>覆盖已存在的目标文件而不进行提示</td></tr><tr><td>-p</td><td>除复制文件的内容外，还把修改时间和访问权限也复制到新文件中</td></tr><tr><td>-r</td><td>递归复制目录中的所有内容，包括子目录</td></tr></tbody></table><p>例子</p><ul><li>cp file1 file2</li><li>cp file1 dir1</li><li>cp -r dir1 dir2</li></ul><h4 id="命令-mv"><a href="#命令-mv" class="headerlink" title="命令 mv"></a>命令 mv</h4><p>作用：移动文件或目录(重命名)</p><p>格式： mv [选项] 原路径… 目标路径</p><table><thead><tr><th>-i</th><th>目标路径如果同名，先询问是否覆盖</th></tr></thead><tbody><tr><td>-f</td><td>覆盖已经存在的目标文件而不给提示</td></tr><tr><td>-n</td><td>不要覆盖任何已存在的文件或目录</td></tr></tbody></table><p>例子</p><ul><li><p>mv file1 file2</p></li><li><p>mv file1 dir1</p></li><li><p>mv dir1 dir2</p></li></ul><h4 id="命令-cat"><a href="#命令-cat" class="headerlink" title="命令 cat"></a>命令 cat</h4><p>作用：连接文件并打印到标准输出设备上</p><p>格式： cat [选项] &lt;文件&gt; …</p><table><thead><tr><th>-n</th><th>给每行编号</th></tr></thead><tbody><tr><td>-b</td><td>除了空白行，给每行编号</td></tr></tbody></table><p>例</p><ul><li># cat file1 file2</li><li># cat -n file1 file2</li></ul><h4 id="命令-more"><a href="#命令-more" class="headerlink" title="命令 more"></a>命令 more</h4><p>作用：分页显示文件内容</p><p>格式： more [选项]  &lt;文件&gt;…</p><table><thead><tr><th>+n</th><th>从第n行开始显示</th></tr></thead><tbody><tr><td>-s</td><td>把连续的多行空行显示为一行</td></tr></tbody></table><p>注意点：<strong>一次性加载,只能往下翻</strong></p><p>基本操作</p><ul><li>q：退出</li><li>空格：下一页</li><li>回车： 下一行</li></ul><h4 id="命令-less"><a href="#命令-less" class="headerlink" title="命令 less"></a>命令 less</h4><p>作用：分页显示文件内容</p><p>格式： less [选项] &lt;文件&gt;…</p><table><thead><tr><th>-e</th><th>当文件显示结束后，自动退出</th></tr></thead><tbody><tr><td>-f</td><td>强迫打开特殊文件</td></tr><tr><td>-i</td><td>忽略搜索时的大小写</td></tr><tr><td>-N</td><td>显示每行的行号</td></tr><tr><td>-s</td><td>显示连续空行为一行</td></tr></tbody></table><p>注意点：<strong>支持上下翻,按需加载</strong></p><p>基本操作</p><ul><li>q：退出</li><li>空格：下一页</li><li>回车： 下一行</li><li>上下移动键：上下移动</li></ul><h4 id="命令-head"><a href="#命令-head" class="headerlink" title="命令 head"></a>命令 head</h4><p>作用：显示文件的开头的内容。在默认情况下显示文件的前10行内容</p><p>格式： head [选项] &lt;文件&gt;</p><table><thead><tr><th>-q</th><th>隐藏文件名</th></tr></thead><tbody><tr><td>-v</td><td>显示文件名</td></tr><tr><td>-c&lt;数目&gt;</td><td>显示的字节数</td></tr><tr><td>-n&lt;行数&gt;</td><td>显示的行数</td></tr></tbody></table><p>例子</p><ul><li># head file1</li><li># head -5 file1</li><li># head -n 5 file1</li><li># head -c 20 file1</li></ul><h4 id="命令-tail"><a href="#命令-tail" class="headerlink" title="命令 tail"></a>命令 tail</h4><p>作用：显示文件的结尾的内容。在默认情况下显示文件的最后10行内容</p><p>格式： tail [选项] &lt;文件&gt;</p><table><thead><tr><th>-f</th><th>当文件变化时输出文件新增内容</th></tr></thead><tbody><tr><td>-c&lt;数目&gt;</td><td>显示的字节数</td></tr><tr><td>-n&lt;行数&gt;</td><td>显示的行数</td></tr><tr><td>-v</td><td>显示详细的处理信息</td></tr></tbody></table><p>例子</p><ul><li># tail file1</li><li># tail -n 5 file1</li><li># tail -5 file1</li><li># tail -c 50 file1</li><li># tail -f file1</li></ul><h3 id="文件类型、相对路径、绝对路径、用户主目录、特殊目录、当前目录、工作目录"><a href="#文件类型、相对路径、绝对路径、用户主目录、特殊目录、当前目录、工作目录" class="headerlink" title="文件类型、相对路径、绝对路径、用户主目录、特殊目录、当前目录、工作目录"></a>文件类型、相对路径、绝对路径、用户主目录、特殊目录、当前目录、工作目录</h3><h4 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h4><ul><li>普通文件：[ - ]<br>纯文字文件（ascii）或 二进制文件</li><li>目录： [ d ]</li><li>链接文件： [ l ]</li><li>设备文件：<br>区块设备文件：[ b ];<br>字符设备文件：[ c ]</li><li>管道文件： [ p ]</li><li>Socket文件： [ s ]</li></ul><h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><p><strong>指从“根”开始的路径，也称为完全路径</strong>   # cd /usr/local/bin</p><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><p><strong>指从用户工作目录开始的路径</strong>  # cd /usr# cd local/bin</p><h4 id="特殊目录"><a href="#特殊目录" class="headerlink" title="特殊目录"></a>特殊目录</h4><ul><li><strong>“.”代表该目录自己</strong></li><li><strong>“..”代表该目录的父目录</strong></li><li><strong>对于根目录，“.”和“..”都代表其自己</strong></li></ul><h4 id="工作目录-当前目录"><a href="#工作目录-当前目录" class="headerlink" title="工作目录/当前目录"></a>工作目录/当前目录</h4><p>用户登录系统后，某一时刻处在的目录，也称为当前目录</p><h4 id="用户主目录"><a href="#用户主目录" class="headerlink" title="用户主目录"></a>用户主目录</h4><ul><li>添加用户时为该用户建立起来的目录</li><li>每个用户都有自己的主目录 （普通用户一般在/home下，root用户在/root下）</li><li><strong>用户主目录可以用符号 ~表示</strong></li><li>快速回到当前用户的主目录 cd ~</li></ul><h2 id="第四讲"><a href="#第四讲" class="headerlink" title="第四讲"></a>第四讲</h2><h3 id="用户类型"><a href="#用户类型" class="headerlink" title="用户类型"></a>用户类型</h3><ul><li>超级用户<br>root，根用户，有最高的权限，可以对linux做任何操作</li><li>普通用户<br>受限的权限，没有对系统的完全控制权，用户之间私人的资源是相互隔离的</li><li>系统用户<br>与系统和程序服务相关的用户<br>默认情况下，这些特殊用户的无法登录的，如果给这些用户授权登录口令后，就可以使这些用户登录系统</li></ul><h3 id="etc-passwd-作用和内容"><a href="#etc-passwd-作用和内容" class="headerlink" title="/etc/passwd 作用和内容"></a>/etc/passwd 作用和内容</h3><p>用户信息文件</p><ul><li>每一行存储一个用户的账号信息</li><li>用户名：加密密码：用户ID：用户组ID：用户信息：用户主目录：登录Shell</li><li>超级用户root的UID是0</li><li>系统用户的UID在1000以内</li><li>普通用户的UID从1000开始往上编号</li></ul><h3 id="etc-shadow-etc-group作用"><a href="#etc-shadow-etc-group作用" class="headerlink" title="/etc/shadow /etc/group作用"></a>/etc/shadow /etc/group作用</h3><h4 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h4><ul><li>口令文件</li><li>每一行存储一个用户的登录密码信息，加密</li><li>只有root用户才能读取这个文件</li></ul><h4 id="etc-group"><a href="#etc-group" class="headerlink" title="/etc/group"></a>/etc/group</h4><ul><li>每一行记录系统中的用户组信息</li><li>组名：密码字段：用户组ID：用户名列表</li><li>用户名列表用冒号分隔多个用户名</li><li>默认情况下，创建用户的时候，系统会自动创建一个同名的组，作为该用户的主组。</li></ul><h3 id="useradd、passwd、usermod、userdel、groupadd、groupdel、chmod、chown、chgrp、ln、tar、gzip、unzip、awk、sed、cut、tr、find、grep"><a href="#useradd、passwd、usermod、userdel、groupadd、groupdel、chmod、chown、chgrp、ln、tar、gzip、unzip、awk、sed、cut、tr、find、grep" class="headerlink" title="useradd、passwd、usermod、userdel、groupadd、groupdel、chmod、chown、chgrp、ln、tar、gzip、unzip、awk、sed、cut、tr、find、grep"></a>useradd、passwd、usermod、userdel、groupadd、groupdel、chmod、chown、chgrp、ln、tar、gzip、unzip、awk、sed、cut、tr、find、grep</h3><h4 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523125911519.png" alt="image-20230523125911519"></p><p>例子</p><ul><li># useradd user1</li><li># useradd -d /home/user1024 -u 1024 -G user1 user2</li></ul><h4 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h4><p>作用：修改密码</p><p>格式：passwd  [用户名]</p><p>普通用户只能修改自己密码</p><p>root可以修改其他人</p><p>例子</p><ul><li># passwd</li><li># passwd user1</li></ul><p>高级应用-无交互设置密码</p><p>echo xxx | passwd –stdin root</p><h4 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523130139601.png" alt="image-20230523130139601"></p><p>例子</p><ul><li># usermod -u 2048 user2</li><li># usermod -d /home/user2048 user2</li></ul><h4 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h4><p>作用：删除用户</p><p>格式：userdel  [-r] 用户名</p><p><strong>root权限</strong></p><p>例子</p><ul><li># userdel user2</li><li># userdel -r user1 删除与用户相关的文件和目录,如用户家目录,日志,邮箱等</li></ul><h4 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h4><p>作用：增加用户组</p><p>格式：groupadd [-g] 组名</p><p><strong>root权限</strong></p><p>例子</p><ul><li># groupadd user3</li><li># groupadd -g 1024 user1024  设置GID</li></ul><h4 id="groupdel"><a href="#groupdel" class="headerlink" title="groupdel"></a>groupdel</h4><p>作用：删除用户组</p><p>格式：groupdel  组名</p><p><strong>root权限</strong></p><p>例子 # groupdel user3</p><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523135729391.png" alt="image-20230523135729391"></p><p>例子</p><ul><li># chmod a=rwx,u-x,g-wx,o-rwx a.txt</li><li># chmod 640 a.txt</li><li># chmod -R 765 dir1</li></ul><h4 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h4><p>作用：改变指定目录或文件的所属用户、所属组</p><p>格式：chown [-R] 用户名[:组名]  路径</p><p><strong>root权限</strong></p><p>例子</p><ul><li># chown wilson a.txt</li><li># chown wilson:wilson a.txt</li><li># chown -R wilson dir1</li></ul><h4 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h4><p>作用：改变指定目录或文件的所属组。</p><p>格式：chgrp [-R] 组名 路径</p><p><strong>root权限</strong></p><p>例子</p><ul><li># chgrp wilson a.txt</li><li># chgrp -R wilson dir1</li></ul><h4 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523140331387.png" alt="image-20230523140331387"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523163439730.png" alt="image-20230523163439730"></p><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><p>作用：备份文件</p><p>格式：tar [选项]  压缩文件名  路径</p><table><thead><tr><th>-c</th><th>创建备份</th></tr></thead><tbody><tr><td>-C path</td><td>切换到指定目录</td></tr><tr><td>-f</td><td>指定备份文件</td></tr><tr><td>-t</td><td>测试备份文件</td></tr><tr><td>-v</td><td>显示指令执行过程</td></tr><tr><td>-x</td><td>从备份中还原文件</td></tr><tr><td>-z</td><td>通过gzip指令处理备份文件</td></tr></tbody></table><p>例子</p><ul><li># tar cvf dir1.tar dir1</li><li># tar xvf dir1.tar</li><li># tar xvf dir1.tar -C /tmp</li><li># tar zcvf dir1.tar.gz dir1</li><li># tar zxvf dir1.tar.gz</li></ul><p>f必须放到最后</p><p>压缩 tar -zcvf 压缩文件名 包内文件路径</p><p>解压 tar -zxvf 压缩文件名</p><h4 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h4><p>作用：用于压缩文件</p><p>格式：gzip [选项] 文件…</p><table><thead><tr><th>-d</th><th>解开压缩文件</th></tr></thead><tbody><tr><td>-l</td><td>列出压缩文件的相关信息</td></tr><tr><td>-r</td><td>递归处理指定目录</td></tr><tr><td>-v</td><td>显示指令执行过程</td></tr><tr><td>-t</td><td>测试压缩文件是否有误</td></tr></tbody></table><p>例子</p><ul><li># gzip dir1</li><li># gzip -drv dir1</li></ul><h4 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h4><p>作用：用于解压缩zip文件</p><p>格式：unzip [选项] 路径</p><table><thead><tr><th>-n</th><th>解压时不要覆盖原有文件</th></tr></thead><tbody><tr><td>-l</td><td>列出压缩文件的相关信息</td></tr><tr><td>-d dir</td><td>指定解压时存放的目录</td></tr><tr><td>-v</td><td>显示指令执行过程</td></tr><tr><td>-t</td><td>测试压缩文件是否有误</td></tr></tbody></table><p>例子</p><ul><li># unzip a.txt.zip</li><li># unzip -d /tmp a.txt.zip</li></ul><h4 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h4><p>提取列数据 用于格式化输出，将数据按照我们想要的方式来显示，并且可以做一些基本的统计工作。</p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523164037934.png" alt="image-20230523164037934"></p><p>grep 行截取</p><p>cut（制表符分隔） awk（空格、制表符分隔） 列截取</p><h4 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h4><p>作用：自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等</p><p>格式：sed [选项] 处理格式路径</p><table><thead><tr><th>a</th><th>在指定行号之后插入</th></tr></thead><tbody><tr><td>c</td><td>整行替换</td></tr><tr><td>s</td><td>匹配替换</td></tr><tr><td>i</td><td>在指定行号位置插入</td></tr><tr><td>d</td><td>删除</td></tr></tbody></table><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523164526132.png" alt="image-20230523164526132" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523164708051.png" alt="image-20230523164708051" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523164816395.png" alt="image-20230523164816395" style="zoom:50%;" /><p>sed是一种几乎包括在所有UNIX平台的轻量级流编辑器。sed主要是用来将数据进行选取、替换、删除、新增的命令。</p><h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><p>作用：从指定文件中过滤或提取特定内容，并显示在当前屏幕上</p><p>格式：cut [选项] 路径</p><table><thead><tr><th>-b</th><th>以字节为单位进行分割</th></tr></thead><tbody><tr><td>-c</td><td>以字符为单位进行分割</td></tr><tr><td>-d</td><td>自定义分隔符，默认为制表符</td></tr><tr><td>-f</td><td>与-d一起使用，指定显示哪个区域</td></tr></tbody></table><p>例子</p><ul><li>自定义分隔符,指定显示哪个区域<ul><li># cut -d: -f1,3,5 /etc/passwd</li><li># cut -d: -f 1-5 /etc/passwd</li></ul></li><li>以字符为单位进行分割<ul><li># cut -c2-5 /etc/passwd</li><li># cut -c2,5,7 /etc/passwd</li></ul></li></ul><h4 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h4><p>作用：用于转换或删除文件中的字符</p><p>格式：tr [-d] 字符串1 字符串2</p><p>例子</p><ul><li># cat /etc/passwd | tr ‘a-z’ ‘A-Z’</li><li># tr ‘a-z’ ‘A-Z’ &lt; /etc/passwd</li><li># tr -d ‘a-c’ &lt; test.txt</li></ul><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>作用：查找文件或者目录</p><p>格式：find 路径 [选项] 表达式</p><table><thead><tr><th>-amin n</th><th>在过去n<strong>分钟</strong>内被<strong>读取</strong>过的文件</th></tr></thead><tbody><tr><td>-atime n</td><td>在过去n<strong>天</strong>内被<strong>读取</strong>过的文件</td></tr><tr><td>-cmin n</td><td>在过去n<strong>分钟</strong>内被<strong>修改</strong>过的文件</td></tr><tr><td>-ctime n</td><td>在过去n<strong>天</strong>内被<strong>修改</strong>过的文件</td></tr><tr><td>-type c</td><td>文件<strong>类型</strong>是c的文件</td></tr><tr><td>-perm p</td><td>文件<strong>权限</strong>为p的文件</td></tr><tr><td>-name n</td><td><strong>文件名</strong>为n的文件</td></tr></tbody></table><p>例子</p><ul><li># find . -name “*.conf”</li><li># find / -perm 765 -name “*.txt”</li><li># find /etc -type f -exec ls -l ‘{}’ ;<ul><li>查找普通格式的文件</li><li>执行命令</li></ul></li></ul><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523165809018.png" alt="image-20230523165809018"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523170104965.png" alt="image-20230523170104965"></p><h3 id="软连接和硬连接的区别和联系"><a href="#软连接和硬连接的区别和联系" class="headerlink" title="软连接和硬连接的区别和联系"></a>软连接和硬连接的区别和联系</h3><h4 id="硬连接（hard-link）"><a href="#硬连接（hard-link）" class="headerlink" title="硬连接（hard link）"></a>硬连接（hard link）</h4><p>​    给文件一个<strong>副本</strong>（别名），同时建立两者之间的连接关系，修改其中一个，与其连接的文件同时被修改，如果删除其中一个，其余的文件不受影响。磁盘上只有一份数据。<strong>硬链接是存在同一个文件系统中</strong>。</p><h4 id="软连接-symbolic-link"><a href="#软连接-symbolic-link" class="headerlink" title="软连接(symbolic link)"></a>软连接(symbolic link)</h4><p>​    软链接的方式则是产生一个特殊的文件，该文件的内容是指向另一个文件的位置。它只是一个<strong>快捷方式</strong>，删除了源文件，这个连接文件就没用了。<strong>软链接可以跨越不同的文件系统。</strong></p><h4 id="区别于联系"><a href="#区别于联系" class="headerlink" title="区别于联系"></a>区别于联系</h4><ul><li>适用场景</li><li>inode节点</li><li>链接数</li><li>文件的属性</li><li>对链接进行操作（修改，删除）对原文件的影响</li><li>对原文件进行操作（修改，删除）对链接的影响</li><li><strong>需要指定绝对路径，否则链接失效</strong></li></ul><h3 id="常见正则表达式"><a href="#常见正则表达式" class="headerlink" title="常见正则表达式"></a>常见正则表达式</h3><ul><li><p>^<br>锚定行的开始，如：’^grep’ 匹配所有以grep开头的行</p></li><li><p>$<br>锚定行的结束，如：’grep$’ 匹配所有以grep结尾的行</p></li><li><p>.<br>匹配一个非换行符的字符，如：’gr.p’ 匹配gr后接一个任意字符，然后是p</p></li><li><p>*<br>匹配0个或多个先前字符，如：’*grep’ 匹配所有一个或多个空格后紧跟grep的行。.*一起用代表任意字符</p></li><li><p>[]<br>匹配一个指定范围内的字符，如：’[Gg]rep’ 匹配Grep和grep</p></li><li><p>[^]<br>匹配一个不在指定范围内的字符，如：’[^A-F]rep’ 匹配不包含A-F的一个字母开头，紧跟rep的行</p></li><li><p>\(..\)<br>标记匹配字符，如：’\(love\)’ ，love被标记为1</p></li><li><p>\&lt;<br>锚定单词的开始，如：’\&lt;grep’匹配包含以grep开头的单词的行</p></li><li><p>\&gt;<br>锚定单词的结束，如：’grep\&gt;’匹配包含以grep结尾的单词的行</p></li><li><p>x\{m\}<br>重复字符x，m次，如：’o\{5\}’ 匹配包含5个o的行</p></li><li><p>x\{m,\}<br>重复字符x，至少m次，如：’o\{5,\}’ 匹配至少有5个o的行</p></li><li><p>x\{m,n\}<br>重复字符x，至少m次，不多于n次，如：’o\{5,10\}’匹配5–10个o的行</p></li><li><p>\w </p><p>匹配文字和数字字符，也就是[A-Za-z0-9]，如：’G\w*p’匹配以G后跟零个或多个文字或数字字符，然后是p</p></li><li><p>\W </p><p>\w的反置形式，匹配一个或多个非单词字符，如点号句号等</p></li><li><p>\b </p><p>单词锁定符，如: ‘\bgrep\b’只匹配grep</p></li></ul><h2 id="第五讲"><a href="#第五讲" class="headerlink" title="第五讲"></a>第五讲</h2><h3 id="cal、date、wc、sort、which、whereis、su、yum、sudo"><a href="#cal、date、wc、sort、which、whereis、su、yum、sudo" class="headerlink" title="cal、date、wc、sort、which、whereis、su、yum、sudo"></a>cal、date、wc、sort、which、whereis、su、yum、sudo</h3><h4 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h4><p>作用：打印日期</p><p>格式：cal</p><table><thead><tr><th>-3</th><th>显示最近三个月的日历</th></tr></thead><tbody><tr><td>-s</td><td>将星期天作为月的第一天</td></tr><tr><td>-m</td><td>将星期一作为月的第一天</td></tr><tr><td>-y</td><td>显示当年日历</td></tr></tbody></table><p>例子：</p><ul><li># cal</li><li># cal -3</li><li># cal 2 2022</li></ul><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><p>作用：显示或设定系统的日期与时间</p><p>格式：date [选项] 时间格式</p><table><thead><tr><th>%H</th><th>小时(00..23)</th></tr></thead><tbody><tr><td>%M</td><td>分钟(00..59)</td></tr><tr><td>%S</td><td>秒(00..60)</td></tr><tr><td>%Y</td><td>完整月份(0000..9999)</td></tr><tr><td>%m</td><td>月份(01..12)</td></tr><tr><td>%d</td><td>日(01..31)</td></tr></tbody></table><p>例子</p><ul><li># date</li><li># date ’+%Y-%m-%d %H:%M:%S’</li></ul><h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h4><p>作用：默认统计文件内的行／字和字节数 </p><p>格式：wc  [选项] 文件路径</p><table><thead><tr><th>-c</th><th>按字节统计</th></tr></thead><tbody><tr><td>-l</td><td>按行数统计</td></tr><tr><td>-m</td><td>按字符统计</td></tr><tr><td>-w</td><td>按单词统计</td></tr></tbody></table><p>例子</p><ul><li># wc /etc/passwd</li><li># cat /etc/passwd | wc -l</li></ul><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523171621006.png" alt="image-20230523171621006"></p><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>作用：对内容排序</p><p>格式：sort [选项] 文件路径</p><table><thead><tr><th>-f</th><th>排序时，将小写字母视为大写字母</th></tr></thead><tbody><tr><td>-n</td><td>按照数值大小排序</td></tr><tr><td>-u</td><td>去重排序</td></tr><tr><td>-o file</td><td>将排序后的结果存入指定的文件</td></tr><tr><td>-r</td><td>以相反的顺序来排序</td></tr></tbody></table><p>例子</p><ul><li># sort /etc/passwd</li><li># sort -r /etc/passwd</li><li># sort -o out.txt -n /etc/passwd</li></ul><p>sort以空格为分隔符，将一行分割为多个关键字对文件进行排序，它并没有对文件内容进行实际排序，只是将文件内容有序输出</p><h4 id="which、whereis"><a href="#which、whereis" class="headerlink" title="which、whereis"></a>which、whereis</h4><p>作用：查找文件</p><p>格式： which / whereis 命令</p><p>例子</p><ul><li># which useradd</li><li># whereis useradd</li><li># which ls</li><li># whereis ls</li></ul><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523172245039.png" alt="image-20230523172245039"></p><h4 id="su"><a href="#su" class="headerlink" title="su"></a>su</h4><p>作用：变更为其他使用者的身份。除 root 外，需要键入该使用者的密码</p><p>格式： su [选项] [用户名]</p><p>例子</p><ul><li># su</li><li># su tak</li><li># su -c ls tak</li><li># su - tak -c ls 变更账号为tak的使用者，并执行指令（ls）后再变回原来使用者</li></ul><h4 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h4><h4 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h4><p>作用：以系统管理者的身份执行指令</p><p>格式： sudo 命令</p><p>CentOS7默认没有普通用户具有sudo权限</p><p>例子 # sudo cat /etc/shadow</p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523172625558.png" alt="image-20230523172625558"></p><h3 id="vi三种模式的功能、切换"><a href="#vi三种模式的功能、切换" class="headerlink" title="vi三种模式的功能、切换"></a>vi三种模式的功能、切换</h3><p>命令模式</p><ul><li>启动vi后默认模式</li><li>按下ESC键可进入命令模式</li><li>输入的字符被当成命令，字符不回显</li></ul><p>插入模式</p><ul><li>命令模式下通过i、a、o、c、r、s等命令进入</li><li>输入的字符被当成文本内容，显示在屏幕上</li></ul><p>末行模式</p><ul><li>命令模式下通过:、/、?等命令进入</li><li>显示在屏幕的最后一行</li><li>命令执行后，自动切换到命令模式</li></ul><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523194304373.png" alt="image-20230523194304373"></p><h3 id="末行模式：保存、退出、显示-取消行号、搜索、替换"><a href="#末行模式：保存、退出、显示-取消行号、搜索、替换" class="headerlink" title="末行模式：保存、退出、显示/取消行号、搜索、替换"></a>末行模式：保存、退出、显示/取消行号、搜索、替换</h3><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523194520961.png" alt="image-20230523194520961"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523194648929.png" alt="image-20230523194648929"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523194718604.png" alt="image-20230523194718604"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523194821924.png" alt="image-20230523194821924"></p><h3 id="命令模式：光标移动、删除恢复、复制粘贴、替换、切换到插入模式（含课外补充内容、课外作业）"><a href="#命令模式：光标移动、删除恢复、复制粘贴、替换、切换到插入模式（含课外补充内容、课外作业）" class="headerlink" title="命令模式：光标移动、删除恢复、复制粘贴、替换、切换到插入模式（含课外补充内容、课外作业）"></a>命令模式：光标移动、删除恢复、复制粘贴、替换、切换到插入模式（含课外补充内容、课外作业）</h3><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523194922284.png" alt="image-20230523194922284"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523195049270.png" alt="image-20230523195049270"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523195129791.png" alt="image-20230523195129791"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523195217253.png" alt="image-20230523195217253"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523195246239.png" alt="image-20230523195246239"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523195347664.png" alt="image-20230523195347664"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523195438758.png" alt="image-20230523195438758"></p><h4 id="课外补充"><a href="#课外补充" class="headerlink" title="课外补充"></a>课外补充</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523195743675.png" alt="image-20230523195743675"></p><h4 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523195840553.png" alt="image-20230523195840553"></p><h3 id="vi与shell交互"><a href="#vi与shell交互" class="headerlink" title="vi与shell交互"></a>vi与shell交互</h3><p>在末行模式下用“！”符号来访问Linux的shell</p><ul><li>例如</li><li>:!cat /etc/passwd | more</li><li>:! /bin/bash</li></ul><h3 id="vi冲突处理"><a href="#vi冲突处理" class="headerlink" title="vi冲突处理"></a>vi冲突处理</h3><ul><li>每次打开文件会创建一个名为 *.swp 的临时文件</li><li>当多界面编辑、vi异常退出时会导致异常</li><li>删除 *.swp 即可</li></ul><h3 id="文本格式转换"><a href="#文本格式转换" class="headerlink" title="文本格式转换"></a>文本格式转换</h3><p>unix2dos（linux转window）、dos2unix（window转linux）</p><ul><li>使用</li><li>unix2dos | dos2unix filename #格式转换后覆盖源文件</li><li>unix2dos | dos2unix -n filename newFilename #格式转换后存为新文件</li></ul><h2 id="第六讲"><a href="#第六讲" class="headerlink" title="第六讲"></a>第六讲</h2><h3 id="ifconfig、ifup、ifdown、ping、netstat、service、chkconfig"><a href="#ifconfig、ifup、ifdown、ping、netstat、service、chkconfig" class="headerlink" title="ifconfig、ifup、ifdown、ping、netstat、service、chkconfig"></a>ifconfig、ifup、ifdown、ping、netstat、service、chkconfig</h3><h4 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523210204529.png" alt="image-20230523210204529"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523210546615.png" alt="image-20230523210546615"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523210604759.png" alt="image-20230523210604759"></p><h4 id="ifup、ifdown"><a href="#ifup、ifdown" class="headerlink" title="ifup、ifdown"></a>ifup、ifdown</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523210404221.png" alt="image-20230523210404221"></p><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4><p>作用：网络连通性测试</p><p>格式：ping [选项] &lt;目的主机名或IP地址&gt;</p><table><thead><tr><th>-c &lt;完成次数&gt;</th><th>设置完成要求回应的次数</th></tr></thead><tbody><tr><td>-s &lt;数据包大小&gt;</td><td>设置数据包的大小</td></tr><tr><td>-t &lt;存活数值&gt;</td><td>设置存活数值TTL的大小</td></tr><tr><td>-v</td><td>详细显示指令的执行过程</td></tr></tbody></table><p>例子</p><ul><li># ping <a href="http://www.baidu.com/">www.baidu.com</a></li><li># ping -c 4 <a href="http://www.baidu.com/">www.baidu.com</a></li></ul><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><p>作用:用于显示网络状态</p><p>格式: netstat [选项]</p><table><thead><tr><th>-a或–all</th><th>显示所有连线中的Socket</th></tr></thead><tbody><tr><td>-A&lt;网络类型&gt;或–&lt;网络类型&gt;</td><td>列出该网络类型连线中的相关地址</td></tr><tr><td>-c或–continuous</td><td>持续列出网络状态</td></tr><tr><td>-e或–extend</td><td>显示网络其他相关信息</td></tr><tr><td>-l或–listening</td><td>显示监控中的服务器的Socket</td></tr><tr><td>-n或–numeric</td><td>直接使用IP地址，而不通过域名服务器</td></tr><tr><td>-p或–programs</td><td>显示正在使用Socket的程序识别码和程序名称</td></tr><tr><td>-t或–tcp</td><td>显示TCP传输协议的连线状况</td></tr><tr><td>-u或–udp</td><td>显示UDP传输协议的连线状况</td></tr><tr><td>-v或–verbose</td><td>显示指令执行过程</td></tr></tbody></table><p>例子</p><ul><li># netstat -a    （显示所有连线中的Socket）</li><li># netstat -aux  （列出所有监听UNIX端口和udp端口）</li><li># netstat -ntlp | grep port   （查看端口使用）</li></ul><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><p>作用：用于对系统服务进行管理</p><p>格式：service 服务名 [ start | stop | restart | status ]</p><p>例子</p><ul><li># service sshd restart</li><li># service atd status</li></ul><h4 id="chkconfig"><a href="#chkconfig" class="headerlink" title="chkconfig"></a>chkconfig</h4><p>作用：用于检查和设置系统的各种服务，<strong>设置启动项</strong></p><p>格式：chkconfig [选项] 服务名 [状态]</p><table><thead><tr><th>–add</th><th>添加指定的新服务</th></tr></thead><tbody><tr><td>–del</td><td>删除指定服务</td></tr><tr><td>–level&lt;运行级别编号&gt;</td><td>改变服务的运行级别及启动信息</td></tr><tr><td>–list</td><td>显示所有或指定服务，以及他们在每个运行级别是否启动</td></tr></tbody></table><p>提供了一个维护/etc/rc[0~6] d 文件夹的命令行工具，它减轻了系统直接管理这些文件夹中的符号连接的负担</p><p>chkconfig不是立即自动禁止或激活一个服务，它只是简单的改变了符号连接，需要重启才能生效</p><p>例子</p><ul><li># chkconfig –list</li><li># chkconfig –add mysql</li><li># chkconfig –level 2345 mysql on</li></ul><h4 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h4><p>主要负责控制systemd系统和服务管理器</p><p>是一个系统管理守护进程、工具和库的集合，用于取代System V、service和chkconfig命令</p><blockquote><p>service 对比</p><p>例子</p><p># systemctl start network.service</p><p># systemctl restart sshd</p><table><thead><tr><th><strong>daemon****命令</strong></th><th><strong>systemctl****命令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>service [服务] start</td><td>systemctl start [unit type]</td><td>启动服务</td></tr><tr><td>service [服务] stop</td><td>systemctl stop [unit type]</td><td>停止服务</td></tr><tr><td>service [服务] restart</td><td>systemctl restart [unit type]</td><td>重启服务</td></tr></tbody></table></blockquote><blockquote><p>chkconfig 对比</p><p>例子</p><p># systemctl enable nginx.service</p><p># systemctl disable sshd</p><table><thead><tr><th><strong>daemon****命令</strong></th><th><strong>systemctl****命令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>chkconfig [服务] on</td><td>systemctl enable [unit type]</td><td>设置服务开机启动</td></tr><tr><td>chkconfig [服务] off</td><td>systemctl disable [unit type]</td><td>设备服务禁止开机启动</td></tr></tbody></table></blockquote><h3 id="网络配置文件的各自作用、设置静态IP方法"><a href="#网络配置文件的各自作用、设置静态IP方法" class="headerlink" title="网络配置文件的各自作用、设置静态IP方法"></a>网络配置文件的各自作用、设置静态IP方法</h3><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523211048045.png" alt="image-20230523211048045"></p><h4 id="设置静态IP方法"><a href="#设置静态IP方法" class="headerlink" title="设置静态IP方法"></a>设置静态IP方法</h4><h3 id="开机自启动三种方式"><a href="#开机自启动三种方式" class="headerlink" title="开机自启动三种方式"></a>开机自启动三种方式</h3><h4 id="开机自启动-etc-rc-d-rc-local"><a href="#开机自启动-etc-rc-d-rc-local" class="headerlink" title="开机自启动-/etc/rc.d/rc.local"></a>开机自启动-/etc/rc.d/rc.local</h4><ol><li><p>赋予脚本可执行权限</p><p> # chmod +x  /opt/script/autostart.sh</p></li><li><p>在 /etc/rc.d/rc.local 末尾增加想要执行的脚本内容</p><p> # su - user -c ‘/opt/script/autostart.sh’</p></li><li><p>给 /etc/rc.d/rc.local 赋予可执行权限</p><p> # chmod +x /etc/rc.d/rc.local</p></li></ol><h4 id="开机自启动-chkconfig"><a href="#开机自启动-chkconfig" class="headerlink" title="开机自启动-chkconfig"></a>开机自启动-chkconfig</h4><ol><li><p>将脚本移动到 /etc/rc.d/init.d目录下</p><p> # mv  /opt/script/autostart.sh  /etc/rc.d/init.d</p></li><li><p>赋予脚本可执行权限</p><p> # chmod +x  /etc/rc.d/init.d/autostart.sh</p></li><li><p>添加脚本到开机自动启动项目中</p><p> # cd /etc/rc.d/init.d</p><p> # chkconfig –add autostart.sh</p><p> # chkconfig autostart.sh on</p></li></ol><h4 id="开机自启动-systemctl"><a href="#开机自启动-systemctl" class="headerlink" title="开机自启动 - systemctl"></a>开机自启动 - systemctl</h4><p>默认情况下，服务通过yum install时，会自动配置好unit文件</p><p>默认在 /usr/lib/systemd/system 目录下</p><p>以Jenkins为例</p><p># systemctl enable jenkins.service</p><p># systemctl start  jenkins.service</p><h2 id="第七讲"><a href="#第七讲" class="headerlink" title="第七讲"></a>第七讲</h2><h3 id="两个网络模式的区别与联系-含图-，如何选择"><a href="#两个网络模式的区别与联系-含图-，如何选择" class="headerlink" title="两个网络模式的区别与联系(含图)，如何选择"></a>两个网络模式的区别与联系(含图)，如何选择</h3><ul><li>独立的守护进程工作模式</li><li>基于xinetd的工作模式</li></ul><h4 id="独立的守护进程模式（stand-alone）"><a href="#独立的守护进程模式（stand-alone）" class="headerlink" title="独立的守护进程模式（stand-alone）"></a>独立的守护进程模式（stand-alone）</h4><ul><li>是Unix传统的C/S模式的访问模式</li><li>在Client/Server模式下，服务器监听（Listen）在一个特定的端口上等待客户连接，连接成功后服务器和客户端通过端口进行数据通信</li><li>守护进程的工作就是打开一个端口，并且等待（Listen）进入连接</li><li>如果客户端发起一个连接请求，守护进程就创建（Fork）一个子进程响应这个连接，而主进程继续监听其他的服务请求</li><li>运行独立的守护进程工作方式称作：stand-alone</li></ul><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523230202319.png" alt="image-20230523230202319"></p><h4 id="基于xinetd的工作模式"><a href="#基于xinetd的工作模式" class="headerlink" title="基于xinetd的工作模式"></a>基于xinetd的工作模式</h4><ul><li>支持对TCP、UDP、RPC服务的管理</li><li>可以实施基于时间段的访问控制</li><li>功能完备的log功能，可以记录连接成功、连接失败的行为</li><li>能够有效地防止拒绝服务（DoS）的攻击</li><li>能够限制同时运行的同一类型的服务器的数目</li><li>能够限制log文件大小</li><li>能够将某个服务绑定在特定的系统接口上，从而实现只能允许私有网络访问某项服务</li><li>能够实现作为其它系统的代理</li></ul><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523230545547.png" alt="image-20230523230545547"></p><ul><li><p>xinetd能够同时监听多个指定的端口，在接受用户请求时，它能够根据用户请求的端口不同，启动不同的网络服务进程来处理这些用户请求</p></li><li><p>可以把xinetd看做一个管理启动服务的管理服务器，它决定把一个客户请求交给那个程序处理，然后启动相应的守护进程</p></li><li><p>运行单个xinetd就可以同时监听所有服务端口，这样就降低了系统开销，保护系统资源</p></li><li><p>但是对于访问量大、经常出现并发访问时，xinetd想要频繁启动对应的网络服务进程，反而会导致系统性能下降</p></li><li><p>因此在选择基于哪种工作模式的时候，需要根据服务的使用情况具体情况具体分析</p></li></ul><h4 id="stand-alone与xinetd区别与联系"><a href="#stand-alone与xinetd区别与联系" class="headerlink" title="stand-alone与xinetd区别与联系"></a>stand-alone与xinetd区别与联系</h4><p>standalone一次性启动，运行期间一直驻留在内存中，优点是对接入信号反应快，缺点是损耗了一定的系统资源，<br>因此经常应用于对实时反应要求较高的 专业FTP服务器.</p><p>xinetd只在外部连接发送请求时才调用FTP进程，不适合应用在同时连接数量较多的系统。不占用系统资源。</p><p>反应速度：standalone &gt; xinetd<br>占用资源：standalone &gt; xinetd</p><h3 id="telnet服务的配置过程、telnet命令使用"><a href="#telnet服务的配置过程、telnet命令使用" class="headerlink" title="telnet服务的配置过程、telnet命令使用"></a>telnet服务的配置过程、telnet命令使用</h3><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523231104338.png" alt="image-20230523231104338"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523231152022.png" alt="image-20230523231152022"></p><h3 id="ftp两种工作模式的区别与联系-含图）"><a href="#ftp两种工作模式的区别与联系-含图）" class="headerlink" title="ftp两种工作模式的区别与联系(含图）"></a>ftp两种工作模式的区别与联系(含图）</h3><ul><li>主动模式PORT（服务器 主动连接 客户端）</li><li>被动模式PASV （服务器 被动等待 客户端连接）</li></ul><h4 id="主动模式PORT"><a href="#主动模式PORT" class="headerlink" title="主动模式PORT"></a>主动模式PORT</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523231451091.png" alt="image-20230523231451091"></p><p>主动模式PORT(服务器 主动连接 客户端 )</p><p>指的是FTP服务器“主动”去连接客户端的数据端口来传输数据</p><ol><li>客户端从一个任意的非特权端口N（N&gt;1024）连接到FTP服务器的命令端口（即tcp 21端口）</li><li>客户端开始监听端口N+1，并发送FTP命令“port N+1”到FTP服务器</li><li>服务器会从它自己的数据端口（20）“主动”连接到客户端指定的数据端口（N+1）</li><li>客户端就可以和ftp服务器建立数据传输通道了</li></ol><h4 id="被动模式PASV"><a href="#被动模式PASV" class="headerlink" title="被动模式PASV"></a>被动模式PASV</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523231742421.png" alt="image-20230523231742421"></p><p>被动模式PASV(服务器 被动等待 客户端连接)</p><p>指的是FTP服务器“被动”等待客户端来连接自己的数据端口</p><ol><li>客户端打开两个任意的非特权本地端口（N &gt;1024和N+1）</li><li>第一个端口连接服务器的21端口，提交PASV命令</li><li>服务器会开启一个任意的非特权端口（P &gt; 1024），并发送给客户端</li><li>客户端发起从本地端口N+1到服务器的端口的连接用来传送数据。（注意此模式下的FTP服务器不需要开启tcp 20端口了）</li></ol><h3 id="ftp的配置过程、ftp命令的使用"><a href="#ftp的配置过程、ftp命令的使用" class="headerlink" title="ftp的配置过程、ftp命令的使用"></a>ftp的配置过程、ftp命令的使用</h3><h4 id="FTP配置"><a href="#FTP配置" class="headerlink" title="FTP配置"></a>FTP配置</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523232101620.png" alt="image-20230523232101620"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523232131480.png" alt="image-20230523232131480"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523232225623.png" alt="image-20230523232225623"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523232258255.png" alt="image-20230523232258255"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523232341046.png" alt="image-20230523232341046"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523232442040.png" alt="image-20230523232442040"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523232613121.png" alt="image-20230523232613121"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523232715347.png" alt="image-20230523232715347"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523232740672.png" alt="image-20230523232740672"></p><h4 id="FTP命令"><a href="#FTP命令" class="headerlink" title="FTP命令"></a>FTP命令</h4><p>ftp xx.xx.xx.xx | open xx.xx.xx.xx</p><p>get | mget <filename></p><p>put |  mput <filename></p><p>binary | acsii 设置文件传输方式</p><p>cd 在远程主机切换目录</p><p>lcd 在本地主机切换目录</p><p>ls 在远程主机上执行ls</p><p>mkdir 在远程主机上创建目录</p><p>close 关闭</p><p>quit 退出</p><p>匿名登录</p><p>ftp | anonymous</p><p>空</p><h2 id="第八讲"><a href="#第八讲" class="headerlink" title="第八讲"></a>第八讲</h2><h3 id="shell程序的特点与用途"><a href="#shell程序的特点与用途" class="headerlink" title="shell程序的特点与用途"></a>shell程序的特点与用途</h3><p>shell是用户和系统内核之间的接口程序</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>shell程序可以认为是将shell命令按照控制结构组织到一个文本文件中，批量的交给shell去执行</li><li>不同的shell解释器使用不同的shell命令语法</li><li>shell程序解释执行，不生成可以执行的二进制文件</li></ul><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><ul><li>可以帮助用户完成特定的任务，提高使用、维护系统的效率</li><li>可以更好的配置和使用Linux，实现自动化运维</li></ul><h3 id="shell程序的编写、执行和调试"><a href="#shell程序的编写、执行和调试" class="headerlink" title="shell程序的编写、执行和调试"></a>shell程序的编写、执行和调试</h3><h4 id="如何执行"><a href="#如何执行" class="headerlink" title="如何执行"></a>如何执行</h4><ul><li><p>可以使用 /bin/bash filename</p></li><li><p>添加执行权限，指定路径执行</p><ul><li>chmod +x /path/filename</li><li>./path/filename</li></ul></li></ul><h4 id="程序编译和执行过程"><a href="#程序编译和执行过程" class="headerlink" title="程序编译和执行过程"></a>程序编译和执行过程</h4><p>一般步骤</p><ul><li>编辑文件</li><li>保存文件</li><li>将文件赋予可执行的权限</li><li>运行及排错</li></ul><p>常用到的命令</p><ul><li>vi            编辑、保存文件</li><li>ls -l         查看文件权限</li><li>chmod    改变程序执行权限</li><li>直接键入文件名运行文件</li></ul><p>一般结构</p><ul><li>shell类型</li><li>函数</li><li>主过程</li></ul><h3 id="变量声明与使用、read、位置变量、-HOME、-PATH、-？"><a href="#变量声明与使用、read、位置变量、-HOME、-PATH、-？" class="headerlink" title="变量声明与使用、read、位置变量、$HOME、$PATH、$？"></a>变量声明与使用、read、位置变量、$HOME、$PATH、$？</h3><h4 id="变量的声明和使用"><a href="#变量的声明和使用" class="headerlink" title="变量的声明和使用"></a>变量的声明和使用</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523234011535.png" alt="image-20230523234011535"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523234041505.png" alt="image-20230523234041505"></p><blockquote><p>如果字符串里包含空格，就必须用引号把它们括起来</p><p>等号两边不能有空格!!!</p><p>默认情况下，所有输入的内容都是字符串</p></blockquote><h4 id="read"><a href="#read" class="headerlink" title="read"></a>read</h4><p>使用read将用户的输入赋值给变量</p><p>例子：</p><p># echo “Input something please:”</p><p># read something</p><p># echo ${something}</p><h4 id="位置变量"><a href="#位置变量" class="headerlink" title="位置变量"></a>位置变量</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523234742173.png" alt="image-20230523234742173"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230523234856737.png" alt="image-20230523234856737"></p><p>有点类似形参与实参</p><p>$*   所有参数看做一个整体<br>$@ 所有参数不看做一个整体，而是区分对待</p><h4 id="环境变量（-HOME-PATH-）"><a href="#环境变量（-HOME-PATH-）" class="headerlink" title="环境变量（$HOME,$PATH,$?）"></a>环境变量（$HOME,$PATH,$?）</h4><table><thead><tr><th>环境变量</th><th>说明</th></tr></thead><tbody><tr><td>$HOME</td><td>用户的主目录</td></tr><tr><td>$IFS</td><td>内部的域分隔符，一般为空格符、制表符或换行符</td></tr><tr><td>$PATH</td><td>寻找命令或可执行文件的搜索路径列表，路径以冒号分隔</td></tr><tr><td>$$</td><td>Shell脚本的进程号</td></tr><tr><td>$?</td><td>紧邻的前驱命令的返回值 0=成功 1=失败</td></tr><tr><td>$TERM</td><td>使用的终端类型</td></tr><tr><td>$SHELL</td><td>查看当前用户所使用的的shell</td></tr></tbody></table><h3 id="双引号、单引号和倒引号的区别和联系"><a href="#双引号、单引号和倒引号的区别和联系" class="headerlink" title="双引号、单引号和倒引号的区别和联系"></a>双引号、单引号和倒引号的区别和联系</h3><h4 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h4><ul><li>字符串通常被放在双引号中</li><li>如果在参数中包含一个或多个空白字符，必须给参数加双引号</li><li>如果把一个带有$字符的变量放在双引号中，程序执行到该行时会把变量替换为它的值</li><li>可用\字符取消$的特殊含义</li></ul><h4 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h4><p>由单引号括起来的字符都作为普通字符出现</p><h4 id="倒引号"><a href="#倒引号" class="headerlink" title="倒引号"></a>倒引号</h4><p>倒引号括起来的字符串都被shell解释为命令行，在执行时shell会执行该命令行，并以它的标准输出结果取代整个倒引号部分</p><h3 id="简单数学运算、条件判断（字符串、数学）、逻辑运算"><a href="#简单数学运算、条件判断（字符串、数学）、逻辑运算" class="headerlink" title="简单数学运算、条件判断（字符串、数学）、逻辑运算"></a>简单数学运算、条件判断（字符串、数学）、逻辑运算</h3><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524092042044.png" alt="image-20230524092042044"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524092118313.png" alt="image-20230524092118313"></p><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524092757314.png" alt="image-20230524092757314"></p><table><thead><tr><th>常用字符串属性条件判断</th><th></th></tr></thead><tbody><tr><td>string_1 = string_2</td><td>如果string_1和string_2两个字符串相等则返回真，否则返回假；</td></tr><tr><td>string_1 != string_2</td><td>如果string_1和string_2两个字符串不相等则返回真，否则返回假；</td></tr><tr><td>-z string</td><td>如果字符串string的长度为0则返回真，否则返回假； zero</td></tr><tr><td>-n string</td><td>如果字符串string长度不为0则返回真，否则返回假；</td></tr><tr><td>string</td><td>同-n string，如果字符串string长度不为0返回真，否则返回假。</td></tr></tbody></table><table><thead><tr><th>常用的整数关系条件判断</th><th></th></tr></thead><tbody><tr><td>mum_1 –eq num_2</td><td>如果num_1和num_2相等则返回真，否则返回假；</td></tr><tr><td>mum_1 –ne num_2</td><td>如果num_1不等于num_2则返回真，否则返回假；</td></tr><tr><td>mum_1 –gt num_2</td><td>如果num_1大于num_2则返回真，否则返回假；</td></tr><tr><td>mum_1 –lt num_2</td><td>如果num_1小于num_2则返回真，否则返回假；</td></tr><tr><td>mum_1 –le num_2</td><td>如果num_1小于等于num_2则返回真，否则返回假；</td></tr><tr><td>mum_1 –ge num_2</td><td>如果num_1大于等于num_2则返回真，否则返回假；</td></tr></tbody></table><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><ul><li>逻辑与-a：condition1 -a condition2，如果两个条件都为真，则结果为真</li><li>逻辑或-o：condition1 -o condition2，如果两个条件有一个为真，则结果为真</li><li>逻辑非!：! condition，结果与condition相反 </li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524093438791.png" alt="image-20230524093438791"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524093507699.png" alt="image-20230524093507699"></p><h3 id="if、casse、for、while、until"><a href="#if、casse、for、while、until" class="headerlink" title="if、casse、for、while、until"></a>if、casse、for、while、until</h3><h4 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h4><ul><li>分支结构</li><li>循环结构</li></ul><h4 id="常见分支结构"><a href="#常见分支结构" class="headerlink" title="常见分支结构"></a>常见分支结构</h4><ul><li>if</li><li>case</li></ul><h4 id="常见循环结构"><a href="#常见循环结构" class="headerlink" title="常见循环结构"></a>常见循环结构</h4><ul><li>for</li><li>while</li><li>until</li></ul><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524093847283.png" alt="image-20230524093847283"></p><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524093920737.png" alt="image-20230524093920737"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524093943991.png" alt="image-20230524093943991"></p><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524094042864.png" alt="image-20230524094042864"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524094103460.png" alt="image-20230524094103460"></p><h4 id="while-until"><a href="#while-until" class="headerlink" title="while/until"></a>while/until</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524094144449.png" alt="image-20230524094144449"></p><h3 id="要求可以-手写shell程序"><a href="#要求可以-手写shell程序" class="headerlink" title="要求可以 手写shell程序"></a>要求可以 手写shell程序</h3><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524094237375.png" alt="image-20230524094237375"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524094550550.png" alt="image-20230524094550550"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524094640412.png" alt="image-20230524094640412"></p><h2 id="第九讲"><a href="#第九讲" class="headerlink" title="第九讲"></a>第九讲</h2><h3 id="gcc命令使用（一次编译、分开编译、不同目录、指定头文件）"><a href="#gcc命令使用（一次编译、分开编译、不同目录、指定头文件）" class="headerlink" title="gcc命令使用（一次编译、分开编译、不同目录、指定头文件）"></a>gcc命令使用（一次编译、分开编译、不同目录、指定头文件）</h3><p>gcc：</p><ul><li><p>GNU project C and C++ compiler</p></li><li><p>GNU Compiler Collection</p></li></ul><p>GCC文件扩展名规范</p><ul><li>.c为后缀的文件，是C语言源代码文件</li><li>.h为后缀的文件，是头文件</li><li>.i为后缀的文件，是已经预处理过的C源代码文件</li><li>.s为后缀的文件，是汇编语言源代码文件</li><li>.o为后缀的文件，是编译后的目标文件</li></ul><p>基本使用格式  $ gcc  [ 选项 ]   &lt;文件名&gt;</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-o file</td><td>将经过gcc处理过的结果存为文件file，这个结果文件可能是预处理文件、汇编文件、目标文件或者最终的可执行文件。假设被处理的源文件为source.suffix，如果<strong>这个</strong>选项被省略了，那么生成的可执行文件<strong>默认</strong>名称为a.out；目标文件默认名为source.o；汇编文件默认名为source.s；生成的预处理文件则发送到标准输出设备</td></tr><tr><td>-c</td><td>仅对源文件进行编译，不链接生成可执行文件。在对源文件进行查错时，或只需产生目标文件时可以使用该选项</td></tr><tr><td>-g[gdb]</td><td>在可执行文件中加入调试信息，方便进行程序的调试。如果使用中括号中的选项，表示加入gdb扩展的调试信息，方便使用gdb来进行调试</td></tr><tr><td>-O[0、1、2、3]</td><td>对生成的代码使用优化，中括号中的部分为优化级别，缺省的情况为2级优化，0为不进行优化。注意，采用更高级的优化并不一定得到效率更高的代码</td></tr><tr><td>-Dname[=definition]</td><td>将名为name的宏定义为definition，如果中括号中的部分缺省，则宏被定义为1</td></tr><tr><td>-<strong>I</strong>dir</td><td>(大写I)在编译源程序时增加一个搜索头文件的额外目录——dir，即include增加一个搜索的额外目录</td></tr><tr><td>-Ldir</td><td>(大写L)在编译源文件时增加一个搜索库文件的额外目录——dir</td></tr><tr><td>-llibrary</td><td>(小写l)在编译链接文件时增加一个额外的库，库名为library.a</td></tr><tr><td>-E</td><td>指定GCC在生成预处理文件后停止</td></tr><tr><td>-S</td><td>指定GCC在生成汇编文件后停止</td></tr><tr><td>-w</td><td>禁止所有警告</td></tr><tr><td>-Wwarning</td><td>允许产生warning类型的警告，warning可以是：main、unused等很多取值，最常用是-Wall，表示产生所有警告。如果warning取值为error，其含义是将所有警告作为错误（error），即出现警告就停止编译。</td></tr></tbody></table><h4 id="一步编译、分步编译"><a href="#一步编译、分步编译" class="headerlink" title="一步编译、分步编译"></a>一步编译、分步编译</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524100017488.png" alt="image-20230524100017488"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524100042597.png" alt="image-20230524100042597"></p><h4 id="不同目录、指定头文件"><a href="#不同目录、指定头文件" class="headerlink" title="不同目录、指定头文件"></a>不同目录、指定头文件</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524100829869.png" alt="image-20230524100829869"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524101038353.png" alt="image-20230524101038353"></p><h3 id="make工具"><a href="#make工具" class="headerlink" title="make工具"></a>make工具</h3><h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><p>根据makefile文件中预定的规则完成对特定文件的编译，最后生成对应的可执行文件</p><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>判断依赖项是否为最新，否则生成新的目标</p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524101302717.png" alt="image-20230524101302717"></p><h3 id="make层次图、makefile文件"><a href="#make层次图、makefile文件" class="headerlink" title="make层次图、makefile文件"></a>make层次图、makefile文件</h3><h4 id="make层次图"><a href="#make层次图" class="headerlink" title="make层次图"></a>make层次图</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524101831820.png" alt="image-20230524101831820"></p><h4 id="makefile文件"><a href="#makefile文件" class="headerlink" title="makefile文件"></a>makefile文件</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524101542449.png" alt="image-20230524101542449"></p><h3 id="gdb调试工具的基本使用"><a href="#gdb调试工具的基本使用" class="headerlink" title="gdb调试工具的基本使用"></a>gdb调试工具的基本使用</h3><table><thead><tr><th>file</th><th><strong>指定需要进行调试的程序</strong></th></tr></thead><tbody><tr><td>step</td><td><strong>单步（行）执行，如果遇到函数会进入函数内部</strong></td></tr><tr><td>next</td><td><strong>单步（行）执行，如果遇到函数不会进入函数内部</strong></td></tr><tr><td>run</td><td><strong>启动被执行的程序</strong></td></tr><tr><td>quit</td><td><strong>退出<strong><strong>gdb</strong></strong>调试环境</strong></td></tr><tr><td>print</td><td><strong>查看变量或者表达式的值</strong></td></tr><tr><td>break</td><td><strong>设置断点，程序执行到断点就会暂停起来</strong></td></tr><tr><td>shell</td><td><strong>执行其后的<strong><strong>shell</strong></strong>命令</strong></td></tr><tr><td>list</td><td><strong>查看指定文件或者函数的源代码，并标出行号</strong></td></tr></tbody></table><h3 id="静态函数库、动态函数库的创建与使用"><a href="#静态函数库、动态函数库的创建与使用" class="headerlink" title="静态函数库、动态函数库的创建与使用"></a>静态函数库、动态函数库的创建与使用</h3><ul><li>静态函数库 名字一般是libxxx.a</li><li>动态函数库 名字一般是libxxx.so </li><li>相对于静态函数库，动态函数库在编译的时候并没有被编译进目标代码中，程序执行到相关函数时才调用该函数库里的相应函数，因此动态函数库所产生的可执行文件比较小</li><li>使用GCC编译器可以将函数库与自己开发的程序链接起来例如libc.so中包含了标准的输入输出函数，当链接程序进行目标代码链接时会自动搜索该程序并将其链接到可执行文件中</li></ul><h4 id="静态函数库的创建与使用"><a href="#静态函数库的创建与使用" class="headerlink" title="静态函数库的创建与使用"></a>静态函数库的创建与使用</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524102735534.png" alt="image-20230524102735534"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524102748878.png" alt="image-20230524102748878"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524102822392.png" alt="image-20230524102822392"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524102835779.png" alt="image-20230524102835779"></p><h4 id="动态函数库的创建与使用"><a href="#动态函数库的创建与使用" class="headerlink" title="动态函数库的创建与使用"></a>动态函数库的创建与使用</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524103518948.png" alt="image-20230524103518948"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524103541573.png" alt="image-20230524103541573"></p><h2 id="第十讲"><a href="#第十讲" class="headerlink" title="第十讲"></a>第十讲</h2><h3 id="磁盘设备的命名方式"><a href="#磁盘设备的命名方式" class="headerlink" title="磁盘设备的命名方式"></a>磁盘设备的命名方式</h3><p>Linux系统磁盘设备命名方式遵循一定的规则</p><ul><li>前两个字母表示分区所在设备的类型<br>hd：IDE硬盘<br>sd：SCSI硬盘（U盘，移动硬盘等）</li><li>第三个字母表示分区在哪个设备上<br>hda：第一块IDE硬盘<br>sda：第一块SCSI硬盘<br>sdb：第二块SCSI硬盘</li><li>数字表示分区的次序<br>hda1：第一块IDE硬盘第一个分区<br>sdb2：第二块SCSI硬盘第二个分区</li><li>查看硬盘及分区情况<br>fdisk -l</li></ul><h3 id="Linux的文件系统、VFS的功能和作用（含图）"><a href="#Linux的文件系统、VFS的功能和作用（含图）" class="headerlink" title="Linux的文件系统、VFS的功能和作用（含图）"></a>Linux的文件系统、VFS的功能和作用（含图）</h3><h4 id="常见的文件系统"><a href="#常见的文件系统" class="headerlink" title="常见的文件系统"></a>常见的文件系统</h4><p>FAT、NTFS、ExtFAT、ext2、ext3、xfs、APFS</p><h4 id="Linux支持哪些文件系统"><a href="#Linux支持哪些文件系统" class="headerlink" title="Linux支持哪些文件系统"></a>Linux支持哪些文件系统</h4><p>输入命令 cat /proc/filesystems 查看</p><h4 id="虚拟文件系统VFS"><a href="#虚拟文件系统VFS" class="headerlink" title="虚拟文件系统VFS"></a>虚拟文件系统VFS</h4><p>VFS并不是一个实际的文件系统。只存在于内存，系统启动时建立，系统关闭时消亡</p><h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><ul><li>记录可用文件系统的类型</li><li>将设备与对应的文件系统联系起来</li><li>处理面向文件的通用操作</li><li>涉及到针对文件系统的操作时，把他们映射到相关的物理文件系统</li></ul><h5 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h5><ul><li>更好的支持多种不同的文件系统，把文件系统从操作系统和系统服务中分离处理来，在它们之间使用了一个接口层，也就是虚拟文件系统VFS（Virtual File System）</li><li>VFS是Linux内核中的软件层，它在内核中提供了一组标准的、抽象的文件操作，允许不同的文件系统实现共存，并向用户空间程序提供统一的文件系统接口</li><li>通过VFS将不同的文件系统的实现细节隐藏起来，从外部看上去，所有的文件系统都是一样的</li></ul><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524104104803.png" alt="image-20230524104104803"></p><h3 id="设备挂载过程"><a href="#设备挂载过程" class="headerlink" title="设备挂载过程"></a>设备挂载过程</h3><ul><li>查看设备：使用命令 “fdisk -l” 可以查看系统的存储设备</li><li>挂载设备：首先使用mkdir命令建立挂载点目录，然后再使用mount命令挂载相关设备</li><li>访问设备</li><li>卸载设备：用户在使用完挂载设备后，不能直接将挂载设备从系统拔出，否则会出现问题，严重的会导致系统崩溃。系统必须先执行卸载命令然后再把该设备拔出</li></ul><h3 id="mkfs、fdisk、mount、umount、df、du、whoami、who、w、jobs、bg、fg、-amp-（后台进程启动）"><a href="#mkfs、fdisk、mount、umount、df、du、whoami、who、w、jobs、bg、fg、-amp-（后台进程启动）" class="headerlink" title="mkfs、fdisk、mount、umount、df、du、whoami、who、w、jobs、bg、fg、&amp;（后台进程启动）"></a>mkfs、fdisk、mount、umount、df、du、whoami、who、w、jobs、bg、fg、&amp;（后台进程启动）</h3><h4 id="mkfs"><a href="#mkfs" class="headerlink" title="mkfs"></a>mkfs</h4><p>作用：把指定的设备格式为指定的文件系统</p><p>格式：mkfs [选项][-t &lt;文件系统类型&gt;] [设备名称] [区块数]</p><p>例子# mkfs –t ext3 /dev/hda4</p><h4 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h4><p>作用：创建和维护分区表</p><p>格式：fdisk [必要参数][选择参数]</p><table><thead><tr><th>-l</th><th>列出素所有分区表</th></tr></thead><tbody><tr><td>-u</td><td>与-l配合使用，显示分区数目</td></tr></tbody></table><p>例子</p><ul><li># fdisk -l</li><li># fdisk -lu</li></ul><h4 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h4><p>作用：挂载Linux系统外的文件</p><p>格式：mount [选项] &lt;挂载设备名称&gt;  &lt;挂载点&gt;</p><table><thead><tr><th>-t</th><th>指定文件系统类型，通常不必指定。mount 会自动选择正确的类型</th></tr></thead><tbody><tr><td>-o auto、-o noauto</td><td>打开/关闭自动挂上模式</td></tr><tr><td>-o defaults</td><td>使用预设的选项 rw, suid, dev, exec, auto, nouser, and async</td></tr><tr><td>-o ro</td><td>用只读模式挂上</td></tr><tr><td>-o rw</td><td>用可读写模式挂上</td></tr></tbody></table><p>例子：</p><ul><li># mount  -t  ext2  /dev/fd0  /mnt/floppy</li><li># mount  -o  iocharset=cp936 /dev/sda1  /mnt/usb</li><li># mount  -o ro /dev/hda1 /mnt</li></ul><h4 id="umount"><a href="#umount" class="headerlink" title="umount"></a>umount</h4><p>作用：卸除文件系统</p><p>格式：umount [选项] 挂载点或设备名</p><table><thead><tr><th>-a</th><th>卸除/etc/mtab中记录的所有文件系统</th></tr></thead><tbody><tr><td>-n</td><td>卸除时不要将信息存入/etc/mtab文件中</td></tr><tr><td>-r</td><td>若无法成功卸除，则尝试以只读的方式重新挂入文件系统</td></tr><tr><td>-t &lt;文件系统类型&gt;</td><td>仅卸除选项中所指定的文件系统</td></tr><tr><td>-v</td><td>执行时显示详细的信息</td></tr></tbody></table><p>例子</p><ul><li># umount /mnt/cd</li><li># umount -v /dev/sda1</li></ul><h4 id="df"><a href="#df" class="headerlink" title="df"></a>df</h4><p>作用：查看磁盘空间使用情况</p><p>格式：df [选项] [路径]</p><table><thead><tr><th>-a</th><th>–all 包含所有的具有 0 Blocks 的文件系统</th></tr></thead><tbody><tr><td>-h</td><td>–human-readable 使用人类可读的格式</td></tr><tr><td>-i</td><td>–inodes 列出 inode 资讯，不列出已使用 block</td></tr><tr><td>-l</td><td>–local 限制列出的文件结构</td></tr><tr><td>-t</td><td>–type=TYPE 限制列出文件系统的 TYPE</td></tr><tr><td>-T</td><td>–print-type 显示文件系统的形式</td></tr></tbody></table><p>例子</p><ul><li># df </li><li># df -ahT</li></ul><h4 id="du"><a href="#du" class="headerlink" title="du"></a>du</h4><p>作用：统计目录或文件所占磁盘空间大小</p><p>格式：du [选项/参数] [目录名…]</p><table><thead><tr><th>-a</th><th>递归显示制定目录中各个文件及下级目录中各文件占用的数据块数</th></tr></thead><tbody><tr><td>-h</td><td>以友好直观方式显示信息，即以KB或MB为单位</td></tr><tr><td>-b</td><td>以字节为单位列出磁盘空间使用情况</td></tr><tr><td>-m</td><td>以MB为单位显示</td></tr><tr><td>-s</td><td>对每个目录参数只给出占用的数据块总数</td></tr></tbody></table><p>例子    du -m /tmp</p><h4 id="whoami-who-w"><a href="#whoami-who-w" class="headerlink" title="whoami/who/w"></a>whoami/who/w</h4><p>whoami    查看当前登录用户名称</p><p>id    查看当前登录用户信息[-u] 只显示UID[-g] 只显示GID</p><p>who    查看当前登录用户列表[-H] 显示标题[-l] 显示来源</p><p>w    查看当前登录用户情况，who的增强版</p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524110919905.png" alt="image-20230524110919905"></p><h4 id="jobs、bg、fg、-amp"><a href="#jobs、bg、fg、-amp" class="headerlink" title="jobs、bg、fg、&amp;"></a>jobs、bg、fg、&amp;</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524111235420.png" alt="image-20230524111235420"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524111328669.png" alt="image-20230524111328669"></p><h3 id="进程的概念、进程和程序的区别与联系"><a href="#进程的概念、进程和程序的区别与联系" class="headerlink" title="进程的概念、进程和程序的区别与联系"></a>进程的概念、进程和程序的区别与联系</h3><h4 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h4><ul><li>Linux系统上所有运行的东西都可以称之为一个进程，如每个用户任务、每个系统管理任务</li><li>进程是一个程序的运行</li></ul><p>Linux操作系统包括三种不同类型的进程</p><ul><li>交互进程：由shell启动的进程</li><li>批处理进程：这种进程和终端没有联系，是一个进程序列</li><li>守护进程：在后台持续运行的进程</li></ul><h4 id="进程和程序的区别与联系"><a href="#进程和程序的区别与联系" class="headerlink" title="进程和程序的区别与联系"></a>进程和程序的区别与联系</h4><ul><li>程序只是一个静态的指令集合，不占系统的运行资源，只占用磁盘空间</li><li>进程是一个随时都可能发生变化的、动态的、使用系统运行资源（cpu，内存等）的程序</li><li>一个程序可以启动多个进程</li></ul><h3 id="at和crontab的区别与联系、各自的创建、删除、查看"><a href="#at和crontab的区别与联系、各自的创建、删除、查看" class="headerlink" title="at和crontab的区别与联系、各自的创建、删除、查看"></a>at和crontab的区别与联系、各自的创建、删除、查看</h3><h4 id="at和crontab的区别与联系"><a href="#at和crontab的区别与联系" class="headerlink" title="at和crontab的区别与联系"></a>at和crontab的区别与联系</h4><ul><li>at命令产生的进程调度不具有周期性，只能在时间条件满足时执行一次（不具有周期性）</li><li>crontab让使用者在固定时间或固定时间间隔执行程序（重复周期性）</li></ul><h4 id="at"><a href="#at" class="headerlink" title="at"></a>at</h4><p>作用：指定在将来的某个时间点执行某些命令</p><p>用法： at [选项] [时间]</p><table><thead><tr><th>-m</th><th>当 at 工作完成后，无论命令是否输出，都用 E-mail 通知执行 at 命令的用户。</th></tr></thead><tbody><tr><td>-c 工作标识号</td><td>显示该 at 工作的实际内容。</td></tr><tr><td>-t 时间</td><td>在指定时间提交工作并执行，时间格式为 [[CC]YY]MMDDhhmm。</td></tr><tr><td>-d</td><td>删除某个工作，需要提供相应的工作标识号（ID），同 atrm 命令的作用相同。</td></tr><tr><td>-l</td><td>列出当前所有等待运行的工作，和 atq 命令具有相同的额作用。</td></tr><tr><td>-f 脚本文件</td><td>指定所要提交的脚本文件。</td></tr></tbody></table><table><thead><tr><th>HH:MM</th><th>比如 04:00 AM。如果时间已过，则它会在第二天的同一时间执行</th></tr></thead><tbody><tr><td>Midnight(midnight)</td><td>代表 12:00 AM（也就是 00:00）</td></tr><tr><td>Noon(noon)</td><td>代表 12:00 PM（相当于 12:00）</td></tr><tr><td>Teatime(teatime)</td><td>代表 4:00 PM（相当于 16:00）</td></tr><tr><td>英文月名 日期 年份</td><td>比如 January 15 2018 表示 2018 年 1 月 15 号，年份可有可无</td></tr><tr><td>MMDDYY、MM/DD/YY、MM.DD.YY</td><td>比如 011518 表示 2018 年 1 月 15 号</td></tr><tr><td>now+时间</td><td>以 minutes、hours、days 或 weeks 为单位，例如 now+5 days 表示命令在 5 天之后的此时此刻执行</td></tr></tbody></table><h5 id="交互式"><a href="#交互式" class="headerlink" title="交互式"></a>交互式</h5><p>在shell提示符下输入”at 时间”，然后按回车键。这时在下一行shell会等待用户继续输入要执行的命令。每一行输入一个命令，所有命令都输入完毕后按Ctrl+d键结束</p><h5 id="指定文件"><a href="#指定文件" class="headerlink" title="指定文件"></a>指定文件</h5><p>将各个命令写入shell脚本中，然后使用下面格式设置在指定时间执行shell脚本中的命令</p><p>at 时间 -f 脚本文件</p><p>例子</p><ul><li>at -l | atq 任务号</li><li>at -d | atrm 任务号</li><li>at -c 任务号</li></ul><h4 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h4><ul><li><p>at命令产生的进程调度不具有周期性，只能在时间条件满足时执行一次</p></li><li><p>但很多时候需要重复地周期性地执行某个程序</p></li><li><p>crontab用来让使用者在固定时间或固定时间间隔执行程序</p></li><li><p>cron命令在系统启动时由一个shell脚本自动启动，进入后台，crond守护进程(/etc/init.d/crond)</p></li><li><p>cron启动后搜索/var/spool/cron目录，寻找以/etc/passwd文件中的用户名命名的crontab文件，被找到的这种文件将载入内存</p></li><li><p>如果没有crontab文件，就转入“休眠”状态，释放系统资源</p></li><li><p>cron每分钟“醒”过来一次，查看当前是否有需要运行的命令</p></li><li><p>如果发现某个用户设置了crontab文件，它将以该用户的身份去运行文件中指定的命令。命令执行结束后，任何输出都将作为邮件发送给crontab的所有者，或者/etc/crontab文件中MAILTO环境变量中指定的用户。</p></li><li><p>对用户来说，只需要关注自己的crontab文件的撰写，不需干涉crond进程的执行</p></li><li><p>因为一个用户只有一个crontab文件，所以，crontab文件不能直接创建或者直接修改(root可以)，必须通过crontab命令得到</p></li><li><p>crontab命令用于安装、删除或者列出用于驱动cron后台进程的crontab文件</p></li></ul><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524120928953.png" alt="image-20230524120928953"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524121029254.png" alt="image-20230524121029254"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524121115822.png" alt="image-20230524121115822"></p><p>每隔1分钟打印当前时间</p><p>*/1 0-23/1 * * * date</p><h3 id="ps、kill、free"><a href="#ps、kill、free" class="headerlink" title="ps、kill、free"></a>ps、kill、free</h3><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><p>作用:显示当前进程的状态</p><p>格式：ps [选项]</p><table><thead><tr><th>-A</th><th>列出所有的进程</th></tr></thead><tbody><tr><td>-w</td><td>显示加宽可以显示较多的资讯</td></tr><tr><td>-au</td><td>显示较详细的资讯</td></tr><tr><td>-aux</td><td>显示所有包含其他使用者的行程</td></tr><tr><td>-e</td><td>显示所有进程</td></tr><tr><td>-f</td><td>采用全格式显示</td></tr></tbody></table><p>例子</p><ul><li># ps -ef | grep sshd</li><li># ps -aux | grep vsftpd</li></ul><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524121641123.png" alt="image-20230524121641123"></p><h4 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h4><p>作用:删除执行中的程序或工作</p><p>格式： kill [-s &lt;信息名称或编号&gt;][程序]     kill [-l &lt;信息编号&gt;]</p><table><thead><tr><th>1 (HUP)</th><th>重新加载进程</th></tr></thead><tbody><tr><td>9 (KILL)</td><td>杀死一个进程</td></tr><tr><td>15 (TERM)</td><td>正常停止一个进程</td></tr></tbody></table><p>例子</p><ul><li># kill -9 pid</li><li># kill -HUP pid</li><li># kill -l</li></ul><blockquote><p>解除系统死锁，内存回收</p><p>Linux 的 kill 命令是向进程发送信号，kill 不是杀死的意思，-9 表示无条件退出，但由进程自行决定是否退出，这就是为什么 kill -9 终止不了系统进程和守护进程的原因</p><p>killall命令</p><p># killall -KILL atd        #按进程名</p></blockquote><h4 id="free"><a href="#free" class="headerlink" title="free"></a>free</h4><p>作用：显示内存状态，包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统核心使用的缓冲区等</p><p>格式：free [选项]</p><table><thead><tr><th>-b</th><th>以Byte为单位显示内存使用情况</th></tr></thead><tbody><tr><td>-k</td><td>以KB为单位显示内存使用情况</td></tr><tr><td>-m</td><td>以MB为单位显示内存使用情况</td></tr><tr><td>-h</td><td>以合适的单位显示内存使用情况，最大为三位数</td></tr><tr><td>-o</td><td>不显示缓冲区调节列</td></tr><tr><td>-s&lt;间隔描述&gt;</td><td>持续观察内存使用状况</td></tr><tr><td>-t</td><td>显示内存总和列</td></tr></tbody></table><p>例子    # free -mt</p><h3 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h3><ul><li>日志文件（log files）是包含关于系统消息的文件，包括内核、服务、在系统上运行的应用程序等</li><li>多数的日志文件位于/var/log目录下，不同的日志文件记载不同的信息</li><li>某些程序（如apache）在/var/log中有单独的日志文件目录</li><li>多数日志文件都是用纯文本格式，可以使用任何文本编辑器如vi查看它们</li><li>大多数日志文件都需要拥有特权才允许查看</li></ul><h2 id="第十一讲"><a href="#第十一讲" class="headerlink" title="第十一讲"></a>第十一讲</h2><h3 id="Docker与虚拟机的区别"><a href="#Docker与虚拟机的区别" class="headerlink" title="Docker与虚拟机的区别"></a>Docker与虚拟机的区别</h3><p>Docker 是一个应用打包、分发、部署的工具。</p><p>Docker：可理解为一个轻量的虚拟机，它只虚拟你软件需要的运行环境，多余的一点都不要。</p><p>普通虚拟机：一个完整而庞大的系统，包含各种不管你要不要的软件。</p><table><thead><tr><th><strong>特性</strong></th><th><strong>普通虚拟机</strong></th><th><strong>Docker</strong></th></tr></thead><tbody><tr><td>跨平台</td><td>通常只能在桌面级系统运行，例如 Windows/Mac，无法在不带图形界面的服务器上运行</td><td>支持的系统非常多，各类 Windows 和 Linux 都支持</td></tr><tr><td>性能</td><td>性能损耗大，内存占用高，因为是把整个完整系统都虚拟出来了</td><td>性能好，只虚拟软件所需运行环境，最大化减少没用的配置</td></tr><tr><td>自动化</td><td>需要手动安装所有东西</td><td>一个命令就可以自动部署好所需环境</td></tr><tr><td>一致性</td><td>环境一致性不高，不同系统差异大</td><td>一致性好，不同系统都一样部署方式</td></tr></tbody></table><h3 id="Docker的优势"><a href="#Docker的优势" class="headerlink" title="Docker的优势"></a>Docker的优势</h3><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524123222121.png" alt="image-20230524123222121"></p><h3 id="docker-search-pull-images-run-start-stop-restart-ps-rm-attach-exec-commit-build-tag-push"><a href="#docker-search-pull-images-run-start-stop-restart-ps-rm-attach-exec-commit-build-tag-push" class="headerlink" title="docker search, pull, images, run, start, stop, restart, ps, rm, attach, exec, commit, build, tag, push"></a>docker search, pull, images, run, start, stop, restart, ps, rm, attach, exec, commit, build, tag, push</h3><h4 id="docker-search"><a href="#docker-search" class="headerlink" title="docker search"></a>docker search</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524123336236.png" alt="image-20230524123336236"></p><h4 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524123408198.png" alt="image-20230524123408198"></p><h4 id="images"><a href="#images" class="headerlink" title="images"></a>images</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524123450342.png" alt="image-20230524123450342"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524123606248.png" alt="image-20230524123606248"></p><h4 id="run-start"><a href="#run-start" class="headerlink" title="run,start"></a>run,start</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524123657006.png" alt="image-20230524123657006"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524123803620.png" alt="image-20230524123803620"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524123909818.png" alt="image-20230524123909818"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524124010881.png" alt="image-20230524124010881"></p><h4 id="ps-stop-restart"><a href="#ps-stop-restart" class="headerlink" title="ps,stop,restart"></a>ps,stop,restart</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524124225263.png" alt="image-20230524124225263"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524124243556.png" alt="image-20230524124243556"></p><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524124346500.png" alt="image-20230524124346500"></p><h4 id="attach-exec"><a href="#attach-exec" class="headerlink" title="attach,exec"></a>attach,exec</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524124452193.png" alt="image-20230524124452193"></p><h4 id="commit-build"><a href="#commit-build" class="headerlink" title="commit,build"></a>commit,build</h4><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524124623789.png" alt="image-20230524124623789"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524124714327.png" alt="image-20230524124714327"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524124757327.png" alt="image-20230524124757327"></p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524141658951.png" alt="image-20230524141658951"></p><table><thead><tr><th>FROM [镜像]</th><th>指定新镜像所基于的镜像，第一条指令必须为FROM指令，每创建一个镜像就需要一条FROM指令，例如centos:7。from有两层含义：①开启一个新的镜像②必须写的一行指令</th></tr></thead><tbody><tr><td>MAINTAINER [名字]</td><td>说明新镜像的维护人信息（可写可不写）</td></tr><tr><td>RUN命令</td><td>每一条RUN后面跟一条命令，在所基于的镜像上执行命令，并提交到新的镜像中，RUN必须大写</td></tr><tr><td>CMD [“要运行的程序”，“参数1”、“参数2”]</td><td>指定启动容器时需要运行的命令或者脚本，Dockerfile只能有一条CMD命令，如果指定多条则只能执行最后一条，“bin/bash”也是一条CMD,并且会<strong>覆盖</strong>image镜像里面的cmd。</td></tr><tr><td>EXPOSE [端口号]</td><td>指定新镜像加载到Docker时要开启的端口暴露端口，就是这个容器暴露出去的端口号。</td></tr><tr><td>ENV [环境变量] [变量值]</td><td>设置一个环境变量的值，会被后面的RUN使用。容器可以根据自己的需求创建时传入环境变量，镜像不可以。</td></tr><tr><td>ADD [源文件/目录] [目标文件/目录]</td><td>①将源文件复制到目标文件，源文件要与Dockerfile位于相同目录中，②或者是一个URL，③若源文件是压缩包则会将其解压缩。</td></tr><tr><td>COPY [源文件/目录] [目标文件/目录]</td><td>将本地主机上的文件/目录复制到目标地点，源文件/目录要与Dockerfile在相同的目录中，copy只能用于复制，add复制的同时，如果复制的对象是压缩包，ADD还可以解压，copy比add节省资源。</td></tr><tr><td><strong>VOLUME [“<strong><strong>目录</strong></strong>”]</strong></td><td>在容器中创建一个挂载点，简单来说就是-v，指定镜像的目录挂载到宿主机上（<strong>由容器创建和管理</strong>）。</td></tr><tr><td>USER [用户名/UID]</td><td>指定运行容器时的用户</td></tr><tr><td>WORKDIR [路径]</td><td>为后续的RUN、CMD、ENTRYPOINT指定工作目录，相当于是一个临时的“cd”，否则需要使用绝对路径，例如workdir /opt。移动到opt目录，并在这下面的指令都是在opt下执行。</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524142247004.png" alt="image-20230524142247004"></p><h2 id="第十二讲"><a href="#第十二讲" class="headerlink" title="第十二讲"></a>第十二讲</h2><h3 id="X-Window的作用和组成（含图）、每个组成部分的作用"><a href="#X-Window的作用和组成（含图）、每个组成部分的作用" class="headerlink" title="X  Window的作用和组成（含图）、每个组成部分的作用"></a>X  Window的作用和组成（含图）、每个组成部分的作用</h3><h4 id="X-Window"><a href="#X-Window" class="headerlink" title="X Window"></a>X Window</h4><blockquote><p> 一种以位图方式显示的软件窗口系统</p><p>诞生于1984，比Microsoft Windows要早</p><p>是一套独立于内核的软件</p><p>X Window系统由三个基本元素组成</p><p>X 服务端</p><p>X 客户端</p><p>X通信通道</p></blockquote><ul><li>X Server</li><li>X Client</li><li>Xlib</li></ul><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524142918786.png" alt="image-20230524142918786"></p><h4 id="X-Server-X服务端"><a href="#X-Server-X服务端" class="headerlink" title="X Server (X服务端)"></a>X Server (X服务端)</h4><blockquote><p> 是控制输入及输出设备并维护相关资源的程序，它接收输入设备的信息，并将其传给X Client，而将X Client传来的信息输出到屏幕上(在屏幕上构造方块(窗口)，然后画出里面的元素)</p><p>每一套显示设备只对应唯一的X Server</p><p>由系统供应商提供，通常无法被用户修改</p><p>只是一个普通的用户程序 </p></blockquote><h4 id="X-Client-X客户端"><a href="#X-Client-X客户端" class="headerlink" title="X Client(X客户端)"></a>X Client(X客户端)</h4><blockquote><p>是应用程序的核心部分，它与硬件无关，每个应用程序就是一个X Client</p><p>X Client可以是终端仿真器(Xterm)或图形界面程序，它不直接对显示器绘制或者操作图形，而是与X Server通信，由X Server控制显示</p><p>X Client无法直接影响视窗行为或显示效果，它们只能发送一个请求给X Server，由X Server来完成这些的请求 </p><p>多种多样的X Client程序向X Server发出请求，由X Server运算得出结果，再显示到指定的地方去</p></blockquote><h4 id="X通信通道"><a href="#X通信通道" class="headerlink" title="X通信通道"></a>X通信通道</h4><blockquote><p>X通信通道的主体是xlib（X函数库）</p><p>X Client调用xlib，利用相应的通信功能向X Server发出请求 </p><p>X Server完成任务之后，同样调用xlib把结果显示指点的设备上去</p></blockquote><h4 id="X-Window的特点"><a href="#X-Window的特点" class="headerlink" title="X Window的特点"></a>X Window的特点</h4><ul><li><p>良好的网络支持</p><p>  X Window采用了C/S网络结构，X Client和X Server可以通过网络来通信，而且有良好的网络透明性</p></li><li><p>个性化的窗口界面</p><p>  X Window并未对窗口界面作统一的规范，程序员可以根据需求自行设计，其中最有名的就是后面将要介绍的GNOME与KDE</p></li><li><p>不内嵌于操作系统</p><p>  X Window只定义了一个标准，而不属于某个操作系统，因此可在不同的操作系统上运行相同的X Window软件</p></li></ul><h3 id="修改系统运行级别（含运行级别0-3-5-6）"><a href="#修改系统运行级别（含运行级别0-3-5-6）" class="headerlink" title="修改系统运行级别（含运行级别0 3  5 6）"></a>修改系统运行级别（含运行级别0 3  5 6）</h3><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524143809829.png" alt="image-20230524143809829"></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230524143854798.png" alt="image-20230524143854798"></p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>1、2</p><p>4、5、6、7</p><h2 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h2><ul><li>选择题      20题，每题1分，20分</li><li>简答题        6题，每题5分，30分</li><li>编码题        3题，6*1 + 7*2分，20分</li><li>综合应用题 3题，每题10分，30分</li></ul><h2 id="易错"><a href="#易错" class="headerlink" title="易错"></a>易错</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>试题讲解</title>
      <link href="/2023/02/22/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D22/"/>
      <url>/2023/02/22/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D22/</url>
      
        <content type="html"><![CDATA[<p>子串连续，子序列不连续</p>]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>试题讲解</title>
      <link href="/2023/02/20/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D20/"/>
      <url>/2023/02/20/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D20/</url>
      
        <content type="html"><![CDATA[<p>第十九节：</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221170513905.png" alt="image-20230221170513905"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221170535089.png" alt="image-20230221170535089"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221170557738.png" alt="image-20230221170557738"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221170633933.png" alt="image-20230221170633933"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221170633933.png" alt="image-20230221170633933"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221170652246.png" alt="image-20230221170652246"></p><p>先后手：</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221170724331.png" alt="image-20230221170724331"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221170731385.png" alt="image-20230221170731385"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221170739776.png" alt="image-20230221170739776"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221204843996.png" alt="image-20230221204843996"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221205435524.png" alt="image-20230221205435524"></p>]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小根堆优化</title>
      <link href="/2023/02/19/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D19/"/>
      <url>/2023/02/19/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D19/</url>
      
        <content type="html"><![CDATA[<p>第十八节：</p><p>每次遍历选最小——————需要优化的地方</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230219141204268.png" alt="image-20230219141204268" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230219141234818.png" alt="image-20230219141234818" style="zoom:50%;" /><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230219141324454.png" alt="image-20230219141324454"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230219141457060.png" alt="image-20230219141457060"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230219141435556.png" alt="image-20230219141435556"></p><p>改成-1<img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230219153932863.png" alt="image-20230219153932863"></p><p>递归</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230219163346909.png" alt="image-20230219163346909"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230219220520943.png" alt="image-20230219220520943"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230219220620156.png" alt="image-20230219220620156"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230219221606790.png" alt="image-20230219221606790"></p><p>第二种：</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230220214043749.png" alt="image-20230220214043749"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230220214135492.png" alt="image-20230220214135492"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230220214202496.png" alt="image-20230220214202496"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230220215625835.png" alt="image-20230220215625835"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230220215701620.png" alt="image-20230220215701620"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230220215835455.png" alt="image-20230220215835455"></p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221103522942.png" alt="image-20230221103522942" style="zoom: 80%;" /><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221103236832.png" alt="image-20230221103236832"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221103333578.png" alt="image-20230221103333578"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221103400396.png" alt="image-20230221103400396"></p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221103635178.png" alt="image-20230221103635178" style="zoom:80%;" /><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221103621886.png" alt="image-20230221103621886"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221103700320.png" alt="image-20230221103700320"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221103729487.png" alt="image-20230221103729487"></p><p>自己申请一个栈</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221104056422.png" alt="image-20230221104056422"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221104106369.png" alt="image-20230221104106369"></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221104135670.png" alt="image-20230221104135670"></p>]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的试题</title>
      <link href="/2023/02/15/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D15/"/>
      <url>/2023/02/15/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D15/</url>
      
        <content type="html"><![CDATA[<p>有向无负权重的图，可以有环但不能是负的环（整个环路累加和为负）</p><p>给定一个出发点，求到得了的每个点的最短路径</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230217105027167.png" alt="image-20230217105027167" style="zoom:50%;" /><ol><li><p>已经确定的答案不碰</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230217110724252.png" alt="image-20230217110724252"></p></li><li><p>在所有没画对号的记录中找一个最小的出来</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230217110823089.png" alt="image-20230217110823089"></p><ul><li><p>以a这个跳跃点往下跳有三条边</p></li><li><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230217110921174.png" alt="image-20230217110921174"></p></li><li><p>0+1 = 1 &lt; ∞ 比之前距离更短，替换</p></li><li><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230217111012945.png" alt="image-20230217111012945"></p></li><li><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230217111228659.png" alt="image-20230217111228659"></p></li><li><p>对刚才弹出的记录a到零的记录打勾</p></li><li><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230217111309426.png" alt="image-20230217111309426"></p></li><li><p>锁住记录</p></li><li><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230217111328691.png" alt="image-20230217111328691" style="zoom:50%;" /></li></ul></li></ol><p>在没有画对号的记录中，谁最短</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230217111932510.png" alt="image-20230217111932510"></p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230217112013560.png" alt="image-20230217112013560" style="zoom:50%;" /><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230217113027565.png" alt="image-20230217113027565"></p>]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图</title>
      <link href="/2023/02/14/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D14/"/>
      <url>/2023/02/14/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D14/</url>
      
        <content type="html"><![CDATA[<img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230216003048349.png" alt="image-20230216003048349" style="zoom:50%;" /><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 点结构的描述</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> in<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> out<span class="token punctuation">;</span>    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>Node<span class="token operator">></span> nexts<span class="token punctuation">;</span>    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>Edge<span class="token operator">></span> edges<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        in <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        nexts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Edge</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> weight<span class="token punctuation">;</span>    <span class="token keyword">public</span> Node from<span class="token punctuation">;</span>    <span class="token keyword">public</span> Node to<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> weight<span class="token punctuation">,</span> Node from<span class="token punctuation">,</span> Node to<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>from <span class="token operator">=</span> from<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>to <span class="token operator">=</span> to<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230216151546877.png" alt="image-20230216151546877" style="zoom:67%;" /><p>dfs：入栈就打印</p><p>栈就是目前的整条路径</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230216155321236.png" alt="image-20230216155321236" style="zoom:50%;" /><p>拓扑序一定是有向无环图</p><p>拓扑排序不唯一</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230216155621339.png" alt="image-20230216155621339" style="zoom: 50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230216171826931.png" alt="image-20230216171826931" style="zoom:50%;" /><p>最小生成树、k算法：贪心</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230216173001736.png" alt="image-20230216173001736" style="zoom:50%;" /><p>最小生成树要求是无向图</p><p>最小生成树：在不影响所有点都连通的情况下，所有边加起来的最小值是多少</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230217015404059.png" alt="image-20230217015404059" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230217015604608.png" alt="image-20230217015604608" style="zoom:50%;" /><p>有环：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230217015748668.png" alt="image-20230217015748668" style="zoom:50%;" /><p>p算法：贪心</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230217020027679.png" alt="image-20230217020027679" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230217102648873.png" alt="image-20230217102648873" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230217102740533.png" alt="image-20230217102740533" style="zoom:50%;" /><p>因为a、b都被解锁了，再解锁d会成环，所以不选3这个边</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230217103457736.png" alt="image-20230217103457736" style="zoom:50%;" /><p>所有点都解锁就可以停止</p><p>p：</p><p>用一个点解锁周围所有边，弹出一个点代价都是O(logN)，当所有点都被拽进来，结束</p><p>点&lt;&lt;边或者点很少，p会好</p><p>k：略过所有边才能结束，边多就卡了</p><p>边多的时候用p</p><p>k能过的p一定能过</p>]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2023/02/14/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%B1%BB/git/"/>
      <url>/2023/02/14/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%B1%BB/git/</url>
      
        <content type="html"><![CDATA[<p>git语句：</p><pre class=" language-bash"><code class="language-bash">//操作分支语句：//初始化<span class="token function">git</span> init//添加<span class="token function">git</span> add <span class="token string">"所需提交的文件名（包括后缀）"</span>//提交<span class="token function">git</span> commit -m <span class="token string">"提交文件的说明信息"</span>//新建分支但不切换<span class="token function">git</span> branch <span class="token string">"branchName"</span>//新建分支并切换到新分支<span class="token function">git</span> checkout -b <span class="token string">"branchName"</span>//执行checkout命令切换到branchName分支<span class="token function">git</span> checkout <span class="token string">"branchName"</span>//合并分支<span class="token function">git</span> merge <span class="token string">"branchName"</span>//在branch命令指定-d选项执行，以删除分支<span class="token function">git</span> branch -d <span class="token string">"branchName"</span>//rebase合并<span class="token function">git</span> reset --hard HEAD~标签操作语句：//tag命令可添加标签<span class="token function">git</span> tag <span class="token string">"tagName"</span>//没有使用参数而执行tag，可以显示标签列表<span class="token function">git</span> tag//在log命令添加 --decorate选项执行，可以显示包含标签资料的历史记录<span class="token function">git</span> log --decorate</code></pre><h2 id="一、操作分支"><a href="#一、操作分支" class="headerlink" title="一、操作分支"></a>一、操作分支</h2><h3 id="1-事先预备"><a href="#1-事先预备" class="headerlink" title="1. 事先预备"></a>1. 事先预备</h3><p>新建文件夹当作git项目，此处命名gitStudy，右建点击Git Bash</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214204334201.png" alt="image-20230214204334201" style="zoom:80%;" /><p>在 gitStudy 文件夹中新建文本文件，此处命名test1，将其初始化并提交</p><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//初始化<span class="token function">git</span> init//添加test1.txt<span class="token function">git</span> add test1.txt//提交<span class="token function">git</span> commit -m <span class="token string">"first commit"</span></code></pre><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214204450771.png" alt="初始化并提交" style="zoom:80%;" /><p>目前的历史记录：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214205149648.png" alt="image-20230214205149648" style="zoom:80%;" /><h3 id="2-建立分支"><a href="#2-建立分支" class="headerlink" title="2. 建立分支"></a>2. 建立分支</h3><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//新建分支issue1<span class="token function">git</span> branch issue1//不指定参数直接执行branch命令可以显示分支列表，前面有*的就是现在的分支<span class="token function">git</span> branch</code></pre><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214203349134.png" alt="image-20230214203349134" style="zoom:80%;" /><p>目前的历史记录：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214205444527.png" alt="image-20230214205444527" style="zoom:80%;" /><h3 id="3-切换分支"><a href="#3-切换分支" class="headerlink" title="3. 切换分支"></a>3. 切换分支</h3><p>在test1.txt添加新内容，此时test1.txt文件内容：</p><hr><p>git是好抓手</p><p>add 把变更录入到索引中</p><hr><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//切换为issue1分支<span class="token function">git</span> checkout issue1//在issue1的状态下提交，历史记录会被记录到issue1分支<span class="token function">git</span> add test1.txt//在test1.txt添加add命令的说明后再提交<span class="token function">git</span> commit -m <span class="token string">"添加add操作 second commit"</span></code></pre><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214215138352.png" alt="image-20230214215138352" style="zoom:80%;" /><p>目前的历史记录：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214210607455.png" alt="image-20230214210607455" style="zoom:80%;" /><h3 id="4-合并分支"><a href="#4-合并分支" class="headerlink" title="4. 合并分支"></a>4. 合并分支</h3><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//切换为主分支<span class="token function">git</span> checkout master//合并issue1<span class="token function">git</span> merge issue1</code></pre><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214215300561.png" alt="image-20230214215300561" style="zoom:80%;" /><p>此时test1.txt文件内容：</p><hr><p>git是好抓手</p><p>add 把变更录入到索引中</p><hr><p>说明：master分支指向的提交移动到和issue1同样的位置，此处是fast-forward（快进）合并。</p><p>目前的历史记录：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214211642501.png" alt="image-20230214211642501" style="zoom:80%;" /><h3 id="5-删除分支"><a href="#5-删除分支" class="headerlink" title="5. 删除分支"></a>5. 删除分支</h3><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//删除分支issue1<span class="token function">git</span> branch -d issue1</code></pre><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214211917856.png" alt="image-20230214211917856" style="zoom:80%;" /><p>目前的历史记录：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214211928498.png" alt="image-20230214211928498" style="zoom:80%;" /><h3 id="6-并行操作"><a href="#6-并行操作" class="headerlink" title="6. 并行操作"></a>6. 并行操作</h3><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//创建issue2分支<span class="token function">git</span> branch issue2//创建issue3分支<span class="token function">git</span> branch issue3//切换到issue2分支<span class="token function">git</span> checkout issue2//查看分支<span class="token function">git</span> branch</code></pre><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214212351447.png" alt="image-20230214212351447" style="zoom:80%;" /><p>目前的历史记录：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214212418748.png" alt="image-20230214212418748" style="zoom:80%;" /><p>在issue2分支的test1.txt添加新语句后提交</p><p>此时test1.txt文件内容：</p><hr><p>git是好抓手</p><p>add 把变更录入到索引中</p><p>commit 记录索引的状态</p><hr><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//添加test1.txt<span class="token function">git</span> add test1.txt//提交<span class="token function">git</span> commit -m <span class="token string">"添加commit操作 third commit"</span></code></pre><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214215656043.png" alt="image-20230214215656043" style="zoom:80%;" /><p>目前的历史记录：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214212721879.png" alt="image-20230214212721879" style="zoom:80%;" /><p>在issue3分支的test1.txt添加新语句后提交添加新语句</p><p>此时test1.txt文件内容：</p><hr><p>git是好抓手</p><p>add 把变更录入到索引中</p><p>pull 取得远端数据库的内容</p><hr><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//切换到issue3分支<span class="token function">git</span> checkout issue3//添加test1.txt<span class="token function">git</span> add test1.txt//提交<span class="token function">git</span> commit -m <span class="token string">"添加pull操作 fourth commit"</span></code></pre><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215121900025.png" alt="image-20230215121900025" style="zoom:80%;" /><p>目前的历史记录：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214213210899.png" alt="image-20230214213210899" style="zoom:80%;" /><p>这样，第三次操作和第四次操作就并行进行了。</p><h3 id="7-解决合并冲突"><a href="#7-解决合并冲突" class="headerlink" title="7. 解决合并冲突"></a>7. 解决合并冲突</h3><p>把issue2分支和issue3分支的修改合并到master</p><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//切换master分支<span class="token function">git</span> checkout master//与issue2分支合并<span class="token function">git</span> merge issue2</code></pre><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214215929556.png" alt="image-20230214215929556" style="zoom:80%;" /><p>目前的历史记录：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214213436613.png" alt="image-20230214213436613" style="zoom:80%;" /><p>合并issue3分支</p><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//合并issue3<span class="token function">git</span> merge issue3</code></pre><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214213702756.png" alt="image-20230214213702756" style="zoom:80%;" /><p>此时test1.txt文件内容：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214220028270.png" alt="image-20230214220028270" style="zoom:80%;" /><p>在发生冲突的地方，git生成了内容的差异。</p><p>将text1.txt修改如下：</p><hr><p>git是好抓手</p><p>add 把变更录入到索引中</p><p>commit 记录索引的状态</p><p>pull 取得远端数据库的内容</p><hr><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//重新添加<span class="token function">git</span> add test1.txt//重新提交<span class="token function">git</span> commit -m <span class="token string">"合并issue3分支 fifth commit"</span></code></pre><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214220448230.png" alt="image-20230214220448230" style="zoom:80%;" /><p>目前的历史记录：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214220531599.png" alt="image-20230214220531599" style="zoom:80%;" /><p>因为在这次合并中修改了冲突部分，所以会重新创建合并修改的提交记录。</p><p>这样，master的HEAD就移动到这里了。这种合并不是fast-forward合并，而是non fast-forward合并。</p><h3 id="8-用rebase合并"><a href="#8-用rebase合并" class="headerlink" title="8. 用rebase合并"></a>8. 用rebase合并</h3><p>合并issue3分支的时候，使用rebase可以使提交的历史记录显得更简洁</p><p>现在暂时取消刚才的合并</p><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//用rebase合并<span class="token function">git</span> reset --hard HEAD~</code></pre><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214221128272.png" alt="image-20230214221128272" style="zoom:80%;" /><p>目前的历史记录：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214221143793.png" alt="image-20230214221143793" style="zoom:80%;" /><p>执行rebase</p><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//切换到issue3分支<span class="token function">git</span> checkout issue3//对master执行rebase<span class="token function">git</span> rebase master</code></pre><p>效果：</p><p>和merge时的操作相同，修改在test1.txt发生冲突的部分</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214221353826.png" alt="image-20230214221353826" style="zoom:80%;" /><p>此时test1.txt文件内容：</p><p>在发生冲突的地方，git生成了内容的差异</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214221605562.png" alt="image-20230214221605562" style="zoom:80%;" /><p>和merge时的操作相同，修改在text1.txt发生冲突的部分。</p><hr><p>git是好抓手</p><p>add 把变更录入到索引中</p><p>commit 记录索引的状态</p><p>pull 取得远端数据库的内容</p><hr><p>rebase的时候，修改冲突后的提交不是使用commit命令，而是执行rebase命令指定 –continue选项。</p><p>若要取消rebase，指定 –abort选项</p><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//添加test1.txt<span class="token function">git</span> add test1.txt//rebase，启动编辑区<span class="token function">git</span> rebase --continue</code></pre><p>编辑区：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215122205553.png" alt="image-20230215122205553" style="zoom:80%;" /><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215122240171.png" alt="image-20230215122240171" style="zoom: 80%;" /><p>目前的历史记录：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214221938388.png" alt="image-20230214221938388" style="zoom:80%;" /><p>这样，在master分支的issue3分支就可以fast-forward合并。</p><pre class=" language-bash"><code class="language-bash">//切换到master分支<span class="token function">git</span> checkout master//合并<span class="token function">git</span> merge issue3</code></pre><p>text1.txt的最终内容和merge是一样的</p><p>目前的历史记录：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214222248099.png" alt="image-20230214222248099" style="zoom:80%;" /><h2 id="二、远端数据库操作"><a href="#二、远端数据库操作" class="headerlink" title="二、远端数据库操作"></a>二、远端数据库操作</h2><h3 id="1-pull"><a href="#1-pull" class="headerlink" title="1. pull"></a>1. pull</h3><p>执行pull可以取得远程数据库的历史记录</p><p>首先确认更新的本地数据库分支没有任何的更改。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/capture_stepup3_1_1.png" alt="分支没有任何修改的情况" style="zoom:80%;" /><p>这时只执行fast-forward合并。图中的master是本地数据库的master分支，origin/master是远程数据库的origin的master分支。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/capture_stepup3_1_2.png" alt="fast-forward合并" style="zoom:80%;" /><p>如果本地数据库的master分支有新的历史记录，就需要合并双方的修改。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/capture_stepup3_1_3.png" alt="本地端数据库的master分支有新的历史记录" style="zoom:80%;" /><p>执行pull就可以进行合并。这时，如果没有冲突的修改，就会自动创建合并提交。如果发生冲突的话，要先解决冲突，再手动提交。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/capture_stepup3_1_4.png" alt="解决冲突" style="zoom:80%;" /><h3 id="2-fetch"><a href="#2-fetch" class="headerlink" title="2. fetch"></a>2. fetch</h3><p>执行pull，远程数据库的内容就会自动合并。</p><p>但是，有时只是想<strong>确认本地数据库的内容而不想合并</strong>。这种情况下，请使用fetch。</p><p>执行fetch就可以取得远程数据库的最新历史记录。取得的提交会导入到没有名字的分支，这个分支可以从名为FETCH_HEAD的退出。</p><p>例如，在本地数据库和远程数据库的origin，如果在从B进行提交的状态下执行fetch，就会形成如下图所示的历史记录。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/capture_stepup3_2_1.png" alt="在本地端数据库和远端数据库的origin，在从B进行提交的状态下执行fetch" style="zoom:80%;" /><p>在这个状态下，若要把远程数据库的内容合并到本地数据库，可以合并FETCH_HEAD，或者重新执行pull。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/capture_stepup3_2_2.png" alt="合并FETCH_HEAD" style="zoom:80%;" /><p>合并后，历史记录会和pull相同。实际上pull的内容是fetch + merge组成的。</p><h3 id="3-push"><a href="#3-push" class="headerlink" title="3. push"></a>3. push</h3><p>从本地数据库push到远程数据库时，要fast-forward合并push的分支。如果发生冲突，push会被拒绝的。</p><p>若要共享在本地数据库创建的分支，需要明确的push。</p><p>因此，没有执行push就不会给远程数据库带来影响，因而可以自由的创建自己的分支。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/capture_stepup3_3_1.png" alt="Push" style="zoom:80%;" /><p>基本上，远程数据库共享的提交是不能修改的。如果修改的话，跟远程数据库同步的其他数据库的历史记录会变得很奇怪的。</p><h2 id="三、标签"><a href="#三、标签" class="headerlink" title="三、标签"></a>三、标签</h2><h3 id="1-标签介绍"><a href="#1-标签介绍" class="headerlink" title="1. 标签介绍"></a>1. 标签介绍</h3><p>标签是为了更方便地参考提交而给它标上易懂的名称。</p><p>Git可以使用2种标签：轻标签和注解标签。</p><p>打上的标签是固定的，不能像分支那样可以移动位置。</p><ul><li>轻标签<ul><li>添加名称</li></ul></li><li>注解标签<ul><li>添加名称</li><li>添加注解</li><li>添加签名</li></ul></li></ul><p>一般情况下，发布标签是采用注解标签来添加注解或签名的。轻标签是为了在本地暂时使用或一次性使用。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/capture_stepup4_1_1.png" alt="注解标签，轻标签" style="zoom:80%;" /><p>可以指定标签名称以退出，或reset在「修改提交」的讲解，还可以简单的恢复过去特定的状态。</p><h3 id="2-添加轻标签"><a href="#2-添加轻标签" class="headerlink" title="2. 添加轻标签"></a>2. 添加轻标签</h3><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//新建轻标签masterTag1<span class="token function">git</span> tag masterTag1//显示当前分支的标签列表<span class="token function">git</span> tag//查看显示包含标签资料的历史记录<span class="token function">git</span> log --decorate</code></pre><p>效果：</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215122416609.png" alt="image-20230215122416609"></p><h3 id="3-添加注解标签"><a href="#3-添加注解标签" class="headerlink" title="3. 添加注解标签"></a>3. 添加注解标签</h3><p>git tag -a会启动编辑区：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214231023083.png" alt="image-20230214231023083" style="zoom:80%;" /><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//添加masterTag2注解标签，启动编辑区<span class="token function">git</span> tag -a masterTag2//添加标签，指定-m选项来添加注解<span class="token function">git</span> tag -am <span class="token string">"这是masterTag3的一个注解标签"</span> masterTag3//显示标签的列表和注解<span class="token function">git</span> tag -n</code></pre><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214231340399.png" alt="image-20230214231340399" style="zoom:80%;" /><h3 id="4-删除标签"><a href="#4-删除标签" class="headerlink" title="4. 删除标签"></a>4. 删除标签</h3><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//删除标签<span class="token function">git</span> tag -d masterTag3</code></pre><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230214231722256.png" alt="image-20230214231722256" style="zoom:80%;" /><h2 id="四、改写提交"><a href="#四、改写提交" class="headerlink" title="四、改写提交"></a>四、改写提交</h2><h3 id="1-修改最近的提交"><a href="#1-修改最近的提交" class="headerlink" title="1. 修改最近的提交"></a>1. 修改最近的提交</h3><p>此时test1.txt文件内容：</p><hr><p>git是好抓手</p><p>add 把变更录入到索引中</p><p>commit 记录索引的状态</p><p>pull 取得远端数据库的内容</p><p>amend 改写提交</p><hr><p>启用编辑：</p><p>编辑工具会显示最近一次提交的提交消息</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215010936094.png" alt="image-20230215010936094" style="zoom:80%;" /><p>把消息修改为「<strong>amend 改写提交</strong>」并进行保存</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215010804119.png" alt="image-20230215010804119" style="zoom:80%;" /><p>现在已经修改了提交的内容，然后用log命令确认历史记录和提交消息。</p><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//查看显示包含标签资料的历史记录<span class="token function">git</span> log//添加text1.txt文件<span class="token function">git</span> add test1.txt//改写提交，启动编辑区<span class="token function">git</span> commit --amend//查看显示包含标签资料的历史记录<span class="token function">git</span> log</code></pre><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215124219116.png" alt="image-20230215124219116" style="zoom:150%;" /><h3 id="2-改写提交"><a href="#2-改写提交" class="headerlink" title="2. 改写提交"></a>2. <strong>改写提交</strong></h3><p>revert</p><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//用log命令确认历史记录<span class="token function">git</span> log</code></pre><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215111548289.png" alt="image-20230215111548289" style="zoom:80%;" /><p>此时test1.txt文件内容：</p><hr><p>git是好抓手<br>add 把变更录入到索引中<br>commit 记录索引的状态<br>pull 取得远端数据库的内容<br>amend 改写提交</p><hr><p>具体操作：</p><pre class=" language-bash"><code class="language-bash">//用revert取消「添加pull操作 fourth commit」提交<span class="token function">git</span> revert HEAD</code></pre><p>启动编辑区：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215124527527.png" alt="image-20230215124527527" style="zoom:80%;" /><p>编辑之后：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215124847339.png" alt="image-20230215124847339" style="zoom:80%;" /><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215124915906.png" alt="image-20230215124915906" style="zoom:80%;" /><p>此时test1.txt文件内容：</p><hr><p>git是好抓手<br>add 把变更录入到索引中<br>commit 记录索引的状态<br>amend 改写提交</p><hr><h2 id="Git-提示Your-branch-is-up-to-date-with-‘origin-master’"><a href="#Git-提示Your-branch-is-up-to-date-with-‘origin-master’" class="headerlink" title="Git 提示Your branch is up-to-date with ‘origin/master’"></a>Git 提示Your branch is up-to-date with ‘origin/master’</h2><p>今天提交代码到Github的时候，提示<code>Your branch is up-to-date with &#39;origin/master&#39;</code>，如下图所示：</p><pre class=" language-bash"><code class="language-bash">Your branch is up to <span class="token function">date</span> with <span class="token string">'origin/master'</span><span class="token keyword">.</span>Changes not staged <span class="token keyword">for</span> commit:<span class="token punctuation">..</span>.</code></pre><p>发现是<strong>版本分支</strong>的问题，按照如下步骤操作即可解决</p><ol><li>新建分支</li><li>检查分支是否创建成功</li><li>切换到新分支</li><li>将改动提交到新分支</li><li>检查是否提交成功</li><li>切回主分支</li><li>将新分支提交的改动合并到主分支</li><li>push代码到远端仓库</li><li>删除新分支</li></ol><p>具体操作：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch newB<span class="token function">git</span> branch<span class="token function">git</span> checkout newB<span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">"the new files"</span><span class="token function">git</span> status<span class="token function">git</span> checkout master<span class="token function">git</span> merge newB<span class="token function">git</span> push -u origin master<span class="token function">git</span> branch -d newB</code></pre><p>效果：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215155626878.png" alt="image-20230215155626878" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用</title>
      <link href="/2023/02/14/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%B1%BB/git%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/02/14/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%B1%BB/git%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Git基本概念"><a href="#1-Git基本概念" class="headerlink" title="1. Git基本概念"></a>1. Git基本概念</h2><ul><li><code>repository</code></li><li><code>config</code></li><li><code>init</code></li><li><code>clone</code></li><li><code>fetch</code></li><li><code>pull</code></li><li><code>commit</code></li><li><code>push</code></li><li><code>branch</code></li><li><code>head</code></li><li><code>tag</code></li><li><code>merge</code></li><li><code>conflict</code></li><li><code>diff</code></li><li><code>log</code></li><li><code>show</code></li><li><code>status</code></li></ul><h2 id="2-Git工作空间和文件状态"><a href="#2-Git工作空间和文件状态" class="headerlink" title="2. Git工作空间和文件状态"></a>2. Git工作空间和文件状态</h2><h3 id="1-工作空间"><a href="#1-工作空间" class="headerlink" title="(1).工作空间"></a>(1).工作空间</h3><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/10415985_139279770639pM.jpg" alt="Git工作空间"></p><p><strong>Git工作空间</strong></p><p>左侧为工作区，右侧为版本库。</p><ul><li>工作区（<code>Working Directory</code>） 就是在电脑里能看到的目录，比如learngit文件夹就是一个工作区。</li><li>版本库（<code>Repository</code>）工作区有一个隐藏目录<code>.git</code>，是Git的版本库。</li></ul><p>在版本库中标记为<code>index</code>的区域为暂存区，标记为<code>master</code>的是Git为我们自动创建的第一个分支，代表的是目录树。此时<code>HEAD</code>实际是指向<code>master</code>分支的一个“游标”，所以图示的命令中出现HEAD的地方可以用<code>master</code>来替换。图中的objects标识的区域为git的对象库，实际位于<code>.git/objects</code>目录下。</p><ul><li>当对工作区修改（或新增）的文件执行<code>git add</code>命令时，暂存区的目录树会被更新，同时工作区修改（或新增）的文件内容会被写入到对象库中的一个新的对象中，而该对象的id被记录在暂存区的文件索引中。</li><li>当执行提交操作<code>git commit</code>时，暂存区的目录树会写到版本库（对象库）中，master分支会做相应的更新，即master最新指向的目录树就是提交时原暂存区的目录树。</li><li>当执行<code>git reset HEAD</code>命令时，暂存区的目录树会被重写，会被master分支指向的目录树所替换，但是工作区不受影响。</li><li>当执行<code>git rm --cached</code>命令时，会直接从暂存区删除文件，工作区则不做出改变。</li><li>当执行<code>git checkout .</code>或<code>git checkout --</code> 命令时，会用暂存区全部的文件或指定的文件替换工作区的文件。这个操作很危险，会清楚工作区中未添加到暂存区的改动。</li><li>当执行<code>git checkout HEAD .</code>或<code>git checkout HEAD</code>命令时，会用HEAD指向的master分支中的全部或部分文件替换暂存区和工作区中的文件。这个命令也是极度危险的。因为不但会清楚工作区中未提交的改动，也会清楚暂存区中未提交的改动。</li></ul><h3 id="2-文件状态"><a href="#2-文件状态" class="headerlink" title="(2).文件状态"></a>(2).文件状态</h3><p>Git 有三种状态，你的文件可能处于其中之一：</p><p><strong>已提交(<code>committed</code>)<strong>、</strong>已修改(<code>modified</code>)<strong>、</strong>已暂存(<code>staged</code>)</strong></p><h2 id="3-Git配置系统级、全局、当前仓库用户名、邮箱的命令"><a href="#3-Git配置系统级、全局、当前仓库用户名、邮箱的命令" class="headerlink" title="3. Git配置系统级、全局、当前仓库用户名、邮箱的命令"></a>3. Git配置系统级、全局、当前仓库用户名、邮箱的命令</h2><p>系统级、全局、当前仓库选项分别是:仓库-system、-global、-local(或默认不填)</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Jerry Mouse"</span><span class="token function">git</span> config --global user.email <span class="token string">"jerry@yiibai.com"</span></code></pre><p>列出Git设置</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --list<span class="token function">git</span> config -l</code></pre><h2 id="4-Git-fetch和pull的区别"><a href="#4-Git-fetch和pull的区别" class="headerlink" title="4. Git fetch和pull的区别"></a>4. Git fetch和pull的区别</h2><ul><li><code>git fetch</code>：相当于是从远程获取最新版本到本地，不会自动merge.</li><li><code>git pull</code>：相当于是从远程获取最新版本并merge到本地.</li></ul><h3 id="1-git-fetch示例："><a href="#1-git-fetch示例：" class="headerlink" title="(1). git fetch示例："></a>(1). git fetch示例：</h3><pre class=" language-bash"><code class="language-bash">Git fetch origin master<span class="token function">git</span> log -p master<span class="token punctuation">..</span>origin/master<span class="token function">git</span> merge origin/master</code></pre><p>以上命令的含义：</p><ul><li>首先从远程的<code>origin</code>的<code>master</code>主分支下载最新的版本到<code>origin/master</code>分支上</li><li>然后比较本地的<code>master</code>分支和<code>origin/master</code>分支的差别</li><li>最后进行合并</li><li>上述过程其实可以用以下更清晰的方式来进行：</li></ul><h3 id="2-git-pull示例："><a href="#2-git-pull示例：" class="headerlink" title="(2). git pull示例："></a>(2). git pull示例：</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> pull origin master</code></pre><p>上述命令其实相当于<code>git fetch</code>和<code>git merge</code>。在实际使用中，<code>git fetch</code>更安全一些，因为在merge前，我们可以查看更新情况，然后再决定是否合并。</p><h2 id="5-Git-reset和revert的却别"><a href="#5-Git-reset和revert的却别" class="headerlink" title="5. Git reset和revert的却别"></a>5. Git reset和revert的却别</h2><ul><li><code>git revert</code>是用一次新的commit来回滚之前的commit，<code>git reset</code>是直接删除指定的commit。</li><li>在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为<code>git revert</code>是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是<code>git reset</code>是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。</li><li><code>git reset</code>是把HEAD向后移动了一下，而<code>git revert</code>是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</li><li>git revert与git reset最大的不同是，git revert 仅仅是撤销某次提交。</li></ul><p>另外，说一下<code>git revert</code>， <code>git reset –hard</code>和 <code>–soft</code>的区别</p><ul><li><code>git reset –mixed id</code>: 是将git的HEAD变了（也就是提交记录变了），但文件并没有改变，（也就是working tree并没有改变）。</li><li><code>git reset –soft id</code>: 实际上，是<code>git reset –mixed id</code>后，又做了一次<code>git add</code>。</li><li><code>git reset –herd id</code>: 是将git的HEAD变了，文件也变了。</li></ul><h2 id="6-Git-merge和reabse的相同点和不同点"><a href="#6-Git-merge和reabse的相同点和不同点" class="headerlink" title="6. Git merge和reabse的相同点和不同点"></a>6. Git merge和reabse的相同点和不同点</h2><p><code>merge</code>是合并的意思，<code>rebase</code>是复位基底的意思，相同点都是用来合并分支的。</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/759200-20160806092734215-279978821.png" alt="merge和rebase"></p><p><strong>merge和rebase</strong></p><p>不同点:</p><ul><li><code>merge</code>操作会生成一个新的节点，之前的提交分开显示。而<code>rebase</code>操作不会生成新的节点，是将两个分支融合成一个线性的提交。</li><li>解决冲突时。merge操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit就可以了。而<code>rebase</code>操作的话，会中断rebase,同时会提示去解决冲突。解决冲突后,将修改add后执行<code>git rebase –continue</code>继续操作，或者<code>git rebase –skip</code>忽略冲突。</li><li><code>git pull</code>和<code>git pull --rebase</code>区别：<code>git pull</code>做了两个操作分别是”获取”和”合并”。所以加了rebase就是以rebase的方式进行合并分支，默认为merge。</li></ul><p><strong>总结</strong>：选择 merge 还是 rebase？</p><ul><li>merge 是一个合并操作，会将两个分支的修改合并在一起，默认操作的情况下会提交合并中修改的内容</li><li>merge 的提交历史忠实地记录了实际发生过什么，关注点在真实的提交历史上面</li><li>rebase 并没有进行合并操作，只是提取了当前分支的修改，将其复制在了目标分支的最新提交后面</li><li>rebase 的提交历史反映了项目过程中发生了什么，关注点在开发过程上面</li><li>merge 与 rebase 都是非常强大的分支整合命令，没有优劣之分，使用哪一个应由项目和团队的开发需求决定</li><li>merge 和 rebase 还有很多强大的选项，可以使用 git help 查看</li></ul><h2 id="7-Git-stash是什么？它的相关使用方式命令"><a href="#7-Git-stash是什么？它的相关使用方式命令" class="headerlink" title="7. Git stash是什么？它的相关使用方式命令"></a>7. Git stash是什么？它的相关使用方式命令</h2><ul><li>git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。</li><li>git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。</li><li>git stash pop –index stash@{0}: 恢复编号为0的进度的工作区和暂存区。</li><li>git stash apply stash@{1} 以将你指定版本号为stash@{1}的工作取出来</li><li>git stash drop[] 删除某一个进度，默认删除最新进度</li><li>git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。</li><li>git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 恢复工作进度</span><span class="token function">git</span> stash pop <span class="token punctuation">[</span>--index<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>stash<span class="token operator">></span><span class="token punctuation">]</span>--index 参数：不仅恢复工作区，还恢复暂存区<span class="token operator">&lt;</span>stash<span class="token operator">></span> 指定恢复某一个具体进度。如果没有这个参数，默认恢复最新进度<span class="token comment" spellcheck="true"># 这是git stash保存进度的完整命令形式</span><span class="token function">git</span> stash <span class="token punctuation">[</span>save message<span class="token punctuation">]</span> <span class="token punctuation">[</span>-k<span class="token operator">|</span>--no-keep-index<span class="token punctuation">]</span> <span class="token punctuation">[</span>--patch<span class="token punctuation">]</span>-k和--no-keep-index指定保存进度后，是否重置暂存区--patch 会显示工作区和HEAD的差异,通过编辑差异文件，排除不需要保存的内容。和git add -p命令类似使用save可以对进度添加备注<span class="token comment" spellcheck="true"># git stash save "这是保存的进度"</span></code></pre><h2 id="8-Git只从暂存区删除，从工作空间删除的命令分别是什么"><a href="#8-Git只从暂存区删除，从工作空间删除的命令分别是什么" class="headerlink" title="8. Git只从暂存区删除，从工作空间删除的命令分别是什么?"></a>8. Git只从暂存区删除，从工作空间删除的命令分别是什么?</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> --cached<span class="token function">git</span> <span class="token function">rm</span><span class="token function">git</span> commit</code></pre><h2 id="9-Git标签的使用"><a href="#9-Git标签的使用" class="headerlink" title="9. Git标签的使用"></a>9. Git标签的使用</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 列出现有的标签</span><span class="token function">git</span> tag<span class="token comment" spellcheck="true"># 打标签</span><span class="token function">git</span> tag -a v1.01 -m <span class="token string">"Relase version 1.01"</span><span class="token comment" spellcheck="true"># 查看相应标签的版本信息</span><span class="token function">git</span> show v1.4</code></pre><ul><li>-a 选项,创建一个含附注类型的标签</li><li>-m 选项,指定了对应的标签说明</li></ul><h2 id="9-Git分支的使用"><a href="#9-Git分支的使用" class="headerlink" title="9. Git分支的使用"></a>9. Git分支的使用</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看本地分支</span><span class="token function">git</span> branch<span class="token comment" spellcheck="true"># 查看远程分支</span><span class="token function">git</span> branch -r<span class="token comment" spellcheck="true"># 创建本地分支(注意新分支创建后不会自动切换为当前分支)</span><span class="token function">git</span> branch <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 切换分支</span><span class="token function">git</span> checkout <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 创建新分支并立即切换到新分支</span><span class="token function">git</span> checkout -b <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 强制删除一个分支</span><span class="token function">git</span> branch -D <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 合并分支(将名称为[name]的分支与当前分支合并)</span><span class="token function">git</span> merge <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 查看各个分支最后提交信息</span><span class="token function">git</span> br -v<span class="token comment" spellcheck="true"># 查看已经被合并到当前分支的分支</span><span class="token function">git</span> br --merged<span class="token comment" spellcheck="true"># 查看尚未被合并到当前分支的分支</span><span class="token function">git</span> br --no-merged</code></pre><h2 id="10-介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。"><a href="#10-介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。" class="headerlink" title="10. 介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。"></a>10. 介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。</h2><p>merge和rebase对于ours和theirs的定义是完全相反的。在merge时，ours指代的是当前分支，theirs代表需要被合并的分支。而在rebase过程中，ours指向了修改参考分支，theirs却是当前分支。因为rebase 隐含了一个<code>git checkout upstream</code>的过程，将<code>HEAD</code>从local分支变成了upstream分支。git会在rebase结束后撤销这个改变，但它已经不可避免地影响了冲突的状态，使rebase中ours和theirs的定义与merge 截然相反。因此，在使用ours与theirs时请格外小心。</p><h2 id="11-Git远程操作相关"><a href="#11-Git远程操作相关" class="headerlink" title="11. Git远程操作相关"></a>11. Git远程操作相关</h2><h3 id="1-clone"><a href="#1-clone" class="headerlink" title="(1). clone"></a>(1). clone</h3><blockquote><p>git clone &lt;版本库的网址&gt;<br>git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 克隆jQuery的版本库</span> <span class="token function">git</span> clone https://github.com/jquery/jquery.git  <span class="token function">git</span> clone -o jQuery https://github.com/jquery/jquery.git</code></pre><h3 id="2-remote"><a href="#2-remote" class="headerlink" title="(2). remote"></a>(2). remote</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 列出所有远程主机</span><span class="token function">git</span> remote<span class="token comment" spellcheck="true"># 使用-v选项，可以参看远程主机的网址</span><span class="token function">git</span> remote -v <span class="token comment" spellcheck="true"># 可以查看该主机的详细信息</span><span class="token function">git</span> remote show <span class="token operator">&lt;</span>主机名<span class="token operator">></span> <span class="token comment" spellcheck="true"># 添加远程主机</span><span class="token function">git</span> remote add <span class="token operator">&lt;</span>主机名<span class="token operator">></span> <span class="token operator">&lt;</span>网址<span class="token operator">></span><span class="token comment" spellcheck="true"># 删除远程主机</span><span class="token function">git</span> remote <span class="token function">rm</span> <span class="token operator">&lt;</span>主机名<span class="token operator">></span><span class="token comment" spellcheck="true"># 修改远程主机名称</span><span class="token function">git</span> remote <span class="token function">rename</span> <span class="token operator">&lt;</span>原主机名<span class="token operator">></span> <span class="token operator">&lt;</span>新主机名<span class="token operator">></span></code></pre><h3 id="3-fetch"><a href="#3-fetch" class="headerlink" title="(3). fetch"></a>(3). fetch</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 取回所有分支(branch)的更新到本地</span><span class="token function">git</span> fetch <span class="token operator">&lt;</span>远程主机名<span class="token operator">></span><span class="token comment" spellcheck="true"># 取回某的特定分支的更新</span><span class="token function">git</span> fetch <span class="token operator">&lt;</span>远程主机名<span class="token operator">></span> <span class="token operator">&lt;</span>分支名<span class="token operator">></span><span class="token comment" spellcheck="true"># 取回origin主机的master分支的更新</span><span class="token function">git</span> fetch origin master<span class="token comment" spellcheck="true"># 所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支</span><span class="token function">git</span> merge origin/master<span class="token function">git</span> rebase origin/master</code></pre><h3 id="4-pull"><a href="#4-pull" class="headerlink" title="(4). pull"></a>(4). pull</h3><blockquote><p>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 取回origin主机的next分支，与本地的master分支合并</span><span class="token function">git</span> pull origin next:master<span class="token comment" spellcheck="true"># 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</span><span class="token function">git</span> pull origin next<span class="token comment" spellcheck="true"># 上面的命令实质上等同于先做git fetch，再做git merge。</span><span class="token function">git</span> fetch origin<span class="token function">git</span> merge origin/next<span class="token comment" spellcheck="true"># 合并需要采用rebase模式</span><span class="token function">git</span> pull --rebase <span class="token operator">&lt;</span>远程主机名<span class="token operator">></span> <span class="token operator">&lt;</span>远程分支名<span class="token operator">></span>:<span class="token operator">&lt;</span>本地分支名<span class="token operator">></span></code></pre><h3 id="5-push"><a href="#5-push" class="headerlink" title="(5). push"></a>(5). push</h3><blockquote><p>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</p></blockquote><p><strong>注意</strong>:分支推送顺序的写法是”&lt;来源地&gt;:&lt;目的地&gt;”，所以git pull是”&lt;远程分支&gt;:&lt;本地分支&gt;”，而git push是”&lt;本地分支&gt;:&lt;远程分支&gt;”。</p><ul><li>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。</li><li>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建</span><span class="token function">git</span> push origin master<span class="token comment" spellcheck="true"># 省略了本地分支，以下等同，删除origin主机的master分支</span><span class="token function">git</span> push origin :master<span class="token function">git</span> push origin --delete master<span class="token comment" spellcheck="true"># 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略</span><span class="token function">git</span> push origin<span class="token comment" spellcheck="true"># 如果当前分支只有一个追踪分支，那么主机名都可以省略。</span><span class="token function">git</span> push<span class="token comment" spellcheck="true"># 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push</span><span class="token function">git</span> push -u origin master<span class="token comment" spellcheck="true"># 不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机</span><span class="token function">git</span> push --all origin<span class="token comment" spellcheck="true"># 强制推送</span><span class="token function">git</span> push --force origin<span class="token comment" spellcheck="true"># git push不会推送标签(tag)，除非使用–tags选项</span><span class="token function">git</span> push origin --tags</code></pre><h2 id="12-Git-Flow使用简介"><a href="#12-Git-Flow使用简介" class="headerlink" title="12. Git Flow使用简介"></a>12. Git Flow使用简介</h2><p>就像代码需要代码规范一样，代码管理同样需要一个清晰的流程和规范。三种广泛使用的工作流程：</p><ul><li>Git flow</li><li>Github flow</li><li>Gitlab flow</li></ul><p>三种工作流程，有一个共同点：都采用”功能驱动式开发”（Feature-driven development，简称FDD）。它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。最早诞生、并得到广泛采用的一种工作流程，就是<a href="http://nvie.com/posts/a-successful-git-branching-model/">Git flow</a>。</p><p>它最主要的特点有两个。首先，项目存在两个长期分支，分别是：主分支master、开发分支develop。其次，项目存在三种短期分支，分别是：功能分支（feature branch）、补丁分支（hotfix branch）、预发分支（release branch），一旦完成开发，它们就会被合并进develop或master，然后被删除。</p><h3 id="1-Git-Flow流程图"><a href="#1-Git-Flow流程图" class="headerlink" title="(1). Git Flow流程图"></a>(1). Git Flow流程图</h3><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/imagegit-flow.png" alt="Git Flow流程图" style="zoom:67%;" /><p><strong>Git Flow流程图</strong></p><h3 id="2-Git-Flow常用的分支"><a href="#2-Git-Flow常用的分支" class="headerlink" title="(2). Git Flow常用的分支"></a>(2). Git Flow常用的分支</h3><ul><li><code>Production</code>分支。也就是我们经常使用的Master分支，这个分支最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改。</li><li><code>Develop</code>分支。这个分支是我们是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支。</li><li><code>Feature</code>分支。这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回Develop分支进入下一个Release。</li><li><code>Release</code>分支。当你需要一个发布一个新Release的时候，我们基于Develop分支创建一个Release分支，完成Release后，我们合并到Master和Develop分支。</li><li><code>Hotfix</code>分支。当我们在Production发现新的Bug时候，我们需要创建一个Hotfix, 完成Hotfix后，我们合并回Master和Develop分支，所以Hotfix的改动会进入下一个Release。</li></ul><h3 id="3-Git-Flow代码示例"><a href="#3-Git-Flow代码示例" class="headerlink" title="(3). Git Flow代码示例"></a>(3). Git Flow代码示例</h3><h4 id="a-创建develop分支"><a href="#a-创建develop分支" class="headerlink" title="a. 创建develop分支"></a>a. 创建develop分支</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch develop<span class="token function">git</span> push -u origin develop</code></pre><h4 id="b-开始新Feature开发"><a href="#b-开始新Feature开发" class="headerlink" title="b. 开始新Feature开发"></a>b. 开始新Feature开发</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b some-feature develop<span class="token comment" spellcheck="true"># Optionally, push branch to origin:</span><span class="token function">git</span> push -u origin some-feature<span class="token comment" spellcheck="true"># 做一些改动</span><span class="token function">git</span> status<span class="token function">git</span> add some-file<span class="token function">git</span> commit</code></pre><h4 id="c-完成Feature"><a href="#c-完成Feature" class="headerlink" title="c. 完成Feature"></a>c. 完成Feature</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> pull origin develop<span class="token function">git</span> checkout develop<span class="token function">git</span> merge --no-ff some-feature<span class="token function">git</span> push origin develop<span class="token function">git</span> branch -d some-feature<span class="token comment" spellcheck="true"># If you pushed branch to origin:</span><span class="token function">git</span> push origin --delete some-feature</code></pre><h4 id="d-开始Relase"><a href="#d-开始Relase" class="headerlink" title="d. 开始Relase"></a>d. 开始Relase</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b release-0.1.0 develop<span class="token comment" spellcheck="true"># Optional: Bump version number, commit</span><span class="token comment" spellcheck="true"># Prepare release, commit</span></code></pre><h4 id="e-完成Release"><a href="#e-完成Release" class="headerlink" title="e. 完成Release"></a>e. 完成Release</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout master<span class="token function">git</span> merge --no-ff release-0.1.0<span class="token function">git</span> push<span class="token function">git</span> checkout develop<span class="token function">git</span> merge --no-ff release-0.1.0<span class="token function">git</span> push<span class="token function">git</span> branch -d release-0.1.0<span class="token comment" spellcheck="true"># If you pushed branch to origin:</span><span class="token function">git</span> push origin --delete release-0.1.0   <span class="token function">git</span> tag -a v0.1.0 master<span class="token function">git</span> push --tags</code></pre><h4 id="f-开始Hotfix"><a href="#f-开始Hotfix" class="headerlink" title="f. 开始Hotfix"></a>f. 开始Hotfix</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b hotfix-0.1.1 master</code></pre><h4 id="g-完成Hotfix"><a href="#g-完成Hotfix" class="headerlink" title="g. 完成Hotfix"></a>g. 完成Hotfix</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout master<span class="token function">git</span> merge --no-ff hotfix-0.1.1<span class="token function">git</span> push<span class="token function">git</span> checkout develop<span class="token function">git</span> merge --no-ff hotfix-0.1.1<span class="token function">git</span> push<span class="token function">git</span> branch -d hotfix-0.1.1<span class="token function">git</span> tag -a v0.1.1 master<span class="token function">git</span> push --tags</code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2023/02/13/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D13/"/>
      <url>/2023/02/13/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D13/</url>
      
        <content type="html"><![CDATA[<p>并查集：</p><p>把a所在集合和e所在集合加到同一个集合</p><p>均摊下来，两个方法，单次使用每个方法O(1)</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230213134401039.png" alt="image-20230213134401039" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230213135044434.png" alt="image-20230213135044434" style="zoom:50%;" /><p>len小的挂在len大的下面，而且是代表节点挂过去</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230213135202911.png" alt="image-20230213135202911" style="zoom:50%;" /><p>sizemap：只有代表节点</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230213141606562.png" alt="image-20230213141606562" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230213145623499.png" alt="image-20230213145623499" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230213145557154.png" alt="image-20230213145557154" style="zoom:80%;" /><p>题一：</p><p>查矩阵中有多少并查集</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215002939913.png" alt="image-20230215002939913" style="zoom:50%;" /><p>code：只遍历右上半区</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215003255733.png" alt="image-20230215003255733" style="zoom:80%;" /><p>题二：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215004255581.png" alt="image-20230215004255581" style="zoom: 80%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215004541712.png" alt="image-20230215004541712" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215004731507.png" alt="image-20230215004731507" style="zoom:50%;" /><p>O(M*N)</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215005628099.png" alt="image-20230215005628099" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215134548680.png" alt="image-20230215134548680" style="zoom:50%;" /><p>要区分不同位置的1，所以要换成引用来区别</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215134726703.png" alt="image-20230215134726703"></p><p>三个for：省掉边界判断</p><p>最上面没有上，最左边没有左，剩下的单独判断</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215134955747.png" alt="image-20230215134955747" style="zoom:50%;" /><p>code：</p><p>第一行：横着合并</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215135156177.png" alt="image-20230215135156177" style="zoom:80%;" /><p>第一列：竖着合并</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215135421599.png" alt="image-20230215135421599" style="zoom: 80%;" /><p>剩下的，和左边，和上边合并</p><p>另一种并查集实现方式：一维数组</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215144843198.png" alt="image-20230215144843198" style="zoom:50%;" /><p>题三：求每一步的岛数量</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215144825832.png" alt="image-20230215144825832" style="zoom:80%;" /><p>原先情况，合并之前size[i] = 1，合并之后size[i] = 0</p><p>现在不抹零了，只要size[i] != 0，说明曾经被初始化过</p><p>题四：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215165239011.png" alt="image-20230215165239011" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215165344538.png" alt="image-20230215165344538" style="zoom: 67%;" /><p>记录边界信息</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230215205539232.png" alt="image-20230215205539232" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书籍分享01</title>
      <link href="/2023/02/12/%E4%B9%A6%E7%B1%8D/%E4%B9%A6%E7%B1%8D%E5%88%86%E4%BA%AB01/"/>
      <url>/2023/02/12/%E4%B9%A6%E7%B1%8D/%E4%B9%A6%E7%B1%8D%E5%88%86%E4%BA%AB01/</url>
      
        <content type="html"><![CDATA[<p><strong>一次性全部打包</strong>：</p><p><a href="https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/CloudBook/TOP50/1661241464234353860.rar">https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/CloudBook/TOP50/1661241464234353860.rar</a></p><p><strong>一、产业发展趋势：</strong> </p><p><a href="https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/CloudBook/TOP50/1661160521866366793.rar">https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/CloudBook/TOP50/1661160521866366793.rar</a></p><p><strong>二、常见通用技术：</strong> </p><p><a href="https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/CloudBook/TOP50/1661307931361244051.rar">https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/CloudBook/TOP50/1661307931361244051.rar</a></p><p><strong>三、华为云应用构建：</strong> </p><p><a href="https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/CloudBook/TOP50/1661160989764444250.rar">https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/CloudBook/TOP50/1661160989764444250.rar</a></p><p><strong>四、数据技术：</strong> </p><p><a href="https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/CloudBook/TOP50/1661161199370696904.rar">https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/CloudBook/TOP50/1661161199370696904.rar</a></p><p><strong>五、云原生技术：</strong> </p><p><a href="https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/CloudBook/TOP50/1661161397803421981.rar">https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/CloudBook/TOP50/1661161397803421981.rar</a></p><p><strong>六、智能前沿技术：</strong> </p><p><a href="https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/CloudBook/TOP50/1661161498248688105.rar">https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/CloudBook/TOP50/1661161498248688105.rar</a></p><p><strong>七、通讯技术：</strong> </p><p><a href="https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/CloudBook/TOP50/1661161261944318646.rar">https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/CloudBook/TOP50/1661161261944318646.rar</a></p><p><strong>八、其他：</strong> </p><p><a href="https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/CloudBook/TOP50/1661161090139794115.rar">https://res-static.hc-cdn.cn/cloudbu-site/china/zh-cn/CloudBook/TOP50/1661161090139794115.rar</a></p>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心</title>
      <link href="/2023/02/12/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D12/"/>
      <url>/2023/02/12/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D12/</url>
      
        <content type="html"><![CDATA[<p>贪心：绝对标准下的解</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212160528317.png" alt="image-20230212160528317" style="zoom:80%;" /><p>题一：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212160542314.png" alt="image-20230212160542314" style="zoom:80%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212172126164.png" alt="image-20230212172126164" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212172721542.png" alt="image-20230212172721542" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212172846453.png" alt="image-20230212172846453" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212191457670.png" alt="image-20230212191457670" style="zoom:50%;" /><p>证明：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212191817810.png" alt="image-20230212191817810" style="zoom:50%;" /><p>code:</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212203424331.png" alt="image-20230212203424331" style="zoom:80%;" /><p>纯暴力</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212204229708.png" alt="image-20230212204229708" style="zoom:80%;" /><p>第十五节：</p><p>题一：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212214958441.png" alt="image-20230212214958441" style="zoom: 80%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212221641709.png" alt="image-20230212221641709" style="zoom:80%;" /><p>暴力：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212224236659.png" alt="image-20230212224236659" style="zoom: 67%;" /><p>题二：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212224433094.png" alt="image-20230212224433094" style="zoom:80%;" /><p>分析：</p><p>本质上就是哈夫曼编码</p><p>code：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230213012218654.png" alt="image-20230213012218654" style="zoom:80%;" /><p>题三：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230213013153941.png" alt="image-20230213013153941" style="zoom:80%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230213013705487.png" alt="image-20230213013705487" style="zoom: 50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230213014153178.png" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230213014103699.png" alt="image-20230213014103699" style="zoom:50%;" /><p>code：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230213014743110.png" alt="image-20230213014743110" style="zoom:80%;" /><p>题四：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230213014852701.png" alt="image-20230213014852701" style="zoom:80%;" /><p>解读：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230213015010078.png" alt="image-20230213015010078" style="zoom:50%;" /><p>分析：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230213015407718.png" alt="image-20230213015407718" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树递归套路</title>
      <link href="/2023/02/11/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D11/"/>
      <url>/2023/02/11/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D11/</url>
      
        <content type="html"><![CDATA[<p>第13节</p><ol><li>分析可能性：与X有关、与X无关</li><li>后序遍历，树型bp，O(N)，边遍历边释放空间</li></ol><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211212733929.png" alt="image-20230211212733929" style="zoom:80%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212000927601.png" alt="image-20230212000927601" style="zoom:80%;" /><p>题一：判断二叉树是否是完全二叉树</p><p>按层遍历</p><p>第一个原则：遇到一个节点有右子树却没有左子树，直接F</p><p>第二个原则：当第一次遇到左右子树都没有之后，剩下节点必然是叶子节点，否则F</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211214955594.png" alt="image-20230211214955594" style="zoom:50%;" /><p>按套路解（在14节）</p><p>分析：</p><ol><li><p>第一种：左右都是满二叉树</p></li><li><p>第二种：没超过中线</p><ul><li>左是完全二叉树</li><li>右是满二叉树</li><li>左高 = 右高 + 1</li></ul></li><li><p>第三种：到达中线</p><ul><li>左、右都是完全二叉树</li><li>左高 = 右高 + 1</li></ul><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212105707667.png" alt="image-20230212105707667" style="zoom:50%;" /></li><li><p>第四种：超过中线</p><ul><li>左是满二叉树</li><li>右是完全二叉树</li><li>左高 = 右高</li></ul><p>综上：</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212110219643.png" alt="image-20230212110219643" style="zoom:50%;" />需要信息：</p></li></ol><p>题二：</p><p>平衡二叉树：</p><p>每一棵树中，左树中的最大高度和右树的最大高度 相差绝对值 &lt; 2</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211215754975.png" alt="image-20230211215754975" style="zoom:80%;" /><p>分析：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211220401799.png" alt="image-20230211220401799" style="zoom:50%;" /><p>code：</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230211221408548.png" alt="image-20230211221408548" style="zoom:80%;" /><p>题三：</p><p>判断是否是搜索二叉树</p><p>经典的搜索二叉树没有重复值，需要重复值就在节点内部使用链表</p><p>每一棵左树都比头小，每一棵右树都比头大</p><p>分析：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211222116619.png" alt="image-20230211222116619" style="zoom:50%;" /><p>题四：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211223240521.png" alt="image-20230211223240521" style="zoom:80%;" /><p>分析：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211231023141.png" alt="image-20230211231023141" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211231138408.png" alt="image-20230211231138408" style="zoom: 50%;" /><p>code：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211231641360.png" alt="image-20230211231641360" style="zoom: 80%;" /><p>树高度：h</p><p>满二叉树节点数：2^h^-1</p><p>规定一个头节点，头节点下面所有东西都要 称为子树</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211232929639.png" alt="image-20230211232929639" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211233358906.png" alt="image-20230211233358906" style="zoom:50%;" /><p>题五：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212111047512.png" alt="image-20230212111047512" style="zoom:80%;" /><p>题六：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212111232234.png" alt="image-20230212111232234" style="zoom: 80%;" /><p>分析：</p><p>第一种：</p><p>第二种：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212142813584.png" alt="image-20230212142813584" style="zoom:50%;" /><p>code：</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230212145347898.png" alt="image-20230212145347898" style="zoom:80%;" /><p>题七：</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212160354510.png" alt="image-20230212160354510" style="zoom:80%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212160334502.png" alt="image-20230212160334502" style="zoom:80%;" /></p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212160455061.png" alt="image-20230212160455061" style="zoom:80%;" /><p>分析：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212155334359.png" alt="image-20230212155334359" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212155813110.png" alt="image-20230212155813110" style="zoom:50%;" /><p>code：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230212160258864.png" alt="image-20230212160258864" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多叉树和二叉树</title>
      <link href="/2023/02/10/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D10/"/>
      <url>/2023/02/10/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D10/</url>
      
        <content type="html"><![CDATA[<p>第12节</p><p>多叉树——&gt;二叉树——&gt;序列化——&gt;反序列化——&gt;二叉树——&gt;多叉树</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211144801545.png" alt="image-20230211144801545" style="zoom: 80%;" /><p>多叉树中任何一个节点X的所有孩子一律放在左树的右边界上</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211150031100.png" alt="多叉树中任何一个节点X的所有孩子一律放在左树的右边界上" style="zoom:50%;" /><p>有左树就是有孩子，有右树就是有兄弟</p><p>先把b的孩子建完再去建c的：<strong>深度优先遍历</strong></p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211152629684.png" alt="image-20230211152629684" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211153500614.png" alt="image-20230211153500614" style="zoom:80%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230211153519060.png" alt="image-20230211153519060" style="zoom:80%;" /><p>关键在于如何 判断一层结束了</p><p>nextEnd永远以队列最后一个为值</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211153958878.png" alt="image-20230211153958878" style="zoom:50%;" /><p>第一层结点：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211154246398.png" alt="image-20230211154246398" style="zoom:50%;" /><p>第二层开始：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211160729333.png" alt="image-20230211160729333" style="zoom: 50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211160839518.png" alt="image-20230211160839518" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211170631133.png" alt="image-20230211170631133" style="zoom:80%;" /><p>后继节点：</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211170737842.png" alt="image-20230211170737842" style="zoom:50%;" /><p>b就是d的后继节点</p><p>有两种：节点有右树、节点无右树</p><p>如果节点有右树，找节点右树的最左孩子</p><p>如果节点无右树：</p><p>​    作为父亲的右子树，往上找父亲，如果作为父亲的右子树，继续往上找…直到null或者作为父亲的左子树，此时的父亲就是后继结点</p><p>​    作为父亲的左子树，父亲就是后继节点</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211173433563.png" alt="image-20230211173433563" style="zoom: 80%;" /><p>规律：root凹，所有左子树头是凹的，所有右子树头是凸的</p><p>节点数：2^N^-1，空间占用：O(N)        ——N是层数</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211174648559.png" alt="image-20230211174648559" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211175209775.png" alt="image-20230211175209775" style="zoom:50%;" /><p>释放空间</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211175226599.png" alt="image-20230211175226599" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS下安装yum</title>
      <link href="/2023/02/09/linux/CentOS%E5%AE%89%E8%A3%85yum/"/>
      <url>/2023/02/09/linux/CentOS%E5%AE%89%E8%A3%85yum/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS下安装yum"><a href="#CentOS下安装yum" class="headerlink" title="CentOS下安装yum"></a>CentOS下安装yum</h1><p>查看已安装的yumrpm -qa|grep yum</p><p>删除已有的yumrpm -aq|grep yum|xargs rpm -e –nodeps</p><p>下载以下安装包wget <a href="http://tel.mirrors.163.com/centos/7/os/x86_64/Packages/pyth">http://tel.mirrors.163.com/centos/7/os/x86_64/Packages/pyth</a></p><h2 id="1-查看已安装的yum"><a href="#1-查看已安装的yum" class="headerlink" title="1.查看已安装的yum"></a>1.查看已安装的yum</h2><pre class=" language-vim"><code class="language-vim">rpm <span class="token operator">-</span><span class="token keyword">qa</span>|<span class="token keyword">grep</span> yum</code></pre><h2 id="2-删除已有的yum"><a href="#2-删除已有的yum" class="headerlink" title="2.删除已有的yum"></a>2.删除已有的yum</h2><pre class=" language-vim"><code class="language-vim">rpm <span class="token operator">-</span>aq|<span class="token keyword">grep</span> yum|xargs rpm <span class="token operator">-</span><span class="token keyword">e</span> <span class="token operator">-</span><span class="token operator">-</span>nodeps </code></pre><h2 id="3-下载所需安装包"><a href="#3-下载所需安装包" class="headerlink" title="3.下载所需安装包"></a>3.下载所需安装包</h2><pre class=" language-vim"><code class="language-vim">wget http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>tel<span class="token operator">.</span>mirrors<span class="token operator">.</span><span class="token number">163</span><span class="token operator">.</span><span class="token builtin">com</span><span class="token operator">/</span>centos<span class="token operator">/</span><span class="token number">7</span><span class="token operator">/</span>os<span class="token operator">/</span>x86_64<span class="token operator">/</span>Packages<span class="token operator">/</span><span class="token keyword">python</span><span class="token operator">-</span><span class="token number">2.7</span><span class="token operator">.</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">89</span><span class="token operator">.</span>el7<span class="token operator">.</span>x86_64<span class="token operator">.</span>rpm wget http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>tel<span class="token operator">.</span>mirrors<span class="token operator">.</span><span class="token number">163</span><span class="token operator">.</span><span class="token builtin">com</span><span class="token operator">/</span>centos<span class="token operator">/</span><span class="token number">7</span><span class="token operator">/</span>os<span class="token operator">/</span>x86_64<span class="token operator">/</span>Packages<span class="token operator">/</span><span class="token keyword">python</span><span class="token operator">-</span>iniparse<span class="token operator">-</span><span class="token number">0.4</span><span class="token operator">-</span><span class="token number">9</span><span class="token operator">.</span>el7<span class="token operator">.</span>noarch<span class="token operator">.</span>rpm wget http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>tel<span class="token operator">.</span>mirrors<span class="token operator">.</span><span class="token number">163</span><span class="token operator">.</span><span class="token builtin">com</span><span class="token operator">/</span>centos<span class="token operator">/</span><span class="token number">7</span><span class="token operator">/</span>os<span class="token operator">/</span>x86_64<span class="token operator">/</span>Packages<span class="token operator">/</span>yum<span class="token operator">-</span><span class="token number">3.4</span><span class="token operator">.</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">168</span><span class="token operator">.</span>el7<span class="token operator">.</span>centos<span class="token operator">.</span>noarch<span class="token operator">.</span>rpmwget http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>tel<span class="token operator">.</span>mirrors<span class="token operator">.</span><span class="token number">163</span><span class="token operator">.</span><span class="token builtin">com</span><span class="token operator">/</span>centos<span class="token operator">/</span><span class="token number">7</span><span class="token operator">/</span>os<span class="token operator">/</span>x86_64<span class="token operator">/</span>Packages<span class="token operator">/</span>yum<span class="token operator">-</span>metadata<span class="token operator">-</span>parser<span class="token operator">-</span><span class="token number">1.1</span><span class="token operator">.</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">.</span>el7<span class="token operator">.</span>x86_64<span class="token operator">.</span>rpmwget http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>tel<span class="token operator">.</span>mirrors<span class="token operator">.</span><span class="token number">163</span><span class="token operator">.</span><span class="token builtin">com</span><span class="token operator">/</span>centos<span class="token operator">/</span><span class="token number">7</span><span class="token operator">/</span>os<span class="token operator">/</span>x86_64<span class="token operator">/</span>Packages<span class="token operator">/</span>yum<span class="token operator">-</span>plugin<span class="token operator">-</span>fastestmirror<span class="token operator">-</span><span class="token number">1.1</span><span class="token operator">.</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">54</span><span class="token operator">.</span>el7_8<span class="token operator">.</span>noarch<span class="token operator">.</span>rpm</code></pre><p>如果找不到以上版本，可以到 <a href="http://tel.mirrors.163.com/centos/7/os/x86_64/Packages/?login=from_csdn">http://tel.mirrors.163.com/centos/7/os/x86_64/Packages/</a> 下载最新版本</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/20210505211959838.png" alt="下载最新版本"></p><h2 id="4-安装"><a href="#4-安装" class="headerlink" title="4.安装"></a>4.安装</h2><pre class=" language-vim"><code class="language-vim">rpm <span class="token operator">-</span>ivh <span class="token keyword">python</span><span class="token operator">-</span><span class="token number">2.7</span><span class="token operator">.</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">89</span><span class="token operator">.</span>el7<span class="token operator">.</span>x86_64<span class="token operator">.</span>rpm <span class="token keyword">python</span><span class="token operator">-</span>iniparse<span class="token operator">-</span><span class="token number">0.4</span><span class="token operator">-</span><span class="token number">9</span><span class="token operator">.</span>el7<span class="token operator">.</span>noarch<span class="token operator">.</span>rpm <span class="token operator">-</span><span class="token operator">-</span>nodeps <span class="token operator">-</span><span class="token operator">-</span>forcerpm <span class="token operator">-</span>ivh yum<span class="token operator">-</span>metadata<span class="token operator">-</span>parser<span class="token operator">-</span><span class="token number">1.1</span><span class="token operator">.</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">.</span>el7<span class="token operator">.</span>x86_64<span class="token operator">.</span>rpm <span class="token operator">-</span><span class="token operator">-</span>nodeps <span class="token operator">-</span><span class="token operator">-</span>forcerpm <span class="token operator">-</span>ivh yum<span class="token operator">-</span><span class="token number">3.4</span><span class="token operator">.</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">168</span><span class="token operator">.</span>el7<span class="token operator">.</span>centos<span class="token operator">.</span>noarch<span class="token operator">.</span>rpm yum<span class="token operator">-</span>plugin<span class="token operator">-</span>fastestmirror<span class="token operator">-</span><span class="token number">1.1</span><span class="token operator">.</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">54</span><span class="token operator">.</span>el7_8<span class="token operator">.</span>noarch<span class="token operator">.</span>rpm <span class="token operator">-</span><span class="token operator">-</span>nodeps <span class="token operator">-</span><span class="token operator">-</span>force</code></pre><h2 id="5-更改-yum源"><a href="#5-更改-yum源" class="headerlink" title="5.更改 yum源"></a>5.更改 yum源</h2><ul><li><p>到该网站 <a href="http://mirrors.163.com/.help/centos.html?login=from_csdn">http://mirrors.163.com/.help/centos.html</a> 下载配置文件，重命名为CentOS-Base.repo</p><ul><li><p>首先备份/etc/yum.repos.d/CentOS-Base.repo</p><pre class=" language-vim"><code class="language-vim">mv <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token operator">.</span>repos<span class="token operator">.</span><span class="token keyword">d</span><span class="token operator">/</span>CentOS<span class="token operator">-</span>Base<span class="token operator">.</span>repo <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token operator">.</span>repos<span class="token operator">.</span><span class="token keyword">d</span><span class="token operator">/</span>CentOS<span class="token operator">-</span>Base<span class="token operator">.</span>repo<span class="token operator">.</span><span class="token builtin">backup</span></code></pre></li><li><p>下载对应版本repo文件， 放入/etc/yum.repos.d/（操作前请做好相应备份）</p><p><a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo?login=from_csdn">CentOS7</a></p><p><a href="http://mirrors.163.com/.help/CentOS6-Base-163.repo?login=from_csdn">CentOS6</a></p><p><a href="http://mirrors.163.com/.help/CentOS5-Base-163.repo?login=from_csdn">CentOS5</a></p></li><li><p>运行以下命令生成缓存</p></li></ul><pre class=" language-vim"><code class="language-vim">yum clean <span class="token keyword">all</span>yum makecache</code></pre></li><li><p>修改配置文件</p><ul><li>运行一下命令打开CentOS-Base.repo文件</li></ul><pre class=" language-vim"><code class="language-vim"><span class="token keyword">cd</span> <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token operator">.</span>repos<span class="token operator">.</span><span class="token keyword">d</span> <span class="token keyword">vim</span> CentOS<span class="token operator">-</span>Base<span class="token operator">.</span>repo</code></pre><blockquote><p>也可以通过Xftp7软件编辑，更加方便快捷</p></blockquote><ul><li>将以下配置更换Centos-Base.repo里的内容</li></ul><pre class=" language-vim"><code class="language-vim"># CentOS<span class="token operator">-</span>Base<span class="token operator">.</span>repo## The mirror system uses the connecting IP address of the client and the# <span class="token keyword">update</span> status of each mirror <span class="token keyword">to</span> pick mirrors that are updated <span class="token keyword">to</span> and# geographically <span class="token keyword">close</span> <span class="token keyword">to</span> the client<span class="token operator">.</span>  You should use this <span class="token keyword">for</span> CentOS updates# unless you are manually picking other mirrors<span class="token operator">.</span>## If the mirrorlist<span class="token operator">=</span> does not work <span class="token keyword">for</span> you<span class="token punctuation">,</span> <span class="token keyword">as</span> a fall back you can <span class="token keyword">try</span> the# remarked out baseurl<span class="token operator">=</span> line instead<span class="token operator">.</span>## <span class="token punctuation">[</span>base<span class="token punctuation">]</span>name<span class="token operator">=</span>CentOS<span class="token operator">-</span>$releasever <span class="token operator">-</span> Base#mirrorlist<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrorlist<span class="token operator">.</span>centos<span class="token operator">.</span>org<span class="token operator">/</span><span class="token operator">?</span>release<span class="token operator">=</span>$releasever&amp;arch<span class="token operator">=</span>$basearch&amp;repo<span class="token operator">=</span>osbaseurl<span class="token operator">=</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token operator">.</span>ustc<span class="token operator">.</span>edu<span class="token operator">.</span><span class="token keyword">cn</span><span class="token operator">/</span>centos<span class="token operator">/</span>$releasever<span class="token operator">/</span>os<span class="token operator">/</span>$basearch<span class="token operator">/</span>gpgcheck<span class="token operator">=</span><span class="token number">1</span>gpgkey<span class="token operator">=</span><span class="token keyword">file</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">/</span>etc<span class="token operator">/</span>pki<span class="token operator">/</span>rpm<span class="token operator">-</span>gpg<span class="token operator">/</span>RPM<span class="token operator">-</span>GPG<span class="token operator">-</span>KEY<span class="token operator">-</span>CentOS<span class="token operator">-</span><span class="token number">7</span> #released updates<span class="token punctuation">[</span>updates<span class="token punctuation">]</span>name<span class="token operator">=</span>CentOS<span class="token operator">-</span>$releasever <span class="token operator">-</span> Updates# mirrorlist<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrorlist<span class="token operator">.</span>centos<span class="token operator">.</span>org<span class="token operator">/</span><span class="token operator">?</span>release<span class="token operator">=</span>$releasever&amp;arch<span class="token operator">=</span>$basearch&amp;repo<span class="token operator">=</span>updatesbaseurl<span class="token operator">=</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token operator">.</span>ustc<span class="token operator">.</span>edu<span class="token operator">.</span><span class="token keyword">cn</span><span class="token operator">/</span>centos<span class="token operator">/</span>$releasever<span class="token operator">/</span>updates<span class="token operator">/</span>$basearch<span class="token operator">/</span>gpgcheck<span class="token operator">=</span><span class="token number">1</span>gpgkey<span class="token operator">=</span><span class="token keyword">file</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">/</span>etc<span class="token operator">/</span>pki<span class="token operator">/</span>rpm<span class="token operator">-</span>gpg<span class="token operator">/</span>RPM<span class="token operator">-</span>GPG<span class="token operator">-</span>KEY<span class="token operator">-</span>CentOS<span class="token operator">-</span><span class="token number">7</span> #additional packages that may <span class="token keyword">be</span> useful<span class="token punctuation">[</span>extras<span class="token punctuation">]</span>name<span class="token operator">=</span>CentOS<span class="token operator">-</span>$releasever <span class="token operator">-</span> Extras# mirrorlist<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrorlist<span class="token operator">.</span>centos<span class="token operator">.</span>org<span class="token operator">/</span><span class="token operator">?</span>release<span class="token operator">=</span>$releasever&amp;arch<span class="token operator">=</span>$basearch&amp;repo<span class="token operator">=</span>extrasbaseurl<span class="token operator">=</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token operator">.</span>ustc<span class="token operator">.</span>edu<span class="token operator">.</span><span class="token keyword">cn</span><span class="token operator">/</span>centos<span class="token operator">/</span>$releasever<span class="token operator">/</span>extras<span class="token operator">/</span>$basearch<span class="token operator">/</span>gpgcheck<span class="token operator">=</span><span class="token number">1</span>gpgkey<span class="token operator">=</span><span class="token keyword">file</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">/</span>etc<span class="token operator">/</span>pki<span class="token operator">/</span>rpm<span class="token operator">-</span>gpg<span class="token operator">/</span>RPM<span class="token operator">-</span>GPG<span class="token operator">-</span>KEY<span class="token operator">-</span>CentOS<span class="token operator">-</span><span class="token number">7</span> #additional packages that extend functionality of existing packages<span class="token punctuation">[</span>centosplus<span class="token punctuation">]</span>name<span class="token operator">=</span>CentOS<span class="token operator">-</span>$releasever <span class="token operator">-</span> Plus# mirrorlist<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrorlist<span class="token operator">.</span>centos<span class="token operator">.</span>org<span class="token operator">/</span><span class="token operator">?</span>release<span class="token operator">=</span>$releasever&amp;arch<span class="token operator">=</span>$basearch&amp;repo<span class="token operator">=</span>centosplusbaseurl<span class="token operator">=</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token operator">.</span>ustc<span class="token operator">.</span>edu<span class="token operator">.</span><span class="token keyword">cn</span><span class="token operator">/</span>centos<span class="token operator">/</span>$releasever<span class="token operator">/</span>centosplus<span class="token operator">/</span>$basearch<span class="token operator">/</span>gpgcheck<span class="token operator">=</span><span class="token number">1</span>enabled<span class="token operator">=</span><span class="token number">0</span>gpgkey<span class="token operator">=</span><span class="token keyword">file</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">/</span>etc<span class="token operator">/</span>pki<span class="token operator">/</span>rpm<span class="token operator">-</span>gpg<span class="token operator">/</span>RPM<span class="token operator">-</span>GPG<span class="token operator">-</span>KEY<span class="token operator">-</span>CentOS<span class="token operator">-</span><span class="token number">7</span></code></pre><ul><li>配置完成后更新缓存</li></ul><pre class=" language-vim"><code class="language-vim">yum clean <span class="token keyword">all</span>yum makecache</code></pre></li></ul><p>完成以上步骤就可以成功在Linux安装上yum</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> CentOS </tag>
            
            <tag> yum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树遍历</title>
      <link href="/2023/02/09/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D9/"/>
      <url>/2023/02/09/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D9/</url>
      
        <content type="html"><![CDATA[<img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209110552397.png" alt="image-20230209110552397" style="zoom:50%;" /><p>队列实现按层遍历</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209110743086.png" alt="image-20230209110743086" style="zoom:50%;" /><p>序列化和反序列化</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209111310756.png" alt="image-20230209111310756" style="zoom:80%;" /><p>序列化一般情况：按先序、按层</p><p>反序列化和序列化一样</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209151452031.png" alt="image-20230209151452031" style="zoom:50%;" /><p>无法通过中序序列化</p><p>按层遍历</p><p>利用一个Node的队列</p><p>结点 !=null :既序列化，又进队列</p><p>结点 ==null :只序列化，不进队列</p><p>结点从队列出来之后，开始往左孩子序列化，再右孩子序列化</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230211140721708.png" alt="image-20230211140721708" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法试题讲解</title>
      <link href="/2023/02/08/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D8/"/>
      <url>/2023/02/08/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D8/</url>
      
        <content type="html"><![CDATA[<p>第11节</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208134859807.png" alt="image-20230208134859807" style="zoom: 80%;" /><p>解决思路：</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208192306854.png" alt="image-20230208192306854" style="zoom:50%;" /><p>part一：寻找单链表的第一个入环节点</p><p>环外6个节点，环内8个节点</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208155218001.png" alt="image-20230208155218001" style="zoom:50%;" /><p>终会相遇</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208155349886.png" alt="image-20230208155349886" style="zoom:50%;" /><p>快指针回到原点，慢指针停在原地，之后快慢指针都只走一步</p><p>之后，快慢指针一定会在第一个入环节点相遇</p><p>part二：分别找两个链表的第一个入环节点</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208162428630.png" alt="image-20230208162428630" style="zoom:50%;" /><p>用容器找到相交节点：</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208171823403.png" alt="image-20230208171823403" style="zoom:50%;" /><p>不用容器，通过计算两个链表的长度len1，len2，如果最后一个节点的内存地址相同，则相交</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208172004178.png" alt="image-20230208172004178" style="zoom:50%;" /><p>接下来，如果len1=100，len2=80，再让head1，head2从头开始，且head1慢20步再走</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208172230206.png" alt="image-20230208172230206" style="zoom:50%;" /><p>经历两个while后，如果n&gt;0，链表一正常，如果n&lt;0，链表二正常</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208173321982.png" alt="image-20230208173321982" style="zoom: 80%;" /><p>part三：两链表都有环只有三种情况</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208192225671.png" alt="image-20230208192225671" style="zoom:50%;" /><p>如果loop1==loop2，则为情况（二），否则是情况（一）/（三）</p><p>区分一、三的方法：loop1走上一圈，在一圈结束前，如果遇到loop2，则为情况三，否则是情况二</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208192714952.png" alt="image-20230208192714952" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230209002805008.png" alt="image-20230209002805008" style="zoom:80%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208193341796.png" alt="image-20230208193341796" style="zoom: 80%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208193303734.png" alt="image-20230208193303734" style="zoom:80%;" /><p>只要出现三次，按第一次出现的顺序就是先序，第二次是中序，第三次后序</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208232912693.png" alt="image-20230208232912693" style="zoom:50%;" /><p>先序：——X——，前部分A</p><p>后序：———X———，后部分B</p><p>A∩B就是X的祖先</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208235418863.png" alt="image-20230208235418863" style="zoom:50%;" /><p>解释：</p><ol><li></li></ol><p>除了X，X的祖先，X的孩子，剩下的可以分为两类：都是兄弟</p><ul><li>X作为左树的右兄弟们（圈圈都是）</li></ul><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230209002056451.png" alt="image-20230209002056451" style="zoom:50%;" /><ul><li><p>X作为右树的左兄弟们</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230209002216799.png" alt="image-20230209002216799" style="zoom:50%;" /></li></ul><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230209002342827.png" alt="image-20230209002342827" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230209002614404.png" alt="image-20230209002614404" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230209002820397.png" alt="image-20230209002820397" style="zoom:80%;" /><p>用栈去实现非递归的二叉树先中后遍历</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230209002927568.png" alt="image-20230209002927568" style="zoom:50%;" /><p>头左右-&gt;头右左-&gt;左右头</p><p>用两个栈实现后序遍历</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209103145555.png" alt="image-20230209103144949" style="zoom:50%;" /><p>只用一个栈，实现后序遍历</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209104223949.png" alt="image-20230209104223949" style="zoom:50%;" /><p>整棵树都可以被左边界分解</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230209105206484.png" alt="image-20230209105206484" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀树和多叉树</title>
      <link href="/2023/02/07/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D7/"/>
      <url>/2023/02/07/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D7/</url>
      
        <content type="html"><![CDATA[<p>第九节</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207094746952.png" alt="image-20230207094746952" style="zoom:80%;" /><p>多叉树、字符放在边上</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207095023181.png" alt="image-20230207095023181" style="zoom:50%;" /><p>结点加上值 pass和end，pass经过几次，end几个结尾</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207095332469.png" alt="image-20230207095332469" style="zoom: 50%;" /><p>哈希表的增删改查是O(1)，前提是忽略单样本，如果单样本数量太大，那就是O(K)，K为单样本长度</p><p>（每一个单样本在计算哈希值时都要遍历，会走单样本的长度），而内存地址是直接得出来的，二者不同</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207104034153.png" alt="image-20230207104034153" style="zoom:67%;" /><p>根据个位数排序</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207104219965.png" alt="image-20230207104219965" style="zoom:50%;" /><p>十</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207104251214.png" alt="image-20230207104251214" style="zoom:50%;" /><p>百</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207104328109.png" alt="image-20230207104328109" style="zoom:50%;" /><p>普遍加上最小值</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207104509070.png" alt="image-20230207104509070" style="zoom:50%;" /><p>count’是前缀和</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207112203844.png" alt="image-20230207112203844" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207112307899.png" alt="image-20230207112307899" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207112356157.png" alt="image-20230207112356157" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207112437050.png" alt="image-20230207112437050" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207112450085.png" alt="image-20230207112450085" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207112547593.png" alt="image-20230207112547593" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207112807440.png" alt="image-20230207112807440" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207112838961.png" alt="image-20230207112838961" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207130506231.png" alt="image-20230207130506231" style="zoom:50%;" /><p>第10节：</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207130539042.png" alt="image-20230207130539042" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207130550391.png" alt="image-20230207130550391" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207150042933.png" alt="image-20230207150042933" style="zoom:50%;" /><p>排序总结：</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207094325520.png" alt="image-20230207094325520" style="zoom:80%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207151348209.png" alt="image-20230207151348209" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207154405943.png" alt="image-20230207154405943" style="zoom:67%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207154748055.png" alt="image-20230207154748055" style="zoom:67%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207154819297.png" alt="image-20230207154819297" style="zoom:67%;" /><p>技巧一：遍历得到链表size</p><p>技巧二：放到容器</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207160841807.png" alt="image-20230207160841807" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207160902763.png" alt="image-20230207160902763" style="zoom:50%;" /><p>最后要调回原结构</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207161219910.png" alt="image-20230207161219910" style="zoom: 50%;" /><p>最终L/R有一个是null，结束；再改回原结构</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207161415606.png" alt="image-20230207161415606" style="zoom:50%;" /><p>题三：</p><p>改成下面的结构</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207161532302.png" alt="image-20230207161532302" style="zoom:50%;" /><p>解决：树形，遇到两个就重连</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207161610006.png" alt="image-20230207161610006" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207161703137.png" alt="image-20230207161703137" style="zoom:50%;" /><p>题四：</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207161838032.png" alt="image-20230207161838032" style="zoom:50%;" /><p>只适用六个变量：</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207165349557.png" alt="image-20230207165349557" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207165426720.png" alt="image-20230207165426720" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207165536999.png" alt="image-20230207165536999" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208002057765.png" alt="image-20230208002057765" style="zoom:80%;" /><p>先取值，再赋值</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208133712005.png" alt="image-20230208133712005" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208133923764.png" alt="image-20230208133923764" style="zoom:80%;" /><p>不用容器：O(N)</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208134125370.png" alt="image-20230208134125370" style="zoom:50%;" /><p>拿一对出来</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230208134232109.png" alt="image-20230208134232109" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备考安排</title>
      <link href="/2023/02/04/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D4/"/>
      <url>/2023/02/04/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D4/</url>
      
        <content type="html"><![CDATA[<p>提高记忆力方式：</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230203235918581.png" alt="image-20230203235918581" style="zoom:50%;" /><p>备考安排：</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230204000216209.png" alt="image-20230204000216209" style="zoom:50%;" /><p>时间节点：</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230204000255683.png" alt="image-20230204000255683" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230204000348595.png" alt="image-20230204000348595" style="zoom:50%;" /><p>四大名著：</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230204000418617.png" alt="image-20230204000418617" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230204000541979.png" alt="image-20230204000541979" style="zoom: 80%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230204000747239.png" alt="image-20230204000747239" style="zoom:80%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230204001027988.png" alt="image-20230204001027988" style="zoom:80%;" />]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>泛型</title>
      <link href="/2023/02/03/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D3/"/>
      <url>/2023/02/03/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D3/</url>
      
        <content type="html"><![CDATA[<p>定义Java的泛型时，通常使用的一些类型参数的字母或者符号有:E、T、K、V、N、？Object等。</p><p>Java泛型中有两种<strong>限定通配符</strong>。</p><p>==一种是<code>&lt;? extends T&gt;</code>，保证泛型类型必须是T的子类型来设定泛型类型的上边界，即泛型类型必须为T类型或者T的子类。==</p><p>==另一种是<code>&lt;? super T&gt;</code>保证泛型类型必须是T的父类来设定类型的下边界，即类型必须是T类型或者T的父类。==</p><p>PECS原则，即<strong>Producer</strong> Extens <strong>Consumer</strong> Super</p><p><strong>读取</strong>适用于<code>&lt;? extends T&gt;</code></p><p><strong>插入</strong>适合于<code>&lt;? super T&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆内存和栈内存</title>
      <link href="/2023/02/01/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D1/"/>
      <url>/2023/02/01/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M2D1/</url>
      
        <content type="html"><![CDATA[<p>在Java中，内存分为两种，一种是栈内存，另一种就是堆内存</p><p>堆内存<br>作用是用于存储Java中的对象和数组，存放由new创建的对象和数组。</p><p>堆内存特点<br>第一点：队列</p><p>第二点：运行时动态地分配内存大小，生存期也不必事先告诉编译器，缺点：由于要在运行时动态分配内存，存取速度较慢。</p><p>堆内存分配机制</p><p>由Java虚拟机的自动垃圾回收器来管理</p><p>栈内存<br>作用是存放方法或者局部变量，比如：基本类型的变量和对象的引用变量</p><p>栈内存特点</p><p>存取速度比堆要快，仅次于寄存器，栈数据可以共享，缺点：存在栈中的数据大小与生存期必须是确定的，缺乏灵活性</p><p>栈内存分配机制<br>栈内存可以称为一级缓存，由垃圾回收器自动回收</p><p>JVM是基于堆栈的虚拟机，JVM对堆栈只进行两种操作：以帧为单位的压栈和出栈操作。</p><p>JVM为每个新创建的线程都分配一个堆栈</p><p>对于一个Java程序来说，它的运行就是通过对堆栈的操作来完成的。堆栈以==<strong>帧</strong>==为单位保存线程的状态。</p><p>相同</p><p>1.都是属于Java内存的一种<br>2.系统都会自动去回收它，但是对于堆内存一般开发人员会自动回收它</p>]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表</title>
      <link href="/2023/01/30/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M1D30/"/>
      <url>/2023/01/30/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M1D30/</url>
      
        <content type="html"><![CDATA[<p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在<a href="https://so.csdn.net/so/search?q=%E5%93%88%E5%B8%8C%E8%A1%A8&spm=1001.2101.3001.7020">哈希表</a>中的索引位置。hashCode() 定义在JDK的Object.java中，这就意味着Java中的任何类都包含有hashCode() 函数。</p><p>hashcode代表对象的地址说的是对象在hash表中的位置，物理地址说的对象存放在内存中的地址 。 通过对象的内部地址(也就是物理地址)转换成一个整数，然后该整数通过hash函数的算法就得到了hashcode 。</p><p>equals方法和hashcode的关系？</p><p>1、如果两个对象equals相等，那么这两个对象的HashCode一定也相同</p><p>2、如果两个对象的HashCode相同，不代表两个对象就相同，只能说明这两个对象在散列存储结构中，</p><p>存放于同一个位置。hashCode()只表示对象的哈希码，哈希码相同的对象不一定相等，反之，没有重写equals方法的前提下，两个对象相等，则hashCode一定相同</p><p>equals方法重写的话，建议也一起重写hashcode方法</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap 基于哈希表的 Map 接口实现，是以 key-value 存储形式存在，即主要用来存放键值对。HashMap 的实现不是同步的，这意味着它不是线程安全的。它的 key、value 都可以为 null，此外，HashMap 中的映射不是有序的。</p><p>jdk1.8 之前 HashMap 由 数组 + 链表 组成，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突（两个对象调用的 hashCode 方法计算的哈希值经哈希函数算出来的地址被别的元素占用）而存在的（“拉链法”解决冲突）。jdk1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（或者红黑树的边界值，默认为 8 ）并且当前数组的长度大于 64 时，此时此索引位置上的所有数据改为使用红黑树存储。</p><p>补充：将链表转换成红黑树前会判断，即便阈值大于 8，但是数组长度小于 64，此时并不会将链表变为红黑树，而是选择逬行数组扩容。</p><p>这样做的目的是因为数组比较小，尽量避开红黑树结构，这种情况下变为红黑树结构，反而会降低效率，因为红黑树需要逬行左旋，右旋，变色这些操作来保持平衡。同时数组长度小于64时，搜索时间相对要快些。所以结上所述为了提高性能和减少搜索时间，底层阈值大于8并且数组长度大于64时，链表才转换为红黑树，具体可以参考 treeifyBin() 方法。</p><p>当然虽然增了红黑树作为底层数据结构，结构变得复杂了，但是阈值大于 8 并且数组长度大于 64 时，链表转换为红黑树时，效率也变的更高效</p><p>HashMap 特点：</p><pre><code>存储无序的。键和值位置都可以是 null，但是键位置只能存在一个 null。键位置是唯一的，是底层的数据结构控制的。jdk1.8 前数据结构是链表+数组，jdk1.8 之后是链表+数组+红黑树。阈值（边界值）&gt; 8 并且数组长度大于 64，才将链表转换为红黑树，变为红黑树的目的是为了高效的查询。默认的扩容方式：扩容为原来容量的 2 倍，并将原有的数据复制过来。</code></pre><p>size 表示 HashMap 中键值对的实时数量，注意这个不等于数组的长度。<br>threshold（临界值）= capacity（容量）* loadFactor（负载因子）。这个值是当前已占用数组长度的最大值。size 超过这个值就重新 resize（扩容），扩容后的 HashMap 容量是之前容量的两倍。默认的临界值是<strong>12 = 16 * 0.75</strong></p><p>面试题</p><p>1、HashMap 中 hash 函数是怎么实现的？还有哪些hash函数的实现方式？<br>答：对于 key 的 hashCode 做 hash 操作，无符号右移 16 位然后做异或运算。还有平方取中法，伪随机数法和取余数法。这三种效率都比较低。而无符号右移 16 位异或运算效率是最高的。</p><p>2、当两个对象的 hashCode 相等时会怎么样？<br>答：会产生哈希碰撞。若 key 值内容相同则替换旧的 value，不然连接到链表后面，链表长度超过阈值 8 就转换为红黑树存储。</p><p>3、什么是哈希碰撞，如何解决哈希碰撞？<br>答：只要两个元素的 key 计算的哈希码值相同就会发生哈希碰撞。jdk8 之前使用链表解决哈希碰撞。jdk8之后使用链表 + 红黑树解决哈希碰撞。</p><p>4、如果两个键的 hashCode 相同，如何存储键值对？<br>答：通过 equals 比较内容是否相同。相同：则新的 value 覆盖之前的 value。不相同：则将新的键值对添加到哈希表中。</p><p>HashMap继承关系说明：</p><pre><code>Cloneable 空接口，表示可以克隆。创建并返回 HashMap 对象的一个副本。Serializable 序列化接口。属于标记性接口。HashMap 对象可以被序列化和反序列化。AbstractMap 父类提供了 Map 实现接口。以最大限度地减少实现此接口所需的工作。</code></pre><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230130111557966.png" alt="image-20230130111557966" style="zoom:67%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230130111317617.png" alt="image-20230130111317617" style="zoom:67%;" /><p>成员变量说明：</p><pre><code>loadFactor 是用来衡量 HashMap 满的程度，表示HashMap的疏密程度，影响 hash 操作到同一个数组位置的概率，计算 HashMap 的实时负载因子的方法为：size/capacity，而不是占用桶的数量去除以 capacity。capacity 是桶的数量，也就是 table 的长度 length。loadFactor 太大导致查找元素效率低，太小导致数组的利用率低，存放的数据会很分散。loadFactor 的默认值为 0.75f 是官方给出的一个比较好的临界值。当 HashMap 里面容纳的元素已经达到 HashMap 数组长度的 75% 时，表示 HashMap 太挤了，需要扩容，而扩容这个过程涉及到 rehash、复制数据等操作，非常消耗性能。所以开发中尽量减少扩容的次数，可以通过创建 HashMap 集合对象时指定初始容量来尽量避免。在 HashMap 的构造器中可以定制 loadFactor。</code></pre><p>为什么负载因子设置为0.75，初始化临界值是12？</p><p>loadFactor 越趋近于1，那么数组中存放的数据(entry)也就越多，也就越密，也就是会让链表的长度增加，loadFactor 越小，也就是趋近于0，数组中存放的数据(entry)也就越少，也就越稀疏。</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230130112026592.png" alt="image-20230130112026592" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆和比较器</title>
      <link href="/2023/01/17/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M1D17/"/>
      <url>/2023/01/17/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M1D17/</url>
      
        <content type="html"><![CDATA[<img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230118001020769.png" alt="image-20230118001020769" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230118105845576.png" alt="image-20230118105845576" style="zoom:50%;" /><p>复杂度O(N*logN)</p><p>堆：优先级队列 PQ</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230118105920373.png" alt="image-20230118105920373" style="zoom:50%;" /><p>完全二叉树：要么这一层是满的，要么==从左往右==在变满的路上，是最后一层</p><p>以下均是：</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230118110411932.png" alt="image-20230118110411932" style="zoom:50%;" /><p>从0出发的一段连续数组可以被当作完全二叉树</p><p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230118110953244.png" alt="image-20230118110953244" style="zoom:50%;" />父节点是向下取整，和int一样</p><p>堆就是完全二叉树、提及堆要说明是大根堆还是小根堆</p><p>大根堆：每一棵子树的最大值都是头节点的值</p><p>大根堆就是根节点是整棵树的最大值(根节点大于等于左右子树的最大值)，对于他的任意子树，根节点也是最大值。</p><p>堆的调整：与父节点(i-1)/2比较，直到小于等于父节点或者到根节点</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230118120637296.png" alt="image-20230118120637296" style="zoom:50%;" /><p>下沉：</p><p>把根节点挪到heapSize位置，heapSize–；然后arr[heapSize]与arr[0]交换并进行调整下沉</p><p>在左孩子没越界的情况下：把两个孩子中较大的拎出来、与父节点pk，小就下沉，一样大选哪边都行</p><p>停：较大的孩子都不再比index位置的数大；已经没孩子了</p><p>假设位置7的数出错了，x—&gt;x’</p><p>重新调整：两个实际只会发生一个</p><ol><li>heapInsert(7) 上浮</li><li>heapify(7) 下沉</li></ol><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230118213012114.png" alt="image-20230118213012114" style="zoom:50%;" /><p>堆可以加重复值，有序表treeMap不行</p><p>heapInser和heapify复杂度都是O(logN) 二叉树高度是logN</p><p>数据量增加常数法</p><p>如果，数据量为N时，时间复杂度为O(N*logN)，</p><p>当增加常数倍时，则可以推出数据量为2N，时间复杂度为O(N*logN)。（常数项可以忽略）</p><p>证明：数据量2N的上限是O(N * logN)，下限：把2N分成N和N，先后成堆，第一个N成堆可得树高度是logN，第二个N是在第一个N的基础上，也就是在高度为logN的树上添加，故下限也是O(N * logN)，夹逼定理可以得2N的就是O(N * logN)。</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230119105736370.png" alt="image-20230119105736370" style="zoom:50%;" /><p>经典的建堆是O(N * logN)，优化的是O(N)</p><p>调堆是O(N * logN)</p><p>堆排序是建堆+调堆 = O(N * logN)</p><p>如果有N个节点，可以认为叶节点有N/2个，最多往下看一回</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230119111837548.png" alt="image-20230119111837548" style="zoom:50%;" /><p>等比数列，最后收敛于O(N)</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230119112031982.png" alt="image-20230119112031982" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230119112643790.png" alt="image-20230119112643790" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230119110626225.png" alt="image-20230119110626225" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230119110640120.png" alt="image-20230119110640120" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230119110709243.png" alt="image-20230119110709243" style="zoom:50%;" /><p>第八节</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230119131714564.png" alt="image-20230119131714564" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230119131047354.png" alt="image-20230119131047354" style="zoom:50%;" /><p>java和c++</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230119131310628.png" alt="image-20230119131310628" style="zoom:50%;" /><p>题目给的数据量为10^3^，若算法时间复杂度为O(N^2^)，则能通过</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230119131350741.png" alt="image-20230119131350741" style="zoom:50%;" /><p>线段以开始位置，从小到大排序</p><p>[1,7]  1（小根堆的数字个数） ≤  1(该线段起点)   线段终点7放到小根堆</p><p>[2,3]  2（小根堆的数字个数） ≤  2(该线段起点)   线段终点3放到小根堆</p><p>小根堆里的数字个数就是这个线段的答案</p><p>在小根堆中，≤ 线段起点的pop</p><p>总结：每条线段的结尾边界 和 下一条线段的起始边界pk，上一条穿过了起始边界就是有重合</p><p>就是==重合区域==以每个线段起始位置开始的情况下，有多少条线段穿过去</p> <img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230119193205363.png" alt="image-20230119193205363" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230120194319736.png" alt="image-20230120194319736" style="zoom:50%;" /><p>==重合的两条线段，重合区域的左边界必是某条线段的左边界==</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230120194601305.png" alt="image-20230120194601305" style="zoom:33%;" /><p>假设，每条线段的左边界就是重合区域的左边界，那么求出每个线段向右贯穿的最大数量就是答案</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230120210409187.png" alt="image-20230120210409187" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230120215422888.png" alt="image-20230120215422888" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230120215440126.png" alt="image-20230120215440126" style="zoom:50%;" /><p>5</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230120215459166.png" alt="image-20230120215459166" style="zoom:50%;" /><p>6</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230124102749867.png" alt="image-20230124102749867" style="zoom:50%;" /><p>7</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230124110129254.png" alt="image-20230124110129254" style="zoom:50%;" /><p>8</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230124110445678.png" alt="image-20230124110445678" style="zoom:50%;" /><p>9</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230124110542330.png" alt="image-20230124110542330" style="zoom:50%;" /><p>10</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230124095858525.png" alt="image-20230124095858525" style="zoom:50%;" /><p>11</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230124095915028.png" alt="image-20230124095915028" style="zoom:50%;" /><p>12</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230124100101528.png" alt="image-20230124100101528" style="zoom:50%;" /><p>List&lt;List<Integer>&gt;：时间点——得奖人数</p><p>不会影响得奖区，故还是上一个时间节点的得奖名单</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230206234301091.png" alt="image-20230206234301091" style="zoom:50%;" /><p>1：第一个if 、用户购买数=0，先塞两个0</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230206234526860.png" alt="image-20230206234526860" style="zoom: 80%;" /><p>2：调整买卖</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230206234654890.png" alt="image-20230206234654890" style="zoom: 80%;" /><p>3：第一次购买，之前没有进得奖区/候选区</p><p>反正先进去，后面再调整</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230206234849625.png" alt="image-20230206234849625" style="zoom:80%;" /><p>4：move方法，得奖区(0)和候选区(0)看看是否能够交换</p><p>复杂度</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230207000503107.png" alt="image-20230207000503107" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/2023/01/14/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M1D14/"/>
      <url>/2023/01/14/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M1D14/</url>
      
        <content type="html"><![CDATA[<p>第五节：</p><p>归并排序：O(N*logN)</p><p>每次调整步长，一共需要调整logN次，每次都merge，每次都是O(N)，所以总共是O(N*logN)</p><p>开始merge的时候，L到M有序，M+1到R有序</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230114203208759.png" alt="image-20230114203208759" style="zoom:50%;" /><p>必然有一方先越界，</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230114203844799.png" alt="image-20230114203844799" style="zoom: 67%;" /><p>迭代版——非递归，设置步长，就是左组/右组的长度</p><p>比如说步长=1时，就是2和3比较，步长=2时，就是1、2和3、4比较</p><p>凑不够一组时就跳过到下一个步长长度，直到步长超过数组长度停止</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230114212327687.png" alt="image-20230114212327687" style="zoom:50%;" /><p>L是左组的第一个下标位置，每次都是从第一个左组跳到下一个左组</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230114214348318.png" alt="image-20230114214348318" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230114220131331.png" alt="image-20230114220131331" style="zoom:50%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230114220909813.png" alt="image-20230114220909813" style="zoom:67%;" /><p>防止溢出：当这个步长非常接近N，但是当步长*2之后溢出会变成负数。数N非常靠近整数最大值。</p><p>等于N/2时不能停</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230114220828296.png" alt="image-20230114220828296" style="zoom: 67%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230114220812180.png" alt="image-20230114220812180" style="zoom:50%;" /><p>问题一：小和问题</p><p>在数的左边比该数小的值累加，整体再累加和</p><p>左组小就产生小和，当拷贝右组数的时候，不考虑小和</p><p>包括右指针在内，比2小的数有1个</p><p>相等的时候，先拷贝右边的，这样才能清楚有几个比它大</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230115094216571.png" alt="image-20230115094216571" style="zoom: 80%;" /><p>题目二：</p><p>找数组中所有的逆序对：</p><p>x作为左组的时候才会产生逆序对</p><p>从右往左merge，相等的拷贝右边，然后谁大拷贝谁</p><p>题目三：</p><p>求数组中，num &gt; num右边的数 * 2的个数</p><p>==单调性与回退==</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// [L...M]    [M+1...R]</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 目前囊括进来的数，是从[M+1, windowR)</span><span class="token keyword">int</span> windowR <span class="token operator">=</span> M <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> L<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>windowR <span class="token operator">&lt;=</span> R <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>windowR<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        windowR<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表和队列</title>
      <link href="/2023/01/13/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M1D13/"/>
      <url>/2023/01/13/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M1D13/</url>
      
        <content type="html"><![CDATA[<p>第四节：</p><p>链表</p><p>栈和队列</p><p>栈和队列相互转换</p><ol><li>两个栈q和h——&gt;队列：</li><li>两个队列q和h——&gt;栈：<ul><li>LinkedList&lt;&gt;()可以当做队列<ul><li><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230113222256946.png" alt="image-20230113222256946" style="zoom:67%;" /></li></ul></li><li>push：直接push进队列q<ul><li><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230113222234485.png" alt="image-20230113222234485" style="zoom:67%;" /></li></ul></li><li>pop：<ul><li>只要长度 &gt; 1，就把队列q的前n-1个弹出进队列h</li><li>然后单独弹出第n个数</li><li>再相互换两个队列的内存，也就是引用</li><li><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230113222044750.png" alt="image-20230113222044750" style="zoom: 67%;" /></li></ul></li><li>peek：<ul><li>返回栈顶就是在pop的基础上，把弹出来改成offer压进去即可</li><li><img src = "C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230113222333566.png" alt = "image-20230113222333566" style="zoom: 67%;" /></li></ul></li></ul></li></ol><p>递归：</p><p>任何递归都可以改成非递归</p><p>递归逻辑图：</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230114101401006.png" alt="image-20230114101401006" style="zoom:50%;" /><p>master公式：针对递归函数且子规模一致情况下适用</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230114101636756.png" alt="image-20230114101636756" style="zoom:67%;" /><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230114110636529.png" alt="image-20230114110636529" style="zoom:67%;" /><p>Hashmap哈希表：增删改查默认是常数时间的O(1)，但是常数比较大</p><ol><li>存基础类型：有多少内存就开多少内存</li><li>存自定义类型：仅仅只存内存地址，8字节</li></ol><p>HashSet：只要key，不要Hashmap的value，即有伴随数据的是哈希表，没有伴随数据的是HashSet</p><p>String a和String b</p><p>a == b的话比较的是引用，</p><p>内容的比较采用a.equals(b)</p><p>在hashmap里面，只要是基础类型，如Integer、String，比较的都是值，就是比较内容</p><p>TreeMap 有序表是个接口名</p><p>红黑树、avl树、sb树、跳表都可以实现有序表，且它们的增删改查都能做到O(logN)，功能比哈希表强大，但时间复杂度没哈希表那么逆天O(1) </p><p>有序表中，原生的Key是按值传递，有序表是不会存同样的key，但是按值传递的时候有序组织。</p><p>有序表比哈希表多的功能：</p><ul><li>可以找最小key和最大key</li></ul><pre class=" language-java"><code class="language-java">treeMap<span class="token punctuation">.</span><span class="token function">firstKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeMap<span class="token punctuation">.</span><span class="token function">lastKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>可以找离目标key最近的最小和最大key，包括目标key</li></ul><pre class=" language-java"><code class="language-java">treeMap<span class="token punctuation">.</span><span class="token function">floorKey</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&lt;=4</span>treeMap<span class="token punctuation">.</span><span class="token function">ceilingKey</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//>=4</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picgo图床设置与typora配置</title>
      <link href="/2023/01/11/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%B1%BB/picgo-config/"/>
      <url>/2023/01/11/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%B1%BB/picgo-config/</url>
      
        <content type="html"><![CDATA[<h1 id="picgo图床设置与typora配置"><a href="#picgo图床设置与typora配置" class="headerlink" title="picgo图床设置与typora配置"></a>picgo图床设置与typora配置</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    PicGo是一个热门的图床工具，是可以自动把本地图片转换成链接的一款工具，是一款简洁容易操作的图床工具，可以支持微博、腾讯云、Github、阿里云等常用图床，功能可以说非常强大。</p><p>​    Typora是一款跨平台的Markdown编辑器软件，我们常常用它来写笔记或者博客。当使用Typora做笔记时，常常需要上传知识点截图到笔记上。截图图像为本地图像（存储在自己的电脑上，当我们把电脑本地图像进行删除或者误删时，再次打开笔记之前的截图都会显示丢，或者作为博客时，需要部署到远程仓库或服务器，而本地图片显然不能满足我们的需求。</p><p>​    使用PicGo图床工具将截图图像转换成链接或者上传到远程仓库服务器，当下次打开笔记或者查看远程博客时，编辑器会通过链接返回图像，上传后删除本地图像图像也不会丢失。下面将以配置picgo来介绍图床的搭建和配置使用以及介绍typora的图床配置。    </p><h2 id="PicGo下载"><a href="#PicGo下载" class="headerlink" title="PicGo下载"></a>PicGo下载</h2><p>Picgo最新图床工具下载链接：</p><p><a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p><p>mac系统选择dmg下载，windows选择.exe下载。</p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111200044898.png" alt="图床下载地址"></p><p><strong>此处建议下载稳定的正式版本。</strong></p><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111200208026.png" alt="下载最新稳定版本"></p><p><strong>翻到下面进行下载安装。</strong></p><p><img src="https://raw.githubusercontent.com/reasonllh/IMG/main/image-20230111200504555.png" alt="下载对应系统版本"></p><h2 id="图床搭建"><a href="#图床搭建" class="headerlink" title="图床搭建"></a>图床搭建</h2><p>​    下面将介绍和使用==GitHub==来作为==图床==的具体用法。由于在国内有时无法访问GitHub或者速度过慢，可以先搭个梯子。</p><h3 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h3><hr><ol><li><p>首先登陆 GitHub，点击右上角的==+==，点击新建一个**仓库（New repository)**。</p><p> <img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111201103490.png" alt="新建仓库"></p></li><li><p>进入页面，设置仓库名称， 选择仓库类型为==公开（Public）==， 由于私有仓库只有自己能够访问，上传图像后无法显示，所以必须时公有仓库。</p><p> <img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111201536456.png" alt="设置远程仓库"></p></li><li><p>创建远程仓库后，点击右上角头像，进入设置。</p><p> <img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111201701845.png" alt="进入设置"></p></li><li><p>接下来需要在 github 上生成一个token以便于 PicGo  根据令牌信息上传图像到我们的仓库。进入设置后，划到最下面左边栏中选择==开发人员设置（Developer  settings）==进入页面就可以看到 Personal access tokens。</p></li><li><p>点击==Generate new token== 创建一个新token，这里选择classic模式。</p><p> <img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111202739291.png" alt="Generate选项"></p></li><li><p>生成令牌，过程如图，选择完后划到最下面按下==Generate token==，即可生成令牌。</p><p> <img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111203414659.png" alt="生成令牌过程"></p></li><li><p>生成token如图所示，请注意蓝色框提醒==务必立即复制您的个人访问令牌。你将无法再看到它==，请先将生成的token复制保存下来，退出此页面后将<strong>再也看不到该token</strong>。</p></li></ol><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111203754137.png" alt="复制令牌"></p><h3 id="PicGo配置与使用"><a href="#PicGo配置与使用" class="headerlink" title="PicGo配置与使用"></a>PicGo配置与使用</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><hr><p>​    打开 PicGo，进入github设置</p><ul><li>仓库名格式： <code>用户名/仓库名</code>，例如<code>reasonllh/picgoIMG</code></li><li>分支名：main</li><li>token令牌：刚刚从复制保存的token令牌粘贴到此处</li><li>可以将此设置为默认图床</li></ul><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111204300355.png" alt="picGo图床设置"></p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>​    picgo的图片上传方式就很多了，可以将图片拖拽到此处，也可以上传图片上传，更多的用法可以参考官方文档：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230210214242635.png" alt="picgo图片上传区" style="zoom:67%;" /><hr><h2 id="Typora图床设置"><a href="#Typora图床设置" class="headerlink" title="Typora图床设置"></a>Typora图床设置</h2><p>​    相信很多小伙伴也跟Reason一样有写博客的需求，而typora是一款很多程序员使用的编写markdown格式的软件，下面将介绍typora的图床有关配置。</p><ol><li>打开<code>Typora</code>，点击左上角菜单栏进入==偏好设置==。</li><li>选择 <code>图像</code> ，在<code>上传服务</code>一栏中选择<code>PicGo</code>。注意如果是windows的话还需要选择PicGo.exe的路径，最后点击<code>验证图片上传选项</code>显示成功即Typora配置图床工具完成。</li></ol><p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111205309304.png" alt="typora设置"></p><ol><li><p>将图片放入Typora笔记中，右击图像选择==上传图片==即可上传到远程仓库。</p><p> <img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230111205714617.png" alt="上传图片选项">               </p></li></ol><p>​                                                            </p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picGo </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sin</title>
      <link href="/2023/01/11/sin/"/>
      <url>/2023/01/11/sin/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二分法、异或</title>
      <link href="/2023/01/10/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M1D10/"/>
      <url>/2023/01/10/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M1D10/</url>
      
        <content type="html"><![CDATA[<p>二分法</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230110085443687.png" alt="image-20230110085443687" style="zoom:50%;" /><p>砍的次数   log<del>2</del>N也是向下取整</p><p>比如log<del>2</del>100就砍了六次  2^6^=64</p><p>mid=(L+R)/2有溢出可能</p><p>替换：==mid=L+(R-L)&gt;&gt;1==</p><p>异或：无进位相加</p><ol><li>0 ^ N = N</li><li>N ^ N = 0</li></ol><ul><li><p>交换律：a ^ b = b ^ a</p></li><li><p>结合律：(a ^ b) ^c = a ^ (b ^ c)</p></li><li><p>奇数个1结果为1，偶数个1结果为0</p></li><li><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230110193043574.png" alt="image-20230110193043574" style="zoom:33%;" /></li><li><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230110192922455.png" alt="image-20230110192922455" style="zoom: 25%;" /></li><li><p>题目一：不用额外变量交换两个数</p></li><li><p>实现前提：a、b是两个内存区域，不是同一个</p><ul><li>a = a ^ b</li><li>b = a ^ b</li><li>a = a ^ b</li><li><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230110193457982.png" alt="image-20230110193457982" style="zoom:33%;" /></li></ul></li><li><p>题目二：</p></li><li><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230110194342916.png" alt="image-20230110194342916" style="zoom:50%;" /></li><li><p>实现：</p><ul><li>申请一个变量，名为eor，值=0</li><li>令eor不断^=数组所有值，最后并返回</li></ul></li><li><p>题目三：</p></li><li><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230110194823473.png" alt="image-20230110194823473" style="zoom:50%;" /></li><li><p>实现：</p><ul><li>a &amp; (~a + 1)</li><li>其中 ~a +1 的结果就是-a</li><li>所以也可以写成 a &amp; (-a)</li><li><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230110210707989.png" alt="image-20230110210707989"></li><li><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230110195011613.png" alt="image-20230110195011613" style="zoom:33%;" /></li></ul></li><li><p>原理：</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230110195323251.png" alt="image-20230110195323251" style="zoom:50%;" /></li><li><p>题目四：</p></li></ul><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230110210807583.png" alt="image-20230110210807583" style="zoom:50%;" /><ul><li><p>实现：</p><ul><li><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230111110201704.png" alt="image-20230111110201704" style="zoom:33%;" /></li><li><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230111110103442.png" alt="image-20230111110103442" style="zoom:60%;" /></li></ul></li><li><p>题目五：</p></li></ul><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230111110004149.png" alt="image-20230111110004149" style="zoom:50%;" /><ul><li>实现：</li><li><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230111113437391.png" alt="image-20230111113437391" style="zoom:50%;" /></li><li>每一位%M之后看结果，结果为0：k次的数字在该位的二进制值为0<ul><li><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230111114044544.png" alt="image-20230111114044544" style="zoom:33%;" /> </li><li><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230111114718695.png" alt="image-20230111114718695" style="zoom:50%;" /></li></ul></li></ul><p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230111114846699.png" alt="image-20230111114846699"></p><p>对数器：</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230111124453347.png" alt="image-20230111124453347" style="zoom:50%;" /><p>同或和异或是相反的</p>]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2023/01/09/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M1D9/"/>
      <url>/2023/01/09/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M1D9/</url>
      
        <content type="html"><![CDATA[<p>数据类型溢出</p><ol><li>每次中间结果用long存</li><li>每次中间结果先mod1000007</li></ol><p>面试过程如果有多种解题想法可以念叨出来</p><p>和面试官聊到喜欢上你</p><p>面试和公司口号、公司准则、公司精神联系上</p><p>O是最差，Ω是平均，θ是最好</p><p>固定时间长度：加减乘除、取值</p><p>逻辑上把数组看作连续区域、实际上可能不是</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230109201650960.png" alt="image-20230109201650960" style="zoom:50%;" /><p>list.get(i)每次都是从0开始直到找到i</p><p>按最差情况分析算法时间复杂度</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230109204310456.png" alt="image-20230109204310456" style="zoom:50%;" /><p>保留最高阶</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230109204333550.png" alt="image-20230109204333550" style="zoom:50%;" /><p>空间复杂度是指需求之外所需的空间</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230109211532095.png" alt="image-20230109211532095" style="zoom:50%;" /><p>常数项</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230109211612488.png" alt="image-20230109211612488" style="zoom:50%;" /><p>常数项比拼</p><p>常数时间中：异或快，+比较快，/慢</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230109235034402.png" alt="image-20230109235034402" style="zoom:50%;" /><p>最优解</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230109235211126.png" alt="image-20230109235211126" style="zoom:50%;" /><p>常见时间复杂度</p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230110000851177.png" alt="image-20230110000851177" style="zoom:70%;" /><p><strong>流程</strong></p><img src="C:\Users\86157\AppData\Roaming\Typora\typora-user-images\image-20230110001137695.png" alt="image-20230110001137695" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex学习补充</title>
      <link href="/2023/01/08/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M1D8/"/>
      <url>/2023/01/08/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M1D8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.ruanyifeng.com/blog/2015/07/flex-examples.html">Flex布局教程</a></p><p><a href="https://codepen.io/c-sin7/pen/VwBPpMM">codepen骰子</a></p><p><a href="https://codepen.io/c-sin7/pen/GRBrmgP">codepen输入框的布局</a></p><p><a href="https://codepen.io/c-sin7/pen/oNMBWXd">圣杯布局</a></p><p><a href="https://codepen.io/c-sin7/pen/jOpymbb">悬挂式布局</a></p><p><a href="https://codepen.io/c-sin7/pen/RwBKgoW">流式布局</a></p>]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex弹性盒子</title>
      <link href="/2023/01/07/M1D7/"/>
      <url>/2023/01/07/M1D7/</url>
      
        <content type="html"><![CDATA[<p>2023.1.7</p><p>[HTML学习](<a href="https://developer.mozilla.org/en-US/docs/Web/HTML">HTML：超文本标记语言|多核 (mozilla.org)</a>)</p><h1 id="Flex弹性盒子学习"><a href="#Flex弹性盒子学习" class="headerlink" title="Flex弹性盒子学习"></a><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex弹性盒子学习</a></h1><h2 id="一、弹性盒子介绍"><a href="#一、弹性盒子介绍" class="headerlink" title="一、弹性盒子介绍"></a>一、弹性盒子介绍</h2><p>​    采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230108152912342.png" alt="Flex 容器" style="zoom:80%;" /><p>​    容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。<strong>项目默认沿主轴排列</strong>。</p><p>​    主轴的开始位置（与边框的交叉点）叫==main start==，结束位置叫做==main end==；</p><p>​    交叉轴的开始位置叫==cross start==，结束位置叫==cross end==。</p><p>​    单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p><h2 id="二、容器的属性"><a href="#二、容器的属性" class="headerlink" title="二、容器的属性"></a>二、容器的属性</h2><ul><li><strong>flex-direction:row | row-reverse | column | column-reverse;</strong></li><li><strong>flex-wrap:nowrap | wrap | wrap-reverse;</strong></li><li><strong>flex-flow: flex-direction || flex-wrap;</strong></li><li><strong>justify-content:flex-start | flex-end | center | space-between | space-around;</strong></li><li><strong>align-items:flex-start | flex-end | center | baseline | stretch;</strong></li><li><strong>align-content:flex-start | flex-end | center | space-between | space-around | stretch;</strong></li></ul><p><strong>2.1flex-direction主轴的方向（即项目的排列方向）</strong></p><ul><li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li><li><code>column</code>：主轴为垂直方向，起点在上沿。</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li></ul><p><strong>2.2flex-wrap换行取值</strong></p><p>​    默认情况下，项目都排在一条线（又称”轴线”）上。如果一条轴线排不下，如何换行。</p><ul><li><p><code>nowrap</code>（默认）：不换行。</p></li><li><p><code>wrap</code>：换行，第一行在上方。</p></li><li><p><code>wrap-reverse</code>：换行，第一行在下方。</p></li></ul><p><strong>2.3<code>flex-flow</code>=<code>flex-direction</code>+<code>flex-wrap</code>，默认值为<code>row nowrap</code></strong></p><p><strong>2.4justify-content项目在主轴上的对齐方式</strong></p><ul><li><code>flex-start</code>（默认值）：左对齐</li><li><code>flex-end</code>：右对齐</li><li><code>center</code>： 居中</li><li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li><li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230108154405854.png" alt="justify-content项目在主轴上的对齐方式" style="zoom:50%;" /><p><strong>2.5align-items项目在交叉轴上如何对齐</strong></p><p>​    具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p><ul><li><code>flex-start</code>：交叉轴的起点对齐。</li><li><code>flex-end</code>：交叉轴的终点对齐。</li><li><code>center</code>：交叉轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230108154638899.png" alt="align-items项目在交叉轴上对齐方式" style="zoom:50%;" /><p><strong>2.6align-content定义了多根轴线的对齐方式</strong></p><p>​    如果项目只有一根轴线，该属性不起作用。</p><ul><li><code>flex-start</code>：与交叉轴的起点对齐。</li><li><code>flex-end</code>：与交叉轴的终点对齐。</li><li><code>center</code>：与交叉轴的中点对齐。</li><li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li></ul><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230108155228637.png" alt="align-content在多根轴线上的对齐方式" style="zoom:50%;" /><h2 id="三、项目的属性"><a href="#三、项目的属性" class="headerlink" title="三、项目的属性"></a>三、项目的属性</h2><p>以下6个属性设置在项目上</p><ul><li><code>order:&lt;integer&gt;;/* default 0 */</code></li><li><code>flex-grow</code>:<number>;/* default 0 */</li><li><code>flex-shrink</code>:<number>; /* default 1 */</li><li><code>flex-basis</code>:<length> | auto; /* default auto */</li><li><code>flex</code>:none | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ]</li><li><code>align-self</code>:auto | flex-start | flex-end | center | baseline | stretch;</li></ul><p><strong>3.1order项目的排列顺序</strong></p><p>​    数值越小，排列越靠前，默认为0。</p><p><strong>3.2flex-grow项目的放大比例</strong></p><p>​    默认为<code>0</code>，即如果存在剩余空间，也不放大</p><p>​    如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。</p><p>​    如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><p><strong>3.3flex-shrink项目的缩小比例</strong></p><p>​    默认为1，即如果空间不足，该项目将缩小。</p><p>​    如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。</p><p>​    如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。负值对该属性无效。</p><p><strong>3.4flex-basis在分配多余空间之前，项目占据的主轴空间</strong></p><p>​    浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p><p>​    它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p><p><strong>3.5 flex=<code>flex-grow</code>+<code>flex-shrink</code> + <code>flex-basis</code></strong></p><p>​    默认值为<code>0 1 auto</code>。后两个属性可选。</p><p>​    该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p><p>​    建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><p><strong>3.6 align-self允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性</strong></p><p>​    <code>align-self</code>属性默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/bg2015071016.png" alt="align-self允许单个项目有不一样的对齐方式" style="zoom:50%;" /><p>​    该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Flex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex弹性盒子学习</title>
      <link href="/2023/01/07/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M1D7/"/>
      <url>/2023/01/07/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0/M1D7/</url>
      
        <content type="html"><![CDATA[<p>2023.1.7</p><p>[HTML学习](<a href="https://developer.mozilla.org/en-US/docs/Web/HTML">HTML：超文本标记语言|多核 (mozilla.org)</a>)</p><h1 id="Flex弹性盒子学习"><a href="#Flex弹性盒子学习" class="headerlink" title="Flex弹性盒子学习"></a><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex弹性盒子学习</a></h1><h2 id="一、弹性盒子介绍"><a href="#一、弹性盒子介绍" class="headerlink" title="一、弹性盒子介绍"></a>一、弹性盒子介绍</h2><p>​    采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230108152912342.png" alt="image-20230108152915995" style="zoom:80%;" /><p>​    容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。<strong>项目默认沿主轴排列</strong>。</p><p>​    主轴的开始位置（与边框的交叉点）叫==main start==，结束位置叫做==main end==；</p><p>​    交叉轴的开始位置叫==cross start==，结束位置叫==cross end==。</p><p>​    单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p><h2 id="二、容器的属性"><a href="#二、容器的属性" class="headerlink" title="二、容器的属性"></a>二、容器的属性</h2><blockquote><ul><li><strong>flex-direction:row | row-reverse | column | column-reverse;</strong></li><li><strong>flex-wrap:nowrap | wrap | wrap-reverse;</strong></li><li><strong>flex-flow:<flex-direction> || <flex-wrap>;</strong></li><li><strong>justify-content:flex-start | flex-end | center | space-between | space-around;</strong></li><li><strong>align-items:flex-start | flex-end | center | baseline | stretch;</strong></li><li><strong>align-content:flex-start | flex-end | center | space-between | space-around | stretch;</strong></li></ul></blockquote><p><strong>2.1flex-direction主轴的方向（即项目的排列方向）</strong></p><ul><li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li><li><code>column</code>：主轴为垂直方向，起点在上沿。</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li></ul><p><strong>2.2flex-wrap换行取值</strong></p><p>​    默认情况下，项目都排在一条线（又称”轴线”）上。如果一条轴线排不下，如何换行。</p><ul><li><p><code>nowrap</code>（默认）：不换行。</p></li><li><p><code>wrap</code>：换行，第一行在上方。</p></li><li><p><code>wrap-reverse</code>：换行，第一行在下方。</p></li></ul><p><strong>2.3<code>flex-flow</code>=<code>flex-direction</code>+<code>flex-wrap</code>，默认值为<code>row nowrap</code></strong></p><p><strong>2.4justify-content项目在主轴上的对齐方式</strong></p><ul><li><code>flex-start</code>（默认值）：左对齐</li><li><code>flex-end</code>：右对齐</li><li><code>center</code>： 居中</li><li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li><li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230108154405854.png" alt="image-20230108154405854" style="zoom:50%;" /><p><strong>2.5align-items项目在交叉轴上如何对齐</strong></p><p>​    具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p><ul><li><code>flex-start</code>：交叉轴的起点对齐。</li><li><code>flex-end</code>：交叉轴的终点对齐。</li><li><code>center</code>：交叉轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230108154638899.png" alt="image-20230108154638899" style="zoom:50%;" /><p><strong>2.6align-content定义了多根轴线的对齐方式</strong></p><p>​    如果项目只有一根轴线，该属性不起作用。</p><ul><li><code>flex-start</code>：与交叉轴的起点对齐。</li><li><code>flex-end</code>：与交叉轴的终点对齐。</li><li><code>center</code>：与交叉轴的中点对齐。</li><li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li></ul><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230108155228637.png" alt="image-20230108155228637" style="zoom:50%;" /><h2 id="三、项目的属性"><a href="#三、项目的属性" class="headerlink" title="三、项目的属性"></a>三、项目的属性</h2><p>以下6个属性设置在项目上</p><blockquote><ul><li><code>order:&lt;integer&gt;;/* default 0 */</code></li><li><code>flex-grow</code>:<number>;/* default 0 */</li><li><code>flex-shrink</code>:<number>; /* default 1 */</li><li><code>flex-basis</code>:<length> | auto; /* default auto */</li><li><code>flex</code>:none | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ]</li><li><code>align-self</code>:auto | flex-start | flex-end | center | baseline | stretch;</li></ul></blockquote><p><strong>3.1order项目的排列顺序</strong></p><p>​    数值越小，排列越靠前，默认为0。</p><p><strong>3.2flex-grow项目的放大比例</strong></p><p>​    默认为<code>0</code>，即如果存在剩余空间，也不放大</p><p>​    如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。</p><p>​    如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><p><strong>3.3flex-shrink项目的缩小比例</strong></p><p>​    默认为1，即如果空间不足，该项目将缩小。</p><p>​    如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。</p><p>​    如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。负值对该属性无效。</p><p><strong>3.4flex-basis在分配多余空间之前，项目占据的主轴空间</strong></p><p>​    浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p><p>​    它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p><p><strong>3.5 flex=<code>flex-grow</code>+<code>flex-shrink</code> + <code>flex-basis</code></strong></p><p>​    默认值为<code>0 1 auto</code>。后两个属性可选。</p><p>​    该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p><p>​    建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><p><strong>3.6 align-self允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性</strong></p><p>​    <code>align-self</code>属性默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/bg2015071016.png" alt="img" style="zoom:50%;" /><p>​    该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2022/03/04/springAll/Springboot%E9%9B%86%E6%88%90Redis/"/>
      <url>/2022/03/04/springAll/Springboot%E9%9B%86%E6%88%90Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><p>[TOC]</p><h2 id="一、Redis讲解"><a href="#一、Redis讲解" class="headerlink" title="一、Redis讲解"></a>一、Redis讲解</h2><h3 id="1、redis入门"><a href="#1、redis入门" class="headerlink" title="1、redis入门"></a><strong>1、redis入门</strong></h3><p><font color="#ff0000"><b>特点：基于 key-value 存储。</b></font></p><p>支持多种数据结构：string（字符串）、list（列表）、set（集合）、zset（sorted set 有序集合）、hash（哈希）。</p><p>通过内存存储、操作数据，<font color="#ff0000"><b>支持持久化</b></font>将数据存储在硬盘中。支持过期时间、事务。</p><h4 id="1-1-数据类型"><a href="#1-1-数据类型" class="headerlink" title="1.1 数据类型"></a><strong>1.1 数据类型</strong></h4><p>五种基础类型：string（字符串）、list（列表）、set（集合）、zset（sorted set 有序集合）、hash（哈希）</p><p>三种特殊类型：HyperLogLogs（基数统计）、Bitmap（位存储）、geospatial (地理位置)</p><h4 id="1-2作用："><a href="#1-2作用：" class="headerlink" title="1.2作用："></a><strong>1.2作用：</strong></h4><ul><li>HyperLogLogs 举个例子，A = {1, 2, 3, 4, 5}， B = {3, 5, 6, 7, 9}；那么基数（不重复的元素）= 1, 2, 4, 6, 7, 9；这个结构可以非常省内存的去统计各种计数</li><li>Bitmap 即位图数据结构，都是操作二进制位来进行记录，只有0 和 1 两个状态。</li><li>geospatial 可推算地理位置的信息: 两地之间的距离, 方圆几里的人</li></ul><h3 id="2、持久化：RDB和AOF机制详解"><a href="#2、持久化：RDB和AOF机制详解" class="headerlink" title="2、持久化：RDB和AOF机制详解"></a><strong>2、持久化：RDB和AOF机制详解</strong></h3><h4 id="2-1、RDB-持久化"><a href="#2-1、RDB-持久化" class="headerlink" title="2.1、RDB 持久化"></a><strong>2.1、RDB 持久化</strong></h4><p>RDB 就是 Redis DataBase 的缩写，中文名为快照/内存快照</p><p>RDB持久化是把当前进程数据生成快照保存到磁盘上的过程，由于是某一时刻的快照，那么快照中的值要早于或者等于内存中的值。</p><h4 id="2-2、触发方式"><a href="#2-2、触发方式" class="headerlink" title="2.2、触发方式"></a><strong>2.2、触发方式</strong></h4><p>触发rdb持久化的方式有2种，分别是<strong>手动触发</strong>和<strong>自动触发</strong>。</p><h5 id="手动触发"><a href="#手动触发" class="headerlink" title="手动触发"></a><strong>手动触发</strong></h5><p>手动触发分别对应save和bgsave命令</p><ul><li><strong>save命令</strong>：阻塞当前Redis服务器，直到RDB过程完成为止，对于内存 比较大的实例会造成长时间<strong>阻塞</strong>，线上环境不建议使用</li><li><strong>bgsave命令</strong>：Redis进程执行fork操作创建子进程，RDB持久化过程由子 进程负责，完成后自动结束。阻塞只发生在fork阶段，一般时间很短</li></ul><p>具体流程如下：</p><ul><li>redis客户端执行bgsave命令或者自动触发bgsave命令；</li><li>主进程判断当前是否已经存在正在执行的子进程，如果存在，那么主进程直接返回；</li><li>如果不存在正在执行的子进程，fork一个新的子进程进行持久化数据，fork过程是阻塞的，fork操作完成后主进程可执行其他操作；</li><li>子进程先将数据写入到临时的rdb文件中，待快照数据写入完成后再原子替换旧的rdb文件；</li><li>同时发送信号给主进程，通知主进程rdb持久化完成，主进程更新相关的统计信息（info Persitence下的rdb_*相关选项）。</li></ul><h5 id="自动触发"><a href="#自动触发" class="headerlink" title="自动触发"></a><strong>自动触发</strong></h5><p>在以下4种情况时会自动触发</p><ul><li><p>redis.conf中配置save m n，即在m秒内有n次修改时，自动触发bgsave生成rdb文件；</p></li><li><p>主从复制时，从节点要从主节点进行全量复制时也会触发bgsave操作，生成当时的快照发送到从节点；</p></li><li><p>执行debug reload命令重新加载redis时也会触发bgsave操作；</p></li><li><p>默认情况下执行shutdown命令时，如果没有开启aof持久化，那么也会触发bgsave操作；</p></li></ul><h4 id="2-3、redis-conf中配置RDB"><a href="#2-3、redis-conf中配置RDB" class="headerlink" title="2.3、redis.conf中配置RDB"></a><strong>2.3、redis.conf中配置RDB</strong></h4><ul><li><h5 id="Redis中默认的周期新设置"><a href="#Redis中默认的周期新设置" class="headerlink" title="Redis中默认的周期新设置"></a>Redis中默认的周期新设置</h5></li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 周期性执行条件的设置格式为</span>save &lt;seconds<span class="token punctuation">></span> &lt;changes<span class="token punctuation">></span> <span class="token comment" spellcheck="true"># 默认的设置为：</span>save 900 1save 300 10save 60 10000 <span class="token comment" spellcheck="true"># 以下设置方式为关闭RDB快照功能</span>save ""</code></pre><ul><li>如果900秒内有1条Key信息发生变化，则进行快照；</li><li>如果300秒内有10条Key信息发生变化，则进行快照；</li><li>如果60秒内有10000条Key信息发生变化，则进行快照。</li></ul><h4 id="2-4、其它相关配置"><a href="#2-4、其它相关配置" class="headerlink" title="2.4、其它相关配置"></a><strong>2.4、其它相关配置</strong></h4><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 文件名称</span>dbfilename dump.rdb <span class="token comment" spellcheck="true"># 文件保存路径</span>dir /home/work/app/redis/data/ <span class="token comment" spellcheck="true"># 如果持久化出错，主进程是否停止写入</span>stop<span class="token punctuation">-</span>writes<span class="token punctuation">-</span>on<span class="token punctuation">-</span>bgsave<span class="token punctuation">-</span>error yes <span class="token comment" spellcheck="true"># 是否压缩</span>rdbcompression yes <span class="token comment" spellcheck="true"># 导入时是否检查</span>rdbchecksum yes</code></pre><h4 id="2-5、RDB优缺点"><a href="#2-5、RDB优缺点" class="headerlink" title="2.5、RDB优缺点"></a><strong>2.5、RDB优缺点</strong></h4><ul><li><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>RDB文件是某个时间节点的快照，默认使用LZF算法进行压缩，压缩后的文件体积远远小于内存大小，适用于备份、全量复制等场景；<pre><code>Redis加载RDB文件恢复数据要远远快于AOF方式；</code></pre></li></ul></li><li><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>RDB方式实时性不够，无法做到秒级的持久化；</li><li>每次调用bgsave都需要fork子进程，fork子进程属于重量级操作，频繁执行成本较高</li><li>RDB文件是二进制的，没有可读性，AOF文件在了解其结构的情况下可以手动修改或者补全；</li><li>版本兼容RDB文件问题；</li></ul></li></ul><p>针对RDB不适合实时持久化的问题，Redis提供了AOF持久化方式来解决</p><h4 id="2-6、AOF持久化"><a href="#2-6、AOF持久化" class="headerlink" title="2.6、AOF持久化"></a><strong>2.6、AOF持久化</strong></h4><blockquote><p>Redis是“写后”日志，Redis先执行命令，把数据写入内存，然后才记录日志。</p><p>日志里记录的是Redis收到的每一条命令，这些命令是以文本形式保存。</p><p>PS: 大多数的数据库采用的是写前日志（WAL），例如MySQL，通过写前日志和两阶段提交，实现数据和逻辑的一致性。</p></blockquote><h4 id="2-7、如何实现AOF"><a href="#2-7、如何实现AOF" class="headerlink" title="2.7、如何实现AOF"></a><strong>2.7、如何实现AOF</strong></h4><p>AOF日志记录Redis的每个写命令，步骤分为：命令追加（append）、文件写入（write）和文件同步（sync）</p><h5 id="redis-conf中配置AOF"><a href="#redis-conf中配置AOF" class="headerlink" title="redis.conf中配置AOF"></a><strong>redis.conf中配置AOF</strong></h5><blockquote><p>默认情况下，Redis是没有开启AOF的，可以通过配置redis.conf文件来开启AOF持久化，关于AOF的配置如下：</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># appendonly参数开启AOF持久化</span>appendonly no <span class="token comment" spellcheck="true"># AOF持久化的文件名，默认是appendonly.aof</span>appendfilename "appendonly.aof" <span class="token comment" spellcheck="true"># AOF文件的保存位置和RDB文件的位置相同，都是通过dir参数设置的</span>dir ./ <span class="token comment" spellcheck="true"># 同步策略</span><span class="token comment" spellcheck="true"># appendfsync always</span>appendfsync everysec<span class="token comment" spellcheck="true"># appendfsync no</span> <span class="token comment" spellcheck="true"># aof重写期间是否同步</span>no<span class="token punctuation">-</span>appendfsync<span class="token punctuation">-</span>on<span class="token punctuation">-</span>rewrite no <span class="token comment" spellcheck="true"># 重写触发配置</span>auto<span class="token punctuation">-</span>aof<span class="token punctuation">-</span>rewrite<span class="token punctuation">-</span>percentage 100auto<span class="token punctuation">-</span>aof<span class="token punctuation">-</span>rewrite<span class="token punctuation">-</span>min<span class="token punctuation">-</span>size 64mb <span class="token comment" spellcheck="true"># 加载aof出错如何处理</span>aof<span class="token punctuation">-</span>load<span class="token punctuation">-</span>truncated yes <span class="token comment" spellcheck="true"># 文件重写策略</span>aof<span class="token punctuation">-</span>rewrite<span class="token punctuation">-</span>incremental<span class="token punctuation">-</span>fsync yes</code></pre><h5 id="从持久化中恢复数据"><a href="#从持久化中恢复数据" class="headerlink" title="从持久化中恢复数据"></a><strong>从持久化中恢复数据</strong></h5><p>其实想要从这些文件中恢复数据，只需要重新启动Redis即可</p><h2 id="二、springboot集成Redis"><a href="#二、springboot集成Redis" class="headerlink" title="二、springboot集成Redis"></a>二、springboot集成Redis</h2><h3 id="1、yml文件配置redis"><a href="#1、yml文件配置redis" class="headerlink" title="1、yml文件配置redis"></a>1、yml文件配置redis</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># Redis 配置</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Redis 服务器地址</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 121.26.184.41    <span class="token comment" spellcheck="true"># 连接端口号</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token comment" spellcheck="true"># 数据库索引（0 - 15）</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 连接超时时间（毫秒）</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10000</span>    <span class="token comment" spellcheck="true"># lettuce 参数</span>    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 最大连接数(使用负值表示没有限制) 默认为 8</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">10</span>        <span class="token comment" spellcheck="true"># 最大阻塞等待时间(使用负值表示没有限制) 默认为 -1 ms</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">-1</span>        <span class="token comment" spellcheck="true"># 最大空闲连接 默认为 8</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>        <span class="token comment" spellcheck="true"># 最小空闲连接 默认为 0</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span> 【properties：】<span class="token comment" spellcheck="true"># Redis 服务器地址</span>spring.redis.host=121.26.184.41<span class="token comment" spellcheck="true"># 连接端口号</span>spring.redis.port=6379<span class="token comment" spellcheck="true"># 数据库（0 - 15）</span>spring.redis.database= 0<span class="token comment" spellcheck="true"># 超时时间（毫秒）</span>spring.redis.timeout=600000 <span class="token comment" spellcheck="true"># lettuce 参数</span><span class="token comment" spellcheck="true"># 最大连接数(使用负值表示没有限制) 默认为 8</span>spring.redis.lettuce.pool.max<span class="token punctuation">-</span>active=20<span class="token comment" spellcheck="true"># 最大阻塞等待时间(使用负值表示没有限制) 默认为 -1</span>spring.redis.lettuce.pool.max<span class="token punctuation">-</span>wait=<span class="token punctuation">-</span><span class="token number">1</span><span class="token comment" spellcheck="true"># 最大空闲连接 默认为 8</span>spring.redis.lettuce.pool.max<span class="token punctuation">-</span>idle=5<span class="token comment" spellcheck="true"># 最小空闲连接 默认为 0</span>spring.redis.lettuce.pool.min<span class="token punctuation">-</span>idle=0</code></pre><h3 id="2、添加依赖信息"><a href="#2、添加依赖信息" class="headerlink" title="2、添加依赖信息"></a>2、添加依赖信息</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> redis <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>data<span class="token operator">-</span>redis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> spring2<span class="token punctuation">.</span>X集成redis所需common<span class="token operator">-</span>pool2<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>pool2<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.6</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h3 id="3、新增一个-Redis-配置类-RedisConfig-java，用于自定义配置redis，由于官网给出的redisTemplate不是很好用"><a href="#3、新增一个-Redis-配置类-RedisConfig-java，用于自定义配置redis，由于官网给出的redisTemplate不是很好用" class="headerlink" title="3、新增一个 Redis 配置类 RedisConfig.java，用于自定义配置redis，由于官网给出的redisTemplate不是很好用"></a>3、新增一个 Redis 配置类 RedisConfig.java，用于自定义配置redis，由于官网给出的redisTemplate不是很好用</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Json序列化器</span>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">activateDefaultTyping</span><span class="token punctuation">(</span>LaissezFaireSubTypeValidator<span class="token punctuation">.</span>instance<span class="token punctuation">,</span> ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">,</span> JsonTypeInfo<span class="token punctuation">.</span>As<span class="token punctuation">.</span>PROPERTY<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//String序列化器</span>        StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//key采用String序列化器</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//value采用Json序列化器</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="4、写一个RedisUtil工具类，方便后面直接调用"><a href="#4、写一个RedisUtil工具类，方便后面直接调用" class="headerlink" title="4、写一个RedisUtil工具类，方便后面直接调用"></a>4、写一个RedisUtil工具类，方便后面直接调用</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * setex     * @param key  key     * @param value  value     * @param time 过期时间     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>Object value<span class="token punctuation">,</span><span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * set     * String类型的set,无过期时间     * @param key key     * @param value value     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 批量设置key和value     * @param map key和value的集合     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mset</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiSet</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 如果key不存在，则设置     * @param key  key     * @param value value     * @return 返回是否成功     */</span>    <span class="token keyword">public</span> Boolean <span class="token function">setnx</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>Object value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 批量插入key，如果key不存在的话     * @param map key和value的集合     * @return 是否成功     */</span>    <span class="token keyword">public</span> Boolean <span class="token function">msetnx</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiSetIfAbsent</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * String类型的get     * @param key key     * @return 返回value对应的对象     */</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 删除对应key     * @param key key     * @return 返回是否删除成功     */</span>    <span class="token keyword">public</span> Boolean <span class="token function">del</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 批量删除key     * @param keys key的集合     * @return 返回删除成功的个数     */</span>    <span class="token keyword">public</span> Long <span class="token function">del</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> keys<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 给某个key设置过期时间     * @param key key     * @param time 过期时间     * @return 返回是否设置成功     */</span>    <span class="token keyword">public</span> Boolean <span class="token function">expire</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 返回某个key的过期时间     * @param key key     * @return 返回key剩余的过期时间     */</span>    <span class="token keyword">public</span> Long <span class="token function">ttl</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 返回是否存在该key     * @param key key     * @return 是否存在该key     */</span>    <span class="token keyword">public</span> Boolean <span class="token function">exists</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 给key的值加上delta值     * @param key key     * @param delta 参数     * @return 返回key+delta的值     */</span>    <span class="token keyword">public</span> Long <span class="token function">incrby</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 给key的值减去delta     * @param key key     * @param delta 参数     * @return 返回key - delta的值     */</span>    <span class="token keyword">public</span> Long <span class="token function">decrby</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//hash类型</span>     <span class="token comment" spellcheck="true">/**     * set hash类型     * @param key key     * @param hashKey  hashKey     * @param value value     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>String hashKey<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hashKey<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * set hash类型,并设置过期时间     * @param key  key     * @param hashKey hashKey     * @param value value     * @param time 过期时间     * @return 返回是否成功     */</span>    <span class="token keyword">public</span> Boolean <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String hashKey<span class="token punctuation">,</span>Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">hset</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hashKey<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 批量设置hash     * @param key key     * @param map hashKey和value的集合     * @param time 过期时间     * @return 是否成功     */</span>    <span class="token keyword">public</span> Boolean <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 获取hash类型的值     * @param key key     * @param hashKey hashKey     * @return 返回对应的value     */</span>    <span class="token keyword">public</span> Object <span class="token function">hget</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String hashKey<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hashKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 获取key下所有的hash值以及hashKey     * @param key key     * @return 返回数据     */</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">hgetall</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 批量删除     * @param key  key     * @param hashKey hashKey数组集合     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hdel</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> hashKey<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hashKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**     * 判断是否存在hashKey     * @param key  key     * @param hashKey hashKey     * @return 是否存在     */</span>    <span class="token keyword">public</span> Boolean <span class="token function">hexists</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String hashKey<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hashKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="5、使用切面RedisAspect来处理redis的异常，保证redis在异常的时候，系统依然可以工作"><a href="#5、使用切面RedisAspect来处理redis的异常，保证redis在异常的时候，系统依然可以工作" class="headerlink" title="5、使用切面RedisAspect来处理redis的异常，保证redis在异常的时候，系统依然可以工作"></a>5、使用切面RedisAspect来处理redis的异常，保证redis在异常的时候，系统依然可以工作</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisAspect</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.study.springboot.common.utils.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">handleException</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result<span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"redis may be some wrong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2022/03/01/springAll/SpringBoot%E8%AE%B2%E4%B9%89/"/>
      <url>/2022/03/01/springAll/SpringBoot%E8%AE%B2%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h3 id="课程内容说明"><a href="#课程内容说明" class="headerlink" title="课程内容说明"></a>课程内容说明</h3><table><thead><tr><th>学习者</th><th>课程单元</th></tr></thead><tbody><tr><td><strong>小白</strong></td><td><font color="#ff0000"><b>基础篇</b></font></td></tr><tr><td><strong>初学者</strong></td><td><font color="#cc0000"><b>应用篇</b></font>（  运维实用篇  &amp;  开发实用篇  ）</td></tr><tr><td><strong>开发者</strong></td><td><font color="#990000"><b>原理篇</b></font></td></tr></tbody></table><p>​        每个课程单元内容设置不同，目标也不一样，作为学习者如果想达成最佳的学习效果，最好明确自己的学习目标再进行学习，这样目标明确，学习的时候能够更轻松，你就不会在学习的时候纠结如下的问题了。比如学着<font color="#ff0000"><b>基础篇</b></font>在那想，这个东西是个什么原理啊？这个东西是这么用的，那个东西该怎么用啊？因为原理性的内容统一放置到了<font color="#990000"><b>原理篇</b></font>讲解了，应用相关的内容统一放到<font color="#cc0000"><b>应用篇</b></font>里面讲解，你在<font color="#ff0000"><b>基础篇</b></font>阶段纠结也没有用，这一部分不讲这些知识，在<font color="#ff0000"><b>基础篇</b></font>先把SpringBoot的基础使用掌握完再说后面的知识吧。</p><p>​        此外还有一点需要说明的是，目前SpringBoot技术发展速度很快，更新速度也很快，因此后续还会对本套课程进行持续更新，特此在三个课程单元的基础上追加一个<strong>番外篇</strong>。番外篇的设置为了解决如下问题：</p><ul><li>持续更新SpringBoot后续发展出现的新技术</li><li>讲解部分知识点规模较大的支线知识（例如WebFlux）</li><li>扩展非实用性知识，扩展学习者视野</li></ul><p>​        每一个课程单元的学习目标如下，请各位查收，在学习的过程中可以阶段性的给自己提个问题，下面列出来的这些学习目标你是否达成了，可以检验你的学习成果。</p><table><thead><tr><th>课程单元</th><th>学习目标</th></tr></thead><tbody><tr><td><font color="#ff0000"><b>基础篇</b></font></td><td>能够创建SpringBoot工程<br/>基于SpringBoot实现ssm/ssmp整合</td></tr><tr><td><font color="#cc0000"><b>应用篇</b></font></td><td>能够掌握SpringBoot程序多环境开发<br/>能够基于Linux系统发布SpringBoot工程<br/>能够解决线上灵活配置SpringBoot工程的需求<br/>能够基于SpringBoot整合任意第三方技术</td></tr><tr><td><font color="#990000"><b>原理篇</b></font></td><td>掌握SpringBoot内部工作流程<br/>理解SpringBoot整合第三方技术的原理<br/>实现自定义开发整合第三方技术的组件</td></tr><tr><td><strong>番外篇</strong></td><td>掌握SpringBoot整合非常见的第三方技术<br/>掌握相同领域的更多的解决方案，并提升同领域方案设计能力</td></tr></tbody></table><p>​        整体课程包含的内容就是这些啦，要想完成前面这些内容的学习，顺利的达成学习目标，有些东西还是要提前和大家说清楚的。SpringBoot课程不像是Java基础，不管你有没有基础，都可以听一听，这个课程还真不行，需要一定的前置知识。下面给大家列表一些前置知识，如果还有不太会的，需要想办法快速补救一下。</p><h3 id="课程前置知识说明"><a href="#课程前置知识说明" class="headerlink" title="课程前置知识说明"></a>课程前置知识说明</h3><table><thead><tr><th>课程单元</th><th>前置知识</th><th>要求</th></tr></thead><tbody><tr><td><font color="#ff0000"><b>基础篇</b></font></td><td>Java基础语法</td><td>面向对象，封装，继承，多态，类与接口，集合，IO，网络编程等</td></tr><tr><td><font color="#ff0000"><b>基础篇</b></font></td><td>Spring与SpringMVC</td><td>知道Spring是用来管理bean，能够基于Restful实现页面请求交互功能</td></tr><tr><td><font color="#ff0000"><b>基础篇</b></font></td><td>Mybatis与Mybatis-Plus</td><td>基于Mybatis和MybatisPlus能够开发出包含基础CRUD功能的标准Dao模块</td></tr><tr><td><font color="#ff0000"><b>基础篇</b></font></td><td>数据库MySQL</td><td>能够读懂基础CRUD功能的SQL语句</td></tr><tr><td><font color="#ff0000"><b>基础篇</b></font></td><td>服务器</td><td>知道服务器与web工程的关系，熟悉web服务器的基础配置</td></tr><tr><td><font color="#ff0000"><b>基础篇</b></font></td><td>maven</td><td>知道maven的依赖关系，知道什么是依赖范围，依赖传递，排除依赖，可选依赖，继承</td></tr><tr><td><font color="#ff0000"><b>基础篇</b></font></td><td>web技术（含vue，ElementUI)</td><td>知道vue如何发送ajax请求，如何获取响应数据，如何进行数据模型双向绑定</td></tr><tr><td><font color="#cc0000"><b>应用篇</b></font></td><td>Linux（CenterOS7）</td><td>熟悉常用的Linux基础指令，熟悉Linux系统目录结构</td></tr><tr><td><font color="#cc0000"><b>应用篇</b></font></td><td>实用开发技术</td><td>缓存：Redis、MongoDB、……<br/>消息中间件:RocketMq、RabbitMq、……</td></tr><tr><td><font color="#990000"><b>原理篇</b></font></td><td>Spring</td><td>了解Spring加载bean的各种方式<br/>知道Spring容器底层工作原理，能够阅读简单的Spring底层源码</td></tr></tbody></table><p>​        看着略微有点多，其实还好吧，如果个别技术真的不会，在学习课程的时候多用心听就好，基础篇是可以跟着学下来了，后面的实用篇和原理篇就比较难了。比如我要在Linux系统下操作，命令我就直接使用了，然后你看不懂可能学习起来就比较心累了。</p><p>​        课程安排就说到这里了，下面进入到SpringBoot<font color="#ff0000"><b>基础篇</b></font>的学习</p><h1 id="SpringBoot基础篇"><a href="#SpringBoot基础篇" class="headerlink" title="SpringBoot基础篇"></a>SpringBoot基础篇</h1><p>​        在基础篇中，我给学习者的定位是先上手，能够使用SpringBoot搭建基于SpringBoot的web项目开发，所以内容设置较少，主要包含如下内容：</p><ul><li>SpringBoot快速入门</li><li>SpringBoot基础配置</li><li>基于SpringBoot整合SSMP</li></ul><h2 id="JC-1-快速上手SpringBoot"><a href="#JC-1-快速上手SpringBoot" class="headerlink" title="JC-1.快速上手SpringBoot"></a>JC-1.快速上手SpringBoot</h2><p>​        学习任意一项技术，首先要知道这个技术的作用是什么，不然学完以后，你都不知道什么时候使用这个技术，也就是技术对应的应用场景。SpringBoot技术由Pivotal团队研发制作，功能的话简单概括就是加速Spring程序的开发，这个加速要从如下两个方面来说</p><ul><li>Spring程序初始搭建过程</li><li>Spring程序的开发过程</li></ul><p>​    通过上面两个方面的定位，我们可以产生两个模糊的概念：</p><ol><li>SpringBoot开发团队认为原始的Spring程序初始搭建的时候可能有些繁琐，这个过程是可以简化的，那原始的Spring程序初始搭建过程都包含哪些东西了呢？为什么觉得繁琐呢？最基本的Spring程序至少有一个配置文件或配置类，用来描述Spring的配置信息，莫非这个文件都可以不写？此外现在企业级开发使用Spring大部分情况下是做web开发，如果做web开发的话，还要在加载web环境时加载时加载指定的spring配置，这都是最基本的需求了，不写的话怎么知道加载哪个配置文件/配置类呢？那换了SpringBoot技术以后呢，这些还要写吗？谜底稍后揭晓，先卖个关子</li><li>SpringBoot开发团队认为原始的Spring程序开发的过程也有些繁琐，这个过程仍然可以简化。开发过程无外乎使用什么技术，导入对应的jar包（或坐标）然后将这个技术的核心对象交给Spring容器管理，也就是配置成Spring容器管控的bean就可以了。这都是基本操作啊，难道这些东西SpringBoot也能帮我们简化？</li></ol><p>​    带着上面这些疑问我们就着手第一个SpringBoot程序的开发了，看看到底使用SpringBoot技术能简化开发到什么程度。</p><p><font color="#f0f"><b>温馨提示</b></font></p><p>​        如果对Spring程序的基础开发不太懂的小伙伴，看到这里可以弃坑了，下面的内容学习需要具备Spring技术的知识，硬着头皮学不下去的。</p><h3 id="JC-1-1-SpringBoot入门程序制作（一）"><a href="#JC-1-1-SpringBoot入门程序制作（一）" class="headerlink" title="JC-1-1.SpringBoot入门程序制作（一）"></a>JC-1-1.SpringBoot入门程序制作（一）</h3><p>​        下面让我们开始做第一个SpringBoot程序吧，本课程基于Idea2020.3版本制作，使用的Maven版本为3.6.1，JDK版本为1.8。如果你的环境和上述环境不同，可能在操作界面和操作过程中略有不同，只要软件匹配兼容即可（说到这个Idea和Maven，它们两个还真不是什么版本都能搭到一起的，说多了都是泪啊）。</p><p>​        下面使用SpringBoot技术快速构建一个SpringMVC的程序，通过这个过程体会<font color="#ff0000"><b>简化</b></font>二字的含义。</p><p><strong>步骤①</strong>：创建新模块，选择Spring Initializr，并配置模块相关基础信息</p><p><img src="img%5Cimage-20211116125259385.png" alt="image-20211116125259385"></p><p>​        <font color="#ff0000"><b>特别关注</b></font>：第3步点击Next时，Idea需要联网状态才可以进入到后面那一页，如果不能正常联网，就无法正确到达右面那个设置页了，会一直<font color="#ff0000"><b>联网</b></font>转转转。</p><p>​        <font color="#ff0000"><b>特别关注</b></font>：第5步选择java版本和你计算机上安装的JDK版本匹配即可，但是最低要求为JDK8或以上版本，推荐使用8或11。</p><p><strong>步骤②</strong>：选择当前模块需要使用的技术集</p><p><img src="img%5Cimage-20211116125615728.png" alt="image-20211116125615728"></p><p>​        按照要求，左侧选择web，然后在中间选择Spring Web即可，选完右侧就出现了新的内容项，这就表示勾选成功了。</p><p>​        <font color="#ff0000"><b>关注</b></font>：此处选择的SpringBoot的版本使用默认的就可以了，需要说一点，SpringBoot的版本升级速度很快，可能昨天创建工程的时候默认版本是2.5.4，今天再创建工程默认版本就变成2.5.5了，差别不大，无需过于纠结，并且还可以到配置文件中修改对应的版本。</p><p><strong>步骤③</strong>：开发控制器类</p><pre class=" language-JAVA"><code class="language-JAVA">//Rest模式@RestController@RequestMapping("/books")public class BookController &#123;    @GetMapping    public String getById()&#123;        System.out.println("springboot is running...");        return "springboot is running...";    &#125;&#125;</code></pre><p>​        入门案例制作的SpringMVC的控制器基于Rest风格开发，当然此处使用原始格式制作SpringMVC的程序也是没有问题的，上例中的@RestController与@GetMapping注解是基于Restful开发的典型注解。</p><p>​        <font color="#ff0000"><b>关注</b></font>：做到这里SpringBoot程序的最基础的开发已经做完了，现在就可以正常的运行Spring程序了。可能有些小伙伴会有疑惑，Tomcat服务器没有配置，Spring也没有配置，什么都没有配置这就能用吗？这就是SpringBoot技术的强大之处。关于内部工作流程后面再说，先专心学习开发过程。</p><p><strong>步骤④</strong>：运行自动生成的Application类</p><p><img src="img%5Cimage-20211116130152452.png" alt="image-20211116130152452"></p><p>​        使用带main方法的java程序的运行形式来运行程序，运行完毕后，控制台输出上述信息。</p><p>​        不难看出，运行的信息中包含了8080的端口，Tomcat这种熟悉的字样，难道这里启动了Tomcat服务器？是的，这里已经启动了。那服务器没有配置，哪里来的呢？后面再说。现在你就可以通过浏览器访问请求的路径，测试功能是否工作正常了。</p><pre class=" language-JAVA"><code class="language-JAVA">访问路径：    http://localhost:8080/books</code></pre><p>​        是不是感觉很神奇？当前效果其实依赖的底层逻辑还是很复杂的，但是从开发者角度来看，目前只有两个文件展现到了开发者面前。</p><ul><li><p>pom.xml</p><p>这是maven的配置文件，描述了当前工程构建时相应的配置信息。</p><pre class=" language-XML"><code class="language-XML"><?xml version="1.0" encoding="UTF-8"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">    <modelVersion>4.0.0</modelVersion>    <parent>        <groupId>org.springframework.boot</groupId>        <artifactId>spring-boot-starter-parent</artifactId>        <version>2.5.4</version>    </parent>    <groupId>com.itheima</groupId>    <artifactId>springboot_01_01_quickstart</artifactId>    <version>0.0.1-SNAPSHOT</version>    <dependencies>        <dependency>            <groupId>org.springframework.boot</groupId>            <artifactId>spring-boot-starter-web</artifactId>        </dependency>        <dependency>            <groupId>org.springframework.boot</groupId>            <artifactId>spring-boot-starter-test</artifactId>            <scope>test</scope>        </dependency>    </dependencies></project></code></pre><p>配置中有两个信息需要关注，一个是parent，也就是当前工程继承了另外一个工程，干什么用的后面再说，还有依赖坐标，干什么用的后面再说。</p></li><li><p>Application类</p><pre class=" language-JAVA"><code class="language-JAVA">@SpringBootApplicationpublic class Application &#123;    public static void main(String[] args) &#123;        SpringApplication.run(Application.class, args);    &#125;&#125;</code></pre><p>这个类功能很简单，就一句代码，前面运行程序就是运行的这个类。</p></li></ul><p>​       到这里我们可以大胆推测一下，如果上面这两个文件没有的话，SpringBoot肯定没法玩，看来核心就是这两个文件了。由于是制作第一个SpringBoot程序，先不要关注这两个文件的功能，后面详细讲解内部工作流程。</p><p>​       通过上面的制作，我们不难发现，SpringBoot程序简直太好写了，几乎什么都没写，功能就有了，这也是SpringBoot技术为什么现在这么火的原因，和Spring程序相比，SpringBoot程序在开发的过程中各个层面均具有优势。</p><table><thead><tr><th><strong>类配置文件</strong></th><th><strong>Spring</strong></th><th><strong>SpringBoot</strong></th></tr></thead><tbody><tr><td>pom文件中的坐标</td><td><strong>手工添加</strong></td><td><strong>勾选添加</strong></td></tr><tr><td>web3.0配置类</td><td><strong>手工制作</strong></td><td><strong>无</strong></td></tr><tr><td>Spring/SpringMVC配置类</td><td><strong>手工制作</strong></td><td><strong>无</strong></td></tr><tr><td>控制器</td><td><strong>手工制作</strong></td><td><strong>手工制作</strong></td></tr></tbody></table><p>​        一句话总结一下就是<font color="#ff0000"><b>能少写就少写</b></font>，<font color="#ff0000"><b>能不写就不写</b></font>，这就是SpringBoot技术给我们带来的好处，行了，现在你就可以动手做一做SpringBoot程序了，看看效果如何，是否真的帮助你简化开发了。</p><p><strong>总结</strong></p><ol><li>开发SpringBoot程序在Idea工具中基于联网的前提下可以根据向导快速制作</li><li>SpringBoot程序需要依赖JDK，版本要求最低为JDK8</li><li>SpringBoot程序中需要使用某种功能时可以通过勾选的形式选择技术，也可以手工添加对应的要使用的技术（后期讲解）</li><li>运行SpringBoot程序通过运行Application程序进行</li></ol><p><strong>思考</strong></p><p>​        前面制作的时候说过，这个过程必须联网才可以进行，但是有些时候你会遇到一些莫名其妙的问题，比如基于Idea开发时，你会发现你配置了一些坐标，然后Maven下载对应东西的时候死慢死慢的，甚至还会失败。其实这种现象和Idea这款IDE工具有关，万一Idea不能正常访问网络的话，我们是不是就无法制作SpringBoot程序了呢？咱们下一节再说。</p><h3 id="JC-1-2-SpringBoot入门程序制作（二）"><a href="#JC-1-2-SpringBoot入门程序制作（二）" class="headerlink" title="JC-1-2.SpringBoot入门程序制作（二）"></a>JC-1-2.SpringBoot入门程序制作（二）</h3><p>​        如果Idea不能正常联网，这个SpringBoot程序就无法制作了吗？开什么玩笑，世上IDE工具千千万，难道SpringBoot技术还必须基于Idea来做了？这是不可能的。开发SpringBoot程序可以不基于IDE工具进行，在SpringBoot官网中可以直接创建SpringBoot程序。</p><p>​        SpringBoot官网和Spring的官网是在一起的，都是  spring.io  。你可以通过项目一级一级的找到SpringBoot技术的介绍页，然后在页面中间部位找到如下内容</p><img src="img\image-20211122150444816.png" alt="image-20211122150444816" style="zoom: 67%;" /><p><strong>步骤①</strong>：点击<strong>Spring Initializr</strong>后进入到创建SpringBoot程序界面，接下来就是输入信息的过程，和在Idea中制作是一样的，只是界面发生了变化，根据自己的要求，在左侧选择对应信息和输入对应的信息。</p><img src="img\image-20211122150608039.png" alt="image-20211122150608039"  /><p><strong>步骤②</strong>：右侧的<strong>ADD DEPENDENCIES</strong>用于选择使用何种技术，和之前勾选的Spring WEB是在做同一件事，仅仅是界面不同而已，点击后打开网页版的技术选择界面。</p><img src="img\image-20211122161257361.png" alt="image-20211122161257361" style="zoom:50%;" /><p><strong>步骤③</strong>：所有信息设置完毕后，点击下面左侧<strong>GENERATE</strong>按钮，生成一个文件包。</p><p><img src="img%5Cimage-202111221615480212.png" alt="image-20211122161548022"></p><p><strong>步骤④</strong>：保存后得到一个压缩文件，这个文件就是创建的SpringBoot工程        </p><p><img src="img%5Cimage-20211122161709478.png" alt="image-20211122161709478"></p><p><strong>步骤⑤</strong>：解压缩此文件得到工程目录，在Idea中导入即可直接使用，和之前在Idea环境下根据向导创建的工程完全一样，你可以创建一个Controller测试一下当前工程是否可用。</p><p><font color="#f0f"><b>温馨提示</b></font></p><p>​        做到这里其实可以透漏一个小秘密，Idea工具中创建SpringBoot工程其实连接的就是SpringBoot的官网，还句话说这种方式和第一种方式是一模一样的，只不过Idea把界面给整合了一下，读取Spring官网信息，然后展示到Idea界面中而已，可以通过如下信息比对一下</p><p><strong>Idea中创建工程时默认选项</strong></p><img src="img\image-20211122162443035.png" alt="image-20211122162443035" style="zoom: 67%;" /><p><strong>SpringBoot官网创建工程时对应的地址</strong></p><p>​        看看SpringBoot官网创建工程的URL地址，是不是和Idea中使用的URL地址是一样的？</p><img src="img\image-20211122162820719.png" alt="image-20211122162820719"  /><p><strong>总结</strong></p><ol><li><p>打开SpringBoot官网，选择<strong>Quickstart Your Project</strong>中的Spring Initializr。</p><img src="img\image-20211122150444816.png" alt="image-20211122150444816" style="zoom: 67%;" /></li><li><p>创建工程。</p><img src="img\image-20211122150608039.png" alt="image-20211122150608039"  /></li><li><p>保存项目文件。</p><p><img src="img%5Cimage-20211122161548022.png" alt="image-20211122161548022"></p></li><li><p>解压项目，通过IDE导入项目后进行编辑使用。</p></li></ol><p><strong>思考</strong></p><p>​        现在创建工程靠的是访问国外的Spring主站，但是互联网信息的访问是可以被约束的，如果一天这个网站你在国内无法访问了，那前面这两种方式就无法创建SpringBoot工程了，这时候又该怎么解决这个问题呢？咱们下一节再说。</p><h3 id="JC-1-3-SpringBoot入门程序制作（三）"><a href="#JC-1-3-SpringBoot入门程序制作（三）" class="headerlink" title="JC-1-3.SpringBoot入门程序制作（三）"></a>JC-1-3.SpringBoot入门程序制作（三）</h3><p>​        前面提到网站如果被限制访问了，该怎么办？开动脑筋想一想，不管是方式一还是方式二其实走的都是同一个路线，就是通过SpringBoot官网创建SpringBoot工程，假如国内有这么一个网站也能提供这样的功能，是不是就解决了呢？必然的嘛，新的问题又来了，国内有提供这样功能的网站吗？还真有，阿里提供了一个，下面问题就简单了，网址告诉我们就OK了，没错，就是这样。</p><p>​        创建工程时，切换选择starter服务路径，然后手工输入阿里云地址即可，地址：<a href="http://start.aliyun.com或https//start.aliyun.com">http://start.aliyun.com或https://start.aliyun.com</a></p><p><img src="img%5Cimage-20211122163605950.png" alt="image-20211122163605950"></p><p>​        阿里为了便于自己公司开发使用，特此在依赖坐标中添加了一些阿里自主的技术，也是为了推广自己的技术吧，所以在依赖选择列表中，你有了更多的选择。此外，阿里提供的地址更符合国内开发者的使用习惯，里面有一些SpringBoot官网上没有给出的坐标，大家可以好好看一看。</p><p><img src="img%5Cimage-20211122163937408.png" alt="image-20211122163937408"></p><p>​        不过有一点需要说清楚，阿里云地址默认创建的SpringBoot工程版本是<font color="#ff0000"><b>2.4.1</b></font>，所以如果你想更换其他的版本，创建项目后在pom文件中手工修改即可，别忘了刷新一下，加载新版本信息。</p><p>​        <font color="#ff0000"><b>注意</b></font>：阿里云提供的工程创建地址初始化完毕后和使用SpringBoot官网创建出来的工程略有区别，主要是在配置文件的形式上有区别,这个信息在后面讲解SpringBoot程序的执行流程时给大家揭晓。</p><p><strong>总结</strong></p><ol><li>选择start来源为自定义URL</li><li>输入阿里云starter地址</li><li>创建项目</li></ol><p><strong>思考</strong></p><p>​        做到这里我们已经有了三种方式创建SpringBoot工程，但是每种方式都要求你必须能上网才能创建工程。假如有一天，你加入了一个保密级别比较高的项目组，整个项目组没有外网，这个事情是不是就不能做了呢？咱们下一节再说。</p><h3 id="JC-1-4-SpringBoot入门程序制作（四）"><a href="#JC-1-4-SpringBoot入门程序制作（四）" class="headerlink" title="JC-1-4.SpringBoot入门程序制作（四）"></a>JC-1-4.SpringBoot入门程序制作（四）</h3><p>​        不能上网，还想创建SpringBoot工程，能不能做呢？能做，但是你要先问问自己联网和不联网到底差别是什么？这个差别找到以后，你就发现，你把联网要干的事情都提前准备好，就无需联网了。</p><p>​        联网做什么呢？首先SpringBoot工程也是基于Maven构建的，而Maven工程中如果加载一些工程需要使用又不存在的东西时，就要联网去下载。其实SpringBoot工程创建的时候就是要去下载一些必要的组件。如果把这些东西提前准备好呢？是的，就是这样。</p><p>​        下面就手工创建一个SpringBoot工程，如果需要使用的东西提前保障在maven仓库中存在，整个过程就可以不依赖联网环境了。不过咱们已经用3种方式创建了SprongBoot工程了，所以下面也没什么东西需要下载了。</p><p><strong>步骤①</strong>：创建工程时，选择创建普通Maven工程。</p><img src="img\image-20211122165341684.png" alt="image-20211122165341684" style="zoom:50%;" /><p><strong>步骤②</strong>：参照标准SpringBoot工程的pom文件，书写自己的pom文件即可。</p><pre class=" language-XML"><code class="language-XML"><?xml version="1.0" encoding="UTF-8"?><project xmlns="http://maven.apache.org/POM/4.0.0"         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">    <modelVersion>4.0.0</modelVersion>    <parent>        <groupId>org.springframework.boot</groupId>        <artifactId>spring-boot-starter-parent</artifactId>        <version>2.5.4</version>    </parent>    <groupId>com.itheima</groupId>    <artifactId>springboot_01_04_quickstart</artifactId>    <version>1.0-SNAPSHOT</version>    <properties>        <maven.compiler.source>8</maven.compiler.source>        <maven.compiler.target>8</maven.compiler.target>    </properties>    <dependencies>        <dependency>            <groupId>org.springframework.boot</groupId>            <artifactId>spring-boot-starter-web</artifactId>        </dependency>    </dependencies></project></code></pre><p>​        用什么写什么，不用的都可以不写。当然，现在小伙伴们可能还不知道用什么和不用什么，最简单的就是复制粘贴了，随着后面的学习，你就知道哪些可以省略了。此处我删减了一些目前不是必须的东西，一样能用。核心的内容有两条，一个是继承了一个父工程，另外添加了一个依赖。</p><p><strong>步骤③</strong>：之前运行SpringBoot工程需要一个类，这个缺不了，自己手写一个就行了，建议按照之前的目录结构来创建，先别玩花样，先学走后学跑。类名可以自定义，关联的名称同步修改即可。</p><pre class=" language-JAVA"><code class="language-JAVA">@SpringBootApplicationpublic class Application &#123;    public static void main(String[] args) &#123;        SpringApplication.run(Application.class);    &#125;&#125;</code></pre><p>​        <font color="#ff0000"><b>关注</b></font>：类上面的注解@SpringBootApplication千万别丢了，这个是核心，后面再介绍。</p><p>​        <font color="#ff0000"><b>关注</b></font>：类名可以自定义，只要保障下面代码中使用的类名和你自己定义的名称一样即可，也就是run方法中的那个class对应的名称。</p><p><strong>步骤④</strong>：下面就可以自己创建一个Controller测试一下是否能用了，和之前没有差别的。</p><p>​        看到这里其实应该能够想明白了，通过向导或者网站创建的SpringBoot工程其实就是帮你写了一些代码，而现在是自己手写，写的内容都一样，仅此而已。</p><p><font color="#f0f"><b>温馨提示</b></font></p><p>​        如果你的计算机上从来没有创建成功过SpringBoot工程，自然也就没有下载过SpringBoot对应的坐标相关的资源，那用手写创建的方式在不联网的情况下肯定该是不能用的。所谓手写，其实就是自己写别人帮你生成的东西，但是引用的坐标对应的资源必须保障maven仓库里面有才行，如果没有，还是要去下载的。</p><p><strong>总结</strong></p><ol><li>创建普通Maven工程</li><li>继承spring-boot-starter-parent</li><li>添加依赖spring-boot-starter-web</li><li>制作引导类Application</li></ol><p>​        到这里已经学习了4种创建SpringBoot工程的方式，其实本质是一样的，都是根据SpringBoot工程的文件格式要求，通过不同时方式生成或者手写得到对应的文件，效果完全一样。</p><h4 id="教你一招：在Idea中隐藏指定文件-文件夹"><a href="#教你一招：在Idea中隐藏指定文件-文件夹" class="headerlink" title="教你一招：在Idea中隐藏指定文件/文件夹"></a>教你一招：在Idea中隐藏指定文件/文件夹</h4><p>​        创建SpringBoot工程时，使用SpringBoot向导也好，阿里云也罢，其实都是为了一个目的，得到一个标准的SpringBoot工程文件结构。这个时候就有新的问题出现了，标准的工程结构中包含了一些未知的文件夹，在开发的时候看起来特别别扭，这一节就来说说这些文件怎么处理。</p><p>​        处理方案无外乎两种，如果你对每一个文件/目录足够了解，有用的留着，没有用的完全可以删除掉。或者不删除，但是看着别扭，就设置文件为看不到就行了。删除不说了，选中后直接Delete掉就好了，这一节说说如何隐藏指定的文件或文件夹信息。</p><p>​        既然是在Idea下做隐藏功能，肯定隶属于Idea的设置，设置方式如下。</p><p><strong>步骤①</strong>：打开设置，【Files】→【Settings】。</p><img src="img\image-20211122173835517.png" alt="image-20211122173835517" style="zoom:80%;" /><p><strong>步骤②</strong>：打开文件类型设置界面后，【Editor】→【File Types】→【Ignored Files and Folders】，忽略文件或文件夹显示。</p><img src="img\image-20211122174020028.png" alt="image-20211122174020028" style="zoom: 67%;" /><p><strong>步骤③</strong>：添加你要隐藏的文件名称或文件夹名称，可以使用*号通配符，表示任意，设置完毕即可。</p><p>​    到这里就做完了，其实就是Idea的一个小功能</p><p><strong>总结</strong></p><ol><li>Idea中隐藏指定文件或指定类型文件<ol><li>【Files】→【Settings】</li><li>【Editor】→【File Types】→【Ignored Files and Folders】</li><li>输入要隐藏的名称，支持*号通配符</li><li>回车确认添加</li></ol></li></ol><h3 id="JC-1-5-SpringBoot简介"><a href="#JC-1-5-SpringBoot简介" class="headerlink" title="JC-1-5.SpringBoot简介"></a>JC-1-5.SpringBoot简介</h3><p>​        入门案例做完了，这个时候回忆一下咱们之前说的SpringBoot的功能是什么还记得吗？加速Spring程序的开发，现在是否深有体会？再来看SpringBoot技术的设计初衷就很容易理解了。</p><p>​        SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来<font color="#ff0000"><b>简化Spring应用的初始搭建以及开发过程</b></font>。</p><p>​        都简化了了哪些东西呢？其实就是针对原始的Spring程序制作的两个方面进行了简化：</p><ul><li>Spring程序缺点<ul><li>依赖设置繁琐<ul><li>以前写Spring程序，使用的技术都要自己一个一个的写，现在不需要了，如果做过原始SpringMVC程序的小伙伴应该知道，写SpringMVC程序，最基础的spring-web和spring-webmvc这两个坐标是必须的，就这还不包含你用json啊等等这些坐标，现在呢？一个坐标搞定了。</li></ul></li><li>配置繁琐<ul><li>以前写配置类或者配置文件，然后用什么东西就要自己写加载bean这些东西，现在呢？什么都没写，照样能用。</li></ul></li></ul></li></ul><blockquote><p>回顾</p><p>​    通过上面两个方面的定位，我们可以产生两个模糊的概念：</p><ol><li>SpringBoot开发团队认为原始的Spring程序初始搭建的时候可能有些繁琐，这个过程是可以简化的，那原始的Spring程序初始搭建过程都包含哪些东西了呢？为什么觉得繁琐呢？最基本的Spring程序至少有一个配置文件或配置类，用来描述Spring的配置信息，莫非这个文件都可以不写？此外现在企业级开发使用Spring大部分情况下是做web开发，如果做web开发的话，还要在加载web环境时加载时加载指定的spring配置，这都是最基本的需求了，不写的话怎么知道加载哪个配置文件/配置类呢？那换了SpringBoot技术以后呢，这些还要写吗？谜底稍后揭晓，先卖个关子</li><li>SpringBoot开发团队认为原始的Spring程序开发的过程也有些繁琐，这个过程仍然可以简化。开发过程无外乎使用什么技术，导入对应的jar包（或坐标）然后将这个技术的核心对象交给Spring容器管理，也就是配置成Spring容器管控的bean就可以了。这都是基本操作啊，难道这些东西SpringBoot也能帮我们简化？</li></ol></blockquote><p>​        再来看看前面提出的两个问题，已经有答案了，都简化了，都不用写了，这就是SpringBoot给我们带来的好处。这些简化操作在SpringBoot中有专业的用语，也是SpringBoot程序的核心功能及优点：</p><ul><li>起步依赖（简化依赖配置）<ul><li>依赖配置的书写简化就是靠这个起步依赖达成的。</li></ul></li><li>自动配置（简化常用工程相关配置）<ul><li>配置过于繁琐，使用自动配置就可以做相应的简化，但是内部还是很复杂的，后面具体展开说。</li></ul></li><li>辅助功能（内置服务器，……）<ul><li>除了上面的功能，其实SpringBoot程序还有其他的一些优势，比如我们没有配置Tomcat服务器，但是能正常运行，这是SpringBoot入门程序中一个可以感知到的功能，也是SpringBoot的辅助功能之一。一个辅助功能都能做的这么6，太牛了。</li></ul></li></ul><p>​        下面结合入门程序来说说这些简化操作都在哪些方面进行体现的，一共分为4个方面</p><ul><li>parent</li><li>starter</li><li>引导类</li><li>内嵌tomcat</li></ul><h4 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h4><p>​        SpringBoot关注到开发者在进行开发时，往往对依赖版本的选择具有固定的搭配格式，并且这些依赖版本的选择还不能乱搭配。比如A技术的2.0版，在与B技术进行配合使用时，与B技术的3.5版可以合作在一起工作，但是和B技术的3.7版合作开发使用时就有冲突。其实很多开发者都一直想做一件事情，就是将各种各样的技术配合使用的常见依赖版本进行收集整理，制作出了最合理的依赖版本配置方案，这样使用起来就方便多了。</p><p>​        SpringBoot一看这种情况so easy啊，于是将所有的技术版本的常见使用方案都给开发者整理了出来，以后开发者使用时直接用它提供的版本方案，就不用担心冲突问题了，相当于SpringBoot做了无数个技术版本搭配的列表，这个技术搭配列表的名字叫做<font color="#ff0000"><b>parent</b></font>。</p><p>​        <font color="#ff0000"><b>parent</b></font>自身具有很多个版本，每个<font color="#ff0000"><b>parent</b></font>版本中包含有几百个其他技术的版本号，不同的parent间使用的各种技术的版本号有可能会发生变化。当开发者使用某些技术时，直接使用SpringBoot提供的<font color="#ff0000"><b>parent</b></font>就行了，由<font color="#ff0000"><b>parent</b></font>帮助开发者统一的进行各种技术的版本管理。</p><p>​        比如你现在要使用Spring配合MyBatis开发，没有parent之前怎么做呢？选个Spring的版本，再选个MyBatis的版本，再把这些技术使用时关联的其他技术的版本逐一确定下来。当你Spring的版本发生变化需要切换时，你的MyBatis版本有可能也要跟着切换，关联技术呢？可能都要切换，而且切换后还可能出现其他问题。现在这一切工作都可以交给parent来做了。你无需关注这些技术间的版本冲突问题，你只需要关注你用什么技术就行了，冲突问题由<font color="#ff0000"><b>parent</b></font>负责处理。</p><p>​        有人可能会提出来，万一<font color="#ff0000"><b>parent</b></font>给我导入了一些我不想使用的依赖怎么办？记清楚，这一点很关键，<font color="#ff0000"><b>parent</b></font>仅仅帮我们进行版本管理，它不负责帮你导入坐标，说白了用什么还是你自己定，只不过版本不需要你管理了。整体上来说，<font color="#ff0000"><b>使用parent可以帮助开发者进行版本的统一管理。</b></font></p><p>​        <font color="#ff0000"><b>关注</b></font>：parent定义出来以后，并不是直接使用的，仅仅给了开发者一个说明书，但是并没有实际使用，这个一定要确认清楚。</p><p>​        那SpringBoot又是如何做到这一点的呢？可以查阅SpringBoot的配置源码，看到这些定义。</p><ul><li>项目中的pom.xml中继承了一个坐标</li></ul><pre class=" language-XML"><code class="language-XML"><parent>    <groupId>org.springframework.boot</groupId>    <artifactId>spring-boot-starter-parent</artifactId>    <version>2.5.4</version></parent></code></pre><ul><li>打开后可以查阅到其中又继承了一个坐标</li></ul><pre class=" language-XML"><code class="language-XML"><parent>    <groupId>org.springframework.boot</groupId>    <artifactId>spring-boot-dependencies</artifactId>    <version>2.5.4</version></parent></code></pre><ul><li>这个坐标中定义了两组信息</li></ul><p>第一组是各式各样的依赖版本号属性，下面列出依赖版本属性的局部，可以看的出来，定义了若干个技术的依赖版本号。</p><pre class=" language-XML"><code class="language-XML"><properties>    <activemq.version>5.16.3</activemq.version>    <aspectj.version>1.9.7</aspectj.version>    <assertj.version>3.19.0</assertj.version>    <commons-codec.version>1.15</commons-codec.version>    <commons-dbcp2.version>2.8.0</commons-dbcp2.version>    <commons-lang3.version>3.12.0</commons-lang3.version>    <commons-pool.version>1.6</commons-pool.version>    <commons-pool2.version>2.9.0</commons-pool2.version>    <h2.version>1.4.200</h2.version>    <hibernate.version>5.4.32.Final</hibernate.version>    <hibernate-validator.version>6.2.0.Final</hibernate-validator.version>    <httpclient.version>4.5.13</httpclient.version>    <jackson-bom.version>2.12.4</jackson-bom.version>    <javax-jms.version>2.0.1</javax-jms.version>    <javax-json.version>1.1.4</javax-json.version>    <javax-websocket.version>1.1</javax-websocket.version>    <jetty-el.version>9.0.48</jetty-el.version>    <junit.version>4.13.2</junit.version></properties></code></pre><p>第二组是各式各样的依赖坐标信息，可以看出依赖坐标定义中没有具体的依赖版本号，而是引用了第一组信息中定义的依赖版本属性值.</p><pre class=" language-XML"><code class="language-XML"><dependencyManagement>    <dependencies>        <dependency>            <groupId>org.hibernate</groupId>            <artifactId>hibernate-core</artifactId>            <version>$&#123;hibernate.version&#125;</version>        </dependency>        <dependency>            <groupId>junit</groupId>            <artifactId>junit</artifactId>            <version>$&#123;junit.version&#125;</version>        </dependency>    </dependencies></dependencyManagement></code></pre><p>​        <font color="#ff0000"><b>关注</b></font>：上面的依赖坐标定义是出现在<dependencyManagement>标签中的，是对引用坐标的依赖管理，并不是实际使用的坐标。因此当你的项目中继承了这组parent信息后，在不使用对应坐标的情况下，前面的这组定义是不会具体导入某个依赖的。</p><p>​        <font color="#ff0000"><b>关注</b></font>：因为在maven中继承机会只有一次，上述继承的格式还可以切换成导入的形式进行，并且在阿里云的starter创建工程时就使用了此种形式。</p><pre class=" language-XML"><code class="language-XML"><dependencyManagement>    <dependencies>        <dependency>            <groupId>org.springframework.boot</groupId>            <artifactId>spring-boot-dependencies</artifactId>            <version>$&#123;spring-boot.version&#125;</version>            <type>pom</type>            <scope>import</scope>        </dependency>    </dependencies></dependencyManagement></code></pre><p><strong>总结</strong></p><ol><li>开发SpringBoot程序要继承spring-boot-starter-parent</li><li>spring-boot-starter-parent中定义了若干个依赖管理</li><li>继承parent模块可以避免多个依赖使用相同技术时出现依赖版本冲突</li><li>继承parent的形式也可以采用引入依赖的形式实现效果</li></ol><p><strong>思考</strong></p><p>​        parent中定义了若干个依赖版本管理，但是也没有使用，那这个设定也就不生效啊，究竟谁在使用这些定义呢？</p><h4 id="starter"><a href="#starter" class="headerlink" title="starter"></a>starter</h4><p>​        SpringBoot关注到实际开发时，开发者对于依赖坐标的使用往往都有一些固定的组合方式，比如使用spring-webmvc就一定要使用spring-web。每次都要固定搭配着写，非常繁琐，而且格式固定，没有任何技术含量。</p><p>​        SpringBoot一看这种情况，看来需要给开发者带来一些帮助了。安排，把所有的技术使用的固定搭配格式都给开发出来，以后你用某个技术，就不用每次写一堆依赖了，还容易写错，我给你做一个东西，代表一堆东西，开发者使用的时候，直接用我做好的这个东西就好了，对于这样的固定技术搭配，SpringBoot给它起了个名字叫做<font color="#ff0000"><b>starter</b></font>。</p><p>​        starter定义了使用某种技术时对于依赖的固定搭配格式，也是一种最佳解决方案，<font color="#ff0000"><b>使用starter可以帮助开发者减少依赖配置</b></font>。</p><p>​        这个东西其实在入门案例里面已经使用过了，入门案例中的web功能就是使用这种方式添加依赖的。可以查阅SpringBoot的配置源码，看到这些定义。</p><ul><li>项目中的pom.xml定义了使用SpringMVC技术，但是并没有写SpringMVC的坐标，而是添加了一个名字中包含starter的依赖</li></ul><pre class=" language-XML"><code class="language-XML"><dependency>    <groupId>org.springframework.boot</groupId>    <artifactId>spring-boot-starter-web</artifactId></dependency></code></pre><ul><li>在spring-boot-starter-web中又定义了若干个具体依赖的坐标</li></ul><pre class=" language-XML"><code class="language-XML"><dependencies>    <dependency>        <groupId>org.springframework.boot</groupId>        <artifactId>spring-boot-starter</artifactId>        <version>2.5.4</version>        <scope>compile</scope>    </dependency>    <dependency>        <groupId>org.springframework.boot</groupId>        <artifactId>spring-boot-starter-json</artifactId>        <version>2.5.4</version>        <scope>compile</scope>    </dependency>    <dependency>        <groupId>org.springframework.boot</groupId>        <artifactId>spring-boot-starter-tomcat</artifactId>        <version>2.5.4</version>        <scope>compile</scope>    </dependency>    <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-web</artifactId>        <version>5.3.9</version>        <scope>compile</scope>    </dependency>    <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-webmvc</artifactId>        <version>5.3.9</version>        <scope>compile</scope>    </dependency></dependencies></code></pre><p>​        之前提到过开发SpringMVC程序需要导入spring-webmvc的坐标和spring整合web开发的坐标，就是上面这组坐标中的最后两个了。</p><p>​        但是我们发现除了这两个坐标，还有其他的坐标。比如第二个，叫做spring-boot-starter-json。看名称就知道，这个是与json有关的坐标了，但是看名字发现和最后两个又不太一样，它的名字中也有starter，打开看看里面有什么？</p><pre class=" language-XML"><code class="language-XML"><dependencies>    <dependency>        <groupId>org.springframework.boot</groupId>        <artifactId>spring-boot-starter</artifactId>        <version>2.5.4</version>        <scope>compile</scope>    </dependency>    <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-web</artifactId>        <version>5.3.9</version>        <scope>compile</scope>    </dependency>    <dependency>        <groupId>com.fasterxml.jackson.core</groupId>        <artifactId>jackson-databind</artifactId>        <version>2.12.4</version>        <scope>compile</scope>    </dependency>    <dependency>        <groupId>com.fasterxml.jackson.datatype</groupId>        <artifactId>jackson-datatype-jdk8</artifactId>        <version>2.12.4</version>        <scope>compile</scope>    </dependency>    <dependency>        <groupId>com.fasterxml.jackson.datatype</groupId>        <artifactId>jackson-datatype-jsr310</artifactId>        <version>2.12.4</version>        <scope>compile</scope>    </dependency>    <dependency>        <groupId>com.fasterxml.jackson.module</groupId>        <artifactId>jackson-module-parameter-names</artifactId>        <version>2.12.4</version>        <scope>compile</scope>    </dependency></dependencies></code></pre><p>​        我们可以发现，这个starter中又包含了若干个坐标，其实就是使用SpringMVC开发通常都会使用到Json，使用json又离不开这里面定义的这些坐标，看来还真是方便，SpringBoot把我们开发中使用的东西能用到的都给提前做好了。你仔细看完会发现，里面有一些你没用过的。的确会出现这种过量导入的可能性，没关系，可以通过maven中的排除依赖剔除掉一部分。不过你不管它也没事，大不了就是过量导入呗。</p><p>​    到这里基本上得到了一个信息，使用starter可以帮开发者快速配置依赖关系。以前写依赖3个坐标的，现在写导入一个就搞定了，就是加速依赖配置的。</p><p><strong>starter与parent的区别</strong></p><p>​        朦朦胧胧中感觉starter与parent好像都是帮助我们简化配置的，但是功能又不一样，梳理一下。</p><p>​        <font color="#ff0000"><b>starter</b></font>是一个坐标中定了若干个坐标，以前写多个的，现在写一个，<font color="#ff0000"><b>是用来减少依赖配置的书写量的</b></font>。</p><p>​        <font color="#ff0000"><b>parent</b></font>是定义了几百个依赖版本号，以前写依赖需要自己手工控制版本，现在由SpringBoot统一管理，这样就不存在版本冲突了，<font color="#ff0000"><b>是用来减少依赖冲突的</b></font>。</p><p><strong>实际开发应用方式</strong></p><ul><li><p>实际开发中如果需要用什么技术，先去找有没有这个技术对应的starter</p><ul><li>如果有对应的starter，直接写starter，而且无需指定版本，版本由parent提供</li><li>如果没有对应的starter，手写坐标即可</li></ul></li><li><p>实际开发中如果发现坐标出现了冲突现象，确认你要使用的可行的版本号，使用手工书写的方式添加对应依赖，覆盖SpringBoot提供给我们的配置管理</p><ul><li>方式一：直接写坐标</li><li>方式二：覆盖<properties>中定义的版本号，就是下面这堆东西了，哪个冲突了覆盖哪个就OK了</li></ul><pre class=" language-XML"><code class="language-XML"><properties>    <activemq.version>5.16.3</activemq.version>    <aspectj.version>1.9.7</aspectj.version>    <assertj.version>3.19.0</assertj.version>    <commons-codec.version>1.15</commons-codec.version>    <commons-dbcp2.version>2.8.0</commons-dbcp2.version>    <commons-lang3.version>3.12.0</commons-lang3.version>    <commons-pool.version>1.6</commons-pool.version>    <commons-pool2.version>2.9.0</commons-pool2.version>    <h2.version>1.4.200</h2.version>    <hibernate.version>5.4.32.Final</hibernate.version>    <hibernate-validator.version>6.2.0.Final</hibernate-validator.version>    <httpclient.version>4.5.13</httpclient.version>    <jackson-bom.version>2.12.4</jackson-bom.version>    <javax-jms.version>2.0.1</javax-jms.version>    <javax-json.version>1.1.4</javax-json.version>    <javax-websocket.version>1.1</javax-websocket.version>    <jetty-el.version>9.0.48</jetty-el.version>    <junit.version>4.13.2</junit.version></properties></code></pre></li></ul><p><font color="#f0f"><b>温馨提示</b></font></p><p>​        SpringBoot官方给出了好多个starter的定义，方便我们使用，而且名称都是如下格式</p><pre class=" language-JAVA"><code class="language-JAVA">命名规则：spring-boot-starter-技术名称</code></pre><p>​    所以后期见了spring-boot-starter-aaa这样的名字，这就是SpringBoot官方给出的starter定义。那非官方定义的也有吗？有的，具体命名方式到整合技术的章节再说。</p><p><strong>总结</strong></p><ol><li>开发SpringBoot程序需要导入坐标时通常导入对应的starter</li><li>每个不同的starter根据功能不同，通常包含多个依赖坐标</li><li>使用starter可以实现快速配置的效果，达到简化配置的目的</li></ol><h4 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h4><p>​        配置说完了，我们发现SpringBoot确实帮助我们减少了很多配置工作，下面说一下程序是如何运行的。目前程序运行的入口就是SpringBoot工程创建时自带的那个类，也就是带有main方法的那个类，运行这个类就可以启动SpringBoot工程的运行。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot0101QuickstartApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Springboot0101QuickstartApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        SpringBoot本身是为了加速Spring程序的开发的，而Spring程序运行的基础是需要创建Spring容器对象（IoC容器）并将所有的对象放置到Spring容器中管理，也就是一个一个的Bean。现在改用SpringBoot加速开发Spring程序，这个容器还在吗？这个疑问不用说，一定在。其实当前这个类运行后就会产生一个Spring容器对象，并且可以将这个对象保存起来，通过容器对象直接操作Bean。</p><pre class=" language-JAVA"><code class="language-JAVA">@SpringBootApplicationpublic class QuickstartApplication &#123;    public static void main(String[] args) &#123;        ConfigurableApplicationContext ctx = SpringApplication.run(QuickstartApplication.class, args);        BookController bean = ctx.getBean(BookController.class);        System.out.println("bean======>" + bean);    &#125;&#125;</code></pre><p>​        通过上述操作不难看出，其实SpringBoot程序启动还是创建了一个Spring容器对象。当前运行的这个类在SpringBoot程序中是所有功能的入口，称为<font color="#ff0000"><b>引导类</b></font>。</p><p>​        作为一个引导类最典型的特征就是当前类上方声明了一个注解<font color="#ff0000"><b>@SpringBootApplication</b></font>。</p><p><strong>总结</strong></p><ol><li>SpringBoot工程提供引导类用来启动程序</li><li>SpringBoot工程启动后创建并初始化Spring容器</li></ol><p><strong>思考</strong></p><p>​        程序现在已经运行了，通过引导类的main方法运行了起来。但是运行java程序不应该是执行完就结束了吗？但是我们现在明显是启动了一个web服务器啊，不然网页怎么能正常访问呢？这个服务器是在哪里写的呢？</p><h4 id="内嵌tomcat"><a href="#内嵌tomcat" class="headerlink" title="内嵌tomcat"></a>内嵌tomcat</h4><p>​        当前我们做的SpringBoot入门案例勾选了Spring-web的功能，并且导入了对应的starter。</p><pre class=" language-XML"><code class="language-XML"><dependency>    <groupId>org.springframework.boot</groupId>    <artifactId>spring-boot-starter-web</artifactId></dependency></code></pre><p>​        SpringBoot发现，既然你要做web程序，肯定离不开使用web服务器，这样吧，帮人帮到底，送佛送到西，我帮你搞一个web服务器，你要愿意用的，直接使用就好了。SpringBoot又琢磨，提供一种服务器万一不满足开发者需要呢？干脆我再多给你几种选择，你随便切换。万一你不想用我给你提供的，也行，你可以自己搞。</p><p>​        由于这个功能不属于程序的主体功能，可用可不用，于是乎SpringBoot将其定位成辅助功能，别小看这么一个辅助功能，它可是帮我们开发者又减少了好多的设置性工作。</p><p>​        下面就围绕着这个内置的web服务器，也可以说是内置的tomcat服务器来研究几个问题：</p><ol><li>这个服务器在什么位置定义的</li><li>这个服务器是怎么运行的</li><li>这个服务器如果想换怎么换？虽然这个需求很垃圾，搞得开发者会好多web服务器一样，用别人提供好的不香么？非要自己折腾</li></ol><p><strong>内嵌Tomcat定义位置</strong></p><p>​        说到定义的位置，我们就想，如果我们不开发web程序，用的着web服务器吗？肯定用不着啊。那如果这个东西被加入到你的程序中，伴随着什么技术进来的呢？肯定是web相关的功能啊，没错，就是前面导入的web相关的starter做的这件事。</p><pre class=" language-XML"><code class="language-XML"><dependency>    <groupId>org.springframework.boot</groupId>    <artifactId>spring-boot-starter-web</artifactId></dependency></code></pre><p>​        打开web对应的starter查看导入了哪些东西。</p><pre class=" language-XML"><code class="language-XML"><dependencies>    <dependency>        <groupId>org.springframework.boot</groupId>        <artifactId>spring-boot-starter</artifactId>        <version>2.5.4</version>        <scope>compile</scope>    </dependency>    <dependency>        <groupId>org.springframework.boot</groupId>        <artifactId>spring-boot-starter-json</artifactId>        <version>2.5.4</version>        <scope>compile</scope>    </dependency>    <dependency>        <groupId>org.springframework.boot</groupId>        <artifactId>spring-boot-starter-tomcat</artifactId>        <version>2.5.4</version>        <scope>compile</scope>    </dependency>    <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-web</artifactId>        <version>5.3.9</version>        <scope>compile</scope>    </dependency>    <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-webmvc</artifactId>        <version>5.3.9</version>        <scope>compile</scope>    </dependency></dependencies></code></pre><p>​        第三个依赖就是tomcat对应的东西了，居然也是一个starter，再打开看看。</p><pre class=" language-XML"><code class="language-XML"><dependencies>    <dependency>        <groupId>jakarta.annotation</groupId>        <artifactId>jakarta.annotation-api</artifactId>        <version>1.3.5</version>        <scope>compile</scope>    </dependency>    <dependency>        <groupId>org.apache.tomcat.embed</groupId>        <artifactId>tomcat-embed-core</artifactId>        <version>9.0.52</version>        <scope>compile</scope>        <exclusions>            <exclusion>                <artifactId>tomcat-annotations-api</artifactId>                <groupId>org.apache.tomcat</groupId>            </exclusion>        </exclusions>    </dependency>    <dependency>        <groupId>org.apache.tomcat.embed</groupId>        <artifactId>tomcat-embed-el</artifactId>        <version>9.0.52</version>        <scope>compile</scope>    </dependency>    <dependency>        <groupId>org.apache.tomcat.embed</groupId>        <artifactId>tomcat-embed-websocket</artifactId>        <version>9.0.52</version>        <scope>compile</scope>        <exclusions>            <exclusion>                <artifactId>tomcat-annotations-api</artifactId>                <groupId>org.apache.tomcat</groupId>            </exclusion>        </exclusions>    </dependency></dependencies></code></pre><p>​        这里面有一个核心的坐标，tomcat-embed-core，叫做tomcat内嵌核心。就是这个东西把tomcat功能引入到了我们的程序中的。目前解决了第一个问题，找到根儿了，谁把tomcat引入到程序中的？spring-boot-starter-web中的spring-boot-starter-tomcat做的。之所以你感觉很奇妙的原因就是，这个东西是默认加入到程序中了，所以感觉很神奇，居然什么都不做，就有了web服务器对应的功能。再来说第二个问题，这个服务器是怎么运行的。</p><p><strong>内嵌Tomcat运行原理</strong></p><p>​        Tomcat服务器是一款软件，而且是一款使用java语言开发的软件，熟悉tomcat的话应该知道tomcat安装目录中保存有很多jar文件。</p><p>​        下面的问题来了，既然是使用java语言开发的，运行的时候肯定符合java程序运行的原理，java程序运行靠的是什么？对象呀，一切皆对象，万物皆对象。那tomcat运行起来呢？也是对象啊。</p><p>​        如果是对象，那Spring容器是用来管理对象的，这个对象能交给Spring容器管理吗？把吗去掉，是个对象都可以交给Spring容器管理，行了，这下通了，tomcat服务器运行其实是以对象的形式在Spring容器中运行的。怪不得我们没有安装这个tomcat但是还能用，闹了白天这东西最后是以一个对象的形式存在，保存在Spring容器中悄悄运行的。具体运行的是什么呢？其实就是上前面提到的那个tomcat内嵌核心。</p><pre class=" language-XML"><code class="language-XML"><dependencies>    <dependency>        <groupId>org.apache.tomcat.embed</groupId>        <artifactId>tomcat-embed-core</artifactId>        <version>9.0.52</version>        <scope>compile</scope>    </dependency></dependencies></code></pre><p>​        那既然是个对象，如果把这个对象从Spring容器中去掉是不是就没有web服务器的功能呢？是这样的，通过依赖排除可以去掉这个web服务器功能。</p><pre class=" language-XML"><code class="language-XML"><dependencies>    <dependency>        <groupId>org.springframework.boot</groupId>        <artifactId>spring-boot-starter-web</artifactId>        <exclusions>            <exclusion>                <groupId>org.springframework.boot</groupId>                <artifactId>spring-boot-starter-tomcat</artifactId>            </exclusion>        </exclusions>    </dependency></dependencies></code></pre><p>​        上面对web-starter做了一个操作，使用maven的排除依赖去掉了使用tomcat的starter。这下好了，容器中肯定没有这个对象了，重新启动程序可以观察到程序运行了，但是并没有像之前那样运行后是一个一直运行的服务，而是直接停掉了，就是这个原因。</p><p><strong>更换内嵌Tomcat</strong></p><p>​        那根据上面的操作我们思考是否可以换个服务器呢？必须的嘛。根据SpringBoot的工作机制，用什么技术，加入什么依赖就行了。SpringBoot提供了3款内置的服务器：</p><ul><li><p>tomcat(默认)：apache出品，粉丝多，应用面广，负载了若干较重的组件</p></li><li><p>jetty：更轻量级，负载性能远不及tomcat</p></li><li><p>undertow：负载性能勉强跑赢tomcat</p><p>想用哪个，加个坐标就OK。前提是把tomcat排除掉，因为tomcat是默认加载的。</p></li></ul><pre class=" language-XML"><code class="language-XML"><dependencies>    <dependency>        <groupId>org.springframework.boot</groupId>        <artifactId>spring-boot-starter-web</artifactId>        <exclusions>            <exclusion>                <groupId>org.springframework.boot</groupId>                <artifactId>spring-boot-starter-tomcat</artifactId>            </exclusion>        </exclusions>    </dependency>    <dependency>        <groupId>org.springframework.boot</groupId>        <artifactId>spring-boot-starter-jetty</artifactId>    </dependency></dependencies></code></pre><p>​        现在就已经成功替换了web服务器，核心思想就是用什么加入对应坐标就可以了。如果有starter，优先使用starter。</p><p><strong>总结</strong></p><ol><li>内嵌Tomcat服务器是SpringBoot辅助功能之一</li><li>内嵌Tomcat工作原理是将Tomcat服务器作为对象运行，并将该对象交给Spring容器管理</li><li>变更内嵌服务器思想是去除现有服务器，添加全新的服务器</li></ol><p>​        到这里第一章快速上手SpringBoot就结束了，这一章我们学习了两大块知识</p><ol><li><p>使用了4种方式制作了SpringBoot的入门程序，不管是哪一种，其实内部都是一模一样的</p></li><li><p>学习了入门程序的工作流程，知道什么是parent，什么是starter，这两个东西是怎么配合工作的，以及我们的程序为什么启动起来是一个tomcat服务器等等</p><p>第一章到这里就结束了，再往下学习就要去基于会创建SpringBoot工程的基础上，研究SpringBoot工程的具体细节了。</p></li></ol><h2 id="JC-2-SpringBoot基础配置"><a href="#JC-2-SpringBoot基础配置" class="headerlink" title="JC-2.SpringBoot基础配置"></a>JC-2.SpringBoot基础配置</h2><p>​        入门案例做完了，下面就要研究SpringBoot的用法了。通过入门案例，各位小伙伴能够感知到一个信息，SpringBoot没有具体的功能，它是辅助加快Spring程序的开发效率的。我们发现，现在几乎不用做任何配置功能就有了，确实很好用。但是仔细想想，没有做配置意味着什么？意味着配置已经做好了，不用你自己写了。但是新的问题又来了，如果不想用已经写好的默认配置，该如何干预呢？这就是这一章咱们要研究的问题。</p><p>​        如果想修改默认的配置，这个信息应该写在什么位置呢？目前我们接触的入门案例中一共有3个文件，第一是pom.xml文件，设置项目的依赖，这个没什么好研究的，相关的高级内容咱们到原理篇再说，第二是引导类，这个是执行SpringBoot程序的入口，也不像是做功能配置的地方，其实还有一个信息，就是在resources目录下面有一个空白的文件，叫做application.properties。一看就是个配置文件，咱们这一章就来说说配置文件怎么写，能写什么，怎么覆盖SpringBoot的默认配置修改成自己的配置。</p><p>​    </p><h3 id="JC-2-1-属性配置"><a href="#JC-2-1-属性配置" class="headerlink" title="JC-2-1.属性配置"></a>JC-2-1.属性配置</h3><p>​        SpringBoot通过配置文件application.properties就可以修改默认的配置，那咱们就先找个简单的配置下手，当前访问tomcat的默认端口是8080，好熟悉的味道，但是不便于书写，我们先改成80，通过这个操作来熟悉一下SpringBoot的配置格式是什么样的。</p><p><img src="img%5Cimage-20211123165428245.png" alt="image-20211123165428245"></p><p>​        那该如何写呢？properties格式的文件书写规范是key=value</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">itheima</span></code></pre><p>​        这个格式肯定是不能颠覆的，那就尝试性的写就行了，改端口，写port。当你输入port后，神奇的事情就发生了，这玩意儿带提示，太好了。</p><img src="img\image-20211123165719091.png" alt="image-20211123165719091" style="zoom:80%;" /><p>​        根据提示敲回车，输入80端口，搞定。</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">80</span></code></pre><p>​        下面就可以直接运行程序，测试效果了。</p><p>​        我们惊奇的发现SpringBoot这玩意儿狠啊，以前修改端口在哪里改？tomcat服务器的配置文件中改，现在呢？SpringBoot专用的配置文件中改，是不是意味着以后所有的配置都可以写在这一个文件中呢？是的，简化开发者配置的书写位置，集中管理。妙啊，妈妈再也不用担心我找不到配置文件了。</p><p>​        其实到这里我们应该得到如下三个信息：</p><ol><li>SpringBoot程序可以在application.properties文件中进行属性配置</li><li>application.properties文件中只要输入要配置的属性关键字就可以根据提示进行设置</li><li>SpringBoot将配置信息集中在一个文件中写，不管你是服务器的配置，还是数据库的配置，总之都写在一起，逃离一个项目十几种配置文件格式的尴尬局面</li></ol><p><strong>总结</strong></p><ol><li>SpringBoot默认配置文件是application.properties</li></ol><p>​        做完了端口的配置，趁热打铁，再做几个配置，目前项目启动时会显示一些日志信息，就来改一改这里面的一些设置。</p><p><strong>关闭运行日志图表（banner)</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.main.banner-mode</span><span class="token punctuation">=</span><span class="token attr-value">off</span></code></pre><p><strong>设置运行日志的显示级别</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">logging.level.root</span><span class="token punctuation">=</span><span class="token attr-value">debug</span></code></pre><p>​        你会发现，现在这么搞配置太爽了，以前你做配置怎么做？不同的技术有自己专用的配置文件，文件不同格式也不统一，现在呢？不用东奔西走的找配置文件写配置了，统一格式了，这就是大秦帝国啊，统一六国。SpringBoot比大秦狠，因为未来出现的技术还没出现呢，但是现在已经确认了，配置都写这个文件里面。</p><p>​        我们现在配置了3个信息，但是又有新的问题了。这个配置是随便写的吗？什么都能配？有没有一个东西显示所有能配置的项呢？此外这个配置和什么东西有关呢？会不会因为我写了什么东西以后才可以写什么配置呢？比如我现在没有写数据库相关的东西，能否配置数据呢？一个一个来，先说第一个问题，都能配置什么。</p><p>​        打开SpringBoot的官网，找到SpringBoot官方文档，打开查看附录中的Application Properties就可以获取到对应的配置项了，网址奉上：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties</a></p><p>​        能写什么的问题解决了，再来说第二个问题，这个配置项和什么有关。在pom中注释掉导入的spring-boot-starter-web，然后刷新工程，你会发现配置的提示消失了。闹了半天是设定使用了什么技术才能做什么配置。也合理，不然没有使用对应技术，配了也是白配。</p><p><font color="#f0f"><b>温馨提示</b></font></p><p>​        所有的starter中都会依赖下面这个starter，叫做spring-boot-starter。这个starter是所有的SpringBoot的starter的基础依赖，里面定义了SpringBoot相关的基础配置，关于这个starter我们到开发应用篇和原理篇中再深入讲解。</p><pre class=" language-JAVA"><code class="language-JAVA"><dependency>    <groupId>org.springframework.boot</groupId>    <artifactId>spring-boot-starter</artifactId>    <version>2.5.4</version>    <scope>compile</scope></dependency></code></pre><p><strong>总结</strong></p><ol><li>SpringBoot中导入对应starter后，提供对应配置属性</li><li>书写SpringBoot配置采用关键字+提示形式书写</li></ol><h3 id="JC-2-2-配置文件分类"><a href="#JC-2-2-配置文件分类" class="headerlink" title="JC-2-2.配置文件分类"></a>JC-2-2.配置文件分类</h3><p>​        现在已经能够进行SpringBoot相关的配置了，但是properties格式的配置写起来总是觉得看着不舒服，所以就期望存在一种书写起来更简便的配置格式提供给开发者使用。有吗？还真有，SpringBoot除了支持properties格式的配置文件，还支持另外两种格式的配置文件。三种配置文件格式分别如下:</p><ul><li>properties格式</li><li>yml格式</li><li>yaml格式</li></ul><p>​        一看到全新的文件格式，各位小伙伴肯定想，这下又要学习新的语法格式了。怎么说呢？从知识角度来说，要学，从开发角度来说，不用学。为什么呢？因为SpringBoot的配置在Idea工具下有提示啊，跟着提示走就行了。下面列举三种不同文件格式配置相同的属性范例，先了解一下。</p><ul><li>application.properties（properties格式）</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">80</span></code></pre><ul><li>application.yml（yml格式）</li></ul><pre class=" language-YML"><code class="language-YML">server:  port: 81</code></pre><ul><li>application.yaml（yaml格式）</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">82</span></code></pre><p>​        仔细看会发现yml格式和yaml格式除了文件名后缀不一样，格式完全一样，是这样的，yml和yaml文件格式就是一模一样的，只是文件后缀不同，所以可以合并成一种格式来看。那对于这三种格式来说，以后用哪一种比较多呢？记清楚，以后基本上都是用yml格式的，本课程后面的所有知识都是基于yml格式来制作的，以后在企业开发过程中用这个格式的机会也最多，一定要重点掌握。</p><p><strong>总结</strong></p><ol><li>SpringBoot提供了3种配置文件的格式<ul><li>properties（传统格式/默认格式）</li><li><strong>yml</strong>（主流格式）</li><li>yaml</li></ul></li></ol><p><strong>思考</strong></p><p>​        现在我们已经知道使用三种格式都可以做配置了，好奇宝宝们就有新的灵魂拷问了，万一我三个都写了，他们三个谁说了算呢？打一架吗？</p><h4 id="配置文件优先级"><a href="#配置文件优先级" class="headerlink" title="配置文件优先级"></a>配置文件优先级</h4><p>​        其实三个文件如果共存的话，谁生效说的就是配置文件加载的优先级别。先说一点，虽然以后这种情况很少出现，但是这个知识还是可以学习一下的。我们就让三个配置文件书写同样的信息，比如都配置端口，然后我们让每个文件配置的端口号都不一样，最后启动程序后看启动端口是多少就知道谁的加载优先级比较高了。</p><ul><li>application.properties（properties格式）</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">80</span></code></pre><ul><li>application.yml（yml格式）</li></ul><pre class=" language-YML"><code class="language-YML">server:  port: 81</code></pre><ul><li>application.yaml（yaml格式）</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">82</span></code></pre><p>​        启动后发现目前的启动端口为80，把80对应的文件删除掉，然后再启动，现在端口又改成了81。现在我们就已经知道了3个文件的加载优先顺序是什么。</p><pre class=" language-XML"><code class="language-XML">application.properties  >  application.yml  >  application.yaml</code></pre><p>​        虽然得到了一个知识结论，但是我们实际开发的时候还是要看最终的效果为准。也就是你要的最终效果是什么自己是明确的，上述结论只能帮助你分析结论产生的原因。这个知识了解一下就行了，因为以后同时写多种配置文件格式的情况实在是较少。</p><p>​        最后我们把配置文件内容给修改一下</p><ul><li>application.properties（properties格式）</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">80</span><span class="token attr-name">spring.main.banner-mode</span><span class="token punctuation">=</span><span class="token attr-value">off</span></code></pre><ul><li>application.yml（yml格式）</li></ul><pre class=" language-YML"><code class="language-YML">server:  port: 81logging:   level:     root: debug</code></pre><ul><li>application.yaml（yaml格式）</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">82</span></code></pre><p>​        我们发现不仅端口生效了，最终显示80，同时其他两条配置也生效了，看来每个配置文件中的项都会生效，只不过如果多个配置文件中有相同类型的配置会优先级高的文件覆盖优先级的文件中的配置。如果配置项不同的话，所有的配置项都会生效。</p><p><strong>总结</strong></p><ol><li>配置文件间的加载优先级    properties（最高）&gt;  yml  &gt;  yaml（最低）</li><li>不同配置文件中相同配置按照加载优先级相互覆盖，不同配置文件中不同配置全部保留 </li></ol><h4 id="教你一招：自动提示功能消失解决方案"><a href="#教你一招：自动提示功能消失解决方案" class="headerlink" title="教你一招：自动提示功能消失解决方案"></a>教你一招：<strong>自动提示功能消失解决方案</strong></h4><p>​        在做程序的过程中，可能有些小伙伴会基于各种各样的原因导致配置文件中没有提示，这个确实很让人头疼，所以下面给大家说一下如果自动提示功能消失了怎么解决。</p><p>​        先要明确一个核心，就是自动提示功能不是SpringBoot技术给我们提供的，是我们在Idea工具下编程，这个编程工具给我们提供的。明白了这一点后，再来说为什么会出现这种现象。其实这个自动提示功能消失的原因还是蛮多的，如果想解决这个问题，就要知道为什么会消失，大体原因有如下2种：</p><ol><li><p>Idea认为你现在写配置的文件不是个配置文件，所以拒绝给你提供提示功能</p></li><li><p>Idea认定你是合理的配置文件，但是Idea加载不到对应的提示信息</p><p>这里我们主要解决第一个现象，第二种现象到原理篇再讲解。第一种现象的解决方式如下：</p></li></ol><p><strong>步骤①</strong>：打开设置，【Files】→【Project Structure…】</p><p><img src="img%5Cimage-20211126160548690.png" alt="image-20211126160548690"></p><p><strong>步骤②</strong>：在弹出窗口中左侧选择【Facets】，右侧选中Spring路径下对应的模块名称，也就是你自动提示功能消失的那个模块</p><p><img src="img\image-20211126160726589.png" alt="image-20211126160726589" style="zoom:67%;" /><img src="img%5Cimage-20211126160844372.png" alt="image-20211126160844372"></p><p><strong>步骤③</strong>：点击Customize Spring Boot按钮，此时可以看到当前模块对应的配置文件是哪些了。如果没有你想要称为配置文件的文件格式，就有可能无法弹出提示</p><p><img src="img%5Cimage-20211126160946448.png" alt="image-20211126160946448"><img src="img\image-20211126160954338.png" alt="image-20211126160954338" style="zoom:80%;" /></p><p><strong>步骤④</strong>：选择添加配置文件，然后选中要作为配置文件的具体文件就OK了</p><p><img src="img\image-20211126161145082.png" alt="image-20211126161145082" style="zoom:80%;" /><img src="img\image-20211126161156324.png" alt="image-20211126161156324" style="zoom: 67%;" /></p><p>​        到这里就做完了，其实就是Idea的一个小功能</p><p><img src="img%5Cimage-20211126161301699.png" alt="image-20211126161301699"></p><p><strong>总结</strong></p><ol><li><p>指定SpringBoot配置文件</p><ul><li>Setting → Project Structure → Facets</li><li>选中对应项目/工程</li><li>Customize Spring Boot</li><li>选择配置文件</li></ul></li></ol><h3 id="JC-2-3-yaml文件"><a href="#JC-2-3-yaml文件" class="headerlink" title="JC-2-3.yaml文件"></a>JC-2-3.yaml文件</h3><p>​        SpringBoot的配置以后主要使用yml结尾的这种文件格式，并且在书写时可以通过提示的形式加载正确的格式。但是这种文件还是有严格的书写格式要求的。下面就来说一下具体的语法格式。</p><p>​        YAML（YAML Ain’t Markup Language），一种数据序列化格式。具有容易阅读、容易与脚本语言交互、以数据为核心，重数据轻格式的特点。常见的文件扩展名有两种：</p><ul><li><p>.yml格式（主流）</p></li><li><p>.yaml格式</p><p> 具体的语法格式要求如下：</p></li></ul><ol><li>大小写敏感</li><li>属性层级关系使用多行描述，<strong>每行结尾使用冒号结束</strong></li><li>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</li><li>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</li><li>#号 表示注释</li></ol><p>​        上述规则不要死记硬背，按照书写习惯慢慢适应，并且在Idea下由于具有提示功能，慢慢适应着写格式就行了。核心的一条规则要记住，<font color="#ff0000"><b>数据前面要加空格与冒号隔开</b></font>。</p><p>​        下面列出常见的数据书写格式，熟悉一下</p><pre class=" language-YAML"><code class="language-YAML">boolean: TRUE                          #TRUE,true,True,FALSE,false，False均可float: 3.14                            #6.8523015e+5  #支持科学计数法int: 123                               #0b1010_0111_0100_1010_1110    #支持二进制、八进制、十六进制null: ~                                #使用~表示nullstring: HelloWorld                  #字符串可以直接书写string2: "Hello World"              #可以使用双引号包裹特殊字符date: 2018-02-17                    #日期必须使用yyyy-MM-dd格式datetime: 2018-02-17T15:02:31+08:00  #时间和日期之间使用T连接，最后使用+代表时区</code></pre><p>​        此外，yaml格式中也可以表示数组，在属性名书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔。</p><pre class=" language-YAML"><code class="language-YAML">subject:    - Java    - 前端    - 大数据enterprise:    name: itcast    age: 16    subject:        - Java        - 前端        - 大数据likes: [王者荣耀,刺激战场]            #数组书写缩略格式users:                             #对象数组格式一  - name: Tom       age: 4  - name: Jerry    age: 5users:                             #对象数组格式二  -      name: Tom    age: 4  -       name: Jerry    age: 5                users2: [ &#123; name:Tom , age:4 &#125; , &#123; name:Jerry , age:5 &#125; ]    #对象数组缩略格式</code></pre><p><strong>总结</strong></p><ol><li>yaml语法规则<ul><li>大小写敏感</li><li>属性层级关系使用多行描述，每行结尾使用冒号结束</li><li>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</li><li>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</li><li>#号 表示注释</li></ul></li><li>注意属性名冒号后面与数据之间有一个<strong>空格</strong></li><li>字面值、对象数据格式、数组数据格式</li></ol><p><strong>思考</strong></p><p>​        现在我们已经知道了yaml具有严格的数据格式要求，并且已经可以正确的书写yaml文件了，那这些文件书写后其实是在定义一些数据。这些数据是给谁用的呢？大部分是SpringBoot框架内部使用，但是如果我们想配置一些数据自己使用，能不能用呢？答案是可以的，那如何读取yaml文件中的数据呢？咱们下一节再说。</p><h3 id="JC-2-4-yaml数据读取"><a href="#JC-2-4-yaml数据读取" class="headerlink" title="JC-2-4.yaml数据读取"></a>JC-2-4.yaml数据读取</h3><p>​        对于yaml文件中的数据，其实你就可以想象成这就是一个小型的数据库，里面保存有若干数据，每个数据都有一个独立的名字，如果你想读取里面的数据，肯定是支持的，下面就介绍3种读取数据的方式。</p><h4 id="读取单一数据"><a href="#读取单一数据" class="headerlink" title="读取单一数据"></a>读取单一数据</h4><p>​        yaml中保存的单个数据，可以使用Spring中的注解@Value读取单个数据，属性名引用方式：<font color="#ff0000"><b>${一级属性名.二级属性名……}</b></font></p><img src="img\image-20211126180433356.png" alt="image-20211126180433356" style="zoom:80%;" /><p>​        记得使用@Value注解时，要将该注解写在某一个指定的Spring管控的bean的属性名上方，这样当bean进行初始化时候就可以读取到对应的单一数据了。</p><p><strong>总结</strong></p><ol><li>使用@Value配合SpEL读取单个数据</li><li>如果数据存在多层级，依次书写层级名称即可</li></ol><h4 id="读取全部数据"><a href="#读取全部数据" class="headerlink" title="读取全部数据"></a>读取全部数据</h4><p>​        读取单一数据可以解决读取数据的问题，但是如果定义的数据量过大，这么一个一个书写肯定会累死人的，SpringBoot提供了一个对象，能够把所有的数据都封装到这一个对象中，这个对象叫做Environment，使用自动装配注解可以将所有的yaml数据封装到这个对象中</p><img src="img\image-20211126180738569.png" alt="image-20211126180738569" style="zoom:80%;" /><p>​        数据封装到了Environment对象中，获取属性时，通过Environment的接口操作进行，具体方法是getProperties（String），参数填写属性名即可</p><p><strong>总结</strong></p><ol><li>使用Environment对象封装全部配置信息</li><li>使用@Autowired自动装配数据到Environment对象中</li></ol><h4 id="读取对象数据"><a href="#读取对象数据" class="headerlink" title="读取对象数据"></a>读取对象数据</h4><p>​        单一数据读取书写比较繁琐，全数据读取封装的太厉害了，每次拿数据还要一个一个的getProperties（）,总之用起来都不是很舒服。由于Java是一个面向对象的语言，很多情况下，我们会将一组数据封装成一个对象。SpringBoot也提供了可以将一组yaml对象数据封装一个Java对象的操作</p><p>​        首先定义一个对象，并将该对象纳入Spring管控的范围，也就是定义成一个bean，然后使用注解@ConfigurationProperties指定该对象加载哪一组yaml中配置的信息。</p><img src="img\image-20211126181126382.png" alt="image-20211126181126382" style="zoom:80%;" /><p>​        这个@ConfigurationProperties必须告诉他加载的数据前缀是什么，这样指定前缀下的所有属性就封装到这个对象中。记得数据属性名要与对象的变量名一一对应啊，不然没法封装。其实以后如果你要定义一组数据自己使用，就可以先写一个对象，然后定义好属性，下面到配置中根据这个格式书写即可。</p><p>​    <img src="img\image-20211126181423432.png" alt="image-20211126181423432" style="zoom:80%;" /></p><p><font color="#f0f"><b>温馨提示</b></font></p><p>​        细心的小伙伴会发现一个问题，自定义的这种数据在yaml文件中书写时没有弹出提示，咱们到原理篇再揭秘如何弹出提示。</p><p><strong>总结</strong></p><ol><li>使用@ConfigurationProperties注解绑定配置信息到封装类中</li><li>封装类需要定义为Spring管理的bean，否则无法进行属性注入</li></ol><h4 id="yaml文件中的数据引用"><a href="#yaml文件中的数据引用" class="headerlink" title="yaml文件中的数据引用"></a>yaml文件中的数据引用</h4><p>​        如果你在书写yaml数据时，经常出现如下现象，比如很多个文件都具有相同的目录前缀</p><pre class=" language-YAML"><code class="language-YAML">center:    dataDir: /usr/local/fire/data    tmpDir: /usr/local/fire/tmp    logDir: /usr/local/fire/log    msgDir: /usr/local/fire/msgDir</code></pre><p>​        或者</p><pre class=" language-YAML"><code class="language-YAML">center:    dataDir: D:/usr/local/fire/data    tmpDir: D:/usr/local/fire/tmp    logDir: D:/usr/local/fire/log    msgDir: D:/usr/local/fire/msgDir</code></pre><p>​        这个时候你可以使用引用格式来定义数据，其实就是搞了个变量名，然后引用变量了，格式如下：</p><pre class=" language-YAML"><code class="language-YAML">baseDir: /usr/local/firecenter:    dataDir: $&#123;baseDir&#125;/data    tmpDir: $&#123;baseDir&#125;/tmp    logDir: $&#123;baseDir&#125;/log    msgDir: $&#123;baseDir&#125;/msgDir</code></pre><p>​    还有一个注意事项，在书写字符串时，如果需要使用转义字符，需要将数据字符串使用双引号包裹起来</p><pre class=" language-YAML"><code class="language-YAML">lesson: "Spring\tboot\nlesson"</code></pre><p><strong>总结</strong></p><ol><li>在配置文件中可以使用${属性名}方式引用属性值</li><li>如果属性中出现特殊字符，可以使用双引号包裹起来作为字符解析</li></ol><p>​        到这里有关yaml文件的基础使用就先告一段落，实用篇中再继续研究更深入的内容。</p><h2 id="JC-3-基于SpringBoot实现SSMP整合"><a href="#JC-3-基于SpringBoot实现SSMP整合" class="headerlink" title="JC-3.基于SpringBoot实现SSMP整合"></a>JC-3.基于SpringBoot实现SSMP整合</h2><p>​        重头戏来了，SpringBoot之所以好用，就是它能方便快捷的整合其他技术，这一部分咱们就来聊聊一些技术的整合方式，通过这一章的学习，大家能够感受到SpringBoot到底有多酷炫。这一章咱们学习如下技术的整合方式</p><ul><li><p>整合JUnit</p></li><li><p>整合MyBatis</p></li><li><p>整合MyBatis-Plus</p></li><li><p>整合Druid</p><p> 上面这些技术都整合完毕后，我们做一个小案例，也算是学有所用吧。涉及的技术比较多，综合运用一下。</p></li></ul><h3 id="JC-3-1-整合JUnit"><a href="#JC-3-1-整合JUnit" class="headerlink" title="JC-3-1.整合JUnit"></a>JC-3-1.整合JUnit</h3><p>​        SpringBoot技术的定位用于简化开发，再具体点是简化Spring程序的开发。所以在整合任意技术的时候，如果你想直观感触到简化的效果，你必须先知道使用非SpringBoot技术时对应的整合是如何做的，然后再看基于SpringBoot的整合是如何做的，才能比对出来简化在了哪里。</p><p>​        我们先来看一下不使用SpringBoot技术时，Spring整合JUnit的制作方式</p><pre class=" language-JAVA"><code class="language-JAVA">//加载spring整合junit专用的类运行器@RunWith(SpringJUnit4ClassRunner.class)//指定对应的配置信息@ContextConfiguration(classes = SpringConfig.class)public class AccountServiceTestCase &#123;    //注入你要测试的对象    @Autowired    private AccountService accountService;    @Test    public void testGetById()&#123;        //执行要测试的对象对应的方法        System.out.println(accountService.findById(2));    &#125;&#125;</code></pre><p>​        其中核心代码是前两个注解，第一个注解@RunWith是设置Spring专用的测试类运行器，简单说就是Spring程序执行程序有自己的一套独立的运行程序的方式，不能使用JUnit提供的类运行方式了，必须指定一下，但是格式是固定的，琢磨一下，<font color="#ff0000"><b>每次都指定一样的东西，这个东西写起来没有技术含量啊</b></font>，第二个注解@ContextConfiguration是用来设置Spring核心配置文件或配置类的，简单说就是加载Spring的环境你要告诉Spring具体的环境配置是在哪里写的，虽然每次加载的文件都有可能不同，但是仔细想想，如果文件名是固定的，这个貌似也是一个固定格式。既然<font color="#ff0000"><b>有可能是固定格式，那就有可能每次都写一样的东西，也是一个没有技术含量的内容书写</b></font></p><p>​        SpringBoot就抓住上述两条没有技术含量的内容书写进行开发简化，能走默认值的走默认值，能不写的就不写，具体格式如下</p><pre class=" language-JAVA"><code class="language-JAVA">@SpringBootTestclass Springboot04JunitApplicationTests &#123;    //注入你要测试的对象    @Autowired    private BookDao bookDao;    @Test    void contextLoads() &#123;        //执行要测试的对象对应的方法        bookDao.save();        System.out.println("two...");    &#125;&#125;</code></pre><p>​        看看这次简化成什么样了，一个注解就搞定了，而且还没有参数，再体会SpringBoot整合其他技术的优势在哪里，就两个字——<font color="#ff0000"><b>简化</b></font>。使用一个注解@SpringBootTest替换了前面两个注解。至于内部是怎么回事？和之前一样，只不过都走默认值。</p><p>​        这个时候有人就问了，你加载的配置类或者配置文件是哪一个？就是我们前面启动程序使用的引导类。如果想手工指定引导类有两种方式，第一种方式使用属性的形式进行，在注解@SpringBootTest中添加classes属性指定配置类</p><pre class=" language-JAVA"><code class="language-JAVA">@SpringBootTest(classes = Springboot04JunitApplication.class)class Springboot04JunitApplicationTests &#123;    //注入你要测试的对象    @Autowired    private BookDao bookDao;    @Test    void contextLoads() &#123;        //执行要测试的对象对应的方法        bookDao.save();        System.out.println("two...");    &#125;&#125;</code></pre><p>​        第二种方式回归原始配置方式，仍然使用@ContextConfiguration注解进行，效果是一样的</p><pre class=" language-JAVA"><code class="language-JAVA">@SpringBootTest@ContextConfiguration(classes = Springboot04JunitApplication.class)class Springboot04JunitApplicationTests &#123;    //注入你要测试的对象    @Autowired    private BookDao bookDao;    @Test    void contextLoads() &#123;        //执行要测试的对象对应的方法        bookDao.save();        System.out.println("two...");    &#125;&#125;</code></pre><p><font color="#f0f"><b>温馨提示</b></font></p><p>​        使用SpringBoot整合JUnit需要保障导入test对应的starter，由于初始化项目时此项是默认导入的，所以此处没有提及，其实和之前学习的内容一样，用什么技术导入对应的starter即可。</p><p><strong>总结</strong></p><ol><li>导入测试对应的starter</li><li>测试类使用@SpringBootTest修饰</li><li>使用自动装配的形式添加要测试的对象</li><li>测试类如果存在于引导类所在包或子包中无需指定引导类</li><li>测试类如果不存在于引导类所在的包或子包中需要通过classes属性指定引导类</li></ol><h3 id="JC-3-2-整合MyBatis"><a href="#JC-3-2-整合MyBatis" class="headerlink" title="JC-3-2.整合MyBatis"></a>JC-3-2.整合MyBatis</h3><p>​        整合完JUnit下面再来说一下整合MyBatis，这个技术是大部分公司都要使用的技术，务必掌握。如果对Spring整合MyBatis不熟悉的小伙伴好好复习一下，下面列举出原始整合的全部内容，以配置类的形式为例进行</p><ul><li><p>导入坐标，MyBatis坐标不能少，Spring整合MyBatis还有自己专用的坐标，此外Spring进行数据库操作的jdbc坐标是必须的，剩下还有mysql驱动坐标，本例中使用了Druid数据源，这个倒是可以不要</p><pre class=" language-XML"><code class="language-XML"><dependencies>    <dependency>        <groupId>com.alibaba</groupId>        <artifactId>druid</artifactId>        <version>1.1.16</version>    </dependency>    <dependency>        <groupId>org.mybatis</groupId>        <artifactId>mybatis</artifactId>        <version>3.5.6</version>    </dependency>    <dependency>        <groupId>mysql</groupId>        <artifactId>mysql-connector-java</artifactId>        <version>5.1.47</version>    </dependency>    <!--1.导入mybatis与spring整合的jar包-->    <dependency>        <groupId>org.mybatis</groupId>        <artifactId>mybatis-spring</artifactId>        <version>1.3.0</version>    </dependency>    <!--导入spring操作数据库必选的包-->    <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-jdbc</artifactId>        <version>5.2.10.RELEASE</version>    </dependency></dependencies></code></pre></li><li><p>Spring核心配置</p><pre class=" language-JAVA"><code class="language-JAVA">@Configuration@ComponentScan("com.itheima")@PropertySource("jdbc.properties")public class SpringConfig &#123;&#125;</code></pre></li><li><p>MyBatis要交给Spring接管的bean</p><pre class=" language-JAVA"><code class="language-JAVA">//定义mybatis专用的配置类@Configurationpublic class MyBatisConfig &#123;//    定义创建SqlSessionFactory对应的bean    @Bean    public SqlSessionFactoryBean sqlSessionFactory(DataSource dataSource)&#123;        //SqlSessionFactoryBean是由mybatis-spring包提供的，专用于整合用的对象        SqlSessionFactoryBean sfb = new SqlSessionFactoryBean();        //设置数据源替代原始配置中的environments的配置        sfb.setDataSource(dataSource);        //设置类型别名替代原始配置中的typeAliases的配置        sfb.setTypeAliasesPackage("com.itheima.domain");        return sfb;    &#125;//    定义加载所有的映射配置    @Bean    public MapperScannerConfigurer mapperScannerConfigurer()&#123;        MapperScannerConfigurer msc = new MapperScannerConfigurer();        msc.setBasePackage("com.itheima.dao");        return msc;    &#125;&#125;</code></pre></li><li><p>数据源对应的bean，此处使用Druid数据源</p><pre class=" language-JAVA"><code class="language-JAVA">@Configurationpublic class JdbcConfig &#123;    @Value("$&#123;jdbc.driver&#125;")    private String driver;    @Value("$&#123;jdbc.url&#125;")    private String url;    @Value("$&#123;jdbc.username&#125;")    private String userName;    @Value("$&#123;jdbc.password&#125;")    private String password;    @Bean("dataSource")    public DataSource dataSource()&#123;        DruidDataSource ds = new DruidDataSource();        ds.setDriverClassName(driver);        ds.setUrl(url);        ds.setUsername(userName);        ds.setPassword(password);        return ds;    &#125;&#125;</code></pre></li><li><p>数据库连接信息（properties格式）</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/spring_db?useSSL=false</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span></code></pre><p>上述格式基本上是最简格式了，要写的东西还真不少。下面看看SpringBoot整合MyBaits格式</p></li></ul><p><strong>步骤①</strong>：创建模块</p><p><img src="img%5Cimage-20211129092156020.png" alt="image-20211129092156020"></p><p><strong>步骤②</strong>：勾选要使用的技术，MyBatis，由于要操作数据库，还要勾选对应数据库</p><p><img src="img%5Cimage-20211129092210993.png" alt="image-20211129092210993"></p><p>​    或者手工导入对应技术的starter，和对应数据库的坐标</p><pre class=" language-XML"><code class="language-XML"><dependencies>    <!--1.导入对应的starter-->    <dependency>        <groupId>org.mybatis.spring.boot</groupId>        <artifactId>mybatis-spring-boot-starter</artifactId>        <version>2.2.0</version>    </dependency>    <dependency>        <groupId>mysql</groupId>        <artifactId>mysql-connector-java</artifactId>        <scope>runtime</scope>    </dependency></dependencies></code></pre><p><strong>步骤③</strong>：配置数据源相关信息，没有这个信息你连接哪个数据库都不知道</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#2.配置相关信息</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/ssm_db    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root</code></pre><p>​        结束了，就这么多，没了。有人就很纳闷，这就结束了？对，这就结束了，SpringBoot把配置中所有可能出现的通用配置都简化了。下面写一个MyBatis程序运行需要的Dao（或者Mapper）就可以运行了</p><p><strong>实体类</strong></p><pre class=" language-JAVA"><code class="language-JAVA">public class Book &#123;    private Integer id;    private String type;    private String name;    private String description;&#125;</code></pre><p><strong>映射接口（Dao）</strong></p><pre class=" language-JAVA"><code class="language-JAVA">@Mapperpublic interface BookDao &#123;    @Select("select * from tbl_book where id = #&#123;id&#125;")    public Book getById(Integer id);&#125;</code></pre><p><strong>测试类</strong></p><pre class=" language-JAVA"><code class="language-JAVA">@SpringBootTestclass Springboot05MybatisApplicationTests &#123;    @Autowired    private BookDao bookDao;    @Test    void contextLoads() &#123;        System.out.println(bookDao.getById(1));    &#125;&#125;</code></pre><p>​        完美，开发从此变的就这么简单。再体会一下SpringBoot如何进行第三方技术整合的，是不是很优秀？具体内部的原理到原理篇再展开讲解</p><p>​        <font color="#ff0000"><b>注意</b></font>：当前使用的SpringBoot版本是2.5.4，对应的坐标设置中Mysql驱动使用的是8x版本。使用SpringBoot2.4.3（不含）之前版本会出现一个小BUG，就是MySQL驱动升级到8以后要求强制配置时区，如果不设置会出问题。解决方案很简单，驱动url上面添加上对应设置就行了</p><pre class=" language-YAML"><code class="language-YAML">#2.配置相关信息spring:  datasource:    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC    username: root    password: root</code></pre><p>​        这里设置的UTC是全球标准时间，你也可以理解为是英国时间，中国处在东八区，需要在这个基础上加上8小时，这样才能和中国地区的时间对应的，也可以修改配置为Asia/Shanghai，同样可以解决这个问题。</p><pre class=" language-YAML"><code class="language-YAML">#2.配置相关信息spring:  datasource:    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=Asia/Shanghai    username: root    password: root</code></pre><p>​        如果不想每次都设置这个东西，也可以去修改mysql中的配置文件mysql.ini，在mysqld项中添加default-time-zone=+8:00也可以解决这个问题。其实方式方法很多，这里就说这么多吧。</p><p>​        此外在运行程序时还会给出一个提示，说数据库驱动过时的警告，根据提示修改配置即可，弃用<strong>com.mysql.jdbc.Driver</strong>，换用<font color="#ff0000"><b>com.mysql.cj.jdbc.Driver</b></font>。前面的例子中已经更换了驱动了，在此说明一下。</p><pre class=" language-tex"><code class="language-tex">Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</code></pre><p><strong>总结</strong></p><ol><li><p>整合操作需要勾选MyBatis技术，也就是导入MyBatis对应的starter</p></li><li><p>数据库连接相关信息转换成配置</p></li><li><p>数据库SQL映射需要添加@Mapper被容器识别到</p></li><li><p>MySQL 8.X驱动强制要求设置时区</p><ul><li>修改url，添加serverTimezone设定</li><li>修改MySQL数据库配置</li></ul></li><li><p>驱动类过时，提醒更换为com.mysql.cj.jdbc.Driver</p></li></ol><h3 id="JC-3-3-整合MyBatis-Plus"><a href="#JC-3-3-整合MyBatis-Plus" class="headerlink" title="JC-3-3.整合MyBatis-Plus"></a>JC-3-3.整合MyBatis-Plus</h3><p>​        做完了两种技术的整合了，各位小伙伴要学会总结，我们做这个整合究竟哪些是核心？总结下来就两句话</p><ul><li><p>导入对应技术的starter坐标</p></li><li><p>根据对应技术的要求做配置</p><p>虽然看起来有点虚，但是确实是这个理儿，下面趁热打铁，再换一个技术，看看是不是上面这两步。</p></li></ul><p>​        接下来在MyBatis的基础上再升级一下，整合MyBaitsPlus（简称MP），国人开发的技术，符合中国人开发习惯，谁用谁知道。来吧，一起做整合</p><p><strong>步骤①</strong>：导入对应的starter</p><pre class=" language-XML"><code class="language-XML"><dependency>    <groupId>com.baomidou</groupId>    <artifactId>mybatis-plus-boot-starter</artifactId>    <version>3.4.3</version></dependency></code></pre><p>​        关于这个坐标，此处要说明一点，之前我们看的starter都是spring-boot-starter-？？？，也就是说都是下面的格式</p><pre class=" language-tex"><code class="language-tex">Spring-boot-start-***</code></pre><p>​    而MyBatis与MyBatisPlus这两个坐标的名字书写比较特殊，是第三方技术名称在前，boot和starter在后。此处简单提一下命名规范，后期原理篇会再详细讲解</p><table><thead><tr><th>starter所属</th><th>命名规则</th><th>示例</th></tr></thead><tbody><tr><td>官方提供</td><td>spring-boot-starter-技术名称</td><td>spring-boot-starter-web <br/>spring-boot-starter-test</td></tr><tr><td>第三方提供</td><td>第三方技术名称-spring-boot-starter</td><td>mybatis-spring-boot-starter<br/>druid-spring-boot-starter</td></tr><tr><td>第三方提供</td><td>第三方技术名称-boot-starter（第三方技术名称过长，简化命名）</td><td>mybatis-plus-boot-starter</td></tr></tbody></table><p><font color="#f0f"><b>温馨提示</b></font></p><p>​        有些小伙伴在创建项目时想通过勾选的形式找到这个名字，别翻了，没有。截止目前，SpringBoot官网还未收录此坐标，而我们Idea创建模块时读取的是SpringBoot官网的Spring Initializr，所以也没有。如果换用阿里云的url创建项目可以找到对应的坐标。</p><p><strong>步骤②</strong>：配置数据源相关信息</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#2.配置相关信息</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/ssm_db    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root</code></pre><p>​    没了，就这么多，剩下的就是写MyBaitsPlus的程序了</p><p><strong>映射接口（Dao）</strong></p><pre class=" language-JAVA"><code class="language-JAVA">@Mapperpublic interface BookDao extends BaseMapper<Book> &#123;&#125;</code></pre><p>​    核心在于Dao接口继承了一个BaseMapper的接口，这个接口中帮助开发者预定了若干个常用的API接口，简化了通用API接口的开发工作。</p><img src="img\image-20211129100313919.png" alt="image-20211129100313919" style="zoom:80%;" /><p>​    下面就可以写一个测试类进行测试了，此处省略。</p><p><font color="#f0f"><b>温馨提示</b></font></p><p>​        目前数据库的表名定义规则是tbl_模块名称，为了能和实体类相对应，需要做一个配置，相关知识各位小伙伴可以到MyBatisPlus课程中去学习，此处仅给出解决方案。配置application.yml文件，添加如下配置即可，设置所有表名的通用前缀名</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> tbl_        <span class="token comment" spellcheck="true">#设置所有表的通用前缀名称为tbl_</span></code></pre><p><strong>总结</strong></p><ol><li>手工添加MyBatis-Plus对应的starter</li><li>数据层接口使用BaseMapper简化开发</li><li>需要使用的第三方技术无法通过勾选确定时，需要手工添加坐标</li></ol><h3 id="JC-3-4-整合Druid"><a href="#JC-3-4-整合Druid" class="headerlink" title="JC-3-4.整合Druid"></a>JC-3-4.整合Druid</h3><p>​        使用SpringBoot整合了3个技术了，发现套路基本相同，导入对应的starter，然后做配置，各位小伙伴需要一直强化这套思想。下面再整合一个技术，继续深入强化此思想。</p><p>​        前面整合MyBatis和MyBatisPlus的时候，使用的数据源对象都是SpringBoot默认的数据源对象，下面我们手工控制一下，自己指定了一个数据源对象，Druid。</p><p>​        在没有指定数据源时，我们的配置如下：</p><pre class=" language-YAML"><code class="language-YAML">#2.配置相关信息spring:  datasource:    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=Asia/Shanghai    username: root    password: root</code></pre><p>​        此时虽然没有指定数据源，但是根据SpringBoot的德行，肯定帮我们选了一个它认为最好的数据源对象，这就是HiKari。通过启动日志可以查看到对应的身影。</p><pre class=" language-tex"><code class="language-tex">2021-11-29 09:39:15.202  INFO 12260 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...2021-11-29 09:39:15.208  WARN 12260 --- [           main] com.zaxxer.hikari.util.DriverDataSource  : Registered driver with driverClassName=com.mysql.jdbc.Driver was not found, trying direct instantiation.2021-11-29 09:39:15.551  INFO 12260 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.</code></pre><p>​        上述信息中每一行都有HiKari的身影，如果需要更换数据源，其实只需要两步即可。</p><ol><li><p>导入对应的技术坐标</p></li><li><p>配置使用指定的数据源类型</p><p> 下面就切换一下数据源对象</p></li></ol><p><strong>步骤①</strong>：导入对应的坐标（注意，是坐标，此处不是starter）</p><pre class=" language-XML"><code class="language-XML"><dependencies>    <dependency>        <groupId>com.alibaba</groupId>        <artifactId>druid</artifactId>        <version>1.1.16</version>    </dependency></dependencies></code></pre><p><strong>步骤②</strong>：修改配置，在数据源配置中有一个type属性，专用于指定数据源类型</p><pre class=" language-YAML"><code class="language-YAML">spring:  datasource:    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC    username: root    password: root    type: com.alibaba.druid.pool.DruidDataSource</code></pre><p>​        这里其实要提出一个问题的，目前的数据源配置格式是一个通用格式，不管你换什么数据源都可以用这种形式进行配置。但是新的问题又来了，如果对数据源进行个性化的配置，例如配置数据源对应的连接数量，这个时候就有新的问题了。每个数据源技术对应的配置名称都一样吗？肯定不是啊，各个厂商不可能提前商量好都写一样的名字啊，怎么办？就要使用专用的配置格式了。这个时候上面这种通用格式就不能使用了，怎么办？还能怎么办？按照SpringBoot整合其他技术的通用规则来套啊，导入对应的starter，进行相应的配置即可。</p><p><strong>步骤①</strong>：导入对应的starter</p><pre class=" language-XML"><code class="language-XML"><dependencies>    <dependency>        <groupId>com.alibaba</groupId>        <artifactId>druid-spring-boot-starter</artifactId>        <version>1.2.6</version>    </dependency></dependencies></code></pre><p><strong>步骤②</strong>：修改配置</p><pre class=" language-YAML"><code class="language-YAML">spring:  datasource:    druid:      driver-class-name: com.mysql.cj.jdbc.Driver      url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC      username: root      password: root</code></pre><p>​        注意观察，配置项中，在datasource下面并不是直接配置url这些属性的，而是先配置了一个druid节点，然后再配置的url这些东西。言外之意，url这个属性是druid下面的属性，那你能想到什么？除了这4个常规配置外，还有druid专用的其他配置。通过提示功能可以打开druid相关的配置查阅</p><img src="img\image-20211129112610729.png" alt="image-20211129112610729" style="zoom:80%;" /><p>​    与druid相关的配置超过200条以上，这就告诉你，如果想做druid相关的配置，使用这种格式就可以了，这里就不展开描述了，太多了。</p><p>​    这是我们做的第4个技术的整合方案，还是那两句话：<font color="#ff0000"><b>导入对应starter，使用对应配置</b></font>。没了，SpringBoot整合其他技术就这么简单粗暴。</p><p><strong>总结</strong></p><ol><li>整合Druid需要导入Druid对应的starter</li><li>根据Druid提供的配置方式进行配置</li><li>整合第三方技术通用方式<ul><li>导入对应的starter</li><li>根据提供的配置格式，配置非默认值对应的配置项</li></ul></li></ol><h3 id="JC-3-5-SSMP整合综合案例"><a href="#JC-3-5-SSMP整合综合案例" class="headerlink" title="JC-3-5.SSMP整合综合案例"></a>JC-3-5.SSMP整合综合案例</h3><p>​        SpringBoot能够整合的技术太多太多了，对于初学者来说慢慢来，一点点掌握。前面咱们做了4个整合了，下面就通过一个稍微综合一点的案例，将所有知识贯穿起来，同时做一个小功能，体会一下。不过有言在先，这个案例制作的时候，你可能会有这种感觉，说好的SpringBoot整合其他技术的案例，为什么感觉SpringBoot整合其他技术的身影不多呢？因为这东西书写太简单了，简单到瞬间写完，大量的时间做的不是这些整合工作。</p><p>​        先看一下这个案例的最终效果</p><p><strong>主页面</strong></p><p><img src="img%5Cimage-20211129113447844.png" alt="image-20211129113447844"></p><p><strong>添加</strong></p><p><img src="img%5Cimage-20211129113522459.png" alt="image-20211129113522459"></p><p><strong>删除</strong></p><p><img src="img%5Cimage-20211129113550829.png" alt="image-20211129113550829"></p><p><strong>修改</strong></p><p><img src="img%5Cimage-20211129113610966.png" alt="image-20211129113610966"></p><p><strong>分页</strong></p><p><img src="img%5Cimage-20211129113628969.png" alt="image-20211129113628969"></p><p><strong>条件查询</strong></p><p><img src="img%5Cimage-20211129113650369.png" alt="image-20211129113650369"></p><p>​    整体案例中需要采用的技术如下，先了解一下，做到哪一个说哪一个</p><ol><li>实体类开发————使用Lombok快速制作实体类</li><li>Dao开发————整合MyBatisPlus，制作数据层测试</li><li>Service开发————基于MyBatisPlus进行增量开发，制作业务层测试类</li><li>Controller开发————基于Restful开发，使用PostMan测试接口功能</li><li>Controller开发————前后端开发协议制作</li><li>页面开发————基于VUE+ElementUI制作，前后端联调，页面数据处理，页面消息处理<ul><li>列表</li><li>新增</li><li>修改</li><li>删除</li><li>分页</li><li>查询</li></ul></li><li>项目异常处理</li><li>按条件查询————页面功能调整、Controller修正功能、Service修正功能</li></ol><p>​        可以看的出来，东西还是很多的，希望通过这个案例，各位小伙伴能够完成基础开发的技能训练。整体开发过程采用做一层测一层的形式进行，过程完整，战线较长，希望各位能跟紧进度，完成这个小案例的制作。</p><h4 id="0-模块创建"><a href="#0-模块创建" class="headerlink" title="0.模块创建"></a>0.模块创建</h4><p>​        对于这个案例如果按照企业开发的形式进行应该制作后台微服务，前后端分离的开发。</p><img src="img\image-20211129114306062.png" alt="image-20211129114306062" style="zoom:80%;" /><p>​        我知道这个对初学的小伙伴要求太高了，咱们简化一下。后台做单体服务器，前端不使用前后端分离的制作了。</p><img src="img\image-20211129114328967.png" alt="image-20211129114328967" style="zoom:80%;" /><p>​        一个服务器即充当后台服务调用，又负责前端页面展示，降低学习的门槛。</p><p>​        下面我们创建一个新的模块，加载要使用的技术对应的starter，修改配置文件格式为yml格式，并把web访问端口先设置成80。</p><p><strong>pom.xml</strong></p><pre class=" language-XML"><code class="language-XML"><dependencies>    <dependency>        <groupId>org.springframework.boot</groupId>        <artifactId>spring-boot-starter-web</artifactId>    </dependency>    <dependency>        <groupId>org.springframework.boot</groupId>        <artifactId>spring-boot-starter-test</artifactId>        <scope>test</scope>    </dependency></dependencies></code></pre><p><strong>application.yml</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre><h4 id="1-实体类开发"><a href="#1-实体类开发" class="headerlink" title="1.实体类开发"></a>1.实体类开发</h4><p>​        本案例对应的模块表结构如下：</p><pre class=" language-tex"><code class="language-tex">-- ------------------------------ Table structure for tbl_book-- ----------------------------DROP TABLE IF EXISTS `tbl_book`;CREATE TABLE `tbl_book`  (  `id` int(11) NOT NULL AUTO_INCREMENT,  `type` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,  `name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB AUTO_INCREMENT = 51 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;-- ------------------------------ Records of tbl_book-- ----------------------------INSERT INTO `tbl_book` VALUES (1, '计算机理论', 'Spring实战 第5版', 'Spring入门经典教程，深入理解Spring原理技术内幕');INSERT INTO `tbl_book` VALUES (2, '计算机理论', 'Spring 5核心原理与30个类手写实战', '十年沉淀之作，手写Spring精华思想');INSERT INTO `tbl_book` VALUES (3, '计算机理论', 'Spring 5 设计模式', '深入Spring源码剖析Spring源码中蕴含的10大设计模式');INSERT INTO `tbl_book` VALUES (4, '计算机理论', 'Spring MVC+MyBatis开发从入门到项目实战', '全方位解析面向Web应用的轻量级框架，带你成为Spring MVC开发高手');INSERT INTO `tbl_book` VALUES (5, '计算机理论', '轻量级Java Web企业应用实战', '源码级剖析Spring框架，适合已掌握Java基础的读者');INSERT INTO `tbl_book` VALUES (6, '计算机理论', 'Java核心技术 卷I 基础知识（原书第11版）', 'Core Java 第11版，Jolt大奖获奖作品，针对Java SE9、10、11全面更新');INSERT INTO `tbl_book` VALUES (7, '计算机理论', '深入理解Java虚拟机', '5个维度全面剖析JVM，大厂面试知识点全覆盖');INSERT INTO `tbl_book` VALUES (8, '计算机理论', 'Java编程思想（第4版）', 'Java学习必读经典,殿堂级著作！赢得了全球程序员的广泛赞誉');INSERT INTO `tbl_book` VALUES (9, '计算机理论', '零基础学Java（全彩版）', '零基础自学编程的入门图书，由浅入深，详解Java语言的编程思想和核心技术');INSERT INTO `tbl_book` VALUES (10, '市场营销', '直播就该这么做：主播高效沟通实战指南', '李子柒、李佳琦、薇娅成长为网红的秘密都在书中');INSERT INTO `tbl_book` VALUES (11, '市场营销', '直播销讲实战一本通', '和秋叶一起学系列网络营销书籍');INSERT INTO `tbl_book` VALUES (12, '市场营销', '直播带货：淘宝、天猫直播从新手到高手', '一本教你如何玩转直播的书，10堂课轻松实现带货月入3W+');</code></pre><p>​        根据上述表结构，制作对应的实体类</p><p><strong>实体类</strong></p><pre class=" language-JAVA"><code class="language-JAVA">public class Book &#123;    private Integer id;    private String type;    private String name;    private String description;&#125;</code></pre><p>​        实体类的开发可以自动通过工具手工生成get/set方法，然后覆盖toString()方法，方便调试，等等。不过这一套操作书写很繁琐，有对应的工具可以帮助我们简化开发，介绍一个小工具，lombok。</p><p>​        Lombok，一个Java类库，提供了一组注解，简化POJO实体类开发，SpringBoot目前默认集成了lombok技术，并提供了对应的版本控制，所以只需要提供对应的坐标即可，在pom.xml中添加lombok的坐标。</p><pre class=" language-XML"><code class="language-XML"><dependencies>    <!--lombok-->    <dependency>        <groupId>org.projectlombok</groupId>        <artifactId>lombok</artifactId>    </dependency></dependencies></code></pre><p>​        使用lombok可以通过一个注解@Data完成一个实体类对应的getter，setter，toString，equals，hashCode等操作的快速添加</p><pre class=" language-JAVA"><code class="language-JAVA">import lombok.Data;@Datapublic class Book &#123;    private Integer id;    private String type;    private String name;    private String description;&#125;</code></pre><p>​        到这里实体类就做好了，是不是比不使用lombok简化好多，这种工具在Java开发中还有N多，后面遇到了能用的实用开发技术时，在不增加各位小伙伴大量的学习时间的情况下，尽量多给大家介绍一些。</p><p><strong>总结</strong></p><ol><li>实体类制作</li><li>使用lombok简化开发<ul><li>导入lombok无需指定版本，由SpringBoot提供版本</li><li>@Data注解</li></ul></li></ol><h4 id="2-数据层开发——基础CRUD"><a href="#2-数据层开发——基础CRUD" class="headerlink" title="2.数据层开发——基础CRUD"></a>2.数据层开发——基础CRUD</h4><p>​        数据层开发本次使用MyBatisPlus技术，数据源使用前面学习的Druid，学都学了都用上。</p><p><strong>步骤①</strong>：导入MyBatisPlus与Druid对应的starter，当然mysql的驱动不能少</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤②</strong>：配置数据库连接相关的数据源配置</p><pre class=" language-YAML"><code class="language-YAML">server:  port: 80spring:  datasource:    druid:      driver-class-name: com.mysql.cj.jdbc.Driver      url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC      username: root      password: root</code></pre><p><strong>步骤③</strong>：使用MyBatisPlus的标准通用接口BaseMapper加速开发，别忘了@Mapper和泛型的指定</p><pre class=" language-JAVA"><code class="language-JAVA">@Mapperpublic interface BookDao extends BaseMapper<Book> &#123;&#125;</code></pre><p><strong>步骤④</strong>：制作测试类测试结果，这个测试类制作是个好习惯，不过在企业开发中往往都为加速开发跳过此步，且行且珍惜吧</p><pre class=" language-JAVA"><code class="language-JAVA">package com.itheima.dao;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.itheima.domain.Book;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;@SpringBootTestpublic class BookDaoTestCase &#123;    @Autowired    private BookDao bookDao;    @Test    void testGetById()&#123;        System.out.println(bookDao.selectById(1));    &#125;    @Test    void testSave()&#123;        Book book = new Book();        book.setType("测试数据123");        book.setName("测试数据123");        book.setDescription("测试数据123");        bookDao.insert(book);    &#125;    @Test    void testUpdate()&#123;        Book book = new Book();        book.setId(17);        book.setType("测试数据abcdefg");        book.setName("测试数据123");        book.setDescription("测试数据123");        bookDao.updateById(book);    &#125;    @Test    void testDelete()&#123;        bookDao.deleteById(16);    &#125;    @Test    void testGetAll()&#123;        bookDao.selectList(null);    &#125;&#125;</code></pre><p><font color="#f0f"><b>温馨提示</b></font></p><p>​        MyBatisPlus技术默认的主键生成策略为雪花算法，生成的主键ID长度较大，和目前的数据库设定规则不相符，需要配置一下使MyBatisPlus使用数据库的主键生成策略，方式嘛还是老一套，做配置。在application.yml中添加对应配置即可，具体如下</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">druid</span><span class="token punctuation">:</span>      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/ssm_db<span class="token punctuation">?</span>serverTimezone=UTC      <span class="token key atrule">username</span><span class="token punctuation">:</span> root      <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> tbl_        <span class="token comment" spellcheck="true">#设置表名通用前缀</span>      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto                <span class="token comment" spellcheck="true">#设置主键id字段的生成策略为参照数据库设定的策略，当前数据库设置id生成策略为自增</span></code></pre><h5 id="查看MyBatisPlus运行日志"><a href="#查看MyBatisPlus运行日志" class="headerlink" title="查看MyBatisPlus运行日志"></a>查看MyBatisPlus运行日志</h5><p>​        在进行数据层测试的时候，因为基础的CRUD操作均由MyBatisPlus给我们提供了，所以就出现了一个局面，开发者不需要书写SQL语句了，这样程序运行的时候总有一种感觉，一切的一切都是黑盒的，作为开发者我们啥也不知道就完了。如果程序正常运行还好，如果报错了，这个时候就很崩溃，你甚至都不知道从何下手，因为传递参数、封装SQL语句这些操作完全不是你开发出来的，所以查看执行期运行的SQL语句就成为当务之急。</p><p>​        SpringBoot整合MyBatisPlus的时候充分考虑到了这点，通过配置的形式就可以查阅执行期SQL语句，配置如下</p><pre class=" language-YAML"><code class="language-YAML">mybatis-plus:  global-config:    db-config:      table-prefix: tbl_      id-type: auto  configuration:    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</code></pre><p>​        再来看运行结果，此时就显示了运行期执行SQL的情况。</p><pre class=" language-tex"><code class="language-tex">Creating a new SqlSessionSqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@2c9a6717] was not registered for synchronization because synchronization is not activeJDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@6ca30b8a] will not be managed by Spring==>  Preparing: SELECT id,type,name,description FROM tbl_book==> Parameters: <==    Columns: id, type, name, description<==        Row: 1, 计算机理论, Spring实战 第5版, Spring入门经典教程，深入理解Spring原理技术内幕<==        Row: 2, 计算机理论, Spring 5核心原理与30个类手写实战, 十年沉淀之作，手写Spring精华思想<==        Row: 3, 计算机理论, Spring 5 设计模式, 深入Spring源码剖析Spring源码中蕴含的10大设计模式<==        Row: 4, 计算机理论, Spring MVC+MyBatis开发从入门到项目实战, 全方位解析面向Web应用的轻量级框架，带你成为Spring MVC开发高手<==        Row: 5, 计算机理论, 轻量级Java Web企业应用实战, 源码级剖析Spring框架，适合已掌握Java基础的读者<==        Row: 6, 计算机理论, Java核心技术 卷I 基础知识（原书第11版）, Core Java 第11版，Jolt大奖获奖作品，针对Java SE9、10、11全面更新<==        Row: 7, 计算机理论, 深入理解Java虚拟机, 5个维度全面剖析JVM，大厂面试知识点全覆盖<==        Row: 8, 计算机理论, Java编程思想（第4版）, Java学习必读经典,殿堂级著作！赢得了全球程序员的广泛赞誉<==        Row: 9, 计算机理论, 零基础学Java（全彩版）, 零基础自学编程的入门图书，由浅入深，详解Java语言的编程思想和核心技术<==        Row: 10, 市场营销, 直播就该这么做：主播高效沟通实战指南, 李子柒、李佳琦、薇娅成长为网红的秘密都在书中<==        Row: 11, 市场营销, 直播销讲实战一本通, 和秋叶一起学系列网络营销书籍<==        Row: 12, 市场营销, 直播带货：淘宝、天猫直播从新手到高手, 一本教你如何玩转直播的书，10堂课轻松实现带货月入3W+<==        Row: 13, 测试类型, 测试数据, 测试描述数据<==        Row: 14, 测试数据update, 测试数据update, 测试数据update<==        Row: 15, -----------------, 测试数据123, 测试数据123<==      Total: 15</code></pre><p>​        其中清晰的标注了当前执行的SQL语句是什么，携带了什么参数，对应的执行结果是什么，所有信息应有尽有。</p><p>​        此处设置的是日志的显示形式，当前配置的是控制台输出，当然还可以由更多的选择，根据需求切换即可</p><img src="img\image-20211129143207295.png" alt="image-20211129143207295" style="zoom:80%;" /><p><strong>总结</strong></p><ol><li><p>手工导入starter坐标（2个），mysql驱动（1个）</p></li><li><p>配置数据源与MyBatisPlus对应的配置</p></li><li><p>开发Dao接口（继承BaseMapper）</p></li><li><p>制作测试类测试Dao功能是否有效</p></li><li><p>使用配置方式开启日志，设置日志输出方式为标准输出即可查阅SQL执行日志</p></li></ol><h4 id="3-数据层开发——分页功能制作"><a href="#3-数据层开发——分页功能制作" class="headerlink" title="3.数据层开发——分页功能制作"></a>3.数据层开发——分页功能制作</h4><p>​        前面仅仅是使用了MyBatisPlus提供的基础CRUD功能，实际上MyBatisPlus给我们提供了几乎所有的基础操作，这一节说一下如何实现数据库端的分页操作。</p><p>​        MyBatisPlus提供的分页操作API如下：</p><pre class=" language-JAVA"><code class="language-JAVA">@Testvoid testGetPage()&#123;    IPage page = new Page(2,5);    bookDao.selectPage(page, null);    System.out.println(page.getCurrent());    System.out.println(page.getSize());    System.out.println(page.getTotal());    System.out.println(page.getPages());    System.out.println(page.getRecords());&#125;</code></pre><p>​        其中selectPage方法需要传入一个封装分页数据的对象，可以通过new的形式创建这个对象，当然这个对象也是MyBatisPlus提供的，别选错包了。创建此对象时需要指定两个分页的基本数据</p><ul><li>当前显示第几页</li><li>每页显示几条数据</li></ul><p>​        可以通过创建Page对象时利用构造方法初始化这两个数据。</p><pre class=" language-JAVA"><code class="language-JAVA">IPage page = new Page(2,5);</code></pre><p>​        将该对象传入到查询方法selectPage后，可以得到查询结果，但是我们会发现当前操作查询结果返回值仍然是一个IPage对象，这又是怎么回事？</p><pre class=" language-JAVA"><code class="language-JAVA">IPage page = bookDao.selectPage(page, null);</code></pre><p>​        原来这个IPage对象中封装了若干个数据，而查询的结果作为IPage对象封装的一个数据存在的，可以理解为查询结果得到后，又塞到了这个IPage对象中，其实还是为了高度的封装，一个IPage描述了分页所有的信息。下面5个操作就是IPage对象中封装的所有信息了。</p><pre class=" language-JAVA"><code class="language-JAVA">@Testvoid testGetPage()&#123;    IPage page = new Page(2,5);    bookDao.selectPage(page, null);    System.out.println(page.getCurrent());        //当前页码值    System.out.println(page.getSize());            //每页显示数    System.out.println(page.getTotal());        //数据总量    System.out.println(page.getPages());        //总页数    System.out.println(page.getRecords());        //详细数据&#125;</code></pre><p>​        到这里就知道这些数据如何获取了，但是当你去执行这个操作时，你会发现并不像我们分析的这样，实际上这个分页功能当前是无效的。为什么这样呢？这个要源于MyBatisPlus的内部机制。</p><p>​        对于MySQL的分页操作使用limit关键字进行，而并不是所有的数据库都使用limit关键字实现的，这个时候MyBatisPlus为了制作的兼容性强，将分页操作设置为基础查询操作的升级版，你可以理解为IPhone6与IPhone6S-PLUS的关系。</p><p>​        基础操作中有查询全部的功能，而在这个基础上只需要升级一下（PLUS）就可以得到分页操作。所以MyBatisPlus将分页操作做成了一个开关，你用分页功能就把开关开启，不用就不需要开启这个开关。而我们现在没有开启这个开关，所以分页操作是没有的。这个开关是通过MyBatisPlus的拦截器的形式存在的，其中的原理这里不分析了，有兴趣的小伙伴可以学习MyBatisPlus这门课程进行详细解读。具体设置方式如下：</p><p><strong>定义MyBatisPlus拦截器并将其设置为Spring管控的bean</strong></p><pre class=" language-JAVA"><code class="language-JAVA">@Configurationpublic class MPConfig &#123;    @Bean    public MybatisPlusInterceptor mybatisPlusInterceptor()&#123;        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();        interceptor.addInnerInterceptor(new PaginationInnerInterceptor());        return interceptor;    &#125;&#125;</code></pre><p>​        上述代码第一行是创建MyBatisPlus的拦截器栈，这个时候拦截器栈中没有具体的拦截器，第二行是初始化了分页拦截器，并添加到拦截器栈中。如果后期开发其他功能，需要添加全新的拦截器，按照第二行的格式继续add进去新的拦截器就可以了。</p><p><strong>总结</strong></p><ol><li>使用IPage封装分页数据</li><li>分页操作依赖MyBatisPlus分页拦截器实现功能</li><li>借助MyBatisPlus日志查阅执行SQL语句</li></ol><h4 id="4-数据层开发——条件查询功能制作"><a href="#4-数据层开发——条件查询功能制作" class="headerlink" title="4.数据层开发——条件查询功能制作"></a>4.数据层开发——条件查询功能制作</h4><p>​        除了分页功能，MyBatisPlus还提供有强大的条件查询功能。以往我们写条件查询要自己动态拼写复杂的SQL语句，现在简单了，MyBatisPlus将这些操作都制作成API接口，调用一个又一个的方法就可以实现各种条件的拼装。这里给大家普及一下基本格式，详细的操作还是到MyBatisPlus的课程中查阅吧。</p><p>​        下面的操作就是执行一个模糊匹配对应的操作，由like条件书写变为了like方法的调用。</p><pre class=" language-JAVA"><code class="language-JAVA">@Testvoid testGetBy()&#123;    QueryWrapper<Book> qw = new QueryWrapper<>();    qw.like("name","Spring");    bookDao.selectList(qw);&#125;</code></pre><p>​        其中第一句QueryWrapper对象是一个用于封装查询条件的对象，该对象可以动态使用API调用的方法添加条件，最终转化成对应的SQL语句。第二句就是一个条件了，需要什么条件，使用QueryWapper对象直接调用对应操作即可。比如做大于小于关系，就可以使用lt或gt方法，等于使用eq方法，等等，此处不做更多的解释了。</p><p>​        这组API使用还是比较简单的，但是关于属性字段名的书写存在着安全隐患，比如查询字段name，当前是以字符串的形态书写的，万一写错，编译器还没有办法发现，只能将问题抛到运行器通过异常堆栈告诉开发者，不太友好。</p><p>​        MyBatisPlus针对字段检查进行了功能升级，全面支持Lambda表达式，就有了下面这组API。由QueryWrapper对象升级为LambdaQueryWrapper对象，这下就避免了上述问题的出现。</p><pre class=" language-JAVA"><code class="language-JAVA">@Testvoid testGetBy2()&#123;    String name = "1";    LambdaQueryWrapper<Book> lqw = new LambdaQueryWrapper<Book>();    lqw.like(Book::getName,name);    bookDao.selectList(lqw);&#125;</code></pre><p>​        为了便于开发者动态拼写SQL，防止将null数据作为条件使用，MyBatisPlus还提供了动态拼装SQL的快捷书写方式。</p><pre class=" language-JAVA"><code class="language-JAVA">@Testvoid testGetBy2()&#123;    String name = "1";    LambdaQueryWrapper<Book> lqw = new LambdaQueryWrapper<Book>();    //if(name != null) lqw.like(Book::getName,name);        //方式一：JAVA代码控制    lqw.like(name != null,Book::getName,name);                //方式二：API接口提供控制开关    bookDao.selectList(lqw);&#125;</code></pre><p>​        其实就是个格式，没有区别。关于MyBatisPlus的基础操作就说到这里吧，如果这一块知识不太熟悉的小伙伴建议还是完整的学习一下MyBatisPlus的知识吧，这里只是蜻蜓点水的用了几个操作而已。</p><p><strong>总结</strong></p><ol><li><p>使用QueryWrapper对象封装查询条件</p></li><li><p>推荐使用LambdaQueryWrapper对象</p></li><li><p>所有查询操作封装成方法调用</p></li><li><p>查询条件支持动态条件拼装</p></li></ol><h4 id="5-业务层开发"><a href="#5-业务层开发" class="headerlink" title="5.业务层开发"></a>5.业务层开发</h4><p>​        数据层开发告一段落，下面进行业务层开发，其实标准业务层开发很多初学者认为就是调用数据层，怎么说呢？这个理解是没有大问题的，更精准的说法应该是<font color="#ff0000"><b>组织业务逻辑功能，并根据业务需求，对数据持久层发起调用</b></font>。有什么差别呢？目标是为了组织出符合需求的业务逻辑功能，至于调不调用数据层还真不好说，有需求就调用，没有需求就不调用。</p><p>​        一个常识性的知识普及一下，业务层的方法名定义一定要与业务有关，例如登录操作</p><pre class=" language-JAVA"><code class="language-JAVA">login(String username,String password);</code></pre><p>​        而数据层的方法名定义一定与业务无关，是一定，不是可能，也不是有可能，例如根据用户名密码查询</p><pre class=" language-JAVA"><code class="language-JAVA">selectByUserNameAndPassword(String username,String password);</code></pre><p>​        我们在开发的时候是可以根据完成的工作不同划分成不同职能的开发团队的。比如一个哥们制作数据层，他就可以不知道业务是什么样子，拿到的需求文档要求可能是这样的</p><pre class=" language-tex"><code class="language-tex">接口：传入用户名与密码字段，查询出对应结果，结果是单条数据接口：传入ID字段，查询出对应结果，结果是单条数据接口：传入离职字段，查询出对应结果，结果是多条数据</code></pre><p>​        但是进行业务功能开发的哥们，拿到的需求文档要求差别就很大</p><pre class=" language-tex"><code class="language-tex">接口：传入用户名与密码字段，对用户名字段做长度校验，4-15位，对密码字段做长度校验，8到24位，对密码字段做特殊字符校验，不允许存在空格，查询结果为对象。如果为null，返回BusinessException，封装消息码INFO_LOGON_USERNAME_PASSWORD_ERROR</code></pre><p>​        你比较一下，能是一回事吗？差别太大了，所以说业务层方法定义与数据层方法定义差异化很大，只不过有些入门级的开发者手懒或者没有使用过公司相关的ISO标准化文档而已。</p><p>​        多余的话不说了，咱们做案例就简单制作了，业务层接口定义如下：</p><pre class=" language-JAVA"><code class="language-JAVA">public interface BookService &#123;    Boolean save(Book book);    Boolean update(Book book);    Boolean delete(Integer id);    Book getById(Integer id);    List<Book> getAll();    IPage<Book> getPage(int currentPage,int pageSize);&#125;</code></pre><p>​        业务层实现类如下，转调数据层即可：</p><pre class=" language-JAVA"><code class="language-JAVA">@Servicepublic class BookServiceImpl implements BookService &#123;    @Autowired    private BookDao bookDao;    @Override    public Boolean save(Book book) &#123;        return bookDao.insert(book) > 0;    &#125;    @Override    public Boolean update(Book book) &#123;        return bookDao.updateById(book) > 0;    &#125;    @Override    public Boolean delete(Integer id) &#123;        return bookDao.deleteById(id) > 0;    &#125;    @Override    public Book getById(Integer id) &#123;        return bookDao.selectById(id);    &#125;    @Override    public List<Book> getAll() &#123;        return bookDao.selectList(null);    &#125;    @Override    public IPage<Book> getPage(int currentPage, int pageSize) &#123;        IPage page = new Page(currentPage,pageSize);        bookDao.selectPage(page,null);        return page;    &#125;&#125;</code></pre><p>​        别忘了对业务层接口进行测试，测试类如下：</p><pre class=" language-JAVA"><code class="language-JAVA">@SpringBootTestpublic class BookServiceTest &#123;    @Autowired    private IBookService bookService;    @Test    void testGetById()&#123;        System.out.println(bookService.getById(4));    &#125;    @Test    void testSave()&#123;        Book book = new Book();        book.setType("测试数据123");        book.setName("测试数据123");        book.setDescription("测试数据123");        bookService.save(book);    &#125;    @Test    void testUpdate()&#123;        Book book = new Book();        book.setId(17);        book.setType("-----------------");        book.setName("测试数据123");        book.setDescription("测试数据123");        bookService.updateById(book);    &#125;    @Test    void testDelete()&#123;        bookService.removeById(18);    &#125;    @Test    void testGetAll()&#123;        bookService.list();    &#125;    @Test    void testGetPage()&#123;        IPage<Book> page = new Page<Book>(2,5);        bookService.page(page);        System.out.println(page.getCurrent());        System.out.println(page.getSize());        System.out.println(page.getTotal());        System.out.println(page.getPages());        System.out.println(page.getRecords());    &#125;&#125;</code></pre><p><strong>总结</strong></p><ol><li>Service接口名称定义成业务名称，并与Dao接口名称进行区分</li><li>制作测试类测试Service功能是否有效</li></ol><h5 id="业务层快速开发"><a href="#业务层快速开发" class="headerlink" title="业务层快速开发"></a>业务层快速开发</h5><p>​        其实MyBatisPlus技术不仅提供了数据层快速开发方案，业务层MyBatisPlus也给了一个通用接口，个人观点不推荐使用，凑合能用吧，其实就是一个封装+继承的思想，代码给出，实际开发慎用。</p><p>​        业务层接口快速开发</p><pre class=" language-JAVA"><code class="language-JAVA">public interface IBookService extends IService<Book> &#123;    //添加非通用操作API接口&#125;</code></pre><p>​        业务层接口实现类快速开发，关注继承的类需要传入两个泛型，一个是数据层接口，另一个是实体类。</p><pre class=" language-JAVA"><code class="language-JAVA">@Servicepublic class BookServiceImpl extends ServiceImpl<BookDao, Book> implements IBookService &#123;    @Autowired    private BookDao bookDao;    //添加非通用操作API&#125;</code></pre><p>​        如果感觉MyBatisPlus提供的功能不足以支撑你的使用需要（其实是一定不能支撑的，因为需求不可能是通用的），在原始接口基础上接着定义新的API接口就行了，此处不再说太多了，就是自定义自己的操作了，但是不要和已有的API接口名冲突即可。</p><p><strong>总结</strong></p><ol><li>使用通用接口（ISerivce<T>）快速开发Service</li><li>使用通用实现类（ServiceImpl&lt;M,T&gt;）快速开发ServiceImpl</li><li>可以在通用接口基础上做功能重载或功能追加</li><li>注意重载时不要覆盖原始操作，避免原始提供的功能丢失</li></ol><h4 id="6-表现层开发"><a href="#6-表现层开发" class="headerlink" title="6.表现层开发"></a>6.表现层开发</h4><p>​        终于做到表现层了，做了这么多都是基础工作。其实你现在回头看看，哪里还有什么SpringBoot的影子？前面1,2步就搞完了。继续完成表现层制作吧，咱们表现层的开发使用基于Restful的表现层接口开发，功能测试通过Postman工具进行。</p><p>​        表现层接口如下:</p><pre class=" language-JAVA"><code class="language-JAVA">@RestController@RequestMapping("/books")public class BookController2 &#123;    @Autowired    private IBookService bookService;    @GetMapping    public List<Book> getAll()&#123;        return bookService.list();    &#125;    @PostMapping    public Boolean save(@RequestBody Book book)&#123;        return bookService.save(book);    &#125;    @PutMapping    public Boolean update(@RequestBody Book book)&#123;        return bookService.modify(book);    &#125;    @DeleteMapping("&#123;id&#125;")    public Boolean delete(@PathVariable Integer id)&#123;        return bookService.delete(id);    &#125;    @GetMapping("&#123;id&#125;")    public Book getById(@PathVariable Integer id)&#123;        return bookService.getById(id);    &#125;    @GetMapping("&#123;currentPage&#125;/&#123;pageSize&#125;")    public IPage<Book> getPage(@PathVariable int currentPage,@PathVariable int pageSize)&#123;        return bookService.getPage(currentPage,pageSize, null);    &#125;&#125;</code></pre><p>​        在使用Postman测试时关注提交类型，对应上即可，不然就会报405的错误码了。</p><p><strong>普通GET请求</strong></p><p><img src="img%5Cimage-20211129152237371.png" alt="image-20211129152237371"></p><p><strong>PUT请求传递json数据，后台实用@RequestBody接收数据</strong></p><p><img src="img%5Cimage-20211129152300177.png" alt="image-20211129152300177"></p><p><strong>GET请求传递路径变量，后台实用@PathVariable接收数据</strong></p><p><img src="img%5Cimage-20211129152320073.png" alt="image-20211129152320073"></p><p><strong>总结</strong></p><ol><li>基于Restful制作表现层接口<ul><li>新增：POST</li><li>删除：DELETE</li><li>修改：PUT</li><li>查询：GET</li></ul></li><li>接收参数<ul><li>实体数据：@RequestBody</li><li>路径变量：@PathVariable</li></ul></li></ol><h4 id="7-表现层消息一致性处理"><a href="#7-表现层消息一致性处理" class="headerlink" title="7.表现层消息一致性处理"></a>7.表现层消息一致性处理</h4><p>​        目前我们通过Postman测试后业务层接口功能是通的，但是这样的结果给到前端开发者会出现一个小问题。不同的操作结果所展示的数据格式差异化严重。</p><p>​    <strong>增删改操作结果</strong></p><pre class=" language-tex"><code class="language-tex">true</code></pre><p>​    <strong>查询单个数据操作结果</strong></p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"计算机理论"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Spring实战 第5版"</span><span class="token punctuation">,</span>    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Spring入门经典教程"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​    <strong>查询全部数据操作结果</strong></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>    &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"计算机理论"</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Spring实战 第5版"</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Spring入门经典教程"</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"计算机理论"</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Spring 5核心原理与30个类手写实战"</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"十年沉淀之作"</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span></code></pre><p>​        每种不同操作返回的数据格式都不一样，而且还不知道以后还会有什么格式，这样的结果让前端人员看了是很容易让人崩溃的，必须将所有操作的操作结果数据格式统一起来，需要设计表现层返回结果的模型类，用于后端与前端进行数据格式统一，也称为<strong>前后端数据协议</strong></p><pre class=" language-JAVA"><code class="language-JAVA">@Datapublic class R &#123;    private Boolean flag;    private Object data;&#125;</code></pre><p>​        其中flag用于标识操作是否成功，data用于封装操作数据，现在的数据格式就变了</p><pre class=" language-JSON"><code class="language-JSON">&#123;    "flag": true,    "data":&#123;        "id": 1,        "type": "计算机理论",        "name": "Spring实战 第5版",        "description": "Spring入门经典教程"    &#125;&#125;</code></pre><p>​        表现层开发格式也需要转换一下</p><img src="img\image-20211129153301262.png" alt="image-20211129153301262" style="zoom:80%;" /><img src="img\image-20211129153319052.png" alt="image-20211129153319052" style="zoom:80%;" /><img src="img\image-20211129153332499.png" alt="image-20211129153332499" style="zoom:80%;" /><p>​        结果这么一折腾，全格式统一，现在后端发送给前端的数据格式就统一了，免去了不少前端解析数据的烦恼。</p><p><strong>总结</strong></p><ol><li><p>设计统一的返回值结果类型便于前端开发读取数据</p></li><li><p>返回值结果类型可以根据需求自行设定，没有固定格式</p></li><li><p>返回值结果模型类用于后端与前端进行数据格式统一，也称为前后端数据协议</p></li></ol><h4 id="8-前后端联通性测试"><a href="#8-前后端联通性测试" class="headerlink" title="8.前后端联通性测试"></a>8.前后端联通性测试</h4><p>​        后端的表现层接口开发完毕，就可以进行前端的开发了。</p><p>​        将前端人员开发的页面保存到lresources目录下的static目录中，建议执行maven的clean生命周期，避免缓存的问题出现。</p><p>​    <img src="img\image-20211129153831990.png" alt="image-20211129153831990" style="zoom:67%;" /></p><p>​        在进行具体的功能开发之前，先做联通性的测试，通过页面发送异步提交（axios），这一步调试通过后再进行进一步的功能开发。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//列表</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre><p>​        只要后台代码能够正常工作，前端能够在日志中接收到数据，就证明前后端是通的，也就可以进行下一步的功能开发了。</p><p><strong>总结</strong></p><ol><li>单体项目中页面放置在resources/static目录下</li><li>created钩子函数用于初始化页面时发起调用</li><li>页面使用axios发送异步请求获取数据后确认前后端是否联通</li></ol><h4 id="9-页面基础功能开发"><a href="#9-页面基础功能开发" class="headerlink" title="9.页面基础功能开发"></a>9.页面基础功能开发</h4><h5 id="F-1-列表功能（非分页版）"><a href="#F-1-列表功能（非分页版）" class="headerlink" title="F-1.列表功能（非分页版）"></a>F-1.列表功能（非分页版）</h5><p>​        列表功能主要操作就是加载完数据，将数据展示到页面上，此处要利用VUE的数据模型绑定，发送请求得到数据，然后页面上读取指定数据即可。</p><p>​        <strong>页面数据模型定义</strong></p><pre class=" language-js"><code class="language-js">data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    dataList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//当前页要展示的列表数据</span>    <span class="token operator">...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre><p>​        异步请求获取数据</p><pre class=" language-JS"><code class="language-JS">//列表getAll() &#123;    axios.get("/books").then((res)=>&#123;        this.dataList = res.data.data;    &#125;);&#125;,</code></pre><p>​        这样在页面加载时就可以获取到数据，并且由VUE将数据展示到页面上了。</p><p>总结：</p><ol><li>将查询数据返回到页面，利用前端数据绑定进行数据展示</li></ol><h5 id="F-2-添加功能"><a href="#F-2-添加功能" class="headerlink" title="F-2.添加功能"></a>F-2.添加功能</h5><p>​        添加功能用于收集数据的表单是通过一个弹窗展示的，因此在添加操作前首先要进行弹窗的展示，添加后隐藏弹窗即可。因为这个弹窗一直存在，因此当页面加载时首先设置这个弹窗为不可显示状态，需要展示，切换状态即可。</p><p>​        <strong>默认状态</strong></p><pre class=" language-js"><code class="language-js">data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    dialogFormVisible<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//添加表单是否可见</span>    <span class="token operator">...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre><p>​        <strong>切换为显示状态</strong></p><pre class=" language-JS"><code class="language-JS">//弹出添加窗口handleCreate() &#123;    this.dialogFormVisible = true;&#125;,</code></pre><p>​        由于每次添加数据都是使用同一个弹窗录入数据，所以每次操作的痕迹将在下一次操作时展示出来，需要在每次操作之前清理掉上次操作的痕迹。</p><p>​        <strong>定义清理数据操作</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//重置表单</span><span class="token function">resetForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>formData <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre><p>​        <strong>切换弹窗状态时清理数据</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//弹出添加窗口</span><span class="token function">handleCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dialogFormVisible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resetForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre><p>​        至此准备工作完成，下面就要调用后台完成添加操作了。</p><p>​        <strong>添加操作</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//添加</span>handleAdd <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发送异步请求</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>formData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果操作成功，关闭弹层，显示数据</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>dialogFormVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"添加失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre><ol><li>将要保存的数据传递到后台，通过post请求的第二个参数传递json数据到后台</li><li>根据返回的操作结果决定下一步操作<ul><li>如何是true就关闭添加窗口，显示添加成功的消息</li><li>如果是false保留添加窗口，显示添加失败的消息</li></ul></li><li>无论添加是否成功，页面均进行刷新，动态加载数据（对getAll操作发起调用）</li></ol><p>​        <strong>取消添加操作</strong></p><pre class=" language-JS"><code class="language-JS">//取消cancel()&#123;    this.dialogFormVisible = false;    this.$message.info("操作取消");&#125;,</code></pre><p><strong>总结</strong></p><ol><li>请求方式使用POST调用后台对应操作</li><li>添加操作结束后动态刷新页面加载数据</li><li>根据操作结果不同，显示对应的提示信息</li><li>弹出添加Div时清除表单数据</li></ol><h5 id="F-3-删除功能"><a href="#F-3-删除功能" class="headerlink" title="F-3.删除功能"></a>F-3.删除功能</h5><p>​        模仿添加操作制作删除功能，差别之处在于删除操作仅传递一个待删除的数据id到后台即可。</p><p>​        <strong>删除操作</strong></p><pre class=" language-JS"><code class="language-JS">// 删除handleDelete(row) &#123;    axios.delete("/books/"+row.id).then((res)=>&#123;        if(res.data.flag)&#123;            this.$message.success("删除成功");        &#125;else&#123;            this.$message.error("删除失败");        &#125;    &#125;).finally(()=>&#123;        this.getAll();    &#125;);&#125;,</code></pre><p>​        <strong>删除操作提示信息</strong></p><pre class=" language-JS"><code class="language-JS">// 删除handleDelete(row) &#123;    //1.弹出提示框    this.$confirm("此操作永久删除当前数据，是否继续？","提示",&#123;        type:'info'    &#125;).then(()=>&#123;        //2.做删除业务        axios.delete("/books/"+row.id).then((res)=>&#123;               if(res.data.flag)&#123;                this.$message.success("删除成功");            &#125;else&#123;                this.$message.error("删除失败");            &#125;        &#125;).finally(()=>&#123;            this.getAll();        &#125;);    &#125;).catch(()=>&#123;        //3.取消删除        this.$message.info("取消删除操作");    &#125;);&#125;，    </code></pre><p><strong>总结</strong></p><ol><li>请求方式使用Delete调用后台对应操作</li><li>删除操作需要传递当前行数据对应的id值到后台</li><li>删除操作结束后动态刷新页面加载数据</li><li>根据操作结果不同，显示对应的提示信息</li><li>删除操作前弹出提示框避免误操作</li></ol><h5 id="F-4-修改功能"><a href="#F-4-修改功能" class="headerlink" title="F-4.修改功能"></a>F-4.修改功能</h5><p>​        修改功能可以说是列表功能、删除功能与添加功能的合体。几个相似点如下：</p><ol><li><p>页面也需要有一个弹窗用来加载修改的数据，这一点与添加相同，都是要弹窗</p></li><li><p>弹出窗口中要加载待修改的数据，而数据需要通过查询得到，这一点与查询全部相同，都是要查数据</p></li><li><p>查询操作需要将要修改的数据id发送到后台，这一点与删除相同，都是传递id到后台</p></li><li><p>查询得到数据后需要展示到弹窗中，这一点与查询全部相同，都是要通过数据模型绑定展示数据</p></li><li><p>修改数据时需要将被修改的数据传递到后台，这一点与添加相同，都是要传递数据</p><p>所以整体上来看，修改功能就是前面几个功能的大合体</p><p><strong>查询并展示数据</strong></p></li></ol><pre class=" language-JS"><code class="language-JS">//弹出编辑窗口handleUpdate(row) &#123;    axios.get("/books/"+row.id).then((res)=>&#123;        if(res.data.flag)&#123;            //展示弹层，加载数据            this.formData = res.data.data;            this.dialogFormVisible4Edit = true;        &#125;else&#123;            this.$message.error("数据同步失败，自动刷新");        &#125;    &#125;);&#125;,</code></pre><p>​        <strong>修改操作</strong></p><pre class=" language-JS"><code class="language-JS">//修改handleEdit() &#123;    axios.put("/books",this.formData).then((res)=>&#123;        //如果操作成功，关闭弹层并刷新页面        if(res.data.flag)&#123;            this.dialogFormVisible4Edit = false;            this.$message.success("修改成功");        &#125;else &#123;            this.$message.error("修改失败，请重试");        &#125;    &#125;).finally(()=>&#123;        this.getAll();    &#125;);&#125;,</code></pre><p><strong>总结</strong></p><ol><li>加载要修改数据通过传递当前行数据对应的id值到后台查询数据（同删除与查询全部）</li><li>利用前端双向数据绑定将查询到的数据进行回显（同查询全部）</li><li>请求方式使用PUT调用后台对应操作（同新增传递数据）</li><li>修改操作结束后动态刷新页面加载数据（同新增）</li><li>根据操作结果不同，显示对应的提示信息（同新增）</li></ol><p>​    </p><h4 id="10-业务消息一致性处理"><a href="#10-业务消息一致性处理" class="headerlink" title="10.业务消息一致性处理"></a>10.业务消息一致性处理</h4><p>​        目前的功能制作基本上达成了正常使用的情况，什么叫正常使用呢？也就是这个程序不出BUG，如果我们搞一个BUG出来，你会发现程序马上崩溃掉。比如后台手工抛出一个异常，看看前端接收到的数据什么样子。</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"timestamp"</span><span class="token operator">:</span> <span class="token string">"2021-09-15T03:27:31.038+00:00"</span><span class="token punctuation">,</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>    <span class="token property">"error"</span><span class="token operator">:</span> <span class="token string">"Internal Server Error"</span><span class="token punctuation">,</span>    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"/books"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        面对这种情况，前端的同学又不会了，这又是什么格式？怎么和之前的格式不一样？</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"flag"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"计算机理论"</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Spring实战 第5版"</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Spring入门经典教程"</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        看来不仅要对正确的操作数据格式做处理，还要对错误的操作数据格式做同样的格式处理。</p><p>​        首先在当前的数据结果中添加消息字段，用来兼容后台出现的操作消息。</p><pre class=" language-JAVA"><code class="language-JAVA">@Datapublic class R&#123;    private Boolean flag;    private Object data;    private String msg;        //用于封装消息&#125;</code></pre><p>​        后台代码也要根据情况做处理，当前是模拟的错误。</p><pre class=" language-JAVA"><code class="language-JAVA">@PostMappingpublic R save(@RequestBody Book book) throws IOException &#123;    Boolean flag = bookService.insert(book);    return new R(flag , flag ? "添加成功^_^" : "添加失败-_-!");&#125;</code></pre><p>​        然后在表现层做统一的异常处理，使用SpringMVC提供的异常处理器做统一的异常处理。</p><pre class=" language-JAVA"><code class="language-JAVA">@RestControllerAdvicepublic class ProjectExceptionAdvice &#123;    @ExceptionHandler(Exception.class)    public R doOtherException(Exception ex)&#123;        //记录日志        //发送消息给运维        //发送邮件给开发人员,ex对象发送给开发人员        ex.printStackTrace();        return new R(false,null,"系统错误，请稍后再试！");    &#125;&#125;</code></pre><p>​        页面上得到数据后，先判定是否有后台传递过来的消息，标志就是当前操作是否成功，如果返回操作结果false，就读取后台传递的消息。</p><pre class=" language-JS"><code class="language-JS">//添加handleAdd () &#123;    //发送ajax请求    axios.post("/books",this.formData).then((res)=>&#123;        //如果操作成功，关闭弹层，显示数据        if(res.data.flag)&#123;            this.dialogFormVisible = false;            this.$message.success("添加成功");        &#125;else &#123;            this.$message.error(res.data.msg);            //消息来自于后台传递过来，而非固定内容        &#125;    &#125;).finally(()=>&#123;        this.getAll();    &#125;);&#125;,</code></pre><p><strong>总结</strong></p><ol><li>使用注解@RestControllerAdvice定义SpringMVC异常处理器用来处理异常的</li><li>异常处理器必须被扫描加载，否则无法生效</li><li>表现层返回结果的模型类中添加消息属性用来传递消息到页面</li></ol><p>​    </p><h4 id="11-页面功能开发"><a href="#11-页面功能开发" class="headerlink" title="11.页面功能开发"></a>11.页面功能开发</h4><h5 id="F-5-分页功能"><a href="#F-5-分页功能" class="headerlink" title="F-5.分页功能"></a>F-5.分页功能</h5><p>​        分页功能的制作用于替换前面的查询全部，其中要使用到elementUI提供的分页组件。</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>分页组件<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"pagination-container"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>pagination        <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"pagiantion"</span>        @current<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">"handleCurrentChange"</span>        <span class="token punctuation">:</span>current<span class="token operator">-</span>page<span class="token operator">=</span><span class="token string">"pagination.currentPage"</span>        <span class="token punctuation">:</span>page<span class="token operator">-</span>size<span class="token operator">=</span><span class="token string">"pagination.pageSize"</span>        layout<span class="token operator">=</span><span class="token string">"total, prev, pager, next, jumper"</span>        <span class="token punctuation">:</span>total<span class="token operator">=</span><span class="token string">"pagination.total"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>pagination<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>​        为了配合分页组件，封装分页对应的数据模型。</p><pre class=" language-js"><code class="language-js">data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    pagination<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//分页相关模型数据</span>        currentPage<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//当前页码</span>        pageSize<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//每页显示的记录数</span>        total<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//总记录数</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre><p>​        修改查询全部功能为分页查询，通过路径变量传递页码信息参数。</p><pre class=" language-JS"><code class="language-JS">getAll() &#123;    axios.get("/books/"+this.pagination.currentPage+"/"+this.pagination.pageSize).then((res) => &#123;    &#125;);&#125;,</code></pre><p>​        后台提供对应的分页功能。</p><pre class=" language-JAVA"><code class="language-JAVA">@GetMapping("/&#123;currentPage&#125;/&#123;pageSize&#125;")public R getAll(@PathVariable Integer currentPage,@PathVariable Integer pageSize)&#123;    IPage<Book> pageBook = bookService.getPage(currentPage, pageSize);    return new R(null != pageBook ,pageBook);&#125;</code></pre><p>​        页面根据分页操作结果读取对应数据，并进行数据模型绑定。</p><pre class=" language-JS"><code class="language-JS">getAll() &#123;    axios.get("/books/"+this.pagination.currentPage+"/"+this.pagination.pageSize).then((res) => &#123;        this.pagination.total = res.data.data.total;        this.pagination.currentPage = res.data.data.current;        this.pagination.pagesize = res.data.data.size;        this.dataList = res.data.data.records;    &#125;);&#125;,</code></pre><p>​        对切换页码操作设置调用当前分页操作。</p><pre class=" language-JS"><code class="language-JS">//切换页码handleCurrentChange(currentPage) &#123;    this.pagination.currentPage = currentPage;    this.getAll();&#125;,</code></pre><p><strong>总结</strong></p><ol><li>使用el分页组件</li><li>定义分页组件绑定的数据模型</li><li>异步调用获取分页数据</li><li>分页数据页面回显</li></ol><h5 id="F-6-删除功能维护"><a href="#F-6-删除功能维护" class="headerlink" title="F-6.删除功能维护"></a>F-6.删除功能维护</h5><p>​        由于使用了分页功能，当最后一页只有一条数据时，删除操作就会出现BUG，最后一页无数据但是独立展示，对分页查询功能进行后台功能维护，如果当前页码值大于最大页码值，重新执行查询。其实这个问题解决方案很多，这里给出比较简单的一种处理方案。</p><pre class=" language-JAVA"><code class="language-JAVA">@GetMapping("&#123;currentPage&#125;/&#123;pageSize&#125;")public R getPage(@PathVariable int currentPage,@PathVariable int pageSize)&#123;    IPage<Book> page = bookService.getPage(currentPage, pageSize);    //如果当前页码值大于了总页码值，那么重新执行查询操作，使用最大页码值作为当前页码值    if( currentPage > page.getPages())&#123;        page = bookService.getPage((int)page.getPages(), pageSize);    &#125;    return new R(true, page);&#125;</code></pre><h5 id="F-7-条件查询功能"><a href="#F-7-条件查询功能" class="headerlink" title="F-7.条件查询功能"></a>F-7.条件查询功能</h5><p>​        最后一个功能来做条件查询，其实条件查询可以理解为分页查询的时候除了携带分页数据再多带几个数据的查询。这些多带的数据就是查询条件。比较一下不带条件的分页查询与带条件的分页查询差别之处，这个功能就好做了</p><ul><li><p>页面封装的数据：带不带条件影响的仅仅是一次性传递到后台的数据总量，由传递2个分页相关数据转换成2个分页数据加若干个条件</p></li><li><p>后台查询功能：查询时由不带条件，转换成带条件，反正不带条件的时候查询条件对象使用的是null，现在换成具体条件，差别不大</p></li><li><p>查询结果：不管带不带条件，出来的数据只是有数量上的差别，其他都差别，这个可以忽略</p><p>经过上述分析，看来需要在页面发送请求的格式方面做一定的修改，后台的调用数据层操作时发送修改，其他没有区别。</p><p>页面发送请求时，两个分页数据仍然使用路径变量，其他条件采用动态拼装url参数的形式传递。</p><p><strong>页面封装查询条件字段</strong></p><pre class=" language-vue"><code class="language-vue">pagination: &#123;        //分页相关模型数据    currentPage: 1,        //当前页码    pageSize:10,        //每页显示的记录数    total:0,            //总记录数    name: "",    type: "",    description: ""&#125;,</code></pre><p>页面添加查询条件字段对应的数据模型绑定名称</p><pre class=" language-HTML"><code class="language-HTML"><div class="filter-container">    <el-input placeholder="图书类别" v-model="pagination.type" class="filter-item"/>    <el-input placeholder="图书名称" v-model="pagination.name" class="filter-item"/>    <el-input placeholder="图书描述" v-model="pagination.description" class="filter-item"/>    <el-button @click="getAll()" class="dalfBut">查询</el-button>    <el-button type="primary" class="butT" @click="handleCreate()">新建</el-button></div></code></pre><p>将查询条件组织成url参数，添加到请求url地址中，这里可以借助其他类库快速开发，当前使用手工形式拼接，降低学习要求</p><pre class=" language-JS"><code class="language-JS">getAll() &#123;    //1.获取查询条件,拼接查询条件    param = "?name="+this.pagination.name;    param += "&type="+this.pagination.type;    param += "&description="+this.pagination.description;    console.log("-----------------"+ param);    axios.get("/books/"+this.pagination.currentPage+"/"+this.pagination.pageSize+param).then((res) => &#123;        this.dataList = res.data.data.records;    &#125;);&#125;,</code></pre><p>后台代码中定义实体类封查询条件</p><pre class=" language-JAVA"><code class="language-JAVA">@GetMapping("&#123;currentPage&#125;/&#123;pageSize&#125;")public R getAll(@PathVariable int currentPage,@PathVariable int pageSize,Book book) &#123;    System.out.println("参数=====>"+book);    IPage<Book> pageBook = bookService.getPage(currentPage,pageSize);    return new R(null != pageBook ,pageBook);&#125;</code></pre><p>对应业务层接口与实现类进行修正</p><pre class=" language-JAVA"><code class="language-JAVA">public interface IBookService extends IService<Book> &#123;    IPage<Book> getPage(Integer currentPage,Integer pageSize,Book queryBook);&#125;</code></pre><pre class=" language-JAVA"><code class="language-JAVA">@Servicepublic class BookServiceImpl2 extends ServiceImpl<BookDao,Book> implements IBookService &#123;    public IPage<Book> getPage(Integer currentPage,Integer pageSize,Book queryBook)&#123;        IPage page = new Page(currentPage,pageSize);        LambdaQueryWrapper<Book> lqw = new LambdaQueryWrapper<Book>();        lqw.like(Strings.isNotEmpty(queryBook.getName()),Book::getName,queryBook.getName());        lqw.like(Strings.isNotEmpty(queryBook.getType()),Book::getType,queryBook.getType());        lqw.like(Strings.isNotEmpty(queryBook.getDescription()),Book::getDescription,queryBook.getDescription());        return bookDao.selectPage(page,lqw);    &#125;&#125;</code></pre><p>页面回显数据</p><pre class=" language-js"><code class="language-js"><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1.获取查询条件,拼接查询条件</span>    param <span class="token operator">=</span> <span class="token string">"?name="</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>pagination<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    param <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&amp;type="</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>pagination<span class="token punctuation">.</span>type<span class="token punctuation">;</span>    param <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&amp;description="</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>pagination<span class="token punctuation">.</span>description<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"-----------------"</span><span class="token operator">+</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>    axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/books/"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>pagination<span class="token punctuation">.</span>currentPage<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>pagination<span class="token punctuation">.</span>pageSize<span class="token operator">+</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pagination<span class="token punctuation">.</span>total <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>total<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pagination<span class="token punctuation">.</span>currentPage <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>current<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pagination<span class="token punctuation">.</span>pagesize <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>size<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dataList <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>records<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre></li></ul><p><strong>总结</strong></p><ol><li>定义查询条件数据模型（当前封装到分页数据模型中）</li><li>异步调用分页功能并通过请求参数传递数据到后台</li></ol><h2 id="基础篇完结"><a href="#基础篇完结" class="headerlink" title="基础篇完结"></a>基础篇完结</h2><p>​        基础篇到这里就全部结束了，在基础篇中带着大家学习了如何创建一个SpringBoot工程，然后学习了SpringBoot的基础配置语法格式，接下来对常见的市面上的实用技术做了整合，最后通过一个小的案例对前面学习的内容做了一个综合应用。整体来说就是一个最基本的入门，关于SpringBoot的实际开发其实接触的还是很少的，我们到实用篇和原理篇中继续吧，各位小伙伴，加油学习，再见。</p><h1 id="SpringBoot运维实用篇"><a href="#SpringBoot运维实用篇" class="headerlink" title="SpringBoot运维实用篇"></a>SpringBoot运维实用篇</h1><p>​        基础篇发布以后，看到了很多小伙伴在网上的留言，也帮助超过100位小伙伴解决了一些遇到的问题，并且已经发现了部分问题具有典型性，预计将有些问题在后面篇章的合适位置添加到本套课程中，作为解决方案提供给大家。</p><p>​        从此刻开始，咱们就要进入到实用篇的学习了。实用篇是在基础篇的根基之上，补全SpringBoot的知识图谱。比如在基础篇中只给大家讲了yaml的语法格式，但是具体写yaml文件的时候还有很多实用开发过程中的坑，这些在实用篇中都要进行学习。</p><p>​        实用篇共分为两块内容，分别是运维实用篇和开发实用篇。其实划分的标准是我自己制定的，因为这里面的知识有一些还是比较散的，做两个阶段的划分是为了更好的将同类知识点进行归类，帮助学习者找到知识之间的关联性，这样有助于知识的记忆存储转换，经过一系列的知识反复出现与强化练习，将临时记忆转换成永久性记忆。做课程嘛，不能仅以讲完为目标，要以学习者的学习收获为目标，这也是我这么多年教学秉承的基本理念。</p><p>​        下面就从运维实用篇开始讲，在运维实用篇中，我给学习者的定位是玩转配置，为开发实用篇中做各种技术的整合做好准备工作。与开发实用篇相比，运维实用篇的内容显得略微单薄，并且有部分知识模块在运维实用篇和开发实用篇中都要讲一部分，这些内容都后置到开发实用篇中了。废话不说了，先看看运维实用篇中都包含哪些内容：</p><ul><li>SpringBoot程序的打包与运行</li><li>配置高级</li><li>多环境开发</li><li>日志</li></ul><p>​        下面开启第一部分SpringBoot程序打包与运行的学习</p><h2 id="YW-1-SpringBoot程序的打包与运行"><a href="#YW-1-SpringBoot程序的打包与运行" class="headerlink" title="YW-1.SpringBoot程序的打包与运行"></a>YW-1.SpringBoot程序的打包与运行</h2><p>​        刚开始做开发学习的小伙伴可能在有一个知识上面有错误的认知，我们天天写程序是在Idea下写的，运行也是在Idea下运行的。</p><img src="img\image-20211201091317258.png" alt="image-20211201091317258" style="zoom:67%;" /><p>​        但是实际开发完成后，我们的项目是不可能运行在自己的电脑上的。</p><img src="img\image-20211201091341645.png" alt="image-20211201091341645" style="zoom:67%;" /><p>​        我们以后制作的程序是运行在专用的服务器上的，简单说就是将你做的程序放在一台独立运行的电脑上，这台电脑要比你开发使用的计算机更专业，并且安全等级各个方面要远超过你现在的电脑。</p><img src="img\image-20211201091502040.png" alt="image-20211201091502040" style="zoom:67%;" /><p>​        那我们的程序如何放置在这台专用的电脑上呢，这就要将我们的程序先组织成一个文件，然后将这个文件传输到这台服务器上。这里面就存在两个过程，一个是打包的过程，另一个是运行的过程。</p><p><font color="#f0f"><b>温馨提示</b></font></p><p>​        企业项目上线为了保障环境适配性会采用下面流程发布项目，这里不讨论此过程。</p><ol><li>开发部门使用Git、SVN等版本控制工具上传工程到版本服务器</li><li>服务器使用版本控制工具下载工程</li><li>服务器上使用Maven工具在当前真机环境下重新构建项目</li><li>启动服务</li></ol><p>​        继续说我们的打包和运行过程。所谓打包指将程序转换成一个可执行的文件，所谓运行指不依赖开发环境执行打包产生的文件。上述两个操作都有对应的命令可以快速执行。</p><h3 id="程序打包"><a href="#程序打包" class="headerlink" title="程序打包"></a><strong>程序打包</strong></h3><p>​        SpringBoot程序是基于Maven创建的，在Maven中提供有打包的指令，叫做package。本操作可以在Idea环境下执行。</p><pre class=" language-JAVA"><code class="language-JAVA">mvn package</code></pre><p>​        打包后会产生一个与工程名类似的jar文件，其名称是由模块名+版本号+.jar组成的。</p><h3 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a><strong>程序运行</strong></h3><p>​        程序包打好以后，就可以直接执行了。在程序包所在路径下，执行指令。</p><pre class=" language-JAVA"><code class="language-JAVA">java -jar 工程包名.jar</code></pre><p>​        执行程序打包指令后，程序正常运行，与在Idea下执行程序没有区别。</p><p>​        <font color="#ff0000"><b>特别关注</b></font>：如果你的计算机中没有安装java的jdk环境，是无法正确执行上述操作的，因为程序执行使用的是java指令。</p><p>​        <font color="#ff0000"><b>特别关注</b></font>：在使用向导创建SpringBoot工程时，pom.xml文件中会有如下配置，这一段配置千万不能删除，否则打包后无法正常执行程序。</p><pre class=" language-XML"><code class="language-XML"><build>    <plugins>        <plugin>            <groupId>org.springframework.boot</groupId>            <artifactId>spring-boot-maven-plugin</artifactId>        </plugin>    </plugins></build></code></pre><p><strong>总结</strong></p><ol><li>SpringBoot工程可以基于java环境下独立运行jar文件启动服务</li><li>SpringBoot工程执行mvn命令package进行打包</li><li>执行jar命令：java –jar 工程名.jar</li></ol><h3 id="SpringBoot程序打包失败处理"><a href="#SpringBoot程序打包失败处理" class="headerlink" title="SpringBoot程序打包失败处理"></a>SpringBoot程序打包失败处理</h3><p>​        有些小伙伴打包以后执行会出现一些问题，导致程序无法正常执行，例如下面的现象</p><img src="img\image-20211201094223991.png" alt="image-20211201094223991" style="zoom:67%;" /><p>​        要想搞清楚这个问题就要说说.jar文件的工作机制了，知道了这个东西就知道如何避免此类问题的发生了。</p><p>​        搞java开发平时会接触很多jar包，比如mysql的驱动jar包，而上面我们打包程序后得到的也是一个jar文件。这个时候如果你使用上面的java -jar指令去执行mysql的驱动jar包就会出现上述不可执行的现象，而我们的SpringBoot项目为什么能执行呢？其实是因为打包方式不一样。</p><p>​        在SpringBoot工程的pom.xml中有下面这组配置，这组配置决定了打包出来的程序包是否可以执行。</p><pre class=" language-XML"><code class="language-XML"><build>    <plugins>        <plugin>            <groupId>org.springframework.boot</groupId>            <artifactId>spring-boot-maven-plugin</artifactId>        </plugin>    </plugins></build></code></pre><p>​        我们分别开启这段配置和注释掉这段配置分别执行两次打包，然后观察两次打包后的程序包的差别，共有3处比较明显的特征</p><ul><li>打包后文件的大小不同</li><li>打包后所包含的内容不同</li><li>打包程序中个别文件内容不同</li></ul><p>​        先看第一个现象，文件大小不同。带有配置时打包生成的程序包大小如下：</p><img src="img\image-20211201095610270.png" alt="image-20211201095610270" style="zoom:150%;" /><p>​        不难看出，带有配置的程序包体积比不带配置的大了30倍，那这里面都有什么呢？能差这么多？下面看看里面的内容有什么区别。</p><p>​        <img src="img\image-20211201101541267.png" alt="image-20211201101541267" style="zoom:50%;" /><img src="img\image-20211201101652868.png" alt="image-20211201101652868" style="zoom:50%;" /></p><p>​        我们发现内容也完全不一样，仅有一个目录是一样的，叫做META-INF。打开容量大的程序包中的BOOT-INF目录下的classes目录，我们发现其中的内容居然和容量小的程序包中的内容完全一样。</p><p>​        <img src="img\image-20211201101805569.png" alt="image-20211201101805569" style="zoom:50%;" /><img src="img\image-20211201101652868.png" alt="image-20211201101652868" style="zoom:50%;" /></p><p>​        原来大的程序包中除了包含小的程序包中的内容，还有别的东西。都有什么呢？回到BOOT-INF目录下，打开lib目录，里面显示了很多个jar文件。</p><p>​        <img src="img\image-20211201102025791.png" alt="image-20211201102025791" style="zoom:50%;" /></p><p>​        仔细翻阅不难发现，这些jar文件都是我们制作这个工程时导入的坐标对应的文件。大概可以想明白了，SpringBoot程序为了让自己打包生成的程序可以独立运行，不仅将项目中自己开发的内容进行了打包，还把当前工程运行需要使用的jar包全部打包进来了。为什么这样做呢？就是为了可以独立运行。不依赖程序包外部的任何资源可以独立运行当前程序。这也是为什么大的程序包容量是小的程序包容量的30倍的主要原因。</p><p>​        再看看大程序包还有什么不同之处，在最外层目录包含一个org目录，进入此目录，目录名是org\springframework\boot\loader，在里面可以找到一个<font color="#ff0000"><b>JarLauncher.class</b></font>的文件，先记得这个文件。再看这套目录名，明显是一个Spring的目录名，为什么要把Spring框架的东西打包到这个程序包中呢？不清楚。</p><p>​        回到两个程序包的最外层目录，查看名称相同的文件夹META-INF下都有一个叫做MANIFEST.MF的文件，但是大小不同，打开文件，比较内容区别</p><ul><li><p>小容量文件的MANIFEST.MF</p><pre class=" language-JAVA"><code class="language-JAVA">Manifest-Version: 1.0Implementation-Title: springboot_08_ssmpImplementation-Version: 0.0.1-SNAPSHOTBuild-Jdk-Spec: 1.8Created-By: Maven Jar Plugin 3.2.0</code></pre></li><li><p>大容量文件的MANIFEST.MF</p><pre class=" language-JAVA"><code class="language-JAVA">Manifest-Version: 1.0Spring-Boot-Classpath-Index: BOOT-INF/classpath.idxImplementation-Title: springboot_08_ssmpImplementation-Version: 0.0.1-SNAPSHOTSpring-Boot-Layers-Index: BOOT-INF/layers.idxStart-Class: com.itheima.SSMPApplicationSpring-Boot-Classes: BOOT-INF/classes/Spring-Boot-Lib: BOOT-INF/lib/Build-Jdk-Spec: 1.8Spring-Boot-Version: 2.5.4Created-By: Maven Jar Plugin 3.2.0Main-Class: org.springframework.boot.loader.JarLauncher</code></pre></li></ul><p>​        大文件中明显比小文件中多了几行信息，其中最后一行信息是Main-Class: org.springframework.boot.loader.<font color="#ff0000"><b>JarLauncher</b></font>。这句话什么意思呢？如果使用java -jar执行此程序包，将执行Main-Class属性配置的类，这个类恰巧就是前面看到的那个文件。原来SpringBoot打包程序中出现Spring框架的东西是为这里服务的。而这个org.springframework.boot.loader.<font color="#ff0000"><b>JarLauncher</b></font>类内部要查找Start-Class属性中配置的类，并执行对应的类。这个属性在当前配置中也存在，对应的就是我们的引导类类名。</p><p>​        现在这组设定的作用就搞清楚了</p><ol><li>SpringBoot程序添加配置后会打出一个特殊的包，包含Spring框架部分功能，原始工程内容，原始工程依赖的jar包</li><li>首先读取MANIFEST.MF文件中的Main-Class属性，用来标记执行java -jar命令后运行的类</li><li>JarLauncher类执行时会找到Start-Class属性，也就是启动类类名</li><li>运行启动类时会运行当前工程的内容</li><li>运行当前工程时会使用依赖的jar包，从lib目录中查找</li></ol><p>​        看来SpringBoot打出来了包为了能够独立运行，简直是煞费苦心，将所有需要使用的资源全部都添加到了这个包里。这就是为什么这个jar包能独立运行的原因。</p><p>​        再来看之前的报错信息：</p><img src="img\image-20211201094223991.png" alt="image-20211201094223991" style="zoom:67%;" /><p>​        由于打包时没有使用那段配置，结果打包后形成了一个普通的jar包，在MANIFEST.MF文件中也就没有了Main-Class对应的属性了，所以运行时提示找不到主清单属性，这就是报错的原因。</p><p>​        上述内容搞清楚对我们编程意义并不大，但是对各位小伙伴理清楚SpringBoot工程独立运行的机制是有帮助的。其实整体过程主要是带着大家分析，如果以后遇到了类似的问题，多给自己提问，多问一个为什么，兴趣自己就可以独立解决问题了。</p><p><strong>总结</strong></p><ol><li>spring-boot-maven-plugin插件用于将当前程序打包成一个可以独立运行的程序包</li></ol><h3 id="命令行启动常见问题及解决方案"><a href="#命令行启动常见问题及解决方案" class="headerlink" title="命令行启动常见问题及解决方案"></a>命令行启动常见问题及解决方案</h3><p>​        各位小伙伴在DOS环境下启动SpringBoot工程时，可能会遇到端口占用的问题。给大家一组命令，不用深入学习，备用吧。</p><pre class=" language-JAVA"><code class="language-JAVA"># 查询端口netstat -ano# 查询指定端口netstat -ano |findstr "端口号"# 根据进程PID查询进程名称tasklist |findstr "进程PID号"# 根据PID杀死任务taskkill /F /PID "进程PID号"# 根据进程名称杀死任务taskkill -f -t -im "进程名称"</code></pre><p>​        关于打包与运行程序其实还有一系列的配置和参数，下面的内容中遇到再说，这里先开个头，知道如何打包和运行程序。</p><h3 id="SpringBoot项目快速启动（Linux版）"><a href="#SpringBoot项目快速启动（Linux版）" class="headerlink" title="SpringBoot项目快速启动（Linux版）"></a>SpringBoot项目快速启动（Linux版）</h3><p>​        其实对于Linux系统下的程序运行与Windows系统下的程序运行差别不大，命令还是那组命令，只不过各位小伙伴可能对Linux指令不太熟悉，结果就会导致各种各样的问题发生。比如防火墙如何关闭，IP地址如何查询，JDK如何安装等等。这里不作为重点内容给大家普及了，了解一下整体过程就行了。</p><h2 id="YW-2-配置高级"><a href="#YW-2-配置高级" class="headerlink" title="YW-2.配置高级"></a>YW-2.配置高级</h2><p>​        关于配置在基础篇讲过一部分，基础篇的配置总体上来说就是让各位小伙伴掌握配置的格式。比如配置文件如何写啊，写好的数据如何读取啊，都是基础的语法级知识。在实用篇中就要集中在配置的应用这个方面了，下面就开始配置高级相关内容的第一部分学习，为什么说第一部分，因为在开发实用篇中还有对应的配置高级知识要进行学习。</p><h3 id="YW-2-1-临时属性设置"><a href="#YW-2-1-临时属性设置" class="headerlink" title="YW-2-1.临时属性设置"></a>YW-2-1.临时属性设置</h3><p>​        目前我们的程序包打好了，可以发布了。但是程序包打好以后，里面的配置都已经是固定的了，比如配置了服务器的端口是8080。如果我要启动项目，发现当前我的服务器上已经有应用启动起来并且占用了8080端口，这个时候就尴尬了。难道要重新把打包好的程序修改一下吗？比如我要把打包好的程序启动端口改成80。</p><p><img src="img%5Cimage-20211206095113771.png" alt="image-20211206095113771">             <img src="img%5Cimage-20211206095524343.png" alt="image-20211206095524343">             <img src="img%5Cimage-20211206095101581.png" alt="image-20211206095101581"></p><p>​        SpringBoot提供了灵活的配置方式，如果你发现你的项目中有个别属性需要重新配置，可以使用临时属性的方式快速修改某些配置。方法也特别简单，在启动的时候添加上对应参数就可以了。</p><pre class=" language-JAVA"><code class="language-JAVA">java –jar springboot.jar –-server.port=80</code></pre><p>​        上面的命令是启动SpringBoot程序包的命令，在命令输入完毕后，空一格，然后输入两个-号。下面按照属性名=属性值的形式添加对应参数就可以了。记得，这里的格式不是yaml中的书写格式，当属性存在多级名称时，中间使用点分隔，和properties文件中的属性格式完全相同。</p><p>​        如果你发现要修改的属性不止一个，可以按照上述格式继续写，属性与属性之间使用空格分隔。</p><pre class=" language-JAVA"><code class="language-JAVA">java –jar springboot.jar –-server.port=80 --logging.level.root=debug</code></pre><h4 id="属性加载优先级"><a href="#属性加载优先级" class="headerlink" title="属性加载优先级"></a><strong>属性加载优先级</strong></h4><p>​        现在我们的程序配置受两个地方控制了，第一配置文件，第二临时属性。并且我们发现临时属性的加载优先级要高于配置文件的。那是否还有其他的配置方式呢？其实是有的，而且还不少，打开官方文档中对应的内容，就可以查看配置读取的优先顺序。地址奉上：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config</a></p><img src="img\image-20211206100859236.png" alt="image-20211206100859236" style="zoom:67%;" /><p>​        我们可以看到，居然有14种配置的位置，而我们现在使用的是这里面的2个。第3条Config data说的就是使用配置文件，第11条Command line arguments说的就是使用命令行临时参数。而这14种配置的顺序就是SpringBoot加载配置的顺序，言外之意，命令行临时属性比配置文件的加载优先级高，所以这个列表上面的优先级低，下面的优先级高。其实这个东西不用背的，你就记得一点，你最终要什么效果，你自己是知道的，不管这个顺序是怎么个高低排序，开发时一定要配置成你要的顺序为准。这个顺序只是在你想不明白问题的时候帮助你分析罢了。</p><p>​        比如你现在加载了一个user.name属性。结果你发现出来的结果和你想的不一样，那肯定是别的优先级比你高的属性覆盖你的配置属性了，那你就可以看着这个顺序挨个排查。哪个位置有可能覆盖了你的属性。</p><p>​        我在课程评论区看到小伙伴学习基础篇的时候问这个问题了，就是这个原因造成的。在yaml中配置了user.name属性值，然后读取出来的时候居然不是自己的配置值，因为在系统属性中有一个属性叫做user.name，两个相互冲突了。而系统属性的加载优先顺序在上面这个列表中是5号，高于3号，所以SpringBoot最终会加载系统配置属性user.name。</p><p><strong>总结</strong></p><ol><li>使用jar命令启动SpringBoot工程时可以使用临时属性替换配置文件中的属性</li><li>临时属性添加方式：java –jar 工程名.jar –-属性名=值</li><li>多个临时属性之间使用空格分隔</li><li>临时属性必须是当前boot工程支持的属性，否则设置无效</li></ol><h4 id="开发环境中使用临时属性"><a href="#开发环境中使用临时属性" class="headerlink" title="开发环境中使用临时属性"></a>开发环境中使用临时属性</h4><p>​        临时使用目前是有了，但是上线的时候通过命令行输入的临时属性必须是正确的啊，那这些属性配置值我们必须在开发环境中测试好才行。下面说一下开发环境中如何使用临时属性，其实就是Idea界面下如何操作了。</p><p>​        打开SpringBoot引导类的运行界面，在里面找到配置项。其中Program arguments对应的位置就是添加临时属性的，可以加几个试试效果。</p><img src="img\image-20211206101947622.png" alt="image-20211206101947622" style="zoom:80%;" /><p>​        做到这里其实可以产生一个思考了，如果对java编程熟悉的小伙伴应该知道，我们运行main方法的时候，如果想使用main方法的参数，也就是下面的args参数，就是在上面这个位置添加的参数。</p><pre class=" language-JAVA"><code class="language-JAVA">public static void main(String[] args) &#123;&#125;</code></pre><p>​        原来是这样，通过这个args就可以获取到参数。再来看我们的引导类是如何书写的</p><pre class=" language-JAVA"><code class="language-JAVA">public static void main(String[] args) &#123;    SpringApplication.run(SSMPApplication.class,args);&#125;</code></pre><p>​        这个args参数居然传递给了run方法，看来在Idea中配置的临时参数就是通过这个位置传递到我们的程序中的。言外之意，这里如果不用这个args是不是就断开了外部传递临时属性的入口呢？是这样的，我们可以使用下面的调用方式，这样外部临时属性就无法进入到SpringBoot程序中了。</p><pre class=" language-JAVA"><code class="language-JAVA">public static void main(String[] args) &#123;    SpringApplication.run(SSMPApplication.class);&#125;</code></pre><p>​        或者还可以使用如下格式来玩这个操作，就是将配置不写在配置文件中，直接写成一个字符串数组，传递给程序入口。当然，这种做法并没有什么实际开发意义。</p><pre class=" language-JAVA"><code class="language-JAVA">public static void main(String[] args) &#123;    String[] arg = new String[1];    arg[0] = "--server.port=8082";    SpringApplication.run(SSMPApplication.class, arg);&#125;</code></pre><p><strong>总结</strong></p><ol><li>启动SpringBoot程序时，可以选择是否使用命令行属性为SpringBoot程序传递启动属性</li></ol><p><strong>思考</strong></p><p>​        现在使用临时属性可以在启动项目前临时更改配置了，但是新的问题又出来了。临时属性好用是好用，就是写的多了会很麻烦。比如我现在有个需求，上线的时候使用临时属性配置20个值，这下可麻烦了，能不能搞得简单点，集中管理一下呢？比如说搞个文件，加载指定文件？还真可以。怎么做呢？咱们下一节再说。</p><h3 id="YW-2-2-配置文件分类"><a href="#YW-2-2-配置文件分类" class="headerlink" title="YW-2-2.配置文件分类"></a>YW-2-2.配置文件分类</h3><p>​        SpringBoot提供了配置文件和临时属性的方式来对程序进行配置。前面一直说的是临时属性，这一节要说说配置文件了。其实这个配置文件我们一直在使用，只不过我们用的是SpringBoot提供的4级配置文件中的其中一个级别。4个级别分别是：</p><ul><li>类路径下配置文件（一直使用的是这个，也就是resources目录中的application.yml文件）</li><li>类路径下config目录下配置文件</li><li>程序包所在目录中配置文件</li><li>程序包所在目录中config目录下配置文件</li></ul><p>​        好复杂，一个一个说。其实上述4种文件是提供给你了4种配置文件书写的位置，功能都是一样的，都是做配置的。那大家关心的就是差别了，没错，就是因为位置不同，产生了差异。总体上来说，4种配置文件如果都存在的话，有一个优先级的问题，说白了就是加入4个文件我都有，里面都有一样的配置，谁生效的问题。上面4个文件的加载优先顺序为</p><ol><li>file ：config/application.yml <strong>【最高】</strong></li><li>file ：application.yml</li><li>classpath：config/application.yml</li><li>classpath：application.yml  <strong>【最低】</strong></li></ol><p>​        那为什么设计这种多种呢？说一个最典型的应用吧。</p><ul><li>场景A：你作为一个开发者，你做程序的时候为了方便自己写代码，配置的数据库肯定是连接你自己本机的，咱们使用4这个级别，也就是之前一直用的application.yml。</li><li>场景B：现在项目开发到了一个阶段，要联调测试了，连接的数据库是测试服务器的数据库，肯定要换一组配置吧。你可以选择把你之前的文件中的内容都改了，目前还不麻烦。</li><li>场景C：测试完了，一切OK。你继续写你的代码，你发现你原来写的配置文件被改成测试服务器的内容了，你要再改回来。现在明白了不？场景B中把你的内容都改掉了，你现在要重新改回来，以后呢？改来改去吗？</li></ul><p>​        解决方案很简单，用上面的3这个级别的配置文件就可以快速解决这个问题，再写一个配置就行了。两个配置文件共存，因为config目录中的配置加载优先级比你的高，所以配置项如果和级别4里面的内容相同就覆盖了，这样是不是很简单？</p><p>​        级别1和2什么时候使用呢？程序打包以后就要用这个级别了，管你程序里面配置写的是什么？我的级别高，可以轻松覆盖你，就不用考虑这些配置冲突的问题了。</p><p><strong>总结</strong></p><ol><li><p>配置文件分为4种</p><ul><li>项目类路径配置文件：服务于开发人员本机开发与测试</li><li>项目类路径config目录中配置文件：服务于项目经理整体调控</li><li>工程路径配置文件：服务于运维人员配置涉密线上环境</li><li>工程路径config目录中配置文件：服务于运维经理整体调控</li></ul></li><li><p>多层级配置文件间的属性采用叠加并覆盖的形式作用于程序</p></li></ol><h3 id="YW-2-3-自定义配置文件"><a href="#YW-2-3-自定义配置文件" class="headerlink" title="YW-2-3.自定义配置文件"></a>YW-2-3.自定义配置文件</h3><p>​        之前咱们做配置使用的配置文件都是application.yml，其实这个文件也是可以改名字的，这样方便维护。比如我2020年4月1日搞活动，走了一组配置，2020年5月1日活动取消，恢复原始配置，这个时候只需要重新更换一下配置文件就可以了。但是你总不能在原始配置文件上修改吧，不然搞完活动以后，活动的配置就留不下来了，不利于维护。</p><p>​        自定义配置文件方式有如下两种：</p><p><strong>方式一：使用临时属性设置配置文件名，注意仅仅是名称，不要带扩展名</strong></p><img src="img\image-20211206105548238.png" alt="image-20211206105548238" style="zoom:67%;" /><p><strong>方式二：使用临时属性设置配置文件路径，这个是全路径名</strong></p><img src="img\image-20211206105716450.png" alt="image-20211206105716450" style="zoom:67%;" /><p>​        也可以设置加载多个配置文件</p><img src="img\image-20211206105750285.png" alt="image-20211206105750285" style="zoom:67%;" /><p>​        使用的属性一个是spring.config.name，另一个是spring.config.location，这个一定要区别清楚。</p><p><font color="#f0f"><b>温馨提示</b></font></p><p>​        我们现在研究的都是SpringBoot单体项目，就是单服务器版本。其实企业开发现在更多的是使用基于SpringCloud技术的多服务器项目。这种配置方式和我们现在学习的完全不一样，所有的服务器将不再设置自己的配置文件，而是通过配置中心获取配置，动态加载配置信息。为什么这样做？集中管理。这里不再说这些了，后面再讲这些东西。</p><p><strong>总结</strong></p><ol><li>配置文件可以修改名称，通过启动参数设定</li><li>配置文件可以修改路径，通过启动参数设定</li><li>微服务开发中配置文件通过配置中心进行设置</li></ol><h2 id="YW-3-多环境开发"><a href="#YW-3-多环境开发" class="headerlink" title="YW-3.多环境开发"></a>YW-3.多环境开发</h2><p>​        讲的内容距离线上开发越来越近了，下面说一说多环境开发问题。</p><p>​        什么是多环境？其实就是说你的电脑上写的程序最终要放到别人的服务器上去运行。每个计算机环境不一样，这就是多环境。常见的多环境开发主要兼顾3种环境设置，开发环境——自己用的，测试环境——自己公司用的，生产环境——甲方爸爸用的。因为这是绝对不同的三台电脑，所以环境肯定有所不同，比如连接的数据库不一样，设置的访问端口不一样等等。</p><img src="img\image-20211206110958819.png" alt="image-20211206110958819" style="zoom:67%;" /><h3 id="YW-3-1-多环境开发（yaml单一文件版）"><a href="#YW-3-1-多环境开发（yaml单一文件版）" class="headerlink" title="YW-3-1.多环境开发（yaml单一文件版）"></a>YW-3-1.多环境开发（yaml单一文件版）</h3><p>​        那什么是多环境开发？就是针对不同的环境设置不同的配置属性即可。比如你自己开发时，配置你的端口如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre><p>​        如何想设计两组环境呢？中间使用三个减号分隔开</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">81</span></code></pre><p>​        如何区分两种环境呢？起名字呗</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">profiles</span><span class="token punctuation">:</span> pro<span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev<span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">81</span></code></pre><p>​        那用哪一个呢？设置默认启动哪个就可以了</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">profiles</span><span class="token punctuation">:</span>        <span class="token key atrule">active</span><span class="token punctuation">:</span> pro        <span class="token comment" spellcheck="true"># 启动pro</span><span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">profiles</span><span class="token punctuation">:</span> pro<span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev<span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">81</span></code></pre><p>​        就这么简单，再多来一组环境也OK</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">profiles</span><span class="token punctuation">:</span>        <span class="token key atrule">active</span><span class="token punctuation">:</span> pro        <span class="token comment" spellcheck="true"># 启动pro</span><span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">profiles</span><span class="token punctuation">:</span> pro<span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev<span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">81</span><span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">profiles</span><span class="token punctuation">:</span> test<span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">82</span></code></pre><p>​        其中关于环境名称定义上述格式是过时格式，标准格式如下</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">activate</span><span class="token punctuation">:</span>            <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> pro</code></pre><p><strong>总结</strong></p><ol><li>多环境开发需要设置若干种常用环境，例如开发、生产、测试环境</li><li>yaml格式中设置多环境使用—区分环境设置边界</li><li>每种环境的区别在于加载的配置属性不同</li><li>启用某种环境时需要指定启动时使用该环境</li></ol><h3 id="YW-3-2-多环境开发（yaml多文件版）"><a href="#YW-3-2-多环境开发（yaml多文件版）" class="headerlink" title="YW-3-2.多环境开发（yaml多文件版）"></a>YW-3-2.多环境开发（yaml多文件版）</h3><p>​        将所有的配置都放在一个配置文件中，尤其是每一个配置应用场景都不一样，这显然不合理，于是就有了将一个配置文件拆分成多个配置文件的想法。拆分后，每个配置文件中写自己的配置，主配置文件中写清楚用哪一个配置文件就好了。</p><p><strong>主配置文件</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">profiles</span><span class="token punctuation">:</span>        <span class="token key atrule">active</span><span class="token punctuation">:</span> pro        <span class="token comment" spellcheck="true"># 启动pro</span></code></pre><p><strong>环境配置文件</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre><p>​        环境配置文件因为每一个都是配置自己的项，所以连名字都不用写里面了。那问题是如何区分这是哪一组配置呢？使用文件名区分。</p><p><strong>application-pro.yaml</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre><p><strong>application-dev.yaml</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">81</span></code></pre><p>​        文件的命名规则为：application-环境名.yml。</p><p>​        在配置文件中，如果某些配置项所有环境都一样，可以将这些项写入到主配置中，只有哪些有区别的项才写入到环境配置文件中。</p><ul><li>主配置文件中设置公共配置（全局）</li><li>环境分类配置文件中常用于设置冲突属性（局部）</li></ul><p><strong>总结</strong></p><ol><li><p>可以使用独立配置文件定义环境属性</p></li><li><p>独立配置文件便于线上系统维护更新并保障系统安全性</p></li></ol><h3 id="YW-3-3-多环境开发（properties多文件版）"><a href="#YW-3-3-多环境开发（properties多文件版）" class="headerlink" title="YW-3-3.多环境开发（properties多文件版）"></a>YW-3-3.多环境开发（properties多文件版）</h3><p>​        SpringBoot最早期提供的配置文件格式是properties格式的，这种格式的多环境配置也了解一下吧。</p><p><strong>主配置文件</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">pro</span></code></pre><p><strong>环境配置文件</strong></p><p><strong>application-pro.properties</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">80</span></code></pre><p><strong>application-dev.properties</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">81</span></code></pre><p>​        文件的命名规则为：application-环境名.properties。</p><p><strong>总结</strong></p><ol><li>properties文件多环境配置仅支持多文件格式</li></ol><h3 id="YW-3-4-多环境开发独立配置文件书写技巧"><a href="#YW-3-4-多环境开发独立配置文件书写技巧" class="headerlink" title="YW-3-4.多环境开发独立配置文件书写技巧"></a>YW-3-4.多环境开发独立配置文件书写技巧</h3><p>​        作为程序员在搞配置的时候往往处于一种分久必合合久必分的局面。开始先写一起，后来为了方便维护就拆分。对于多环境开发也是如此，下面给大家说一下如何基于多环境开发做配置独立管理，务必掌握。</p><p><strong>准备工作</strong></p><p>​        将所有的配置根据功能对配置文件中的信息进行拆分，并制作成独立的配置文件，命名规则如下</p><ul><li>application-devDB.yml</li><li>application-devRedis.yml</li><li>application-devMVC.yml</li></ul><p><strong>使用</strong></p><p>​        使用include属性在激活指定环境的情况下，同时对多个环境进行加载使其生效，多个环境间使用逗号分隔</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">profiles</span><span class="token punctuation">:</span>        <span class="token key atrule">active</span><span class="token punctuation">:</span> dev        <span class="token key atrule">include</span><span class="token punctuation">:</span> devDB<span class="token punctuation">,</span>devRedis<span class="token punctuation">,</span>devMVC</code></pre><p>​        比较一下，现在相当于加载dev配置时，再加载对应的3组配置，从结构上就很清晰，用了什么，对应的名称是什么</p><p><strong>注意</strong></p><p>​        当主环境dev与其他环境有相同属性时，主环境属性生效；其他环境中有相同属性时，最后加载的环境属性生效</p><p><strong>改良</strong></p><p>​        但是上面的设置也有一个问题，比如我要切换dev环境为pro时，include也要修改。因为include属性只能使用一次，这就比较麻烦了。SpringBoot从2.4版开始使用group属性替代include属性，降低了配置书写量。简单说就是我先写好，你爱用哪个用哪个。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">profiles</span><span class="token punctuation">:</span>        <span class="token key atrule">active</span><span class="token punctuation">:</span> dev        <span class="token key atrule">group</span><span class="token punctuation">:</span>            <span class="token key atrule">"dev"</span><span class="token punctuation">:</span> devDB<span class="token punctuation">,</span>devRedis<span class="token punctuation">,</span>devMVC              <span class="token key atrule">"pro"</span><span class="token punctuation">:</span> proDB<span class="token punctuation">,</span>proRedis<span class="token punctuation">,</span>proMVC              <span class="token key atrule">"test"</span><span class="token punctuation">:</span> testDB<span class="token punctuation">,</span>testRedis<span class="token punctuation">,</span>testMVC</code></pre><p>​        现在再来看，如果切换dev到pro，只需要改一下是不是就结束了？完美！</p><p><strong>总结</strong></p><ol><li>多环境开发使用group属性设置配置文件分组，便于线上维护管理</li></ol><h3 id="YW-3-5-多环境开发控制"><a href="#YW-3-5-多环境开发控制" class="headerlink" title="YW-3-5.多环境开发控制"></a>YW-3-5.多环境开发控制</h3><p>​        多环境开发到这里基本上说完了，最后说一个冲突问题。就是maven和SpringBoot同时设置多环境的话怎么搞。</p><p>​        要想处理这个冲突问题，你要先理清一个关系，究竟谁在多环境开发中其主导地位。也就是说如果现在都设置了多环境，谁的应该是保留下来的，另一个应该遵从相同的设置。</p><p>​        maven是做什么的？项目构建管理的，最终生成代码包的，SpringBoot是干什么的？简化开发的。简化，又不是其主导作用。最终还是要靠maven来管理整个工程，所以SpringBoot应该听maven的。整个确认后下面就好做了。大体思想如下：</p><ul><li>先在maven环境中设置用什么具体的环境</li><li>在SpringBoot中读取maven设置的环境即可</li></ul><p><strong>maven中设置多环境（使用属性方式区分环境）</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>env_dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile.active</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile.active</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--默认启动环境--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>env_pro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile.active</span><span class="token punctuation">></span></span>pro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile.active</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span></code></pre><p><strong>SpringBoot中读取maven设置值</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">profiles</span><span class="token punctuation">:</span>        <span class="token key atrule">active</span><span class="token punctuation">:</span> @profile.active@</code></pre><p>​        上面的@属性名@就是读取maven中配置的属性值的语法格式。</p><p><strong>总结</strong></p><ol><li>当Maven与SpringBoot同时对多环境进行控制时，以Mavn为主，SpringBoot使用@..@占位符读取Maven对应的配置属性值</li><li>基于SpringBoot读取Maven配置属性的前提下，如果在Idea下测试工程时pom.xml每次更新需要手动compile方可生效</li></ol><h2 id="YW-4-日志"><a href="#YW-4-日志" class="headerlink" title="YW-4.日志"></a>YW-4.日志</h2><p>​        运维篇最后一部分我们来聊聊日志，日志大家不陌生，简单介绍一下。日志其实就是记录程序日常运行的信息，主要作用如下：</p><ul><li>编程期调试代码</li><li>运营期记录信息</li><li>记录日常运营重要信息（峰值流量、平均响应时长……）</li><li>记录应用报错信息（错误堆栈）</li><li>记录运维过程数据（扩容、宕机、报警……）</li></ul><p>​        或许各位小伙伴并不习惯于使用日志，没关系，慢慢多用，习惯就好。想进大厂，这是最基本的，别去面试的时候说没用过，完了，没机会了。</p><h4 id="YW-4-1-代码中使用日志工具记录日志"><a href="#YW-4-1-代码中使用日志工具记录日志" class="headerlink" title="YW-4-1.代码中使用日志工具记录日志"></a>YW-4-1.代码中使用日志工具记录日志</h4><p>​        日志的使用格式非常固定，直接上操作步骤：</p><p><strong>步骤①</strong>：添加日志记录操作</p><pre class=" language-JAVA"><code class="language-JAVA">@RestController@RequestMapping("/books")public class BookController extends BaseClass&#123;    private static final Logger log = LoggerFactory.getLogger(BookController.class);    @GetMapping    public String getById()&#123;        log.debug("debug...");        log.info("info...");        log.warn("warn...");        log.error("error...");        return "springboot is running...2";    &#125;&#125;</code></pre><p>​        上述代码中log对象就是用来记录日志的对象，下面的log.debug，log.info这些操作就是写日志的API了。</p><p><strong>步骤②</strong>：设置日志输出级别</p><p>​        日志设置好以后可以根据设置选择哪些参与记录。这里是根据日志的级别来设置的。日志的级别分为6种，分别是：</p><ul><li>TRACE：运行堆栈信息，使用率低</li><li>DEBUG：程序员调试代码使用</li><li>INFO：记录运维过程数据</li><li>WARN：记录运维过程报警数据</li><li>ERROR：记录错误堆栈信息</li><li>FATAL：灾难信息，合并计入ERROR</li></ul><p>​        一般情况下，开发时候使用DEBUG，上线后使用INFO，运维信息记录使用WARN即可。下面就设置一下日志级别：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 开启debug模式，输出调试信息，常用于检查系统运行状况</span><span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>​        这么设置太简单粗暴了，日志系统通常都提供了细粒度的控制</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 开启debug模式，输出调试信息，常用于检查系统运行状况</span><span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment" spellcheck="true"># 设置日志级别，root表示根节点，即整体应用日志级别</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>    <span class="token key atrule">level</span><span class="token punctuation">:</span>        <span class="token key atrule">root</span><span class="token punctuation">:</span> debug</code></pre><p>​        还可以再设置更细粒度的控制</p><p><strong>步骤③</strong>：设置日志组，控制指定包对应的日志输出级别，也可以直接控制指定包对应的日志输出级别</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 设置日志组</span>    <span class="token key atrule">group</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 自定义组名，设置当前组中所包含的包</span>        <span class="token key atrule">ebank</span><span class="token punctuation">:</span> com.itheima.controller    <span class="token key atrule">level</span><span class="token punctuation">:</span>        <span class="token key atrule">root</span><span class="token punctuation">:</span> warn        <span class="token comment" spellcheck="true"># 为对应组设置日志级别</span>        <span class="token key atrule">ebank</span><span class="token punctuation">:</span> debug        <span class="token comment" spellcheck="true"># 为对包设置日志级别</span>        <span class="token key atrule">com.itheima.controller</span><span class="token punctuation">:</span> debug</code></pre><p>​        说白了就是总体设置一下，每个包设置一下，如果感觉设置的麻烦，就先把包分个组，对组设置，没了，就这些。</p><p><strong>总结</strong></p><ol><li>日志用于记录开发调试与运维过程消息</li><li>日志的级别共6种，通常使用4种即可，分别是DEBUG，INFO,WARN,ERROR</li><li>可以通过日志组或代码包的形式进行日志显示级别的控制</li></ol><h4 id="教你一招：优化日志对象创建代码"><a href="#教你一招：优化日志对象创建代码" class="headerlink" title="教你一招：优化日志对象创建代码"></a>教你一招：优化日志对象创建代码</h4><p>​        写代码的时候每个类都要写创建日志记录对象，这个可以优化一下，使用前面用过的lombok技术给我们提供的工具类即可。</p><pre class=" language-JAVA"><code class="language-JAVA">@RestController@RequestMapping("/books")public class BookController extends BaseClass&#123;    private static final Logger log = LoggerFactory.getLogger(BookController.class);    //这一句可以不写了&#125;</code></pre><p>​        导入lombok后使用注解搞定，日志对象名为log</p><pre class=" language-JAVA"><code class="language-JAVA">@Slf4j        //这个注解替代了下面那一行@RestController@RequestMapping("/books")public class BookController extends BaseClass&#123;    private static final Logger log = LoggerFactory.getLogger(BookController.class);    //这一句可以不写了&#125;</code></pre><p><strong>总结</strong></p><ol><li>基于lombok提供的@Slf4j注解为类快速添加日志对象</li></ol><h4 id="YW-4-2-日志输出格式控制"><a href="#YW-4-2-日志输出格式控制" class="headerlink" title="YW-4-2.日志输出格式控制"></a>YW-4-2.日志输出格式控制</h4><p>​        日志已经能够记录了，但是目前记录的格式是SpringBoot给我们提供的，如果想自定义控制就需要自己设置了。先分析一下当前日志的记录格式。</p><p><img src="img%5Cimage-20211206123431222.png" alt="image-20211206123431222"></p><p>​        对于单条日志信息来说，日期，触发位置，记录信息是最核心的信息。级别用于做筛选过滤，PID与线程名用于做精准分析。了解这些信息后就可以DIY日志格式了。本课程不做详细的研究，有兴趣的小伙伴可以学习相关的知识。下面给出课程中模拟的官方日志模板的书写格式，便于大家学习。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>    <span class="token key atrule">pattern</span><span class="token punctuation">:</span>        <span class="token key atrule">console</span><span class="token punctuation">:</span> "%d %clr(%p) <span class="token punctuation">---</span> <span class="token punctuation">[</span>%16t<span class="token punctuation">]</span> %clr(%<span class="token punctuation">-</span>40.40c)&amp;<span class="token comment" spellcheck="true">#123;cyan&amp;#125; : %m %n"</span></code></pre><p><strong>总结</strong></p><ol><li>日志输出格式设置规则</li></ol><h4 id="YW-4-3-日志文件"><a href="#YW-4-3-日志文件" class="headerlink" title="YW-4-3.日志文件"></a>YW-4-3.日志文件</h4><p>​        日志信息显示，记录已经控制住了，下面就要说一下日志的转存了。日志不能仅显示在控制台上，要把日志记录到文件中，方便后期维护查阅。</p><p>​        对于日志文件的使用存在各种各样的策略，例如每日记录，分类记录，报警后记录等。这里主要研究日志文件如何记录。</p><p>​        记录日志到文件中格式非常简单，设置日志文件名即可。</p><pre class=" language-YAML"><code class="language-YAML">logging:    file:        name: server.log</code></pre><p>​        虽然使用上述格式可以将日志记录下来了，但是面对线上的复杂情况，一个文件记录肯定是不能够满足运维要求的，通常会每天记录日志文件，同时为了便于维护，还要限制每个日志文件的大小。下面给出日志文件的常用配置方式：</p><pre class=" language-YAML"><code class="language-YAML">logging:    logback:        rollingpolicy:            max-file-size: 3KB            file-name-pattern: server.%d&#123;yyyy-MM-dd&#125;.%i.log</code></pre><p>​        以上格式是基于logback日志技术设置每日日志文件的设置格式，要求容量到达3KB以后就转存信息到第二个文件中。文件命名规则中的%d标识日期，%i是一个递增变量，用于区分日志文件。</p><p><strong>总结</strong></p><ol><li>日志记录到文件</li><li>日志文件格式设置</li></ol><h2 id="运维实用篇完结"><a href="#运维实用篇完结" class="headerlink" title="运维实用篇完结"></a>运维实用篇完结</h2><p>​        运维实用篇到这里就要先告一段落了，为什么不说结束呢？因为运维篇中还有一些知识，但是现在讲解过于分散了。所以要把这些知识与开发实用篇的知识结合在一起讲，也是本课程的教学设计的体现。</p><p>​        在整体运维实用篇中带着大家学习了4块内容，首先学习了如何运行SpringBoot程序，也就是程序的打包与运行，接下来对配置进行了升级学习，不再局限在配置文件中进行设置，通过临时属性，外部配置文件对项目的配置进行管控。在多环境开发中给大家介绍了多种多环境开发的格式，其实掌握一种即可，此外还给大家讲了多环境开发的一些技巧以及与maven的冲突解决方案。最后给大家介绍了日志系统，老实说日志这里讲的相当的潦草，因为大部分日志相关的知识都不应该在这门课中学习，这里只是告诉大家如何整合实用而已。</p><p>​        看了各位小伙伴的评论，知道你们再催更，我也在加油，一起努力吧，实用开发篇再会。实用开发篇会提高更新频度，不全部做完给大家更新了，我先把做好的一部分开放出来，随后做完一点就更新一点，额，好吧，就说到这里吧。</p><h1 id="SpringBoot开发实用篇"><a href="#SpringBoot开发实用篇" class="headerlink" title="SpringBoot开发实用篇"></a>SpringBoot开发实用篇</h1><p>​        怀着忐忑的心情，开始了开发实用篇文档的编写。为什么忐忑？特喵的债欠的太多，不知道从何写起。哎，不煽情了，开工。</p><p>​        运维实用篇完结以后，开发实用篇采用日更新的形式发布给各位小伙伴，基本上是每天一集，目前已经发布完毕。看评论区，好多小伙伴在求文档，所以赶紧来补文档，加班加点把开发实用篇的文档刨出来。</p><p>​        开发实用篇中因为牵扯到SpringBoot整合各种各样的技术，由于不是每个小伙伴对各种技术都有所掌握，所以在整合每一个技术之前，都会做一个快速的普及，这样的话内容整个开发实用篇所包含的内容就会比较多。各位小伙伴在学习的时候，如果对某一个技术不是很清楚，可以先跳过对应章节，或者先补充一下技术知识，然后再来看对应的课程。开发实用篇具体包含的内容如下：</p><ul><li>热部署</li><li>配置高级</li><li>测试</li><li>数据层解决方案</li><li>整合第三方技术</li><li>监控</li></ul><p>​        看目录感觉内容量并不是很大，但是在数据层解决方案和整合第三方技术中包含了大量的知识，一点一点慢慢学吧。下面开启第一部分热部署相关知识的学习</p><h2 id="KF-1-热部署"><a href="#KF-1-热部署" class="headerlink" title="KF-1.热部署"></a>KF-1.热部署</h2><p>​        什么是热部署？简单说就是你程序改了，现在要重新启动服务器，嫌麻烦？不用重启，服务器会自己悄悄的把更新后的程序给重新加载一遍，这就是热部署。</p><p>​        热部署的功能是如何实现的呢？这就要分两种情况来说了，非springboot工程和springboot工程的热部署实现方式完全不一样。先说一下原始的非springboot项目是如何实现热部署的。</p><p><strong>非springboot项目热部署实现原理</strong></p><p>​        开发非springboot项目时，我们要制作一个web工程并通过tomcat启动，通常需要先安装tomcat服务器到磁盘中，开发的程序配置发布到安装的tomcat服务器上。如果想实现热部署的效果，这种情况其实有两种做法，一种是在tomcat服务器的配置文件中进行配置，这种做法与你使用什么IDE工具无关，不管你使用eclipse还是idea都行。还有一种做法是通过IDE工具进行配置，比如在idea工具中进行设置，这种形式需要依赖IDE工具，每款IDE工具不同，对应的配置也不太一样。但是核心思想是一样的，就是使用服务器去监控其中加载的应用，发现产生了变化就重新加载一次。</p><p>​        上面所说的非springboot项目实现热部署看上去是一个非常简单的过程，几乎每个小伙伴都能自己写出来。如果你不会写，我给你个最简单的思路，但是实际设计要比这复杂一些。例如启动一个定时任务，任务启动时记录每个文件的大小，以后每5秒比对一下每个文件的大小是否有改变，或者是否有新文件。如果没有改变，放行，如果有改变，刷新当前记录的文件信息，然后重新启动服务器，这就可以实现热部署了。当然，这个过程肯定不能这么做，比如我把一个打印输出的字符串”abc”改成”cba”，比对大小是没有变化的，但是内容缺实变了，所以这么做肯定不行，只是给大家打个比方，而且重启服务器这就是冷启动了，不能算热部署，领会精神吧。</p><p>​        看上去这个过程也没多复杂，在springboot项目中难道还有其他的弯弯绕吗？还真有。</p><p><strong>springboot项目热部署实现原理</strong></p><p>​        基于springboot开发的web工程其实有一个显著的特征，就是tomcat服务器内置了，还记得内嵌服务器吗？服务器是以一个对象的形式在spring容器中运行的。本来我们期望于tomcat服务器加载程序后由tomcat服务器盯着程序，你变化后我就重新启动重新加载，但是现在tomcat和我们的程序是平级的了，都是spring容器中的组件，这下就麻烦了，缺乏了一个直接的管理权，那该怎么做呢？简单，再搞一个程序X在spring容器中盯着你原始开发的程序A不就行了吗？确实，搞一个盯着程序A的程序X就行了，如果你自己开发的程序A变化了，那么程序X就命令tomcat容器重新加载程序A就OK了。并且这样做有一个好处，spring容器中东西不用全部重新加载一遍，只需要重新加载你开发的程序那一部分就可以了，这下效率又高了，挺好。</p><p>​    下面就说说，怎么搞出来这么一个程序X，肯定不是我们自己手写了，springboot早就做好了，搞一个坐标导入进去就行了。</p><h3 id="KF-1-1-手动启动热部署"><a href="#KF-1-1-手动启动热部署" class="headerlink" title="KF-1-1.手动启动热部署"></a>KF-1-1.手动启动热部署</h3><p><strong>步骤①</strong>：导入开发者工具对应的坐标</p><pre class=" language-XML"><code class="language-XML"><dependency>    <groupId>org.springframework.boot</groupId>    <artifactId>spring-boot-devtools</artifactId>    <optional>true</optional></dependency></code></pre><p><strong>步骤②</strong>：构建项目，可以使用快捷键激活此功能</p><p><img src="img%5Cimage-20220222121257218.png" alt="image-20220222121257218"></p><p>​        对应的快捷键一定要记得</p><pre class=" language-CMD"><code class="language-CMD"><CTR>L+<F9></code></pre><p>​        以上过程就实现了springboot工程的热部署，是不是挺简单的。不过这里需要把底层的工作工程给普及一下。</p><p><strong>重启与重载</strong></p><p>​        一个springboot项目在运行时实际上是分两个过程进行的，根据加载的东西不同，划分成base类加载器与restart类加载器。</p><ul><li>base类加载器：用来加载jar包中的类，jar包中的类和配置文件由于不会发生变化，因此不管加载多少次，加载的内容不会发生变化</li><li>restart类加载器：用来加载开发者自己开发的类、配置文件、页面等信息，这一类文件受开发者影响</li></ul><p>​        当springboot项目启动时，base类加载器执行，加载jar包中的信息后，restart类加载器执行，加载开发者制作的内容。当执行构建项目后，由于jar中的信息不会变化，因此base类加载器无需再次执行，所以仅仅运行restart类加载即可，也就是将开发者自己制作的内容重新加载就行了，这就完成了一次热部署的过程，也可以说热部署的过程实际上是重新加载restart类加载器中的信息。</p><p><strong>总结</strong></p><ol><li>使用开发者工具可以为当前项目开启热部署功能</li><li>使用构建项目操作对工程进行热部署</li></ol><p><strong>思考</strong></p><p>​        上述过程每次进行热部署都需要开发者手工操作，不管是点击按钮还是快捷键都需要开发者手工执行。这种操作的应用场景主要是在开发调试期，并且调试的代码处于不同的文件中，比如服务器启动了，我需要改4个文件中的内容，然后重启，等4个文件都改完了再执行热部署，使用一个快捷键就OK了。但是如果现在开发者要修改的内容就只有一个文件中的少量代码，这个时候代码修改完毕如果能够让程序自己执行热部署功能，就可以减少开发者的操作，也就是自动进行热部署，能这么做吗？是可以的。咱们下一节再说。</p><p>​        </p><h3 id="KF-1-2-自动启动热部署"><a href="#KF-1-2-自动启动热部署" class="headerlink" title="KF-1-2.自动启动热部署"></a>KF-1-2.自动启动热部署</h3><p>​        自动热部署其实就是设计一个开关，打开这个开关后，IDE工具就可以自动热部署。因此这个操作和IDE工具有关，以下以idea为例设置idea中启动热部署</p><p><strong>步骤①</strong>：设置自动构建项目</p><p>​        打开【File】，选择【settings…】,在面板左侧的菜单中找到【Compile】选项，然后勾选【Build project automatically】，意思是自动构建项目</p><p><img src="img%5Cimage-20220222123543551.png" alt="image-20220222123543551"></p><p>​        自动构建项目选项勾选后</p><p><strong>步骤②</strong>：允许在程序运行时进行自动构建</p><p>​        使用快捷键【Ctrl】+【Alt】+【Shit】+【/】打开维护面板，选择第1项【Registry…】</p><p><img src="img%5Cimage-20220222124006910.png" alt="image-20220222124006910"></p><p>​        在选项中搜索comple，然后勾选对应项即可</p><img src="img\image-20220222124240069.png" alt="image-20220222124240069" style="zoom:80%;" /><p>​        这样程序在运行的时候就可以进行自动构建了，实现了热部署的效果。</p><p><font color="#ff0000"><b>关注</b></font>：如果你每敲一个字母，服务器就重新构建一次，这未免有点太频繁了，所以idea设置当idea工具失去焦点5秒后进行热部署。其实就是你从idea工具中切换到其他工具时进行热部署，比如改完程序需要到浏览器上去调试，这个时候idea就自动进行热部署操作。</p><p><strong>总结</strong></p><ol><li>自动热部署要开启自动构建项目</li><li>自动热部署要开启在程序运行时自动构建项目</li></ol><p><strong>思考</strong></p><p>​        现在已经实现了热部署了，但是到企业开发的时候你会发现，为了便于管理，在你的程序目录中除了有代码，还有可能有文档，如果你修改了一下文档，这个时候会进行热部署吗？不管是否进行热部署，这个过程我们需要自己控制才比较合理，那这个东西能控制吗？咱们下一节再说。</p><h3 id="KF-1-3-参与热部署监控的文件范围配置"><a href="#KF-1-3-参与热部署监控的文件范围配置" class="headerlink" title="KF-1-3.参与热部署监控的文件范围配置"></a>KF-1-3.参与热部署监控的文件范围配置</h3><p>​        通过修改项目中的文件，你可以发现其实并不是所有的文件修改都会激活热部署的，原因在于在开发者工具中有一组配置，当满足了配置中的条件后，才会启动热部署，配置中默认不参与热部署的目录信息如下</p><ul><li>/META-INF/maven</li><li>/META-INF/resources</li><li>/resources</li><li>/static</li><li>/public</li><li>/templates</li></ul><p>​        以上目录中的文件如果发生变化，是不参与热部署的。如果想修改配置，可以通过application.yml文件进行设定哪些文件不参与热部署操作</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">devtools</span><span class="token punctuation">:</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 设置不参与热部署的文件或文件夹</span>      <span class="token key atrule">exclude</span><span class="token punctuation">:</span> static/**<span class="token punctuation">,</span>public/**<span class="token punctuation">,</span>config/application.yml</code></pre><p><strong>总结</strong></p><ol><li>通过配置可以修改不参与热部署的文件或目录</li></ol><p><strong>思考</strong></p><p>​        热部署功能是一个典型的开发阶段使用的功能，到了线上环境运行程序时，这个功能就没有意义了。能否关闭热部署功能呢？咱们下一节再说。</p><h3 id="KF-1-4-关闭热部署"><a href="#KF-1-4-关闭热部署" class="headerlink" title="KF-1-4.关闭热部署"></a>KF-1-4.关闭热部署</h3><p>​        线上环境运行时是不可能使用热部署功能的，所以需要强制关闭此功能，通过配置可以关闭此功能。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">devtools</span><span class="token punctuation">:</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><p>​        如果当心配置文件层级过多导致相符覆盖最终引起配置失效，可以提高配置的层级，在更高层级中配置关闭热部署。例如在启动容器前通过系统属性设置关闭热部署功能。</p><pre class=" language-JAVA"><code class="language-JAVA">@SpringBootApplicationpublic class SSMPApplication &#123;    public static void main(String[] args) &#123;        System.setProperty("spring.devtools.restart.enabled","false");        SpringApplication.run(SSMPApplication.class);    &#125;&#125;</code></pre><p>​        其实上述担心略微有点多余，因为线上环境的维护是不可能出现修改代码的操作的，这么做唯一的作用是降低资源消耗，毕竟那双盯着你项目是不是产生变化的眼睛只要闭上了，就不具有热部署功能了，这个开关的作用就是禁用对应功能。</p><p><strong>总结</strong></p><ol><li>通过配置可以关闭热部署功能降低线上程序的资源消耗</li></ol><h2 id="KF-2-配置高级"><a href="#KF-2-配置高级" class="headerlink" title="KF-2.配置高级"></a>KF-2.配置高级</h2><p>​        进入开发实用篇第二章内容，配置高级，其实配置在基础篇讲了一部分，在运维实用篇讲了一部分，这里还要讲，讲的东西有什么区别呢？距离开发过程越来越接近，解决的问题也越来越靠近线上环境，下面就开启本章的学习。</p><h3 id="KF-2-1-ConfigurationProperties"><a href="#KF-2-1-ConfigurationProperties" class="headerlink" title="KF-2-1.@ConfigurationProperties"></a>KF-2-1.@ConfigurationProperties</h3><p>​        在基础篇学习了@ConfigurationProperties注解，此注解的作用是用来为bean绑定属性的。开发者可以在yml配置文件中以对象的格式添加若干属性</p><pre class=" language-YML"><code class="language-YML">servers:  ip-address: 192.168.0.1   port: 2345  timeout: -1</code></pre><p>​        然后再开发一个用来封装数据的实体类，注意要提供属性对应的setter方法</p><pre class=" language-JAVA"><code class="language-JAVA">@Component@Datapublic class ServerConfig &#123;    private String ipAddress;    private int port;    private long timeout;&#125;</code></pre><p>​        使用@ConfigurationProperties注解就可以将配置中的属性值关联到开发的模型类上</p><pre class=" language-JAVA"><code class="language-JAVA">@Component@Data@ConfigurationProperties(prefix = "servers")public class ServerConfig &#123;    private String ipAddress;    private int port;    private long timeout;&#125;</code></pre><p>​        这样加载对应bean的时候就可以直接加载配置属性值了。但是目前我们学的都是给自定义的bean使用这种形式加载属性值，如果是第三方的bean呢？能不能用这种形式加载属性值呢？为什么会提出这个疑问？原因就在于当前@ConfigurationProperties注解是写在类定义的上方，而第三方开发的bean源代码不是你自己书写的，你也不可能到源代码中去添加@ConfigurationProperties注解，这种问题该怎么解决呢？下面就来说说这个问题。</p><p>​        使用@ConfigurationProperties注解其实可以为第三方bean加载属性，格式特殊一点而已。</p><p><strong>步骤①</strong>：使用@Bean注解定义第三方bean</p><pre class=" language-JAVA"><code class="language-JAVA">@Beanpublic DruidDataSource datasource()&#123;    DruidDataSource ds = new DruidDataSource();    return ds;&#125;</code></pre><p><strong>步骤②</strong>：在yml中定义要绑定的属性，注意datasource此时全小写</p><pre class=" language-YAML"><code class="language-YAML">datasource:  driverClassName: com.mysql.jdbc.Driver</code></pre><p><strong>步骤③</strong>：使用@ConfigurationProperties注解为第三方bean进行属性绑定，注意前缀是全小写的datasource</p><pre class=" language-JAVA"><code class="language-JAVA">@Bean@ConfigurationProperties(prefix = "datasource")public DruidDataSource datasource()&#123;        DruidDataSource ds = new DruidDataSource();    return ds;&#125;</code></pre><p>​        操作方式完全一样，只不过@ConfigurationProperties注解不仅能添加到类上，还可以添加到方法上，添加到类上是为spring容器管理的当前类的对象绑定属性，添加到方法上是为spring容器管理的当前方法的返回值对象绑定属性，其实本质上都一样。</p><p>​        做到这其实就出现了一个新的问题，目前我们定义bean不是通过类注解定义就是通过@Bean定义，使用@ConfigurationProperties注解可以为bean进行属性绑定，那在一个业务系统中，哪些bean通过注解@ConfigurationProperties去绑定属性了呢？因为这个注解不仅可以写在类上，还可以写在方法上，所以找起来就比较麻烦了。为了解决这个问题，spring给我们提供了一个全新的注解，专门标注使用@ConfigurationProperties注解绑定属性的bean是哪些。这个注解叫做@EnableConfigurationProperties。具体如何使用呢？</p><p><strong>步骤①</strong>：在配置类上开启@EnableConfigurationProperties注解，并标注要使用@ConfigurationProperties注解绑定属性的类</p><pre class=" language-YAML"><code class="language-YAML">@SpringBootApplication@EnableConfigurationProperties(ServerConfig.class)public class Springboot13ConfigurationApplication &#123;&#125;</code></pre><p><strong>步骤②</strong>：在对应的类上直接使用@ConfigurationProperties进行属性绑定</p><pre class=" language-JAVA"><code class="language-JAVA">@Data@ConfigurationProperties(prefix = "servers")public class ServerConfig &#123;    private String ipAddress;    private int port;    private long timeout;&#125;</code></pre><p>​        有人感觉这没区别啊？注意观察，现在绑定属性的ServerConfig类并没有声明@Component注解。当使用@EnableConfigurationProperties注解时，spring会默认将其标注的类定义为bean，因此无需再次声明@Component注解了。</p><p>​        最后再说一个小技巧，使用@ConfigurationProperties注解时，会出现一个提示信息</p><p><img src="img%5Cimage-20220222145535749.png" alt="image-20220222145535749"></p><p>​        出现这个提示后只需要添加一个坐标此提醒就消失了</p><pre class=" language-XML"><code class="language-XML"><dependency>    <groupId>org.springframework.boot</groupId>    <artifactId>spring-boot-configuration-processor</artifactId></dependency></code></pre><p><strong>总结</strong></p><ol><li>使用@ConfigurationProperties可以为使用@Bean声明的第三方bean绑定属性</li><li>当使用@EnableConfigurationProperties声明进行属性绑定的bean后，无需使用@Component注解再次进行bean声明</li></ol><h3 id="KF-2-2-宽松绑定-松散绑定"><a href="#KF-2-2-宽松绑定-松散绑定" class="headerlink" title="KF-2-2.宽松绑定/松散绑定"></a>KF-2-2.宽松绑定/松散绑定</h3><p>​        在进行属性绑定时，可能会遇到如下情况，为了进行标准命名，开发者会将属性名严格按照驼峰命名法书写，在yml配置文件中将datasource修改为dataSource，如下：</p><pre class=" language-YAML"><code class="language-YAML">dataSource:  driverClassName: com.mysql.jdbc.Driver</code></pre><p>​        此时程序可以正常运行，然后又将代码中的前缀datasource修改为dataSource，如下：</p><pre class=" language-JAVA"><code class="language-JAVA">@Bean@ConfigurationProperties(prefix = "dataSource")public DruidDataSource datasource()&#123;    DruidDataSource ds = new DruidDataSource();    return ds;&#125;</code></pre><p>​        此时就发生了编译错误，而且并不是idea工具导致的，运行后依然会出现问题，配置属性名dataSource是无效的</p><pre class=" language-CMD"><code class="language-CMD">Configuration property name 'dataSource' is not valid:    Invalid characters: 'S'    Bean: datasource    Reason: Canonical names should be kebab-case ('-' separated), lowercase alpha-numeric characters and must start with a letterAction:Modify 'dataSource' so that it conforms to the canonical names requirements.</code></pre><p>​        为什么会出现这种问题，这就要来说一说springboot进行属性绑定时的一个重要知识点了，有关属性名称的宽松绑定，也可以称为宽松绑定。</p><p>​        什么是宽松绑定？实际上是springboot进行编程时人性化设计的一种体现，即配置文件中的命名格式与变量名的命名格式可以进行格式上的最大化兼容。兼容到什么程度呢？几乎主流的命名格式都支持，例如：</p><p>​        在ServerConfig中的ipAddress属性名</p><pre class=" language-JAVA"><code class="language-JAVA">@Component@Data@ConfigurationProperties(prefix = "servers")public class ServerConfig &#123;    private String ipAddress;&#125;</code></pre><p>​        可以与下面的配置属性名规则全兼容</p><pre class=" language-YML"><code class="language-YML">servers:  ipAddress: 192.168.0.2       # 驼峰模式  ip_address: 192.168.0.2      # 下划线模式  ip-address: 192.168.0.2      # 烤肉串模式  IP_ADDRESS: 192.168.0.2      # 常量模式</code></pre><p>​        也可以说，以上4种模式最终都可以匹配到ipAddress这个属性名。为什么这样呢？原因就是在进行匹配时，配置中的名称要去掉中划线和下划线后，忽略大小写的情况下去与java代码中的属性名进行忽略大小写的等值匹配，以上4种命名去掉下划线中划线忽略大小写后都是一个词ipaddress，java代码中的属性名忽略大小写后也是ipaddress，这样就可以进行等值匹配了，这就是为什么这4种格式都能匹配成功的原因。不过springboot官方推荐使用烤肉串模式，也就是中划线模式。</p><p>​        到这里我们掌握了一个知识点，就是命名的规范问题。再来看开始出现的编程错误信息</p><pre class=" language-CMD"><code class="language-CMD">Configuration property name 'dataSource' is not valid:    Invalid characters: 'S'    Bean: datasource    Reason: Canonical names should be kebab-case ('-' separated), lowercase alpha-numeric characters and must start with a letterAction:Modify 'dataSource' so that it conforms to the canonical names requirements.</code></pre><p>​        其中Reason描述了报错的原因，规范的名称应该是烤肉串(kebab)模式(case)，即使用-分隔，使用小写字母数字作为标准字符，且必须以字母开头。然后再看我们写的名称dataSource，就不满足上述要求。闹了半天，在书写前缀时，这个词不是随意支持的，必须使用上述标准。编程写了这么久，基本上编程习惯都养成了，到这里又被springboot教育了，没辙，谁让人家东西好用呢，按照人家的要求写吧。</p><p>​        最后说一句，以上规则仅针对springboot中@ConfigurationProperties注解进行属性绑定时有效，对@Value注解进行属性映射无效。有人就说，那我不用你不就行了？不用，你小看springboot的推广能力了，到原理篇我们看源码时，你会发现内部全是这玩意儿，算了，拿人手短吃人嘴短，认怂吧。</p><p><strong>总结</strong></p><ol><li>@ConfigurationProperties绑定属性时支持属性名宽松绑定，这个宽松体现在属性名的命名规则上</li><li>@Value注解不支持松散绑定规则</li><li>绑定前缀名推荐采用烤肉串命名规则，即使用中划线做分隔符</li></ol><h3 id="KF-2-3-常用计量单位绑定"><a href="#KF-2-3-常用计量单位绑定" class="headerlink" title="KF-2-3.常用计量单位绑定"></a>KF-2-3.常用计量单位绑定</h3><p>​        在前面的配置中，我们书写了如下配置值，其中第三项超时时间timeout描述了服务器操作超时时间，当前值是-1表示永不超时。</p><pre class=" language-YML"><code class="language-YML">servers:  ip-address: 192.168.0.1   port: 2345  timeout: -1</code></pre><p>​        但是每个人都这个值的理解会产生不同，比如线上服务器完成一次主从备份，配置超时时间240，这个240如果单位是秒就是超时时间4分钟，如果单位是分钟就是超时时间4小时。面对一次线上服务器的主从备份，设置4分钟，简直是开玩笑，别说拷贝过程，备份之前的压缩过程4分钟也搞不定，这个时候问题就来了，怎么解决这个误会？</p><p>​        除了加强约定之外，springboot充分利用了JDK8中提供的全新的用来表示计量单位的新数据类型，从根本上解决这个问题。以下模型类中添加了两个JDK8中新增的类，分别是Duration和DataSize</p><pre class=" language-JAVA"><code class="language-JAVA">@Component@Data@ConfigurationProperties(prefix = "servers")public class ServerConfig &#123;    @DurationUnit(ChronoUnit.HOURS)    private Duration serverTimeOut;    @DataSizeUnit(DataUnit.MEGABYTES)    private DataSize dataSize;&#125;</code></pre><p><strong>Duration</strong>：表示时间间隔，可以通过@DurationUnit注解描述时间单位，例如上例中描述的单位为小时（ChronoUnit.HOURS）</p><p><strong>DataSize</strong>：表示存储空间，可以通过@DataSizeUnit注解描述存储空间单位，例如上例中描述的单位为MB（DataUnit.MEGABYTES）</p><p>​        使用上述两个单位就可以有效避免因沟通不同步或文档不健全导致的信息不对称问题，从根本上解决了问题，避免产生误读。</p><p>Druation常用单位如下：</p><img src="img\image-20220222173911102.png" alt="image-20220222173911102" style="zoom:50%;" /><p>DataSize常用单位如下：</p><img src="img\image-20220222174130102.png" alt="image-20220222174130102" style="zoom:67%;" /><h3 id="KF-2-4-校验"><a href="#KF-2-4-校验" class="headerlink" title="KF-2-4.校验"></a>KF-2-4.校验</h3><p>​        目前我们在进行属性绑定时可以通过松散绑定规则在书写时放飞自我了，但是在书写时由于无法感知模型类中的数据类型，就会出现类型不匹配的问题，比如代码中需要int类型，配置中给了非法的数值，例如写一个“a”，这种数据肯定无法有效的绑定，还会引发错误。        SpringBoot给出了强大的数据校验功能，可以有效的避免此类问题的发生。在JAVAEE的JSR303规范中给出了具体的数据校验标准，开发者可以根据自己的需要选择对应的校验框架，此处使用Hibernate提供的校验框架来作为实现进行数据校验。书写应用格式非常固定，话不多说，直接上步骤</p><p><strong>步骤①</strong>：开启校验框架</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--1.导入JSR303规范--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>validation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--使用hibernate框架提供的校验器做实现--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hibernate.validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤②</strong>：在需要开启校验功能的类上使用注解@Validated开启校验功能</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"servers"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//开启对当前bean的属性注入校验</span><span class="token annotation punctuation">@Validated</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>步骤③</strong>：对具体的字段设置校验规则</p><pre class=" language-JAVA"><code class="language-JAVA">@Component@Data@ConfigurationProperties(prefix = "servers")//开启对当前bean的属性注入校验@Validatedpublic class ServerConfig &#123;    //设置具体的规则    @Max(value = 8888,message = "最大值不能超过8888")    @Min(value = 202,message = "最小值不能低于202")    private int port;&#125;</code></pre><p>​        通过设置数据格式校验，就可以有效避免非法数据加载，其实使用起来还是挺轻松的，基本上就是一个格式。</p><p><strong>总结</strong></p><ol><li>开启Bean属性校验功能一共3步：导入JSR303与Hibernate校验框架坐标、使用@Validated注解启用校验功能、使用具体校验规则规范数据校验格式</li></ol><h3 id="KF-2-5-数据类型转换"><a href="#KF-2-5-数据类型转换" class="headerlink" title="KF-2-5.数据类型转换"></a>KF-2-5.数据类型转换</h3><p>​        有关spring属性注入的问题到这里基本上就讲完了，但是最近一名开发者向我咨询了一个问题，我觉得需要给各位学习者分享一下。在学习阶段其实我们遇到的问题往往复杂度比较低，单一性比较强，但是到了线上开发时，都是综合性的问题，而这个开发者遇到的问题就是由于bean的属性注入引发的灾难。</p><p>​        先把问题描述一下，这位开发者连接数据库正常操作，但是运行程序后显示的信息是密码错误。</p><pre class=" language-CMD"><code class="language-CMD">java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)</code></pre><p>​        其实看到这个报错，几乎所有的学习者都能分辨出来，这是用户名和密码不匹配，就就是密码输入错了，但是问题就在于密码并没有输入错误，这就比较讨厌了。给的报错信息无法帮助你有效的分析问题，甚至会给你带到沟里。如果是初学者，估计这会心态就崩了，我密码没错啊，你怎么能说我有错误呢？来看看用户名密码的配置是如何写的：</p><pre class=" language-YAML"><code class="language-YAML">spring:  datasource:    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC    username: root    password: 0127</code></pre><p>​        这名开发者的生日是1月27日，所以密码就使用了0127，其实问题就出在这里了。</p><p>​        之前在基础篇讲属性注入时，提到过类型相关的知识，在整数相关知识中有这么一句话，<strong>支持二进制，八进制，十六进制</strong></p><img src="img\image-20220222225748370.png" alt="image-20220222225748370" style="zoom:80%;" /><p>​        这个问题就处在这里了，因为0127在开发者眼中是一个字符串“0127”，但是在springboot看来，这就是一个数字，而且是一个八进制的数字。当后台使用String类型接收数据时，如果配置文件中配置了一个整数值，他是先安装整数进行处理，读取后再转换成字符串。巧了，0127撞上了八进制的格式，所以最终以十进制数字87的结果存在了。</p><p>​        这里提两个注意点，第一，字符串标准书写加上引号包裹，养成习惯，第二，遇到0开头的数据多注意吧。</p><p><strong>总结</strong></p><ol><li>yaml文件中对于数字的定义支持进制书写格式，如需使用字符串请使用引号明确标注</li></ol><h2 id="KF-3-测试"><a href="#KF-3-测试" class="headerlink" title="KF-3.测试"></a>KF-3.测试</h2><p>​        说完bean配置相关的内容，下面要对前面讲过的一个知识做加强了，测试。测试是保障程序正确性的唯一屏障，在企业级开发中更是不可缺少，但是由于测试代码往往不产生实际效益，所以一些小型公司并不是很关注，导致一些开发者从小型公司进入中大型公司后，往往这一块比较短板，所以还是要拿出来把这一块知识好好说说，做一名专业的开发人员。</p><h3 id="KF-3-1-加载测试专用属性"><a href="#KF-3-1-加载测试专用属性" class="headerlink" title="KF-3-1.加载测试专用属性"></a>KF-3-1.加载测试专用属性</h3><p>​        测试过程本身并不是一个复杂的过程，但是很多情况下测试时需要模拟一些线上情况，或者模拟一些特殊情况。如果当前环境按照线上环境已经设定好了，例如是下面的配置</p><pre class=" language-YAML"><code class="language-YAML">env:  maxMemory: 32GB  minMemory: 16GB</code></pre><p>​        但是你现在想测试对应的兼容性，需要测试如下配置</p><pre class=" language-YAML"><code class="language-YAML">env:  maxMemory: 16GB  minMemory: 8GB</code></pre><p>​        这个时候我们能不能每次测试的时候都去修改源码application.yml中的配置进行测试呢？显然是不行的。每次测试前改过来，每次测试后改回去，这太麻烦了。于是我们就想，需要在测试环境中创建一组临时属性，去覆盖我们源码中设定的属性，这样测试用例就相当于是一个独立的环境，能够独立测试，这样就方便多了。</p><p><strong>临时属性</strong></p><p>​        springboot已经为我们开发者早就想好了这种问题该如何解决，并且提供了对应的功能入口。在测试用例程序中，可以通过对注解@SpringBootTest添加属性来模拟临时属性，具体如下：</p><pre class=" language-JAVA"><code class="language-JAVA">//properties属性可以为当前测试用例添加临时的属性配置@SpringBootTest(properties = &#123;"test.prop=testValue1"&#125;)public class PropertiesAndArgsTest &#123;    @Value("$&#123;test.prop&#125;")    private String msg;        @Test    void testProperties()&#123;        System.out.println(msg);    &#125;&#125;</code></pre><p>​        使用注解@SpringBootTest的properties属性就可以为当前测试用例添加临时的属性，覆盖源码配置文件中对应的属性值进行测试。</p><p><strong>临时参数</strong></p><p>​        除了上述这种情况，在前面讲解使用命令行启动springboot程序时讲过，通过命令行参数也可以设置属性值。而且线上启动程序时，通常都会添加一些专用的配置信息。作为运维人员他们才不懂java，更不懂这些配置的信息具体格式该怎么写，那如果我们作为开发者提供了对应的书写内容后，能否提前测试一下这些配置信息是否有效呢？当时是可以的，还是通过注解@SpringBootTest的另一个属性来进行设定。</p><pre class=" language-JAVA"><code class="language-JAVA">//args属性可以为当前测试用例添加临时的命令行参数@SpringBootTest(args=&#123;"--test.prop=testValue2"&#125;)public class PropertiesAndArgsTest &#123;        @Value("$&#123;test.prop&#125;")    private String msg;        @Test    void testProperties()&#123;        System.out.println(msg);    &#125;&#125;</code></pre><p>​        使用注解@SpringBootTest的args属性就可以为当前测试用例模拟命令行参数并进行测试。</p><p>​        说到这里，好奇宝宝们肯定就有新问题了，如果两者共存呢？其实如果思考一下配置属性与命令行参数的加载优先级，这个结果就不言而喻了。在属性加载的优先级设定中，有明确的优先级设定顺序，还记得下面这个顺序吗？</p><img src="img\image-20211206100859236.png" alt="image-20211206100859236" style="zoom:67%;" /><p>​        在这个属性加载优先级的顺序中，明确规定了命令行参数的优先级排序是11，而配置属性的优先级是3，结果不言而喻了，args属性配置优先于properties属性配置加载。</p><p>​        到这里我们就掌握了如果在测试用例中去模拟临时属性的设定。</p><p><strong>总结</strong></p><ol><li>加载测试临时属性可以通过注解@SpringBootTest的properties和args属性进行设定，此设定应用范围仅适用于当前测试用例</li></ol><p><strong>思考</strong></p><p>​        应用于测试环境的临时属性解决了，如果想在测试的时候临时加载一些bean能不做呢？也就是说我测试时，想搞一些独立的bean出来，专门应用于测试环境，能否实现呢？咱们下一节再讲。</p><h3 id="KF-3-2-加载测试专用配置"><a href="#KF-3-2-加载测试专用配置" class="headerlink" title="KF-3-2.加载测试专用配置"></a>KF-3-2.加载测试专用配置</h3><p>​        上一节提出了临时配置一些专用于测试环境的bean的需求，这一节我们就来解决这个问题。</p><p>​        学习过Spring的知识，我们都知道，其实一个spring环境中可以设置若干个配置文件或配置类，若干个配置信息可以同时生效。现在我们的需求就是在测试环境中再添加一个配置类，然后启动测试环境时，生效此配置就行了。其实做法和spring环境中加载多个配置信息的方式完全一样。具体操作步骤如下：</p><p><strong>步骤①</strong>：在测试包test中创建专用的测试环境配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> String <span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"bean msg"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        上述配置仅用于演示当前实验效果，实际开发可不能这么注入String类型的数据</p><p><strong>步骤②</strong>：在启动测试环境时，导入测试环境专用的配置类，使用@Import注解即可实现</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>MsgConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        到这里就通过@Import属性实现了基于开发环境的配置基础上，对配置进行测试环境的追加操作，实现了1+1的配置环境效果。这样我们就可以实现每一个不同的测试用例加载不同的bean的效果，丰富测试用例的编写，同时不影响开发环境的配置。</p><p><strong>总结</strong></p><ol><li>定义测试环境专用的配置类，然后通过@Import注解在具体的测试中导入临时的配置，例如测试用例，方便测试过程，且上述配置不影响其他的测试类环境</li></ol><p><strong>思考</strong></p><p>​        当前我们已经可以实现业务层和数据层的测试，并且通过临时配置，控制每个测试用例加载不同的测试数据。但是实际企业开发不仅要保障业务层与数据层的功能安全有效，也要保障表现层的功能正常。但是我们目的对表现层的测试都是通过postman手工测试的，并没有在打包过程中体现表现层功能被测试通过。能否在测试用例中对表现层进行功能测试呢？还真可以，咱们下一节再讲。</p><h3 id="KF-3-3-Web环境模拟测试"><a href="#KF-3-3-Web环境模拟测试" class="headerlink" title="KF-3-3.Web环境模拟测试"></a>KF-3-3.Web环境模拟测试</h3><p>​        在测试中对表现层功能进行测试需要一个基础和一个功能。所谓的一个基础是运行测试程序时，必须启动web环境，不然没法测试web功能。一个功能是必须在测试程序中具备发送web请求的能力，不然无法实现web功能的测试。所以在测试用例中测试表现层接口这项工作就转换成了两件事，一，如何在测试类中启动web测试，二，如何在测试类中发送web请求。下面一件事一件事进行，先说第一个</p><p><strong>测试类中启动web环境</strong></p><p>​        每一个springboot的测试类上方都会标准@SpringBootTest注解，而注解带有一个属性，叫做webEnvironment。通过该属性就可以设置在测试用例中启动web环境，具体如下：</p><pre class=" language-JAVA"><code class="language-JAVA">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)public class WebTest &#123;    &#125;</code></pre><p>​        测试类中启动web环境时，可以指定启动的Web环境对应的端口，springboot提供了4种设置值，分别如下：</p><img src="img\image-20220223125453317.png" alt="image-20220223125453317" style="zoom:80%;" /><ul><li>MOCK：根据当前设置确认是否启动web环境，例如使用了Servlet的API就启动web环境，属于适配性的配置</li><li>DEFINED_PORT：使用自定义的端口作为web服务器端口</li><li>RANDOM_PORT：使用随机端口作为web服务器端口</li><li>NONE：不启动web环境</li></ul><p>​        通过上述配置，现在启动测试程序时就可以正常启用web环境了，建议大家测试时使用RANDOM_PORT，避免代码中因为写死设定引发线上功能打包测试时由于端口冲突导致意外现象的出现。就是说你程序中写了用8080端口，结果线上环境8080端口被占用了，结果你代码中所有写的东西都要改，这就是写死代码的代价。现在你用随机端口就可以测试出来你有没有这种问题的隐患了。</p><p>​        测试环境中的web环境已经搭建好了，下面就可以来解决第二个问题了，如何在程序代码中发送web请求。</p><p><strong>测试类中发送请求</strong></p><p>​        对于测试类中发送请求，其实java的API就提供对应的功能，只不过平时各位小伙伴接触的比较少，所以较为陌生。springboot为了便于开发者进行对应的功能开发，对其又进行了包装，简化了开发步骤，具体操作如下：</p><p><strong>步骤①</strong>：在测试类中开启web虚拟调用功能，通过注解@AutoConfigureMockMvc实现此功能的开启</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> SpringBootTest<span class="token punctuation">.</span>WebEnvironment<span class="token punctuation">.</span>RANDOM_PORT<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//开启虚拟MVC调用</span><span class="token annotation punctuation">@AutoConfigureMockMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>步骤②</strong>：定义发起虚拟调用的对象MockMVC，通过自动装配的形式初始化对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> SpringBootTest<span class="token punctuation">.</span>WebEnvironment<span class="token punctuation">.</span>RANDOM_PORT<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//开启虚拟MVC调用</span><span class="token annotation punctuation">@AutoConfigureMockMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testWeb</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> MockMvc mvc<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>步骤③</strong>：创建一个虚拟请求对象，封装请求的路径，并使用MockMVC对象发送对应请求</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> SpringBootTest<span class="token punctuation">.</span>WebEnvironment<span class="token punctuation">.</span>RANDOM_PORT<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//开启虚拟MVC调用</span><span class="token annotation punctuation">@AutoConfigureMockMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testWeb</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> MockMvc mvc<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//http://localhost:8080/books</span>        <span class="token comment" spellcheck="true">//创建虚拟请求，当前访问/books</span>        MockHttpServletRequestBuilder builder <span class="token operator">=</span> MockMvcRequestBuilders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行对应的请求</span>        mvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        执行测试程序，现在就可以正常的发送/books对应的请求了，注意访问路径不要写<a href="http://localhost:8080/books%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%89%8D%E9%9D%A2%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8IP%E5%9C%B0%E5%9D%80%E5%92%8C%E7%AB%AF%E5%8F%A3%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AF%E5%BD%93%E5%89%8D%E8%99%9A%E6%8B%9F%E7%9A%84web%E7%8E%AF%E5%A2%83%EF%BC%8C%E6%97%A0%E9%9C%80%E6%8C%87%E5%AE%9A%EF%BC%8C%E4%BB%85%E6%8C%87%E5%AE%9A%E8%AF%B7%E6%B1%82%E7%9A%84%E5%85%B7%E4%BD%93%E8%B7%AF%E5%BE%84%E5%8D%B3%E5%8F%AF%E3%80%82">http://localhost:8080/books，因为前面的服务器IP地址和端口使用的是当前虚拟的web环境，无需指定，仅指定请求的具体路径即可。</a></p><p><strong>总结</strong></p><ol><li>在测试类中测试web层接口要保障测试类启动时启动web容器，使用@SpringBootTest注解的webEnvironment属性可以虚拟web环境用于测试</li><li>为测试方法注入MockMvc对象，通过MockMvc对象可以发送虚拟请求，模拟web请求调用过程</li></ol><p><strong>思考</strong></p><p>​        目前已经成功的发送了请求，但是还没有起到测试的效果，测试过程必须出现预计值与真实值的比对结果才能确认测试结果是否通过，虚拟请求中能对哪些请求结果进行比对呢？咱们下一节再讲。</p><p><strong>web环境请求结果比对</strong></p><p>​        上一节已经在测试用例中成功的模拟出了web环境，并成功的发送了web请求，本节就来解决发送请求后如何比对发送结果的问题。其实发完请求得到的信息只有一种，就是响应对象。至于响应对象中包含什么，就可以比对什么。常见的比对内容如下：</p><ul><li><p>响应状态匹配</p><pre class=" language-JAVA"><code class="language-JAVA">@Testvoid testStatus(@Autowired MockMvc mvc) throws Exception &#123;    MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/books");    ResultActions action = mvc.perform(builder);    //设定预期值 与真实值进行比较，成功测试通过，失败测试失败    //定义本次调用的预期值    StatusResultMatchers status = MockMvcResultMatchers.status();    //预计本次调用时成功的：状态200    ResultMatcher ok = status.isOk();    //添加预计值到本次调用过程中进行匹配    action.andExpect(ok);&#125;</code></pre></li><li><p>响应体匹配（非json数据格式）</p><pre class=" language-JAVA"><code class="language-JAVA">@Testvoid testBody(@Autowired MockMvc mvc) throws Exception &#123;    MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/books");    ResultActions action = mvc.perform(builder);    //设定预期值 与真实值进行比较，成功测试通过，失败测试失败    //定义本次调用的预期值    ContentResultMatchers content = MockMvcResultMatchers.content();    ResultMatcher result = content.string("springboot2");    //添加预计值到本次调用过程中进行匹配    action.andExpect(result);&#125;</code></pre></li><li><p>响应体匹配（json数据格式，开发中的主流使用方式）</p><pre class=" language-JAVA"><code class="language-JAVA">@Testvoid testJson(@Autowired MockMvc mvc) throws Exception &#123;    MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/books");    ResultActions action = mvc.perform(builder);    //设定预期值 与真实值进行比较，成功测试通过，失败测试失败    //定义本次调用的预期值    ContentResultMatchers content = MockMvcResultMatchers.content();    ResultMatcher result = content.json("&#123;\"id\":1,\"name\":\"springboot2\",\"type\":\"springboot\"&#125;");    //添加预计值到本次调用过程中进行匹配    action.andExpect(result);&#125;</code></pre></li><li><p>响应头信息匹配</p><pre class=" language-JAVA"><code class="language-JAVA">@Testvoid testContentType(@Autowired MockMvc mvc) throws Exception &#123;    MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/books");    ResultActions action = mvc.perform(builder);    //设定预期值 与真实值进行比较，成功测试通过，失败测试失败    //定义本次调用的预期值    HeaderResultMatchers header = MockMvcResultMatchers.header();    ResultMatcher contentType = header.string("Content-Type", "application/json");    //添加预计值到本次调用过程中进行匹配    action.andExpect(contentType);&#125;</code></pre></li></ul><p>​        基本上齐了，头信息，正文信息，状态信息都有了，就可以组合出一个完美的响应结果比对结果了。以下范例就是三种信息同时进行匹配校验，也是一个完整的信息匹配过程。</p><pre class=" language-JAVA"><code class="language-JAVA">@Testvoid testGetById(@Autowired MockMvc mvc) throws Exception &#123;    MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get("/books");    ResultActions action = mvc.perform(builder);    StatusResultMatchers status = MockMvcResultMatchers.status();    ResultMatcher ok = status.isOk();    action.andExpect(ok);    HeaderResultMatchers header = MockMvcResultMatchers.header();    ResultMatcher contentType = header.string("Content-Type", "application/json");    action.andExpect(contentType);    ContentResultMatchers content = MockMvcResultMatchers.content();    ResultMatcher result = content.json("&#123;\"id\":1,\"name\":\"springboot\",\"type\":\"springboot\"&#125;");    action.andExpect(result);&#125;</code></pre><p><strong>总结</strong></p><ol><li>web虚拟调用可以对本地虚拟请求的返回响应信息进行比对，分为响应头信息比对、响应体信息比对、响应状态信息比对</li></ol><h3 id="KF-3-4-数据层测试回滚"><a href="#KF-3-4-数据层测试回滚" class="headerlink" title="KF-3-4.数据层测试回滚"></a>KF-3-4.数据层测试回滚</h3><p>​        当前我们的测试程序可以完美的进行表现层、业务层、数据层接口对应的功能测试了，但是测试用例开发完成后，在打包的阶段由于test生命周期属于必须被运行的生命周期，如果跳过会给系统带来极高的安全隐患，所以测试用例必须执行。但是新的问题就呈现了，测试用例如果测试时产生了事务提交就会在测试过程中对数据库数据产生影响，进而产生垃圾数据。这个过程不是我们希望发生的，作为开发者测试用例该运行运行，但是过程中产生的数据不要在我的系统中留痕，这样该如何处理呢？</p><p>​        springboot早就为开发者想到了这个问题，并且针对此问题给出了最简解决方案，在原始测试用例中添加注解@Transactional即可实现当前测试用例的事务不提交。当程序运行后，只要注解@Transactional出现的位置存在注解@SpringBootTest，springboot就会认为这是一个测试程序，无需提交事务，所以也就可以避免事务的提交。</p><pre class=" language-JAVA"><code class="language-JAVA">@SpringBootTest@Transactional@Rollback(true)public class DaoTest &#123;    @Autowired    private BookService bookService;    @Test    void testSave()&#123;        Book book = new Book();        book.setName("springboot3");        book.setType("springboot3");        book.setDescription("springboot3");        bookService.save(book);    &#125;&#125;</code></pre><p>​        如果开发者想提交事务，也可以，再添加一个@RollBack的注解，设置回滚状态为false即可正常提交事务，是不是很方便？springboot在辅助开发者日常工作这一块展现出了惊人的能力，实在太贴心了。</p><p><strong>总结</strong></p><ol><li>在springboot的测试类中通过添加注解@Transactional来阻止测试用例提交事务</li><li>通过注解@Rollback控制springboot测试类执行结果是否提交事务，需要配合注解@Transactional使用</li></ol><p><strong>思考</strong></p><p>​        当前测试程序已经近乎完美了，但是由于测试用例中书写的测试数据属于固定数据，往往失去了测试的意义，开发者可以针对测试用例进行针对性开发，这样就有可能出现测试用例不能完美呈现业务逻辑代码是否真实有效的达成业务目标的现象，解决方案其实很容易想，测试用例的数据只要随机产生就可以了，能实现吗？咱们下一节再讲。</p><h3 id="KF-3-5-测试用例数据设定"><a href="#KF-3-5-测试用例数据设定" class="headerlink" title="KF-3-5.测试用例数据设定"></a>KF-3-5.测试用例数据设定</h3><p>​        对于测试用例的数据固定书写肯定是不合理的，springboot提供了在配置中使用随机值的机制，确保每次运行程序加载的数据都是随机的。具体如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">testcase</span><span class="token punctuation">:</span>  <span class="token key atrule">book</span><span class="token punctuation">:</span>    <span class="token key atrule">id</span><span class="token punctuation">:</span> $&amp;<span class="token comment" spellcheck="true">#123;random.int&amp;#125;</span>    <span class="token key atrule">id2</span><span class="token punctuation">:</span> $&amp;<span class="token comment" spellcheck="true">#123;random.int(10)&amp;#125;</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> $&amp;<span class="token comment" spellcheck="true">#123;random.int!5,10!&amp;#125;</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> $&amp;<span class="token comment" spellcheck="true">#123;random.value&amp;#125;</span>    <span class="token key atrule">uuid</span><span class="token punctuation">:</span> $&amp;<span class="token comment" spellcheck="true">#123;random.uuid&amp;#125;</span>    <span class="token key atrule">publishTime</span><span class="token punctuation">:</span> $&amp;<span class="token comment" spellcheck="true">#123;random.long&amp;#125;</span></code></pre><p>​        当前配置就可以在每次运行程序时创建一组随机数据，避免每次运行时数据都是固定值的尴尬现象发生，有助于测试功能的进行。数据的加载按照之前加载数据的形式，使用@ConfigurationProperties注解即可</p><pre class=" language-JAVA"><code class="language-JAVA">@Component@Data@ConfigurationProperties(prefix = "testcase.book")public class BookCase &#123;    private int id;    private int id2;    private int type;    private String name;    private String uuid;    private long publishTime;&#125;</code></pre><p>​        对于随机值的产生，还有一些小的限定规则，比如产生的数值性数据可以设置范围等，具体如下：</p><img src="img\image-20220223135454862.png" alt="image-20220223135454862" style="zoom:80%;" /><ul><li>${random.int}表示随机整数</li><li>${random.int(10)}表示10以内的随机数</li><li>${random.int(10,20)}表示10到20的随机数</li><li>其中()可以是任意字符，例如[]，!!均可</li></ul><p><strong>总结</strong></p><ol><li>使用随机数据可以替换测试用例中书写的固定数据，提高测试用例中的测试数据有效性</li></ol><h2 id="KF-4-数据层解决方案"><a href="#KF-4-数据层解决方案" class="headerlink" title="KF-4.数据层解决方案"></a>KF-4.数据层解决方案</h2><p>​        开发实用篇前三章基本上是开胃菜，从第四章开始，开发实用篇进入到了噩梦难度了，从这里开始，不再是单纯的在springboot内部搞事情了，要涉及到很多相关知识。本章节主要内容都是和数据存储与读取相关，前期学习的知识与数据层有关的技术基本上都围绕在数据库这个层面上，所以本章要讲的第一个大的分支就是SQL解决方案相关的内容，除此之外，数据的来源还可以是非SQL技术相关的数据操作，因此第二部分围绕着NOSQL解决方案讲解。至于什么是NOSQL解决方案，讲到了再说吧。下面就从SQL解决方案说起。</p><h3 id="KF-4-1-SQL"><a href="#KF-4-1-SQL" class="headerlink" title="KF-4-1.SQL"></a>KF-4-1.SQL</h3><p>​        回忆一下之前做SSMP整合的时候数据层解决方案涉及到了哪些技术？MySQL数据库与MyBatisPlus框架，后面又学了Druid数据源的配置，所以现在数据层解决方案可以说是Mysql+Druid+MyBatisPlus。而三个技术分别对应了数据层操作的三个层面：</p><ul><li>数据源技术：Druid</li><li>持久化技术：MyBatisPlus</li><li>数据库技术：MySQL</li></ul><p>​        下面的研究就分为三个层面进行研究，对应上面列出的三个方面，咱们就从第一个数据源技术开始说起。</p><h4 id="数据源技术"><a href="#数据源技术" class="headerlink" title="数据源技术"></a>数据源技术</h4><p>​        目前我们使用的数据源技术是Druid，运行时可以在日志中看到对应的数据源初始化信息，具体如下：</p><pre class=" language-CMD"><code class="language-CMD">INFO 28600 --- [           main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSourceINFO 28600 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-1&#125; inited</code></pre><p>​        如果不使用Druid数据源，程序运行后是什么样子呢？是独立的数据库连接对象还是有其他的连接池技术支持呢？将Druid技术对应的starter去掉再次运行程序可以在日志中找到如下初始化信息：</p><pre class=" language-CMD"><code class="language-CMD">INFO 31820 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...INFO 31820 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.</code></pre><p>​        虽然没有DruidDataSource相关的信息了，但是我们发现日志中有HikariDataSource这个信息，就算不懂这是个什么技术，看名字也能看出来，以DataSource结尾的名称，这一定是一个数据源技术。我们又没有手工添加这个技术，这个技术哪里来的呢？这就是这一节要讲的知识，springboot内嵌数据源。</p><p>​        数据层技术是每一个企业级应用程序都会用到的，而其中必定会进行数据库连接的管理。springboot根据开发者的习惯出发，开发者提供了数据源技术，就用你提供的，开发者没有提供，那总不能手工管理一个一个的数据库连接对象啊，怎么办？我给你一个默认的就好了，这样省心又省事，大家都方便。</p><p>​        springboot提供了3款内嵌数据源技术，分别如下：</p><ul><li>HikariCP</li><li>Tomcat提供DataSource</li><li>Commons DBCP</li></ul><p>​        第一种，HikartCP，这是springboot官方推荐的数据源技术，作为默认内置数据源使用。啥意思？你不配置数据源，那就用这个。</p><p>​        第二种，Tomcat提供的DataSource，如果不想用HikartCP，并且使用tomcat作为web服务器进行web程序的开发，使用这个。为什么是Tomcat，不是其他web服务器呢？因为web技术导入starter后，默认使用内嵌tomcat，既然都是默认使用的技术了，那就一用到底，数据源也用它的。有人就提出怎么才能不使用HikartCP用tomcat提供的默认数据源对象呢？把HikartCP技术的坐标排除掉就OK了。</p><p>​        第三种，DBCP，这个使用的条件就更苛刻了，既不使用HikartCP也不使用tomcat的DataSource时，默认给你用这个。</p><p>​        springboot这心操的，也是稀碎啊，就怕你自己管不好连接对象，给你一顿推荐，真是开发界的最强辅助。既然都给你奶上了，那就受用吧，怎么配置使用这些东西呢？之前我们配置druid时使用druid的starter对应的配置如下：</p><pre class=" language-YAML"><code class="language-YAML">spring:  datasource:    druid:             url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC      driver-class-name: com.mysql.cj.jdbc.Driver      username: root      password: root</code></pre><p>​        换成是默认的数据源HikariCP后，直接吧druid删掉就行了，如下：</p><pre class=" language-YAML"><code class="language-YAML">spring:  datasource:    url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC    driver-class-name: com.mysql.cj.jdbc.Driver    username: root    password: root</code></pre><p>​         当然，也可以写上是对hikari做的配置，但是url地址要单独配置，如下：</p><pre class=" language-YAML"><code class="language-YAML">spring:  datasource:    url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC    hikari:      driver-class-name: com.mysql.cj.jdbc.Driver      username: root      password: root</code></pre><p>​        这就是配置hikari数据源的方式。如果想对hikari做进一步的配置，可以继续配置其独立的属性。例如：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/ssm_db<span class="token punctuation">?</span>serverTimezone=UTC    <span class="token key atrule">hikari</span><span class="token punctuation">:</span>      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver      <span class="token key atrule">username</span><span class="token punctuation">:</span> root      <span class="token key atrule">password</span><span class="token punctuation">:</span> root      <span class="token key atrule">maximum-pool-size</span><span class="token punctuation">:</span> <span class="token number">50</span></code></pre><p>​        如果不想使用hikari数据源，使用tomcat的数据源或者DBCP配置格式也是一样的。学习到这里，以后我们做数据层时，数据源对象的选择就不再是单一的使用druid数据源技术了，可以根据需要自行选择。</p><p><strong>总结</strong></p><ol><li>springboot技术提供了3种内置的数据源技术，分别是Hikari、tomcat内置数据源、DBCP</li></ol><h4 id="持久化技术"><a href="#持久化技术" class="headerlink" title="持久化技术"></a>持久化技术</h4><p>​        说完数据源解决方案，再来说一下持久化解决方案。springboot充分发挥其最强辅助的特征，给开发者提供了一套现成的数据层技术，叫做JdbcTemplate。其实这个技术不能说是springboot提供的，因为不使用springboot技术，一样能使用它，谁提供的呢？spring技术提供的，所以在springboot技术范畴中，这个技术也是存在的，毕竟springboot技术是加速spring程序开发而创建的。</p><p>​        这个技术其实就是回归到jdbc最原始的编程形式来进行数据层的开发，下面直接上操作步骤：</p><p><strong>步骤①</strong>：导入jdbc对应的坐标，记得是starter</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>&lt;/dependency</code></pre><p><strong>步骤②</strong>：自动装配JdbcTemplate对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot15SqlApplicationTests</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testJdbcTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> JdbcTemplate jdbcTemplate<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>步骤③</strong>：使用JdbcTemplate实现查询操作（非实体类封装数据的查询操作）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testJdbcTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> JdbcTemplate jdbcTemplate<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"select * from tbl_book"</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> maps <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>maps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>步骤④</strong>：使用JdbcTemplate实现查询操作（实体类封装数据的查询操作）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testJdbcTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> JdbcTemplate jdbcTemplate<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"select * from tbl_book"</span><span class="token punctuation">;</span>    RowMapper<span class="token operator">&lt;</span>Book<span class="token operator">></span> rm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowMapper</span><span class="token operator">&lt;</span>Book<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Book <span class="token function">mapRow</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">,</span> <span class="token keyword">int</span> rowNum<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Book temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"description"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> temp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Book<span class="token operator">></span> list <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> rm<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>步骤⑤</strong>：使用JdbcTemplate实现增删改操作</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testJdbcTemplateSave</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span> JdbcTemplate jdbcTemplate<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"insert into tbl_book values(3,'springboot1','springboot2','springboot3')"</span><span class="token punctuation">;</span>    jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        如果想对JdbcTemplate对象进行相关配置，可以在yml文件中进行设定，具体如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">jdbc</span><span class="token punctuation">:</span>    <span class="token key atrule">template</span><span class="token punctuation">:</span>      <span class="token key atrule">query-timeout</span><span class="token punctuation">:</span> <span class="token number">-1   </span><span class="token comment" spellcheck="true"># 查询超时时间</span>      <span class="token key atrule">max-rows</span><span class="token punctuation">:</span> <span class="token number">500       </span><span class="token comment" spellcheck="true"># 最大行数</span>      <span class="token key atrule">fetch-size</span><span class="token punctuation">:</span> <span class="token number">-1      </span><span class="token comment" spellcheck="true"># 缓存行数</span></code></pre><p><strong>总结</strong></p><ol><li>SpringBoot内置JdbcTemplate持久化解决方案</li><li>使用JdbcTemplate需要导入spring-boot-starter-jdbc的坐标</li></ol><h4 id="数据库技术"><a href="#数据库技术" class="headerlink" title="数据库技术"></a>数据库技术</h4><p>​        截止到目前，springboot给开发者提供了内置的数据源解决方案和持久化解决方案，在数据层解决方案三件套中还剩下一个数据库，莫非springboot也提供有内置的解决方案？还真有，还不是一个，三个，这一节就来说说内置的数据库解决方案。</p><p>​        springboot提供了3款内置的数据库，分别是</p><ul><li>H2</li><li>HSQL</li><li>Derby</li></ul><p>​        以上三款数据库除了可以独立安装之外，还可以像是tomcat服务器一样，采用内嵌的形式运行在spirngboot容器中。内嵌在容器中运行，那必须是java对象啊，对，这三款数据库底层都是使用java语言开发的。</p><p>​        我们一直使用MySQL数据库就挺好的，为什么有需求用这个呢？原因就在于这三个数据库都可以采用内嵌容器的形式运行，在应用程序运行后，如果我们进行测试工作，此时测试的数据无需存储在磁盘上，但是又要测试使用，内嵌数据库就方便了，运行在内存中，该测试测试，该运行运行，等服务器关闭后，一切烟消云散，多好，省得你维护外部数据库了。这也是内嵌数据库的最大优点，方便进行功能测试。</p><p>​        下面以H2数据库为例讲解如何使用这些内嵌数据库，操作步骤也非常简单，简单才好用嘛</p><p><strong>步骤①</strong>：导入H2数据库对应的坐标，一共2个</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.h2database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤②</strong>：将工程设置为web工程，启动工程时启动H2数据库</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤③</strong>：通过配置开启H2数据库控制台访问程序，也可以使用其他的数据库连接软件操作</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">h2</span><span class="token punctuation">:</span>    <span class="token key atrule">console</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /h2</code></pre><p>​        web端访问路径/h2，访问密码123456，如果访问失败，先配置下列数据源，启动程序运行后再次访问/h2路径就可以正常访问了</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">datasource</span><span class="token punctuation">:</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>h2<span class="token punctuation">:</span>~/test  <span class="token key atrule">hikari</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> org.h2.Driver    <span class="token key atrule">username</span><span class="token punctuation">:</span> sa    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span></code></pre><p><strong>步骤④</strong>：使用JdbcTemplate或MyBatisPlus技术操作数据库</p><p>（略）</p><p>​        其实我们只是换了一个数据库而已，其他的东西都不受影响。一个重要提醒，别忘了，上线时，把内存级数据库关闭，采用MySQL数据库作为数据持久化方案，关闭方式就是设置enabled属性为false即可。</p><p><strong>总结</strong></p><ol><li>H2内嵌式数据库启动方式，添加坐标，添加配置</li><li>H2数据库线上运行时请务必关闭</li></ol><p>​        到这里SQL相关的数据层解决方案就讲完了，现在的可选技术就丰富的多了。</p><ul><li>数据源技术：Druid、Hikari、tomcat DataSource、DBCP</li><li>持久化技术：MyBatisPlus、MyBatis、JdbcTemplate</li><li>数据库技术：MySQL、H2、HSQL、Derby</li></ul><p>​        现在开发程序时就可以在以上技术中任选一种组织成一套数据库解决方案了。</p><h3 id="KF-4-2-NoSQL"><a href="#KF-4-2-NoSQL" class="headerlink" title="KF-4-2.NoSQL"></a>KF-4-2.NoSQL</h3><p>​        SQL数据层解决方案说完了，下面来说收NoSQL数据层解决方案。这个NoSQL是什么意思呢？从字面来看，No表示否定，NoSQL就是非关系型数据库解决方案，意思就是数据该存存该取取，只是这些数据不放在关系型数据库中了，那放在哪里？自然是一些能够存储数据的其他相关技术中了，比如Redis等。本节讲解的内容就是springboot如何整合这些技术，在springboot官方文档中提供了10种相关技术的整合方案，我们将讲解国内市场上最流行的几款NoSQL数据库整合方案，分别是Redis、MongoDB、ES。</p><p>​        因为每个小伙伴学习这门课程的时候起点不同，为了便于各位学习者更好的学习，每种技术在讲解整合前都会先讲一下安装和基本使用，然后再讲整合。如果对某个技术比较熟悉的小伙伴可以直接跳过安装的学习过程，直接看整合方案即可。此外上述这些技术最佳使用方案都是在Linux服务器上部署，但是考虑到各位小伙伴的学习起点差异过大，所以下面的课程都是以Windows平台作为安装基础讲解，如果想看Linux版软件安装，可以再找到对应技术的学习文档查阅学习。</p><h4 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h4><p>​        Redis是一款采用key-value数据存储格式的内存级NoSQL数据库，重点关注数据存储格式，是key-value格式，也就是键值对的存储形式。与MySQL数据库不同，MySQL数据库有表、有字段、有记录，Redis没有这些东西，就是一个名称对应一个值，并且数据以存储在内存中使用为主。什么叫以存储在内存中为主？其实Redis有它的数据持久化方案，分别是RDB和AOF，但是Redis自身并不是为了数据持久化而生的，主要是在内存中保存数据，加速数据访问的，所以说是一款内存级数据库。</p><p>​        Redis支持多种数据存储格式，比如可以直接存字符串，也可以存一个map集合，list集合，后面会涉及到一些不同格式的数据操作，这个需要先学习一下才能进行整合，所以在基本操作中会介绍一些相关操作。下面就先安装，再操作，最后说整合</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>​        windows版安装包下载地址：<a href="https://github.com/tporadowski/redis/releases">https://github.com/tporadowski/redis/releases</a></p><p>​        下载的安装包有两种形式，一种是一键安装的msi文件，还有一种是解压缩就能使用的zip文件，哪种形式都行，这里就不介绍安装过程了，本课程采用的是msi一键安装的msi文件进行安装的。</p><p>​        啥是msi，其实就是一个文件安装包，不仅安装软件，还帮你把安装软件时需要的功能关联在一起，打包操作。比如如安装序列、创建和设置安装路径、设置系统依赖项、默认设定安装选项和控制安装过程的属性。说简单点就是一站式服务，安装过程一条龙操作一气呵成，就是为小白用户提供的软件安装程序。</p><p>​        安装完毕后会得到如下文件，其中有两个文件对应两个命令，是启动Redis的核心命令，需要再CMD命令行模式执行。</p><img src="img\image-20220224091709173.png" alt="image-20220224091709173" style="zoom: 80%;" /><p><strong>启动服务器</strong></p><pre class=" language-CMD"><code class="language-CMD">redis-server.exe redis.windows.conf</code></pre><p>​        初学者无需调整服务器对外服务端口，默认6379。</p><p><strong>启动客户端</strong></p><pre class=" language-CMD"><code class="language-CMD">redis-cli.exe</code></pre><p>​        如果启动redis服务器失败，可以先启动客户端，然后执行shutdown操作后退出，此时redis服务器就可以正常执行了。</p><h5 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h5><p>​        服务器启动后，使用客户端就可以连接服务器，类似于启动完MySQL数据库，然后启动SQL命令行操作数据库。        </p><p>​        放置一个字符串数据到redis中，先为数据定义一个名称，比如name,age等，然后使用命令set设置数据到redis服务器中即可</p><pre class=" language-CMD"><code class="language-CMD">set name itheimaset age 12</code></pre><p>​        从redis中取出已经放入的数据，根据名称取，就可以得到对应数据。如果没有对应数据就会得到(nil)</p><pre class=" language-CMD"><code class="language-CMD">get nameget age</code></pre><p>​        以上使用的数据存储是一个名称对应一个值，如果要维护的数据过多，可以使用别的数据存储结构。例如hash，它是一种一个名称下可以存储多个数据的存储模型，并且每个数据也可以有自己的二级存储名称。向hash结构中存储数据格式如下：</p><pre><code>hset a a1 aa1        #对外key名称是a，在名称为a的存储模型中，a1这个key中保存了数据aa1hset a a2 aa2</code></pre><p>​        获取hash结构中的数据命令如下</p><pre class=" language-CMD"><code class="language-CMD">hget a a1            #得到aa1hget a a2            #得到aa2</code></pre><p>​        有关redis的基础操作就普及到这里，需要全面掌握redis技术，请参看相关教程学习。</p><h5 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h5><p>​        在进行整合之前先梳理一下整合的思想，springboot整合任何技术其实就是在springboot中使用对应技术的API。如果两个技术没有交集，就不存在整合的概念了。所谓整合其实就是使用springboot技术去管理其他技术，几个问题是躲不掉的。</p><p>​        第一，需要先导入对应技术的坐标，而整合之后，这些坐标都有了一些变化</p><p>​        第二，任何技术通常都会有一些相关的设置信息，整合之后，这些信息如何写，写在哪是一个问题</p><p>​        第三，没有整合之前操作如果是模式A的话，整合之后如果没有给开发者带来一些便捷操作，那整合将毫无意义，所以整合后操作肯定要简化一些，那对应的操作方式自然也有所不同</p><p>​        按照上面的三个问题去思考springboot整合所有技术是一种通用思想，在整合的过程中会逐步摸索出整合的套路，而且适用性非常强，经过若干种技术的整合后基本上可以总结出一套固定思维。</p><p>​        下面就开始springboot整合redis，操作步骤如下：</p><p><strong>步骤①</strong>：导入springboot整合redis的starter坐标</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>​        上述坐标可以在创建模块的时候通过勾选的形式进行选择，归属NoSQL分类中</p><img src="img\image-20220224101142220.png" alt="image-20220224101142220" style="zoom:50%;" /><p><strong>步骤②</strong>：进行基础配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span></code></pre><p>​        操作redis，最基本的信息就是操作哪一台redis服务器，所以服务器地址属于基础配置信息，不可缺少。但是即便你不配置，目前也是可以用的。因为以上两组信息都有默认配置，刚好就是上述配置值。</p><p><strong>步骤③</strong>：使用springboot整合redis的专用客户端接口操作，此处使用的是RedisTemplate</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot16RedisApplicationTests</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ValueOperations ops <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ops<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ValueOperations ops <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object age <span class="token operator">=</span> ops<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">hset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        HashOperations ops <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ops<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">hget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        HashOperations ops <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object val <span class="token operator">=</span> ops<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        在操作redis时，需要先确认操作何种数据，根据数据种类得到操作接口。例如使用opsForValue()获取string类型的数据操作接口，使用opsForHash()获取hash类型的数据操作接口，剩下的就是调用对应api操作了。各种类型的数据操作接口如下：</p><img src="img\image-20220224103104908.png" alt="image-20220224103104908" style="zoom:80%;" /><p><strong>总结</strong></p><ol><li>springboot整合redis步骤<ol><li>导入springboot整合redis的starter坐标</li><li>进行基础配置</li><li>使用springboot整合redis的专用客户端接口RedisTemplate操作</li></ol></li></ol><p><strong>StringRedisTemplate</strong></p><p>​        由于redis内部不提供java对象的存储格式，因此当操作的数据以对象的形式存在时，会进行转码，转换成字符串格式后进行操作。为了方便开发者使用基于字符串为数据的操作，springboot整合redis时提供了专用的API接口StringRedisTemplate，你可以理解为这是RedisTemplate的一种指定数据泛型的操作API。</p><pre class=" language-JAVA"><code class="language-JAVA">@SpringBootTestpublic class StringRedisTemplateTest &#123;    @Autowired    private StringRedisTemplate stringRedisTemplate;    @Test    void get()&#123;        ValueOperations<String, String> ops = stringRedisTemplate.opsForValue();        String name = ops.get("name");        System.out.println(name);    &#125;&#125;</code></pre><p><strong>redis客户端选择</strong></p><pre><code>     springboot整合redis技术提供了多种客户端兼容模式，默认提供的是lettucs客户端技术，也可以根据需要切换成指定客户端技术，例如jedis客户端技术，切换成jedis客户端技术操作步骤如下：</code></pre><p><strong>步骤①</strong>：导入jedis坐标</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>​        jedis坐标受springboot管理，无需提供版本号</p><p><strong>步骤②</strong>：配置客户端技术类型，设置为jedis</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">client-type</span><span class="token punctuation">:</span> jedis</code></pre><p><strong>步骤③</strong>：根据需要设置对应的配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">client-type</span><span class="token punctuation">:</span> jedis    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">16</span>    <span class="token key atrule">jedis</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">16</span></code></pre><p><strong>lettcus与jedis区别</strong></p><ul><li>jedis连接Redis服务器是直连模式，当多线程模式下使用jedis会存在线程安全问题，解决方案可以通过配置连接池使每个连接专用，这样整体性能就大受影响</li><li>lettcus基于Netty框架进行与Redis服务器连接，底层设计中采用StatefulRedisConnection。 StatefulRedisConnection自身是线程安全的，可以保障并发访问安全问题，所以一个连接可以被多线程复用。当然lettcus也支持多连接实例一起工作</li></ul><p><strong>总结</strong></p><ol><li>springboot整合redis提供了StringRedisTemplate对象，以字符串的数据格式操作redis</li><li>如果需要切换redis客户端实现技术，可以通过配置的形式进行</li></ol><h4 id="SpringBoot整合MongoDB"><a href="#SpringBoot整合MongoDB" class="headerlink" title="SpringBoot整合MongoDB"></a>SpringBoot整合MongoDB</h4><p>​        使用Redis技术可以有效的提高数据访问速度，但是由于Redis的数据格式单一性，无法操作结构化数据，当操作对象型的数据时，Redis就显得捉襟见肘。在保障访问速度的情况下，如果想操作结构化数据，看来Redis无法满足要求了，此时需要使用全新的数据存储结束来解决此问题，本节讲解springboot如何整合MongoDB技术。</p><p>​        MongoDB是一个开源、高性能、无模式的文档型数据库，它是NoSQL数据库产品中的一种，是最像关系型数据库的非关系型数据库。</p><p>​        上述描述中几个词，其中对于我们最陌生的词是无模式的。什么叫无模式呢？简单说就是作为一款数据库，没有固定的数据存储结构，第一条数据可能有A、B、C一共3个字段，第二条数据可能有D、E、F也是3个字段，第三条数据可能是A、C、E3个字段，也就是说数据的结构不固定，这就是无模式。有人会说这有什么用啊？灵活，随时变更，不受约束。基于上述特点，MongoDB的应用面也会产生一些变化。以下列出了一些可以使用MongoDB作为数据存储的场景，但是并不是必须使用MongoDB的场景：</p><ul><li>淘宝用户数据<ul><li>存储位置：数据库</li><li>特征：永久性存储，修改频度极低</li></ul></li><li>游戏装备数据、游戏道具数据<ul><li>存储位置：数据库、Mongodb</li><li>特征：永久性存储与临时存储相结合、修改频度较高</li></ul></li><li>直播数据、打赏数据、粉丝数据<ul><li>存储位置：数据库、Mongodb</li><li>特征：永久性存储与临时存储相结合，修改频度极高</li></ul></li><li>物联网数据<ul><li>存储位置：Mongodb</li><li>特征：临时存储，修改频度飞速</li></ul></li></ul><p>​        快速了解一下MongoDB，下面直接开始我们的学习，老规矩，先安装，再操作，最后说整合</p><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><p>​        windows版安装包下载地址：<a href="https://www.mongodb.com/try/download">https://www.mongodb.com/try/download</a></p><p>​        下载的安装包也有两种形式，一种是一键安装的msi文件，还有一种是解压缩就能使用的zip文件，哪种形式都行，本课程采用解压缩zip文件进行安装。</p><p>​        解压缩完毕后会得到如下文件，其中bin目录包含了所有mongodb的可执行命令</p><p><img src="img%5Cimage-20220224111306933.png" alt="image-20220224111306933"></p><p>​        mongodb在运行时需要指定一个数据存储的目录，所以创建一个数据存储目录，通常放置在安装目录中，此处创建data的目录用来存储数据，具体如下</p><p><img src="img%5Cimage-20220224111053408.png" alt="image-20220224111053408"></p><p>​        如果在安装的过程中出现了如下警告信息，就是告诉你，你当前的操作系统缺少了一些系统文件，这个不用担心。</p><img src="img\image-20220224113956882.png" alt="image-20220224113956882" style="zoom:50%;" /><p>​        根据下列方案即可解决，在浏览器中搜索提示缺少的名称对应的文件，并下载，将下载的文件拷贝到windows安装目录的system32目录下，然后在命令行中执行regsvr32命令注册此文件。根据下载的文件名不同，执行命令前更改对应名称。</p><pre class=" language-CMD"><code class="language-CMD">regsvr32 vcruntime140_1.dll</code></pre><p><strong>启动服务器</strong></p><pre class=" language-CMD"><code class="language-CMD">mongod --dbpath=..\data\db</code></pre><p>​        启动服务器时需要指定数据存储位置，通过参数–dbpath进行设置，可以根据需要自行设置数据存储路径。默认服务端口27017。</p><p><strong>启动客户端</strong></p><pre class=" language-CMD"><code class="language-CMD">mongo --host=127.0.0.1 --port=27017</code></pre><h5 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h5><p>​        MongoDB虽然是一款数据库，但是它的操作并不是使用SQL语句进行的，因此操作方式各位小伙伴可能比较陌生，好在有一些类似于Navicat的数据库客户端软件，能够便捷的操作MongoDB，先安装一个客户端，再来操作MongoDB。</p><p>​        同类型的软件较多，本次安装的软件时Robo3t，Robot3t是一款绿色软件，无需安装，解压缩即可。解压缩完毕后进入安装目录双击robot3t.exe即可使用。</p><img src="img\image-20220224114911573.png" alt="image-20220224114911573" style="zoom: 33%;" /><p>​        打开软件首先要连接MongoDB服务器，选择【File】菜单，选择【Connect…】</p><p><img src="img%5Cimage-20220224115202422.png" alt="image-20220224115202422"></p><p>​        进入连接管理界面后，选择左上角的【Create】链接，创建新的连接设置</p><img src="img\image-20220224115254200.png" alt="image-20220224115254200" style="zoom:80%;" /><p>​        如果输入设置值即可连接（默认不修改即可连接本机27017端口）</p><p><img src="img%5Cimage-20220224115300266.png" alt="image-20220224115300266"></p><p>​        连接成功后在命令输入区域输入命令即可操作MongoDB。</p><p>​        创建数据库：在左侧菜单中使用右键创建，输入数据库名称即可</p><p>​        创建集合：在Collections上使用右键创建，输入集合名称即可，集合等同于数据库中的表的作用</p><p>​        新增文档：（文档是一种类似json格式的数据，初学者可以先把数据理解为就是json数据）    </p><pre class=" language-CMD"><code class="language-CMD">db.集合名称.insert/save/insertOne(文档)</code></pre><p>​        删除文档：</p><pre class=" language-CMD"><code class="language-CMD">db.集合名称.remove(条件)</code></pre><p>​        修改文档：</p><pre class=" language-cmd"><code class="language-cmd">db.集合名称.update(条件，&#123;操作种类:&#123;文档&#125;&#125;)</code></pre><p>​        查询文档：</p><pre class=" language-CMD"><code class="language-CMD">基础查询查询全部：           db.集合.find();查第一条：           db.集合.findOne()查询指定数量文档：    db.集合.find().limit(10)                    //查10条文档跳过指定数量文档：    db.集合.find().skip(20)                    //跳过20条文档统计：                  db.集合.count()排序：                db.集合.sort(&#123;age:1&#125;)                        //按age升序排序投影：                db.集合名称.find(条件,&#123;name:1,age:1&#125;)         //仅保留name与age域条件查询基本格式：            db.集合.find(&#123;条件&#125;)模糊查询：            db.集合.find(&#123;域名:/正则表达式/&#125;)          //等同SQL中的like，比like强大，可以执行正则所有规则条件比较运算：           db.集合.find(&#123;域名:&#123;$gt:值&#125;&#125;)                //等同SQL中的数值比较操作，例如：name>18包含查询：            db.集合.find(&#123;域名:&#123;$in:[值1，值2]&#125;&#125;)        //等同于SQL中的in条件连接查询：           db.集合.find(&#123;$and:[&#123;条件1&#125;,&#123;条件2&#125;]&#125;)       //等同于SQL中的and、or</code></pre><p>​        有关MongoDB的基础操作就普及到这里，需要全面掌握MongoDB技术，请参看相关教程学习。</p><h5 id="整合-1"><a href="#整合-1" class="headerlink" title="整合"></a>整合</h5><p>​        使用springboot整合MongDB该如何进行呢？其实springboot为什么使用的开发者这么多，就是因为他的套路几乎完全一样。导入坐标，做配置，使用API接口操作。整合Redis如此，整合MongoDB同样如此。</p><p>​        第一，先导入对应技术的整合starter坐标</p><p>​        第二，配置必要信息</p><p>​        第三，使用提供的API操作即可</p><p>​        下面就开始springboot整合MongoDB，操作步骤如下：</p><p><strong>步骤①</strong>：导入springboot整合MongoDB的starter坐标</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-mongodb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>​        上述坐标也可以在创建模块的时候通过勾选的形式进行选择，同样归属NoSQL分类中</p><img src="img\image-20220224120721626.png" alt="image-20220224120721626" style="zoom: 67%;" /><p><strong>步骤②</strong>：进行基础配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">data</span><span class="token punctuation">:</span>    <span class="token key atrule">mongodb</span><span class="token punctuation">:</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> mongodb<span class="token punctuation">:</span>//localhost/itheima</code></pre><p>​        操作MongoDB需要的配置与操作redis一样，最基本的信息都是操作哪一台服务器，区别就是连接的服务器IP地址和端口不同，书写格式不同而已。</p><p><strong>步骤③</strong>：使用springboot整合MongoDB的专用客户端接口MongoTemplate来进行操作</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot17MongodbApplicationTests</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MongoTemplate mongoTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Book book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"springboot2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"springboot2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">"springboot2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mongoTemplate<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Book<span class="token operator">></span> all <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        整合工作到这里就做完了，感觉既熟悉也陌生。熟悉的是这个套路，三板斧，就这三招，导坐标做配置用API操作，陌生的是这个技术，里面具体的操作API可能会不熟悉，有关springboot整合MongoDB我们就讲到这里。有兴趣可以继续学习MongoDB的操作，然后再来这里通过编程的形式操作MongoDB。</p><p><strong>总结</strong></p><ol><li>springboot整合MongoDB步骤<ol><li>导入springboot整合MongoDB的starter坐标</li><li>进行基础配置</li><li>使用springboot整合MongoDB的专用客户端接口MongoTemplate操作</li></ol></li></ol><h4 id="SpringBoot整合ES"><a href="#SpringBoot整合ES" class="headerlink" title="SpringBoot整合ES"></a>SpringBoot整合ES</h4><p>​        NoSQL解决方案已经讲完了两种技术的整合了，Redis可以使用内存加载数据并实现数据快速访问，MongoDB可以在内存中存储类似对象的数据并实现数据的快速访问，在企业级开发中对于速度的追求是永无止境的。下面要讲的内容也是一款NoSQL解决方案，只不过他的作用不是为了直接加速数据的读写，而是加速数据的查询的，叫做ES技术。</p><p>​        ES（Elasticsearch）是一个分布式全文搜索引擎，重点是全文搜索。</p><p>​        那什么是全文搜索呢？比如用户要买一本书，以Java为关键字进行搜索，不管是书名中还是书的介绍中，甚至是书的作者名字，只要包含java就作为查询结果返回给用户查看，上述过程就使用了全文搜索技术。搜索的条件不再是仅用于对某一个字段进行比对，而是在一条数据中使用搜索条件去比对更多的字段，只要能匹配上就列入查询结果，这就是全文搜索的目的。而ES技术就是一种可以实现上述效果的技术。</p><p>​        要实现全文搜索的效果，不可能使用数据库中like操作去进行比对，这种效率太低了。ES设计了一种全新的思想，来实现全文搜索。具体操作过程如下：</p><ol><li><p>将被查询的字段的数据全部文本信息进行查分，分成若干个词</p><ul><li>例如“中华人民共和国”就会被拆分成三个词，分别是“中华”、“人民”、“共和国”，此过程有专业术语叫做分词。分词的策略不同，分出的效果不一样，不同的分词策略称为分词器。</li></ul></li><li><p>将分词得到的结果存储起来，对应每条数据的id</p><ul><li><p>例如id为1的数据中名称这一项的值是“中华人民共和国”，那么分词结束后，就会出现“中华”对应id为1，“人民”对应id为1，“共和国”对应id为1</p></li><li><p>例如id为2的数据中名称这一项的值是“人民代表大会“，那么分词结束后，就会出现“人民”对应id为2，“代表”对应id为2，“大会”对应id为2</p></li><li><p>此时就会出现如下对应结果，按照上述形式可以对所有文档进行分词。需要注意分词的过程不是仅对一个字段进行，而是对每一个参与查询的字段都执行，最终结果汇总到一个表格中</p><table><thead><tr><th>分词结果关键字</th><th>对应id</th></tr></thead><tbody><tr><td>中华</td><td>1</td></tr><tr><td>人民</td><td>1,2</td></tr><tr><td>共和国</td><td>1</td></tr><tr><td>代表</td><td>2</td></tr><tr><td>大会</td><td>2</td></tr></tbody></table></li></ul></li><li><p>当进行查询时，如果输入“人民”作为查询条件，可以通过上述表格数据进行比对，得到id值1,2，然后根据id值就可以得到查询的结果数据了。</p></li></ol><p>​        上述过程中分词结果关键字内容每一个都不相同，作用有点类似于数据库中的索引，是用来加速数据查询的。但是数据库中的索引是对某一个字段进行添加索引，而这里的分词结果关键字不是一个完整的字段值，只是一个字段中的其中的一部分内容。并且索引使用时是根据索引内容查找整条数据，全文搜索中的分词结果关键字查询后得到的并不是整条的数据，而是数据的id，要想获得具体数据还要再次查询，因此这里为这种分词结果关键字起了一个全新的名称，叫做<strong>倒排索引</strong>。</p><p>​        通过上述内容的学习，发现使用ES其实准备工作还是挺多的，必须先建立文档的倒排索引，然后才能继续使用。快速了解一下ES的工作原理，下面直接开始我们的学习，老规矩，先安装，再操作，最后说整合。</p><h5 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h5><p>​        windows版安装包下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://</a><a href="https://www.elastic.co/cn/downloads/elasticsearch">www.elastic.co/cn/downloads/elasticsearch</a></p><p>​        下载的安装包是解压缩就能使用的zip文件，解压缩完毕后会得到如下文件</p><p><img src="img%5Cimage-20220225132756400.png" alt="image-20220225132756400"></p><ul><li>bin目录：包含所有的可执行命令</li><li>config目录：包含ES服务器使用的配置文件</li><li>jdk目录：此目录中包含了一个完整的jdk工具包，版本17，当ES升级时，使用最新版本的jdk确保不会出现版本支持性不足的问题</li><li>lib目录：包含ES运行的依赖jar文件</li><li>logs目录：包含ES运行后产生的所有日志文件</li><li>modules目录：包含ES软件中所有的功能模块，也是一个一个的jar包。和jar目录不同，jar目录是ES运行期间依赖的jar包，modules是ES软件自己的功能jar包</li><li>plugins目录：包含ES软件安装的插件，默认为空</li></ul><p><strong>启动服务器</strong></p><pre class=" language-CMD"><code class="language-CMD">elasticsearch.bat</code></pre><p>​        双击elasticsearch.bat文件即可启动ES服务器，默认服务端口9200。通过浏览器访问<a href="http://localhost:9200看到如下信息视为ES服务器正常启动">http://localhost:9200看到如下信息视为ES服务器正常启动</a></p><pre class=" language-CMD"><code class="language-CMD">&#123;  "name" : "CZBK-**********",  "cluster_name" : "elasticsearch",  "cluster_uuid" : "j137DSswTPG8U4Yb-0T1Mg",  "version" : &#123;    "number" : "7.16.2",    "build_flavor" : "default",    "build_type" : "zip",    "build_hash" : "2b937c44140b6559905130a8650c64dbd0879cfb",    "build_date" : "2021-12-18T19:42:46.604893745Z",    "build_snapshot" : false,    "lucene_version" : "8.10.1",    "minimum_wire_compatibility_version" : "6.8.0",    "minimum_index_compatibility_version" : "6.0.0-beta1"  &#125;,  "tagline" : "You Know, for Search"&#125;</code></pre><h5 id="基本操作-2"><a href="#基本操作-2" class="headerlink" title="基本操作"></a>基本操作</h5><p>​        ES中保存有我们要查询的数据，只不过格式和数据库存储数据格式不同而已。在ES中我们要先创建倒排索引，这个索引的功能又点类似于数据库的表，然后将数据添加到倒排索引中，添加的数据称为文档。所以要进行ES的操作要先创建索引，再添加文档，这样才能进行后续的查询操作。</p><p>​        要操作ES可以通过Rest风格的请求来进行，也就是说发送一个请求就可以执行一个操作。比如新建索引，删除索引这些操作都可以使用发送请求的形式来进行。</p><ul><li><p>创建索引，books是索引名称，下同</p><pre class=" language-CMD"><code class="language-CMD">PUT请求        http://localhost:9200/books</code></pre><p>发送请求后，看到如下信息即索引创建成功</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"shards_acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"books"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>重复创建已经存在的索引会出现错误信息，reason属性中描述错误原因</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"error"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token property">"root_cause"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"resource_already_exists_exception"</span><span class="token punctuation">,</span>                <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"index [books/VgC_XMVAQmedaiBNSgO2-w] already exists"</span><span class="token punctuation">,</span>                <span class="token property">"index_uuid"</span><span class="token operator">:</span> <span class="token string">"VgC_XMVAQmedaiBNSgO2-w"</span><span class="token punctuation">,</span>                <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"books"</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"resource_already_exists_exception"</span><span class="token punctuation">,</span>        <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"index [books/VgC_XMVAQmedaiBNSgO2-w] already exists"</span><span class="token punctuation">,</span>    # books索引已经存在        <span class="token property">"index_uuid"</span><span class="token operator">:</span> <span class="token string">"VgC_XMVAQmedaiBNSgO2-w"</span><span class="token punctuation">,</span>        <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"book"</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">400</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>查询索引</p><pre class=" language-CMD"><code class="language-CMD">GET请求        http://localhost:9200/books</code></pre><p>查询索引得到索引相关信息，如下</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"book"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token property">"aliases"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"mappings"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"settings"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"index"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token property">"routing"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token property">"allocation"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token property">"include"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                            <span class="token property">"_tier_preference"</span><span class="token operator">:</span> <span class="token string">"data_content"</span>                        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>                    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>                &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"provided_name"</span><span class="token operator">:</span> <span class="token string">"books"</span><span class="token punctuation">,</span>                <span class="token property">"creation_date"</span><span class="token operator">:</span> <span class="token string">"1645768584849"</span><span class="token punctuation">,</span>                <span class="token property">"number_of_replicas"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"uuid"</span><span class="token operator">:</span> <span class="token string">"VgC_XMVAQmedaiBNSgO2-w"</span><span class="token punctuation">,</span>                <span class="token property">"version"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token property">"created"</span><span class="token operator">:</span> <span class="token string">"7160299"</span>                &amp;#<span class="token number">125</span><span class="token punctuation">;</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>如果查询了不存在的索引，会返回错误信息，例如查询名称为book的索引后信息如下</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"error"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token property">"root_cause"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"index_not_found_exception"</span><span class="token punctuation">,</span>                <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"no such index [book]"</span><span class="token punctuation">,</span>                <span class="token property">"resource.type"</span><span class="token operator">:</span> <span class="token string">"index_or_alias"</span><span class="token punctuation">,</span>                <span class="token property">"resource.id"</span><span class="token operator">:</span> <span class="token string">"book"</span><span class="token punctuation">,</span>                <span class="token property">"index_uuid"</span><span class="token operator">:</span> <span class="token string">"_na_"</span><span class="token punctuation">,</span>                <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"book"</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"index_not_found_exception"</span><span class="token punctuation">,</span>        <span class="token property">"reason"</span><span class="token operator">:</span> <span class="token string">"no such index [book]"</span><span class="token punctuation">,</span>        # 没有book索引        <span class="token property">"resource.type"</span><span class="token operator">:</span> <span class="token string">"index_or_alias"</span><span class="token punctuation">,</span>        <span class="token property">"resource.id"</span><span class="token operator">:</span> <span class="token string">"book"</span><span class="token punctuation">,</span>        <span class="token property">"index_uuid"</span><span class="token operator">:</span> <span class="token string">"_na_"</span><span class="token punctuation">,</span>        <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"book"</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">404</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>删除索引</p><pre class=" language-CMD"><code class="language-CMD">DELETE请求    http://localhost:9200/books</code></pre><p>删除所有后，给出删除结果</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>如果重复删除，会给出错误信息，同样在reason属性中描述具体的错误原因</p><pre class=" language-JSON"><code class="language-JSON">&#123;    "error": &#123;        "root_cause": [            &#123;                "type": "index_not_found_exception",                "reason": "no such index [books]",                "resource.type": "index_or_alias",                "resource.id": "book",                "index_uuid": "_na_",                "index": "book"            &#125;        ],        "type": "index_not_found_exception",        "reason": "no such index [books]",        # 没有books索引        "resource.type": "index_or_alias",        "resource.id": "book",        "index_uuid": "_na_",        "index": "book"    &#125;,    "status": 404&#125;</code></pre></li><li><p>创建索引并指定分词器</p><p>​        前面创建的索引是未指定分词器的，可以在创建索引时添加请求参数，设置分词器。目前国内较为流行的分词器是IK分词器，使用前先在下对应的分词器，然后使用。IK分词器下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>​        分词器下载后解压到ES安装目录的plugins目录中即可，安装分词器后需要重新启动ES服务器。使用IK分词器创建索引格式：</p><pre class=" language-json"><code class="language-json">PUT请求        http<span class="token operator">:</span>//localhost<span class="token operator">:</span><span class="token number">9200</span>/books请求参数如下（注意是json格式的参数）&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"mappings"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>                            #定义mappings属性，替换创建索引时对应的mappings属性                <span class="token property">"properties"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>                        #定义索引中包含的属性设置            <span class="token property">"id"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>                            #设置索引中包含id属性                <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span>            #当前属性可以被直接搜索            &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>                        #设置索引中包含name属性                <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>              #当前属性是文本信息，参与分词                  <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>   #使用IK分词器进行分词                             <span class="token property">"copy_to"</span><span class="token operator">:</span><span class="token string">"all"</span>                #分词结果拷贝到all属性中            &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            <span class="token property">"description"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>                                    <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>                                <span class="token property">"copy_to"</span><span class="token operator">:</span><span class="token string">"all"</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            <span class="token property">"all"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>                            #定义属性，用来描述多个字段的分词结果集合，当前属性可以参与查询                <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>                                    <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_max_word"</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        创建完毕后返回结果和不使用分词器创建索引的结果是一样的，此时可以通过查看索引信息观察到添加的请求参数mappings已经进入到了索引属性中</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"books"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token property">"aliases"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"mappings"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                        #mappings属性已经被替换            <span class="token property">"properties"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token property">"all"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span>                &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                <span class="token property">"description"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"copy_to"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"all"</span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span>                &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                <span class="token property">"id"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>                &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                <span class="token property">"name"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"copy_to"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"all"</span>                    <span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span>                &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                <span class="token property">"type"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span>                &amp;#<span class="token number">125</span><span class="token punctuation">;</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"settings"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"index"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token property">"routing"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token property">"allocation"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token property">"include"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                            <span class="token property">"_tier_preference"</span><span class="token operator">:</span> <span class="token string">"data_content"</span>                        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>                    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>                &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"provided_name"</span><span class="token operator">:</span> <span class="token string">"books"</span><span class="token punctuation">,</span>                <span class="token property">"creation_date"</span><span class="token operator">:</span> <span class="token string">"1645769809521"</span><span class="token punctuation">,</span>                <span class="token property">"number_of_replicas"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>                <span class="token property">"uuid"</span><span class="token operator">:</span> <span class="token string">"DohYKvr_SZO4KRGmbZYmTQ"</span><span class="token punctuation">,</span>                <span class="token property">"version"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token property">"created"</span><span class="token operator">:</span> <span class="token string">"7160299"</span>                &amp;#<span class="token number">125</span><span class="token punctuation">;</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul><p>目前我们已经有了索引了，但是索引中还没有数据，所以要先添加数据，ES中称数据为文档，下面进行文档操作。</p><ul><li><p>添加文档，有三种方式</p><pre class=" language-json"><code class="language-json">POST请求    http<span class="token operator">:</span>//localhost<span class="token operator">:</span><span class="token number">9200</span>/books/_doc        #使用系统生成idPOST请求    http<span class="token operator">:</span>//localhost<span class="token operator">:</span><span class="token number">9200</span>/books/_create/<span class="token number">1</span>    #使用指定idPOST请求    http<span class="token operator">:</span>//localhost<span class="token operator">:</span><span class="token number">9200</span>/books/_doc/<span class="token number">1</span>        #使用指定id，不存在创建，存在更新（版本递增）文档通过请求参数传递，数据格式json&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"springboot"</span><span class="token punctuation">,</span>    <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"springboot"</span><span class="token punctuation">,</span>    <span class="token property">"description"</span><span class="token operator">:</span><span class="token string">"springboot"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre></li><li><p>查询文档</p><pre class=" language-json"><code class="language-json">GET请求    http<span class="token operator">:</span>//localhost<span class="token operator">:</span><span class="token number">9200</span>/books/_doc/<span class="token number">1</span>         #查询单个文档         GET请求    http<span class="token operator">:</span>//localhost<span class="token operator">:</span><span class="token number">9200</span>/books/_search         #查询全部文档</code></pre></li><li><p>条件查询</p><pre class=" language-json"><code class="language-json">GET请求    http<span class="token operator">:</span>//localhost<span class="token operator">:</span><span class="token number">9200</span>/books/_search?q=name<span class="token operator">:</span>springboot    # q=查询属性名<span class="token operator">:</span>查询属性值</code></pre></li><li><p>删除文档</p><pre class=" language-json"><code class="language-json">DELETE请求    http<span class="token operator">:</span>//localhost<span class="token operator">:</span><span class="token number">9200</span>/books/_doc/<span class="token number">1</span></code></pre></li><li><p>修改文档（全量更新）</p><pre class=" language-json"><code class="language-json">PUT请求    http<span class="token operator">:</span>//localhost<span class="token operator">:</span><span class="token number">9200</span>/books/_doc/<span class="token number">1</span>文档通过请求参数传递，数据格式json&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"springboot"</span><span class="token punctuation">,</span>    <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"springboot"</span><span class="token punctuation">,</span>    <span class="token property">"description"</span><span class="token operator">:</span><span class="token string">"springboot"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>修改文档（部分更新）</p><pre class=" language-json"><code class="language-json">POST请求    http<span class="token operator">:</span>//localhost<span class="token operator">:</span><span class="token number">9200</span>/books/_update/<span class="token number">1</span>文档通过请求参数传递，数据格式json&amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token property">"doc"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>                        #部分更新并不是对原始文档进行更新，而是对原始文档对象中的doc属性中的指定属性更新        <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"springboot"</span>        #仅更新提供的属性值，未提供的属性值不参与更新操作    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul><h5 id="整合-2"><a href="#整合-2" class="headerlink" title="整合"></a>整合</h5><p>​        使用springboot整合ES该如何进行呢？老规矩，导入坐标，做配置，使用API接口操作。整合Redis如此，整合MongoDB如此，整合ES依然如此。太没有新意了，其实不是没有新意，这就是springboot的强大之处，所有东西都做成相同规则，对开发者来说非常友好。</p><p>​        下面就开始springboot整合ES，操作步骤如下：</p><p><strong>步骤①</strong>：导入springboot整合ES的starter坐标</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤②</strong>：进行基础配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">elasticsearch</span><span class="token punctuation">:</span>    <span class="token key atrule">rest</span><span class="token punctuation">:</span>      <span class="token key atrule">uris</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9200</span></code></pre><p>​        配置ES服务器地址，端口9200</p><p><strong>步骤③</strong>：使用springboot整合ES的专用客户端接口ElasticsearchRestTemplate来进行操作</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot18EsApplicationTests</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ElasticsearchRestTemplate template<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        上述操作形式是ES早期的操作方式，使用的客户端被称为Low Level Client，这种客户端操作方式性能方面略显不足，于是ES开发了全新的客户端操作方式，称为High Level Client。高级别客户端与ES版本同步更新，但是springboot最初整合ES的时候使用的是低级别客户端，所以企业开发需要更换成高级别的客户端模式。</p><p>​        下面使用高级别客户端方式进行springboot整合ES，操作步骤如下：</p><p><strong>步骤①</strong>：导入springboot整合ES高级别客户端的坐标，此种形式目前没有对应的starter</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤②</strong>：使用编程的形式设置连接的ES服务器，并获取客户端对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot18EsApplicationTests</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> RestHighLevelClient client<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Test</span>      <span class="token keyword">void</span> <span class="token function">testCreateClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          HttpHost host <span class="token operator">=</span> HttpHost<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"http://localhost:9200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          RestClientBuilder builder <span class="token operator">=</span> RestClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>          client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        配置ES服务器地址与端口9200，记得客户端使用完毕需要手工关闭。由于当前客户端是手工维护的，因此不能通过自动装配的形式加载对象。</p><p><strong>步骤③</strong>：使用客户端对象操作ES，例如创建索引</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot18EsApplicationTests</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> RestHighLevelClient client<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Test</span>      <span class="token keyword">void</span> <span class="token function">testCreateIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          HttpHost host <span class="token operator">=</span> HttpHost<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"http://localhost:9200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          RestClientBuilder builder <span class="token operator">=</span> RestClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>          client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>                    CreateIndexRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateIndexRequest</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>                     client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        高级别客户端操作是通过发送请求的方式完成所有操作的，ES针对各种不同的操作，设定了各式各样的请求对象，上例中创建索引的对象是CreateIndexRequest，其他操作也会有自己专用的Request对象。</p><p>​        当前操作我们发现，无论进行ES何种操作，第一步永远是获取RestHighLevelClient对象，最后一步永远是关闭该对象的连接。在测试中可以使用测试类的特性去帮助开发者一次性的完成上述操作，但是在业务书写时，还需要自行管理。将上述代码格式转换成使用测试类的初始化方法和销毁方法进行客户端对象的维护。</p><pre class=" language-JAVA"><code class="language-JAVA">@SpringBootTestclass Springboot18EsApplicationTests &#123;    @BeforeEach        //在测试类中每个操作运行前运行的方法    void setUp() &#123;        HttpHost host = HttpHost.create("http://localhost:9200");        RestClientBuilder builder = RestClient.builder(host);        client = new RestHighLevelClient(builder);    &#125;    @AfterEach        //在测试类中每个操作运行后运行的方法    void tearDown() throws IOException &#123;        client.close();    &#125;    private RestHighLevelClient client;    @Test    void testCreateIndex() throws IOException &#123;        CreateIndexRequest request = new CreateIndexRequest("books");        client.indices().create(request, RequestOptions.DEFAULT);    &#125;&#125;</code></pre><p>​        现在的书写简化了很多，也更合理。下面使用上述模式将所有的ES操作执行一遍，测试结果</p><p><strong>创建索引（IK分词器）</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testCreateIndexByIK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    CreateIndexRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateIndexRequest</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String json <span class="token operator">=</span> <span class="token string">"&amp;#123;\n"</span> <span class="token operator">+</span>            <span class="token string">"    \"mappings\":&amp;#123;\n"</span> <span class="token operator">+</span>            <span class="token string">"        \"properties\":&amp;#123;\n"</span> <span class="token operator">+</span>            <span class="token string">"            \"id\":&amp;#123;\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"type\":\"keyword\"\n"</span> <span class="token operator">+</span>            <span class="token string">"            &amp;#125;,\n"</span> <span class="token operator">+</span>            <span class="token string">"            \"name\":&amp;#123;\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"type\":\"text\",\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"analyzer\":\"ik_max_word\",\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"copy_to\":\"all\"\n"</span> <span class="token operator">+</span>            <span class="token string">"            &amp;#125;,\n"</span> <span class="token operator">+</span>            <span class="token string">"            \"type\":&amp;#123;\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"type\":\"keyword\"\n"</span> <span class="token operator">+</span>            <span class="token string">"            &amp;#125;,\n"</span> <span class="token operator">+</span>            <span class="token string">"            \"description\":&amp;#123;\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"type\":\"text\",\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"analyzer\":\"ik_max_word\",\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"copy_to\":\"all\"\n"</span> <span class="token operator">+</span>            <span class="token string">"            &amp;#125;,\n"</span> <span class="token operator">+</span>            <span class="token string">"            \"all\":&amp;#123;\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"type\":\"text\",\n"</span> <span class="token operator">+</span>            <span class="token string">"                \"analyzer\":\"ik_max_word\"\n"</span> <span class="token operator">+</span>            <span class="token string">"            &amp;#125;\n"</span> <span class="token operator">+</span>            <span class="token string">"        &amp;#125;\n"</span> <span class="token operator">+</span>            <span class="token string">"    &amp;#125;\n"</span> <span class="token operator">+</span>            <span class="token string">"&amp;#125;"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置请求中的参数</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        IK分词器是通过请求参数的形式进行设置的，设置请求参数使用request对象中的source方法进行设置，至于参数是什么，取决于你的操作种类。当请求中需要参数时，均可使用当前形式进行参数设置。    </p><p><strong>添加文档</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token comment" spellcheck="true">//添加文档</span><span class="token keyword">void</span> <span class="token function">testCreateDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Book book <span class="token operator">=</span> bookDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    IndexRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span>XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        添加文档使用的请求对象是IndexRequest，与创建索引使用的请求对象不同。    </p><p><strong>批量添加文档</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token comment" spellcheck="true">//批量添加文档</span><span class="token keyword">void</span> <span class="token function">testCreateDocAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Book<span class="token operator">></span> bookList <span class="token operator">=</span> bookDao<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    BulkRequest bulk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Book book <span class="token operator">:</span> bookList<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        IndexRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span>XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>        bulk<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>bulk<span class="token punctuation">,</span>RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        批量做时，先创建一个BulkRequest的对象，可以将该对象理解为是一个保存request对象的容器，将所有的请求都初始化好后，添加到BulkRequest对象中，再使用BulkRequest对象的bulk方法，一次性执行完毕。</p><p><strong>按id查询文档</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token comment" spellcheck="true">//按id查询</span><span class="token keyword">void</span> <span class="token function">testGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    GetRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    GetResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    String json <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        根据id查询文档使用的请求对象是GetRequest。</p><p><strong>按条件查询文档</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token comment" spellcheck="true">//按条件查询</span><span class="token keyword">void</span> <span class="token function">testSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">,</span><span class="token string">"spring"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchHits hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String source <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//System.out.println(source);</span>        Book book <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        按条件查询文档使用的请求对象是SearchRequest，查询时调用SearchRequest对象的termQuery方法，需要给出查询属性名，此处支持使用合并字段，也就是前面定义索引属性时添加的all属性。</p><p>​        springboot整合ES的操作到这里就说完了，与前期进行springboot整合redis和mongodb的差别还是蛮大的，主要原始就是我们没有使用springboot整合ES的客户端对象。至于操作，由于ES操作种类过多，所以显得操作略微有点复杂。有关springboot整合ES就先学习到这里吧。</p><p><strong>总结</strong></p><ol><li>springboot整合ES步骤<ol><li>导入springboot整合ES的High Level Client坐标</li><li>手工管理客户端对象，包括初始化和关闭操作</li><li>使用High Level Client根据操作的种类不同，选择不同的Request对象完成对应操作</li></ol></li></ol><h2 id="KF-5-整合第三方技术"><a href="#KF-5-整合第三方技术" class="headerlink" title="KF-5.整合第三方技术"></a>KF-5.整合第三方技术</h2><p>​        通过第四章的学习，我们领略到了springboot在整合第三方技术时强大的一致性，在第五章中我们要使用springboot继续整合各种各样的第三方技术，通过本章的学习，可以将之前学习的springboot整合第三方技术的思想贯彻到底，还是那三板斧。导坐标、做配置、调API。</p><p>​        springboot能够整合的技术实在是太多了，可以说是万物皆可整。本章将从企业级开发中常用的一些技术作为出发点，对各种各样的技术进行整合。</p><h3 id="KF-5-1-缓存"><a href="#KF-5-1-缓存" class="headerlink" title="KF-5-1.缓存"></a>KF-5-1.缓存</h3><p>​        企业级应用主要作用是信息处理，当需要读取数据时，由于受限于数据库的访问效率，导致整体系统性能偏低。</p><img src="img\image-20220226154148303.png" alt="image-20220226154148303" style="zoom:67%;" /><p>​                                                                      应用程序直接与数据库打交道，访问效率低</p><p>​        为了改善上述现象，开发者通常会在应用程序与数据库之间建立一种临时的数据存储机制，该区域中的数据在内存中保存，读写速度较快，可以有效解决数据库访问效率低下的问题。这一块临时存储数据的区域就是缓存。</p><img src="img\image-20220226154233010.png" alt="image-20220226154233010" style="zoom:67%;" /><pre><code>                                         使用缓存后，应用程序与缓存打交道，缓存与数据库打交道，数据访问效率提高</code></pre><p>​        缓存是什么？缓存是一种介于数据永久存储介质与应用程序之间的数据临时存储介质，使用缓存可以有效的减少低速数据读取过程的次数（例如磁盘IO），提高系统性能。此外缓存不仅可以用于提高永久性存储介质的数据读取效率，还可以提供临时的数据存储空间。而springboot提供了对市面上几乎所有的缓存技术进行整合的方案，下面就一起开启springboot整合缓存之旅。</p><h4 id="SpringBoot内置缓存解决方案"><a href="#SpringBoot内置缓存解决方案" class="headerlink" title="SpringBoot内置缓存解决方案"></a>SpringBoot内置缓存解决方案</h4><p>​        springboot技术提供有内置的缓存解决方案，可以帮助开发者快速开启缓存技术，并使用缓存技术进行数据的快速操作，例如读取缓存数据和写入数据到缓存。</p><p><strong>步骤①</strong>：导入springboot提供的缓存技术对应的starter</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤②</strong>：启用缓存，在引导类上方标注注解@EnableCaching配置springboot程序中可以使用缓存</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">//开启缓存功能</span><span class="token annotation punctuation">@EnableCaching</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot19CacheApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Springboot19CacheApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>步骤③</strong>：设置操作的数据是否使用缓存</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> BookDao bookDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"cacheSpace"</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token string">"#id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Book <span class="token function">getById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bookDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        在业务方法上面使用注解@Cacheable声明当前方法的返回值放入缓存中，其中要指定缓存的存储位置，以及缓存中保存当前方法返回值对应的名称。上例中value属性描述缓存的存储位置，可以理解为是一个存储空间名，key属性描述了缓存中保存数据的名称，使用#id读取形参中的id值作为缓存名称。</p><p>​        使用@Cacheable注解后，执行当前操作，如果发现对应名称在缓存中没有数据，就正常读取数据，然后放入缓存；如果对应名称在缓存中有数据，就终止当前业务方法执行，直接返回缓存中的数据。</p><h4 id="手机验证码案例"><a href="#手机验证码案例" class="headerlink" title="手机验证码案例"></a>手机验证码案例</h4><p>​        为了便于下面演示各种各样的缓存技术，我们创建一个手机验证码的案例环境，模拟使用缓存保存手机验证码的过程。</p><p>​        手机验证码案例需求如下：</p><ul><li>输入手机号获取验证码，组织文档以短信形式发送给用户（页面模拟）</li><li>输入手机号和验证码验证结果</li></ul><p>​        为了描述上述操作，我们制作两个表现层接口，一个用来模拟发送短信的过程，其实就是根据用户提供的手机号生成一个验证码，然后放入缓存，另一个用来模拟验证码校验的过程，其实就是使用传入的手机号和验证码进行匹配，并返回最终匹配结果。下面直接制作本案例的模拟代码，先以上例中springboot提供的内置缓存技术来完成当前案例的制作。</p><p><strong>步骤①</strong>：导入springboot提供的缓存技术对应的starter</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤②</strong>：启用缓存，在引导类上方标注注解@EnableCaching配置springboot程序中可以使用缓存</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">//开启缓存功能</span><span class="token annotation punctuation">@EnableCaching</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot19CacheApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Springboot19CacheApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>步骤③</strong>：定义验证码对应的实体类，封装手机号与验证码两个属性</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMSCode</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String tele<span class="token punctuation">;</span>    <span class="token keyword">private</span> String code<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>步骤④</strong>：定义验证码功能的业务层接口与实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SMSCodeService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">sendCodeToSMS</span><span class="token punctuation">(</span>String tele<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span>SMSCode smsCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMSCodeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SMSCodeService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CodeUtils codeUtils<span class="token punctuation">;</span>    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"smsCode"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#tele"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sendCodeToSMS</span><span class="token punctuation">(</span>String tele<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String code <span class="token operator">=</span> codeUtils<span class="token punctuation">.</span><span class="token function">generator</span><span class="token punctuation">(</span>tele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span>SMSCode smsCode<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取出内存中的验证码与传递过来的验证码比对，如果相同，返回true</span>        String code <span class="token operator">=</span> smsCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String cacheCode <span class="token operator">=</span> codeUtils<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>smsCode<span class="token punctuation">.</span><span class="token function">getTele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cacheCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        获取验证码后，当验证码失效时必须重新获取验证码，因此在获取验证码的功能上不能使用@Cacheable注解，@Cacheable注解是缓存中没有值则放入值，缓存中有值则取值。此处的功能仅仅是生成验证码并放入缓存，并不具有从缓存中取值的功能，因此不能使用@Cacheable注解，应该使用仅具有向缓存中保存数据的功能，使用@CachePut注解即可。</p><p>​        对于校验验证码的功能建议放入工具类中进行。</p><p><strong>步骤⑤</strong>：定义验证码的生成策略与根据手机号读取验证码的功能</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeUtils</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String <span class="token punctuation">[</span><span class="token punctuation">]</span> patch <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"000000"</span><span class="token punctuation">,</span><span class="token string">"00000"</span><span class="token punctuation">,</span><span class="token string">"0000"</span><span class="token punctuation">,</span><span class="token string">"000"</span><span class="token punctuation">,</span><span class="token string">"00"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">generator</span><span class="token punctuation">(</span>String tele<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> tele<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> encryption <span class="token operator">=</span> <span class="token number">20206666</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> result <span class="token operator">=</span> hash <span class="token operator">^</span> encryption<span class="token punctuation">;</span>        <span class="token keyword">long</span> nowTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> result <span class="token operator">^</span> nowTime<span class="token punctuation">;</span>        <span class="token keyword">long</span> code <span class="token operator">=</span> result <span class="token operator">%</span> <span class="token number">1000000</span><span class="token punctuation">;</span>        code <span class="token operator">=</span> code <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>code <span class="token operator">:</span> code<span class="token punctuation">;</span>        String codeStr <span class="token operator">=</span> code <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> codeStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> patch<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">+</span> codeStr<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"smsCode"</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token string">"#tele"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">get</span><span class="token punctuation">(</span>String tele<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>步骤⑥</strong>：定义验证码功能的web层接口，一个方法用于提供手机号获取验证码，一个方法用于提供手机号和验证码进行校验</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/sms"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMSCodeController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> SMSCodeService smsCodeService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> String <span class="token function">getCode</span><span class="token punctuation">(</span>String tele<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String code <span class="token operator">=</span> smsCodeService<span class="token punctuation">.</span><span class="token function">sendCodeToSMS</span><span class="token punctuation">(</span>tele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span>SMSCode smsCode<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> smsCodeService<span class="token punctuation">.</span><span class="token function">checkCode</span><span class="token punctuation">(</span>smsCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="SpringBoot整合Ehcache缓存"><a href="#SpringBoot整合Ehcache缓存" class="headerlink" title="SpringBoot整合Ehcache缓存"></a>SpringBoot整合Ehcache缓存</h4><p>​        手机验证码的案例已经完成了，下面就开始springboot整合各种各样的缓存技术，第一个整合Ehcache技术。Ehcache是一种缓存技术，使用springboot整合Ehcache其实就是变更一下缓存技术的实现方式，话不多说，直接开整</p><p><strong>步骤①</strong>：导入Ehcache的坐标</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.sf.ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>​        此处为什么不是导入Ehcache的starter，而是导入技术坐标呢？其实springboot整合缓存技术做的是通用格式，不管你整合哪种缓存技术，只是实现变化了，操作方式一样。这也体现出springboot技术的优点，统一同类技术的整合方式。</p><p><strong>步骤②</strong>：配置缓存技术实现使用Ehcache</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> ehcache    <span class="token key atrule">ehcache</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span> ehcache.xml</code></pre><p>​        配置缓存的类型type为ehcache，此处需要说明一下，当前springboot可以整合的缓存技术中包含有ehcach，所以可以这样书写。其实这个type不可以随便写的，不是随便写一个名称就可以整合的。</p><p>​        由于ehcache的配置有独立的配置文件格式，因此还需要指定ehcache的配置文件，以便于读取相应配置</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ehcache</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>noNamespaceSchemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://ehcache.org/ehcache.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">updateCheck</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>diskStore</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>D:\ehcache<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--默认缓存策略 --></span>    <span class="token comment" spellcheck="true">&lt;!-- external：是否永久存在，设置为true则不会被清除，此时与timeout冲突，通常设置为false--></span>    <span class="token comment" spellcheck="true">&lt;!-- diskPersistent：是否启用磁盘持久化--></span>    <span class="token comment" spellcheck="true">&lt;!-- maxElementsInMemory：最大缓存数量--></span>    <span class="token comment" spellcheck="true">&lt;!-- overflowToDisk：超过最大缓存数量是否持久化到磁盘--></span>    <span class="token comment" spellcheck="true">&lt;!-- timeToIdleSeconds：最大不活动间隔，设置过长缓存容易溢出，设置过短无效果，可用于记录时效性数据，例如验证码--></span>    <span class="token comment" spellcheck="true">&lt;!-- timeToLiveSeconds：最大存活时间--></span>    <span class="token comment" spellcheck="true">&lt;!-- memoryStoreEvictionPolicy：缓存清除策略--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultCache</span>        <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">diskPersistent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span>        <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span>        <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span>        <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>smsCode<span class="token punctuation">"</span></span>        <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">diskPersistent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span>        <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span>        <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span>        <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ehcache</span><span class="token punctuation">></span></span></code></pre><p>​        注意前面的案例中，设置了数据保存的位置是smsCode</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"smsCode"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#tele"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">sendCodeToSMS</span><span class="token punctuation">(</span>String tele<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String code <span class="token operator">=</span> codeUtils<span class="token punctuation">.</span><span class="token function">generator</span><span class="token punctuation">(</span>tele<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> code<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    </code></pre><p>​        这个设定需要保障ehcache中有一个缓存空间名称叫做smsCode的配置，前后要统一。在企业开发过程中，通过设置不同名称的cache来设定不同的缓存策略，应用于不同的缓存数据。</p><p>​        到这里springboot整合Ehcache就做完了，可以发现一点，原始代码没有任何修改，仅仅是加了一组配置就可以变更缓存供应商了，这也是springboot提供了统一的缓存操作接口的优势，变更实现并不影响原始代码的书写。</p><p><strong>总结</strong></p><ol><li>springboot使用Ehcache作为缓存实现需要导入Ehcache的坐标</li><li>修改设置，配置缓存供应商为ehcache，并提供对应的缓存配置文件</li></ol><p>​        </p><h4 id="SpringBoot整合Redis缓存"><a href="#SpringBoot整合Redis缓存" class="headerlink" title="SpringBoot整合Redis缓存"></a>SpringBoot整合Redis缓存</h4><p>​        上节使用Ehcache替换了springboot内置的缓存技术，其实springboot支持的缓存技术还很多，下面使用redis技术作为缓存解决方案来实现手机验证码案例。</p><p>​        比对使用Ehcache的过程，加坐标，改缓存实现类型为ehcache，做Ehcache的配置。如果还成redis做缓存呢？一模一样，加坐标，改缓存实现类型为redis，做redis的配置。差别之处只有一点，redis的配置可以在yml文件中直接进行配置，无需制作独立的配置文件。</p><p><strong>步骤①</strong>：导入redis的坐标</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤②</strong>：配置缓存技术实现使用redis</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> redis</code></pre><p>​        如果需要对redis作为缓存进行配置，注意不是对原始的redis进行配置，而是配置redis作为缓存使用相关的配置，隶属于spring.cache.redis节点下，注意不要写错位置了。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>  <span class="token key atrule">cache</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> redis    <span class="token key atrule">redis</span><span class="token punctuation">:</span>      <span class="token key atrule">use-key-prefix</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">key-prefix</span><span class="token punctuation">:</span> sms_      <span class="token key atrule">cache-null-values</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">time-to-live</span><span class="token punctuation">:</span> 10s</code></pre><p><strong>总结</strong></p><ol><li>springboot使用redis作为缓存实现需要导入redis的坐标</li><li>修改设置，配置缓存供应商为redis，并提供对应的缓存配置</li></ol><h4 id="SpringBoot整合Memcached缓存"><a href="#SpringBoot整合Memcached缓存" class="headerlink" title="SpringBoot整合Memcached缓存"></a>SpringBoot整合Memcached缓存</h4><p>​        目前我们已经掌握了3种缓存解决方案的配置形式，分别是springboot内置缓存，ehcache和redis，本节研究一下国内比较流行的一款缓存memcached。</p><p>​        按照之前的套路，其实变更缓存并不繁琐，但是springboot并没有支持使用memcached作为其缓存解决方案，也就是说在type属性中没有memcached的配置选项，这里就需要更变一下处理方式了。在整合之前先安装memcached。</p><p><strong>安装</strong></p><p>​        windows版安装包下载地址：<a href="https://www.runoob.com/memcached/window-install-memcached.html">https://www.runoob.com/memcached/window-install-memcached.html</a></p><p>​        下载的安装包是解压缩就能使用的zip文件，解压缩完毕后会得到如下文件</p><p><img src="img%5Cimage-20220226174957040.png" alt="image-20220226174957040"></p><p>​        可执行文件只有一个memcached.exe，使用该文件可以将memcached作为系统服务启动，执行此文件时会出现报错信息，如下：</p><img src="img\image-20220226175141986.png" alt="image-20220226175141986" style="zoom:80%;" /><p>​        此处出现问题的原因是注册系统服务时需要使用管理员权限，当前账号权限不足导致安装服务失败，切换管理员账号权限启动命令行</p><img src="img\image-20220226175302903.png" alt="image-20220226175302903" style="zoom:80%;" /><p>​        然后再次执行安装服务的命令即可，如下：</p><pre class=" language-CMD"><code class="language-CMD">memcached.exe -d install</code></pre><p>​        服务安装完毕后可以使用命令启动和停止服务，如下：</p><pre class=" language-cmd"><code class="language-cmd">memcached.exe -d start        # 启动服务memcached.exe -d stop        # 停止服务</code></pre><p>​        也可以在任务管理器中进行服务状态的切换</p><img src="img\image-20220226175441675.png" alt="image-20220226175441675" style="zoom:67%;" /><p><strong>变更缓存为Memcached</strong></p><p>​        由于memcached未被springboot收录为缓存解决方案，因此使用memcached需要通过手工硬编码的方式来使用，于是前面的套路都不适用了，需要自己写了。</p><p>​        memcached目前提供有三种客户端技术，分别是Memcached Client for Java、SpyMemcached和Xmemcached，其中性能指标各方面最好的客户端是Xmemcached，本次整合就使用这个作为客户端实现技术了。下面开始使用Xmemcached</p><p><strong>步骤①</strong>：导入xmemcached的坐标</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.googlecode.xmemcached<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>xmemcached<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤②</strong>：配置memcached，制作memcached的配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMemcachedConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MemcachedClient <span class="token function">getMemcachedClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MemcachedClientBuilder memcachedClientBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMemcachedClientBuilder</span><span class="token punctuation">(</span><span class="token string">"localhost:11211"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MemcachedClient memcachedClient <span class="token operator">=</span> memcachedClientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> memcachedClient<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        memcached默认对外服务端口11211。</p><p><strong>步骤③</strong>：使用xmemcached客户端操作缓存，注入MemcachedClient对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMSCodeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SMSCodeService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CodeUtils codeUtils<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MemcachedClient memcachedClient<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">sendCodeToSMS</span><span class="token punctuation">(</span>String tele<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String code <span class="token operator">=</span> codeUtils<span class="token punctuation">.</span><span class="token function">generator</span><span class="token punctuation">(</span>tele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            memcachedClient<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tele<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span>SMSCode smsCode<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String code <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            code <span class="token operator">=</span> memcachedClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>smsCode<span class="token punctuation">.</span><span class="token function">getTele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> smsCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        设置值到缓存中使用set操作，取值使用get操作，其实更符合我们开发者的习惯。</p><p>​        上述代码中对于服务器的配置使用硬编码写死到了代码中，将此数据提取出来，做成独立的配置属性。</p><p><strong>定义配置属性</strong></p><p>​        以下过程采用前期学习的属性配置方式进行，当前操作有助于理解原理篇中的很多知识。</p><ul><li><p>定义配置类，加载必要的配置属性，读取配置文件中memcached节点信息</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"memcached"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMemcachedProperties</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String servers<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> poolSize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> opTimeout<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>定义memcached节点信息</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">memcached</span><span class="token punctuation">:</span>  <span class="token key atrule">servers</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">11211</span>  <span class="token key atrule">poolSize</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">opTimeout</span><span class="token punctuation">:</span> <span class="token number">3000</span></code></pre></li><li><p>在memcached配置类中加载信息</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMemcachedConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> XMemcachedProperties props<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MemcachedClient <span class="token function">getMemcachedClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MemcachedClientBuilder memcachedClientBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMemcachedClientBuilder</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        memcachedClientBuilder<span class="token punctuation">.</span><span class="token function">setConnectionPoolSize</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        memcachedClientBuilder<span class="token punctuation">.</span><span class="token function">setOpTimeout</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getOpTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MemcachedClient memcachedClient <span class="token operator">=</span> memcachedClientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> memcachedClient<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>总结</strong></p><ol><li>memcached安装后需要启动对应服务才可以对外提供缓存功能，安装memcached服务需要基于windows系统管理员权限</li><li>由于springboot没有提供对memcached的缓存整合方案，需要采用手工编码的形式创建xmemcached客户端操作缓存</li><li>导入xmemcached坐标后，创建memcached配置类，注册MemcachedClient对应的bean，用于操作缓存</li><li>初始化MemcachedClient对象所需要使用的属性可以通过自定义配置属性类的形式加载</li></ol><p><strong>思考</strong></p><p>​        到这里已经完成了三种缓存的整合，其中redis和mongodb需要安装独立的服务器，连接时需要输入对应的服务器地址，这种是远程缓存，Ehcache是一个典型的内存级缓存，因为它什么也不用安装，启动后导入jar包就有缓存功能了。这个时候就要问了，能不能这两种缓存一起用呢？咱们下节再说。</p><h4 id="SpringBoot整合jetcache缓存"><a href="#SpringBoot整合jetcache缓存" class="headerlink" title="SpringBoot整合jetcache缓存"></a>SpringBoot整合jetcache缓存</h4><p>​        目前我们使用的缓存都是要么A要么B，能不能AB一起用呢？这一节就解决这个问题。springboot针对缓存的整合仅仅停留在用缓存上面，如果缓存自身不支持同时支持AB一起用，springboot也没办法，所以要想解决AB缓存一起用的问题，就必须找一款缓存能够支持AB两种缓存一起用，有这种缓存吗？还真有，阿里出品，jetcache。</p><p>​        jetcache严格意义上来说，并不是一个缓存解决方案，只能说他算是一个缓存框架，然后把别的缓存放到jetcache中管理，这样就可以支持AB缓存一起用了。并且jetcache参考了springboot整合缓存的思想，整体技术使用方式和springboot的缓存解决方案思想非常类似。下面咱们就先把jetcache用起来，然后再说它里面的一些小的功能。</p><p>​        做之前要先明确一下，jetcache并不是随便拿两个缓存都能拼到一起去的。目前jetcache支持的缓存方案本地缓存支持两种，远程缓存支持两种，分别如下：</p><ul><li>本地缓存（Local）<ul><li>LinkedHashMap</li><li>Caffeine</li></ul></li><li>远程缓存（Remote）<ul><li>Redis</li><li>Tair</li></ul></li></ul><p>​        其实也有人问我，为什么jetcache只支持2+2这么4款缓存呢？阿里研发这个技术其实主要是为了满足自身的使用需要。最初肯定只有1+1种，逐步变化成2+2种。下面就以LinkedHashMap+Redis的方案实现本地与远程缓存方案同时使用。</p><h5 id="纯远程方案"><a href="#纯远程方案" class="headerlink" title="纯远程方案"></a>纯远程方案</h5><p><strong>步骤①</strong>：导入springboot整合jetcache对应的坐标starter，当前坐标默认使用的远程方案是redis</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alicp.jetcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jetcache-starter-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤②</strong>：远程方案基本配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">jetcache</span><span class="token punctuation">:</span>  <span class="token key atrule">remote</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> redis      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>      <span class="token key atrule">poolConfig</span><span class="token punctuation">:</span>        <span class="token key atrule">maxTotal</span><span class="token punctuation">:</span> <span class="token number">50</span></code></pre><p>​        其中poolConfig是必配项，否则会报错</p><p><strong>步骤③</strong>：启用缓存，在引导类上方标注注解@EnableCreateCacheAnnotation配置springboot程序中可以使用注解的形式创建缓存</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">//jetcache启用缓存的主开关</span><span class="token annotation punctuation">@EnableCreateCacheAnnotation</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot20JetCacheApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Springboot20JetCacheApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>步骤④</strong>：创建缓存对象Cache，并使用注解@CreateCache标记当前缓存的信息，然后使用Cache对象的API操作缓存，put写缓存，get读缓存。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMSCodeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SMSCodeService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CodeUtils codeUtils<span class="token punctuation">;</span>        <span class="token annotation punctuation">@CreateCache</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"jetCache_"</span><span class="token punctuation">,</span>expire <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>timeUnit <span class="token operator">=</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>    <span class="token keyword">private</span> Cache<span class="token operator">&lt;</span>String <span class="token punctuation">,</span>String<span class="token operator">></span> jetCache<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">sendCodeToSMS</span><span class="token punctuation">(</span>String tele<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String code <span class="token operator">=</span> codeUtils<span class="token punctuation">.</span><span class="token function">generator</span><span class="token punctuation">(</span>tele<span class="token punctuation">)</span><span class="token punctuation">;</span>        jetCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tele<span class="token punctuation">,</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span>SMSCode smsCode<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String code <span class="token operator">=</span> jetCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>smsCode<span class="token punctuation">.</span><span class="token function">getTele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> smsCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        通过上述jetcache使用远程方案连接redis可以看出，jetcache操作缓存时的接口操作更符合开发者习惯，使用缓存就先获取缓存对象Cache，放数据进去就是put，取数据出来就是get，更加简单易懂。并且jetcache操作缓存时，可以为某个缓存对象设置过期时间，将同类型的数据放入缓存中，方便有效周期的管理。</p><p>​        上述方案中使用的是配置中定义的default缓存，其实这个default是个名字，可以随便写，也可以随便加。例如再添加一种缓存解决方案，参照如下配置进行：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">jetcache</span><span class="token punctuation">:</span>  <span class="token key atrule">remote</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> redis      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>      <span class="token key atrule">poolConfig</span><span class="token punctuation">:</span>        <span class="token key atrule">maxTotal</span><span class="token punctuation">:</span> <span class="token number">50</span>    <span class="token key atrule">sms</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> redis      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>      <span class="token key atrule">poolConfig</span><span class="token punctuation">:</span>        <span class="token key atrule">maxTotal</span><span class="token punctuation">:</span> <span class="token number">50</span></code></pre><p>​        如果想使用名称是sms的缓存，需要再创建缓存时指定参数area，声明使用对应缓存即可</p><pre class=" language-JAVA"><code class="language-JAVA">@Servicepublic class SMSCodeServiceImpl implements SMSCodeService &#123;    @Autowired    private CodeUtils codeUtils;        @CreateCache(area="sms",name="jetCache_",expire = 10,timeUnit = TimeUnit.SECONDS)    private Cache<String ,String> jetCache;    public String sendCodeToSMS(String tele) &#123;        String code = codeUtils.generator(tele);        jetCache.put(tele,code);        return code;    &#125;    public boolean checkCode(SMSCode smsCode) &#123;        String code = jetCache.get(smsCode.getTele());        return smsCode.getCode().equals(code);    &#125;&#125;</code></pre><h5 id="纯本地方案"><a href="#纯本地方案" class="headerlink" title="纯本地方案"></a>纯本地方案</h5><p>​        远程方案中，配置中使用remote表示远程，换成local就是本地，只不过类型不一样而已。</p><p><strong>步骤①</strong>：导入springboot整合jetcache对应的坐标starter</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alicp.jetcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jetcache-starter-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤②</strong>：本地缓存基本配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">jetcache</span><span class="token punctuation">:</span>  <span class="token key atrule">local</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> linkedhashmap      <span class="token key atrule">keyConvertor</span><span class="token punctuation">:</span> fastjson</code></pre><p>​        为了加速数据获取时key的匹配速度，jetcache要求指定key的类型转换器。简单说就是，如果你给了一个Object作为key的话，我先用key的类型转换器给转换成字符串，然后再保存。等到获取数据时，仍然是先使用给定的Object转换成字符串，然后根据字符串匹配。由于jetcache是阿里的技术，这里推荐key的类型转换器使用阿里的fastjson。</p><p><strong>步骤③</strong>：启用缓存</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">//jetcache启用缓存的主开关</span><span class="token annotation punctuation">@EnableCreateCacheAnnotation</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot20JetCacheApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Springboot20JetCacheApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>步骤④</strong>：创建缓存对象Cache时，标注当前使用本地缓存</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMSCodeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SMSCodeService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@CreateCache</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"jetCache_"</span><span class="token punctuation">,</span>expire <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>timeUnit <span class="token operator">=</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>cacheType <span class="token operator">=</span> CacheType<span class="token punctuation">.</span>LOCAL<span class="token punctuation">)</span>    <span class="token keyword">private</span> Cache<span class="token operator">&lt;</span>String <span class="token punctuation">,</span>String<span class="token operator">></span> jetCache<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">sendCodeToSMS</span><span class="token punctuation">(</span>String tele<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String code <span class="token operator">=</span> codeUtils<span class="token punctuation">.</span><span class="token function">generator</span><span class="token punctuation">(</span>tele<span class="token punctuation">)</span><span class="token punctuation">;</span>        jetCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tele<span class="token punctuation">,</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span>SMSCode smsCode<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String code <span class="token operator">=</span> jetCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>smsCode<span class="token punctuation">.</span><span class="token function">getTele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> smsCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        cacheType控制当前缓存使用本地缓存还是远程缓存，配置cacheType=CacheType.LOCAL即使用本地缓存。</p><h5 id="本地-远程方案"><a href="#本地-远程方案" class="headerlink" title="本地+远程方案"></a>本地+远程方案</h5><p>​        本地和远程方法都有了，两种方案一起使用如何配置呢？其实就是将两种配置合并到一起就可以了。</p><pre class=" language-YAML"><code class="language-YAML">jetcache:  local:    default:      type: linkedhashmap      keyConvertor: fastjson  remote:    default:      type: redis      host: localhost      port: 6379      poolConfig:        maxTotal: 50    sms:      type: redis      host: localhost      port: 6379      poolConfig:        maxTotal: 50</code></pre><p>​        在创建缓存的时候，配置cacheType为BOTH即则本地缓存与远程缓存同时使用。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMSCodeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SMSCodeService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@CreateCache</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"jetCache_"</span><span class="token punctuation">,</span>expire <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>timeUnit <span class="token operator">=</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>cacheType <span class="token operator">=</span> CacheType<span class="token punctuation">.</span>BOTH<span class="token punctuation">)</span>    <span class="token keyword">private</span> Cache<span class="token operator">&lt;</span>String <span class="token punctuation">,</span>String<span class="token operator">></span> jetCache<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        cacheType如果不进行配置，默认值是REMOTE，即仅使用远程缓存方案。关于jetcache的配置，参考以下信息</p><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>jetcache.statIntervalMinutes</td><td>0</td><td>统计间隔，0表示不统计</td></tr><tr><td>jetcache.hiddenPackages</td><td>无</td><td>自动生成name时，隐藏指定的包名前缀</td></tr><tr><td>jetcache.[local|remote].${area}.type</td><td>无</td><td>缓存类型，本地支持linkedhashmap、caffeine，远程支持redis、tair</td></tr><tr><td>jetcache.[local|remote].${area}.keyConvertor</td><td>无</td><td>key转换器，当前仅支持fastjson</td></tr><tr><td>jetcache.[local|remote].${area}.valueEncoder</td><td>java</td><td>仅remote类型的缓存需要指定，可选java和kryo</td></tr><tr><td>jetcache.[local|remote].${area}.valueDecoder</td><td>java</td><td>仅remote类型的缓存需要指定，可选java和kryo</td></tr><tr><td>jetcache.[local|remote].${area}.limit</td><td>100</td><td>仅local类型的缓存需要指定，缓存实例最大元素数</td></tr><tr><td>jetcache.[local|remote].${area}.expireAfterWriteInMillis</td><td>无穷大</td><td>默认过期时间，毫秒单位</td></tr><tr><td>jetcache.local.${area}.expireAfterAccessInMillis</td><td>0</td><td>仅local类型的缓存有效，毫秒单位，最大不活动间隔</td></tr></tbody></table><p>​        以上方案仅支持手工控制缓存，但是springcache方案中的方法缓存特别好用，给一个方法添加一个注解，方法就会自动使用缓存。jetcache也提供了对应的功能，即方法缓存。</p><p><strong>方法缓存</strong></p><p>​        jetcache提供了方法缓存方案，只不过名称变更了而已。在对应的操作接口上方使用注解@Cached即可</p><p><strong>步骤①</strong>：导入springboot整合jetcache对应的坐标starter</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alicp.jetcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jetcache-starter-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤②</strong>：配置缓存</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">jetcache</span><span class="token punctuation">:</span>  <span class="token key atrule">local</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> linkedhashmap      <span class="token key atrule">keyConvertor</span><span class="token punctuation">:</span> fastjson  <span class="token key atrule">remote</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> redis      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>      <span class="token key atrule">keyConvertor</span><span class="token punctuation">:</span> fastjson      <span class="token key atrule">valueEncode</span><span class="token punctuation">:</span> java      <span class="token key atrule">valueDecode</span><span class="token punctuation">:</span> java      <span class="token key atrule">poolConfig</span><span class="token punctuation">:</span>        <span class="token key atrule">maxTotal</span><span class="token punctuation">:</span> <span class="token number">50</span>    <span class="token key atrule">sms</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> redis      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>      <span class="token key atrule">poolConfig</span><span class="token punctuation">:</span>        <span class="token key atrule">maxTotal</span><span class="token punctuation">:</span> <span class="token number">50</span></code></pre><p>​        由于redis缓存中不支持保存对象，因此需要对redis设置当Object类型数据进入到redis中时如何进行类型转换。需要配置keyConvertor表示key的类型转换方式，同时标注value的转换类型方式，值进入redis时是java类型，标注valueEncode为java，值从redis中读取时转换成java，标注valueDecode为java。</p><p>​        注意，为了实现Object类型的值进出redis，需要保障进出redis的Object类型的数据必须实现序列化接口。</p><pre class=" language-JAVA"><code class="language-JAVA">@Datapublic class Book implements Serializable &#123;    private Integer id;    private String type;    private String name;    private String description;&#125;</code></pre><p><strong>步骤③</strong>：启用缓存时开启方法缓存功能，并配置basePackages，说明在哪些包中开启方法缓存</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">//jetcache启用缓存的主开关</span><span class="token annotation punctuation">@EnableCreateCacheAnnotation</span><span class="token comment" spellcheck="true">//开启方法注解缓存</span><span class="token annotation punctuation">@EnableMethodCache</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.itheima"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot20JetCacheApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Springboot20JetCacheApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>步骤④</strong>：使用注解@Cached标注当前方法使用缓存</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> BookDao bookDao<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Cached</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"book_"</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token string">"#id"</span><span class="token punctuation">,</span>expire <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">,</span>cacheType <span class="token operator">=</span> CacheType<span class="token punctuation">.</span>REMOTE<span class="token punctuation">)</span>    <span class="token keyword">public</span> Book <span class="token function">getById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bookDao<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="远程方案的数据同步"><a href="#远程方案的数据同步" class="headerlink" title="远程方案的数据同步"></a>远程方案的数据同步</h5><p>​        由于远程方案中redis保存的数据可以被多个客户端共享，这就存在了数据同步问题。jetcache提供了3个注解解决此问题，分别在更新、删除操作时同步缓存数据，和读取缓存时定时刷新数据</p><p><strong>更新缓存</strong></p><pre class=" language-JAVA"><code class="language-JAVA">@CacheUpdate(name="book_",key="#book.id",value="#book")public boolean update(Book book) &#123;    return bookDao.updateById(book) > 0;&#125;</code></pre><p><strong>删除缓存</strong></p><pre class=" language-JAVA"><code class="language-JAVA">@CacheInvalidate(name="book_",key = "#id")public boolean delete(Integer id) &#123;    return bookDao.deleteById(id) > 0;&#125;</code></pre><p><strong>定时刷新缓存</strong></p><pre class=" language-JAVA"><code class="language-JAVA">@Cached(name="book_",key="#id",expire = 3600,cacheType = CacheType.REMOTE)@CacheRefresh(refresh = 5)public Book getById(Integer id) &#123;    return bookDao.selectById(id);&#125;</code></pre><h5 id="数据报表"><a href="#数据报表" class="headerlink" title="数据报表"></a>数据报表</h5><p>​        jetcache还提供有简单的数据报表功能，帮助开发者快速查看缓存命中信息，只需要添加一个配置即可</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">jetcache</span><span class="token punctuation">:</span>  <span class="token key atrule">statIntervalMinutes</span><span class="token punctuation">:</span> <span class="token number">1</span></code></pre><p>​        设置后，每1分钟在控制台输出缓存数据命中信息</p><pre class=" language-CMD"><code class="language-CMD">[DefaultExecutor] c.alicp.jetcache.support.StatInfoLogger  : jetcache stat from 2022-02-28 09:32:15,892 to 2022-02-28 09:33:00,003cache    |    qps|   rate|   get|    hit|   fail|   expire|   avgLoadTime|   maxLoadTime---------+-------+-------+------+-------+-------+---------+--------------+--------------book_    |   0.66| 75.86%|    29|     22|      0|        0|          28.0|           188---------+-------+-------+------+-------+-------+---------+--------------+--------------</code></pre><p><strong>总结</strong></p><ol><li>jetcache是一个类似于springcache的缓存解决方案，自身不具有缓存功能，它提供有本地缓存与远程缓存多级共同使用的缓存解决方案</li><li>jetcache提供的缓存解决方案受限于目前支持的方案，本地缓存支持两种，远程缓存支持两种</li><li>注意数据进入远程缓存时的类型转换问题</li><li>jetcache提供方法缓存，并提供了对应的缓存更新与刷新功能</li><li>jetcache提供有简单的缓存信息命中报表方便开发者即时监控缓存数据命中情况</li></ol><p><strong>思考</strong></p><p>​        jetcache解决了前期使用缓存方案单一的问题，但是仍然不能灵活的选择缓存进行搭配使用，是否存在一种技术可以灵活的搭配各种各样的缓存使用呢？有，咱们下一节再讲。</p><h4 id="SpringBoot整合j2cache缓存"><a href="#SpringBoot整合j2cache缓存" class="headerlink" title="SpringBoot整合j2cache缓存"></a>SpringBoot整合j2cache缓存</h4><p>​        jetcache可以在限定范围内构建多级缓存，但是灵活性不足，不能随意搭配缓存，本节介绍一种可以随意搭配缓存解决方案的缓存整合框架，j2cache。下面就来讲解如何使用这种缓存框架，以Ehcache与redis整合为例：</p><p><strong>步骤①</strong>：导入j2cache、redis、ehcache坐标</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.oschina.j2cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>j2cache-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.4-release<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.oschina.j2cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>j2cache-spring-boot2-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.0-release<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>net.sf.ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>​        j2cache的starter中默认包含了redis坐标，官方推荐使用redis作为二级缓存，因此此处无需导入redis坐标</p><p><strong>步骤②</strong>：配置一级与二级缓存，并配置一二级缓存间数据传递方式，配置书写在名称为j2cache.properties的文件中。如果使用ehcache还需要单独添加ehcache的配置文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 1级缓存</span>j2cache.L1.provider_class = ehcacheehcache.configXml = ehcache.xml<span class="token comment" spellcheck="true"># 2级缓存</span>j2cache.L2.provider_class = net.oschina.j2cache.cache.support.redis.SpringRedisProviderj2cache.L2.config_section = redisredis.hosts = localhost<span class="token punctuation">:</span><span class="token number">6379</span><span class="token comment" spellcheck="true"># 1级缓存中的数据如何到达二级缓存</span>j2cache.broadcast = net.oschina.j2cache.cache.support.redis.SpringRedisPubSubPolicy</code></pre><p>​        此处配置不能乱配置，需要参照官方给出的配置说明进行。例如1级供应商选择ehcache，供应商名称仅仅是一个ehcache，但是2级供应商选择redis时要写专用的Spring整合Redis的供应商类名SpringRedisProvider，而且这个名称并不是所有的redis包中能提供的，也不是spring包中提供的。因此配置j2cache必须参照官方文档配置，而且还要去找专用的整合包，导入对应坐标才可以使用。</p><p>​        一级与二级缓存最重要的一个配置就是两者之间的数据沟通方式，此类配置也不是随意配置的，并且不同的缓存解决方案提供的数据沟通方式差异化很大，需要查询官方文档进行设置。</p><p><strong>步骤③</strong>：使用缓存</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMSCodeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SMSCodeService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CodeUtils codeUtils<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CacheChannel cacheChannel<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">sendCodeToSMS</span><span class="token punctuation">(</span>String tele<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String code <span class="token operator">=</span> codeUtils<span class="token punctuation">.</span><span class="token function">generator</span><span class="token punctuation">(</span>tele<span class="token punctuation">)</span><span class="token punctuation">;</span>        cacheChannel<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"sms"</span><span class="token punctuation">,</span>tele<span class="token punctuation">,</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCode</span><span class="token punctuation">(</span>SMSCode smsCode<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String code <span class="token operator">=</span> cacheChannel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"sms"</span><span class="token punctuation">,</span>smsCode<span class="token punctuation">.</span><span class="token function">getTele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> smsCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        j2cache的使用和jetcache比较类似，但是无需开启使用的开关，直接定义缓存对象即可使用，缓存对象名CacheChannel。</p><p>​        j2cache的使用不复杂，配置是j2cache的核心，毕竟是一个整合型的缓存框架。缓存相关的配置过多，可以查阅j2cache-core核心包中的j2cache.properties文件中的说明。如下：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#J2Cache configuration</span><span class="token comment" spellcheck="true">#########################################</span><span class="token comment" spellcheck="true"># Cache Broadcast Method</span><span class="token comment" spellcheck="true"># values:</span><span class="token comment" spellcheck="true"># jgroups -> use jgroups's multicast</span><span class="token comment" spellcheck="true"># redis -> use redis publish/subscribe mechanism (using jedis)</span><span class="token comment" spellcheck="true"># lettuce -> use redis publish/subscribe mechanism (using lettuce, Recommend)</span><span class="token comment" spellcheck="true"># rabbitmq -> use RabbitMQ publisher/consumer mechanism</span><span class="token comment" spellcheck="true"># rocketmq -> use RocketMQ publisher/consumer mechanism</span><span class="token comment" spellcheck="true"># none -> don't notify the other nodes in cluster</span><span class="token comment" spellcheck="true"># xx.xxxx.xxxx.Xxxxx your own cache broadcast policy classname that implement net.oschina.j2cache.cluster.ClusterPolicy</span><span class="token comment" spellcheck="true">#########################################</span><span class="token attr-name">j2cache.broadcast</span> <span class="token punctuation">=</span> <span class="token attr-value">redis</span><span class="token comment" spellcheck="true"># jgroups properties</span><span class="token attr-name">jgroups.channel.name</span> <span class="token punctuation">=</span> <span class="token attr-value">j2cache</span><span class="token attr-name">jgroups.configXml</span> <span class="token punctuation">=</span> <span class="token attr-value">/network.xml</span><span class="token comment" spellcheck="true"># RabbitMQ properties</span><span class="token attr-name">rabbitmq.exchange</span> <span class="token punctuation">=</span> <span class="token attr-value">j2cache</span><span class="token attr-name">rabbitmq.host</span> <span class="token punctuation">=</span> <span class="token attr-value">localhost</span><span class="token attr-name">rabbitmq.port</span> <span class="token punctuation">=</span> <span class="token attr-value">5672</span><span class="token attr-name">rabbitmq.username</span> <span class="token punctuation">=</span> <span class="token attr-value">guest</span><span class="token attr-name">rabbitmq.password</span> <span class="token punctuation">=</span> <span class="token attr-value">guest</span><span class="token comment" spellcheck="true"># RocketMQ properties</span><span class="token attr-name">rocketmq.name</span> <span class="token punctuation">=</span> <span class="token attr-value">j2cache</span><span class="token attr-name">rocketmq.topic</span> <span class="token punctuation">=</span> <span class="token attr-value">j2cache</span><span class="token comment" spellcheck="true"># use ; to split multi hosts</span><span class="token attr-name">rocketmq.hosts</span> <span class="token punctuation">=</span> <span class="token attr-value">127.0.0.1:9876</span><span class="token comment" spellcheck="true">#########################################</span><span class="token comment" spellcheck="true"># Level 1&amp;2 provider</span><span class="token comment" spellcheck="true"># values:</span><span class="token comment" spellcheck="true"># none -> disable this level cache</span><span class="token comment" spellcheck="true"># ehcache -> use ehcache2 as level 1 cache</span><span class="token comment" spellcheck="true"># ehcache3 -> use ehcache3 as level 1 cache</span><span class="token comment" spellcheck="true"># caffeine -> use caffeine as level 1 cache(only in memory)</span><span class="token comment" spellcheck="true"># redis -> use redis as level 2 cache (using jedis)</span><span class="token comment" spellcheck="true"># lettuce -> use redis as level 2 cache (using lettuce)</span><span class="token comment" spellcheck="true"># readonly-redis -> use redis as level 2 cache ,but never write data to it. if use this provider, you must uncomment `j2cache.L2.config_section` to make the redis configurations available.</span><span class="token comment" spellcheck="true"># memcached -> use memcached as level 2 cache (xmemcached),</span><span class="token comment" spellcheck="true"># [classname] -> use custom provider</span><span class="token comment" spellcheck="true">#########################################</span><span class="token attr-name">j2cache.L1.provider_class</span> <span class="token punctuation">=</span> <span class="token attr-value">caffeine</span><span class="token attr-name">j2cache.L2.provider_class</span> <span class="token punctuation">=</span> <span class="token attr-value">redis</span><span class="token comment" spellcheck="true"># When L2 provider isn't `redis`, using `L2.config_section = redis` to read redis configurations</span><span class="token comment" spellcheck="true"># j2cache.L2.config_section = redis</span><span class="token comment" spellcheck="true"># Enable/Disable ttl in redis cache data (if disabled, the object in redis will never expire, default:true)</span><span class="token comment" spellcheck="true"># NOTICE: redis hash mode (redis.storage = hash) do not support this feature)</span><span class="token attr-name">j2cache.sync_ttl_to_redis</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># Whether to cache null objects by default (default false)</span><span class="token attr-name">j2cache.default_cache_null_object</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true">#########################################</span><span class="token comment" spellcheck="true"># Cache Serialization Provider</span><span class="token comment" spellcheck="true"># values:</span><span class="token comment" spellcheck="true"># fst -> using fast-serialization (recommend)</span><span class="token comment" spellcheck="true"># kryo -> using kryo serialization</span><span class="token comment" spellcheck="true"># json -> using fst's json serialization (testing)</span><span class="token comment" spellcheck="true"># fastjson -> using fastjson serialization (embed non-static class not support)</span><span class="token comment" spellcheck="true"># java -> java standard</span><span class="token comment" spellcheck="true"># fse -> using fse serialization</span><span class="token comment" spellcheck="true"># [classname implements Serializer]</span><span class="token comment" spellcheck="true">#########################################</span><span class="token attr-name">j2cache.serialization</span> <span class="token punctuation">=</span> <span class="token attr-value">json</span><span class="token comment" spellcheck="true">#json.map.person = net.oschina.j2cache.demo.Person</span><span class="token comment" spellcheck="true">#########################################</span><span class="token comment" spellcheck="true"># Ehcache configuration</span><span class="token comment" spellcheck="true">#########################################</span><span class="token comment" spellcheck="true"># ehcache.configXml = /ehcache.xml</span><span class="token comment" spellcheck="true"># ehcache3.configXml = /ehcache3.xml</span><span class="token comment" spellcheck="true"># ehcache3.defaultHeapSize = 1000</span><span class="token comment" spellcheck="true">#########################################</span><span class="token comment" spellcheck="true"># Caffeine configuration</span><span class="token comment" spellcheck="true"># caffeine.region.[name] = size, xxxx[s|m|h|d]</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#########################################</span><span class="token attr-name">caffeine.properties</span> <span class="token punctuation">=</span> <span class="token attr-value">/caffeine.properties</span><span class="token comment" spellcheck="true">#########################################</span><span class="token comment" spellcheck="true"># Redis connection configuration</span><span class="token comment" spellcheck="true">#########################################</span><span class="token comment" spellcheck="true">#########################################</span><span class="token comment" spellcheck="true"># Redis Cluster Mode</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># single -> single redis server</span><span class="token comment" spellcheck="true"># sentinel -> master-slaves servers</span><span class="token comment" spellcheck="true"># cluster -> cluster servers (数据库配置无效，使用 database = 0）</span><span class="token comment" spellcheck="true"># sharded -> sharded servers  (密码、数据库必须在 hosts 中指定，且连接池配置无效 ; redis://user:password@127.0.0.1:6379/0）</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#########################################</span><span class="token attr-name">redis.mode</span> <span class="token punctuation">=</span> <span class="token attr-value">single</span><span class="token comment" spellcheck="true">#redis storage mode (generic|hash)</span><span class="token attr-name">redis.storage</span> <span class="token punctuation">=</span> <span class="token attr-value">generic</span><span class="token comment" spellcheck="true">## redis pub/sub channel name</span><span class="token attr-name">redis.channel</span> <span class="token punctuation">=</span> <span class="token attr-value">j2cache</span><span class="token comment" spellcheck="true">## redis pub/sub server (using redis.hosts when empty)</span><span class="token attr-name">redis.channel.host</span> <span class="token attr-value">=</span><span class="token comment" spellcheck="true">#cluster name just for sharded</span><span class="token attr-name">redis.cluster_name</span> <span class="token punctuation">=</span> <span class="token attr-value">j2cache</span><span class="token comment" spellcheck="true">## redis cache namespace optional, default[empty]</span><span class="token attr-name">redis.namespace</span> <span class="token attr-value">=</span><span class="token comment" spellcheck="true">## redis command scan parameter count, default[1000]</span><span class="token comment" spellcheck="true">#redis.scanCount = 1000</span><span class="token comment" spellcheck="true">## connection</span><span class="token comment" spellcheck="true"># Separate multiple redis nodes with commas, such as 192.168.0.10:6379,192.168.0.11:6379,192.168.0.12:6379</span><span class="token attr-name">redis.hosts</span> <span class="token punctuation">=</span> <span class="token attr-value">127.0.0.1:6379</span><span class="token attr-name">redis.timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">2000</span><span class="token attr-name">redis.password</span> <span class="token attr-value">=</span><span class="token attr-name">redis.database</span> <span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token attr-name">redis.ssl</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true">## redis pool properties</span><span class="token attr-name">redis.maxTotal</span> <span class="token punctuation">=</span> <span class="token attr-value">100</span><span class="token attr-name">redis.maxIdle</span> <span class="token punctuation">=</span> <span class="token attr-value">10</span><span class="token attr-name">redis.maxWaitMillis</span> <span class="token punctuation">=</span> <span class="token attr-value">5000</span><span class="token attr-name">redis.minEvictableIdleTimeMillis</span> <span class="token punctuation">=</span> <span class="token attr-value">60000</span><span class="token attr-name">redis.minIdle</span> <span class="token punctuation">=</span> <span class="token attr-value">1</span><span class="token attr-name">redis.numTestsPerEvictionRun</span> <span class="token punctuation">=</span> <span class="token attr-value">10</span><span class="token attr-name">redis.lifo</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token attr-name">redis.softMinEvictableIdleTimeMillis</span> <span class="token punctuation">=</span> <span class="token attr-value">10</span><span class="token attr-name">redis.testOnBorrow</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">redis.testOnReturn</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token attr-name">redis.testWhileIdle</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">redis.timeBetweenEvictionRunsMillis</span> <span class="token punctuation">=</span> <span class="token attr-value">300000</span><span class="token attr-name">redis.blockWhenExhausted</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token attr-name">redis.jmxEnabled</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true">#########################################</span><span class="token comment" spellcheck="true"># Lettuce scheme</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># redis -> single redis server</span><span class="token comment" spellcheck="true"># rediss -> single redis server with ssl</span><span class="token comment" spellcheck="true"># redis-sentinel -> redis sentinel</span><span class="token comment" spellcheck="true"># redis-cluster -> cluster servers</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#########################################</span><span class="token comment" spellcheck="true">#########################################</span><span class="token comment" spellcheck="true"># Lettuce Mode</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># single -> single redis server</span><span class="token comment" spellcheck="true"># sentinel -> master-slaves servers</span><span class="token comment" spellcheck="true"># cluster -> cluster servers (数据库配置无效，使用 database = 0）</span><span class="token comment" spellcheck="true"># sharded -> sharded servers  (密码、数据库必须在 hosts 中指定，且连接池配置无效 ; redis://user:password@127.0.0.1:6379/0）</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#########################################</span><span class="token comment" spellcheck="true">## redis command scan parameter count, default[1000]</span><span class="token comment" spellcheck="true">#lettuce.scanCount = 1000</span><span class="token attr-name">lettuce.mode</span> <span class="token punctuation">=</span> <span class="token attr-value">single</span><span class="token attr-name">lettuce.namespace</span> <span class="token attr-value">=</span><span class="token attr-name">lettuce.storage</span> <span class="token punctuation">=</span> <span class="token attr-value">hash</span><span class="token attr-name">lettuce.channel</span> <span class="token punctuation">=</span> <span class="token attr-value">j2cache</span><span class="token attr-name">lettuce.scheme</span> <span class="token punctuation">=</span> <span class="token attr-value">redis</span><span class="token attr-name">lettuce.hosts</span> <span class="token punctuation">=</span> <span class="token attr-value">127.0.0.1:6379</span><span class="token attr-name">lettuce.password</span> <span class="token attr-value">=</span><span class="token attr-name">lettuce.database</span> <span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token attr-name">lettuce.sentinelMasterId</span> <span class="token attr-value">=</span><span class="token attr-name">lettuce.maxTotal</span> <span class="token punctuation">=</span> <span class="token attr-value">100</span><span class="token attr-name">lettuce.maxIdle</span> <span class="token punctuation">=</span> <span class="token attr-value">10</span><span class="token attr-name">lettuce.minIdle</span> <span class="token punctuation">=</span> <span class="token attr-value">10</span><span class="token comment" spellcheck="true"># timeout in milliseconds</span><span class="token attr-name">lettuce.timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">10000</span><span class="token comment" spellcheck="true"># redis cluster topology refresh interval in milliseconds</span><span class="token attr-name">lettuce.clusterTopologyRefresh</span> <span class="token punctuation">=</span> <span class="token attr-value">3000</span><span class="token comment" spellcheck="true">#########################################</span><span class="token comment" spellcheck="true"># memcached server configurations</span><span class="token comment" spellcheck="true"># refer to https://gitee.com/mirrors/XMemcached</span><span class="token comment" spellcheck="true">#########################################</span><span class="token attr-name">memcached.servers</span> <span class="token punctuation">=</span> <span class="token attr-value">127.0.0.1:11211</span><span class="token attr-name">memcached.username</span> <span class="token attr-value">=</span><span class="token attr-name">memcached.password</span> <span class="token attr-value">=</span><span class="token attr-name">memcached.connectionPoolSize</span> <span class="token punctuation">=</span> <span class="token attr-value">10</span><span class="token attr-name">memcached.connectTimeout</span> <span class="token punctuation">=</span> <span class="token attr-value">1000</span><span class="token attr-name">memcached.failureMode</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token attr-name">memcached.healSessionInterval</span> <span class="token punctuation">=</span> <span class="token attr-value">1000</span><span class="token attr-name">memcached.maxQueuedNoReplyOperations</span> <span class="token punctuation">=</span> <span class="token attr-value">100</span><span class="token attr-name">memcached.opTimeout</span> <span class="token punctuation">=</span> <span class="token attr-value">100</span><span class="token attr-name">memcached.sanitizeKeys</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span></code></pre><p><strong>总结</strong></p><ol><li>j2cache是一个缓存框架，自身不具有缓存功能，它提供多种缓存整合在一起使用的方案</li><li>j2cache需要通过复杂的配置设置各级缓存，以及缓存之间数据交换的方式</li><li>j2cache操作接口通过CacheChannel实现</li></ol><h3 id="KF-5-2-任务"><a href="#KF-5-2-任务" class="headerlink" title="KF-5-2.任务"></a>KF-5-2.任务</h3><p>​        springboot整合第三方技术第二部分我们来说说任务系统，其实这里说的任务系统指的是定时任务。定时任务是企业级开发中必不可少的组成部分，诸如长周期业务数据的计算，例如年度报表，诸如系统脏数据的处理，再比如系统性能监控报告，还有抢购类活动的商品上架，这些都离不开定时任务。本节将介绍两种不同的定时任务技术。</p><h4 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a>Quartz</h4><p>​        Quartz技术是一个比较成熟的定时任务框架，怎么说呢？有点繁琐，用过的都知道，配置略微复杂。springboot对其进行整合后，简化了一系列的配置，将很多配置采用默认设置，这样开发阶段就简化了很多。再学习springboot整合Quartz前先普及几个Quartz的概念。</p><ul><li>工作（Job）：用于定义具体执行的工作</li><li>工作明细（JobDetail）：用于描述定时工作相关的信息</li><li>触发器（Trigger）：描述了工作明细与调度器的对应关系</li><li>调度器（Scheduler）：用于描述触发工作的执行规则，通常使用cron表达式定义规则</li></ul><p>​        简单说就是你定时干什么事情，这就是工作，工作不可能就是一个简单的方法，还要设置一些明细信息。工作啥时候执行，设置一个调度器，可以简单理解成设置一个工作执行的时间。工作和调度都是独立定义的，它们两个怎么配合到一起呢？用触发器。完了，就这么多。下面开始springboot整合Quartz。</p><p><strong>步骤①</strong>：导入springboot整合Quartz的starter</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-quartz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤②</strong>：定义任务Bean，按照Quartz的开发规范制作，继承QuartzJobBean</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyQuartz</span> <span class="token keyword">extends</span> <span class="token class-name">QuartzJobBean</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeInternal</span><span class="token punctuation">(</span>JobExecutionContext context<span class="token punctuation">)</span> <span class="token keyword">throws</span> JobExecutionException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"quartz task run..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>步骤③</strong>：创建Quartz配置类，定义工作明细（JobDetail）与触发器的（Trigger）bean</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JobDetail <span class="token function">printJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//绑定具体的工作</span>        <span class="token keyword">return</span> JobBuilder<span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span>MyQuartz<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">storeDurably</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Trigger <span class="token function">printJobTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ScheduleBuilder schedBuilder <span class="token operator">=</span> CronScheduleBuilder<span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0/5 * * * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//绑定对应的工作明细</span>        <span class="token keyword">return</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span><span class="token function">printJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>schedBuilder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        工作明细中要设置对应的具体工作，使用newJob()操作传入对应的工作任务类型即可。</p><p>​        触发器需要绑定任务，使用forJob()操作传入绑定的工作明细对象。此处可以为工作明细设置名称然后使用名称绑定，也可以直接调用对应方法绑定。触发器中最核心的规则是执行时间，此处使用调度器定义执行时间，执行时间描述方式使用的是cron表达式。有关cron表达式的规则，各位小伙伴可以去参看相关课程学习，略微复杂，而且格式不能乱设置，不是写个格式就能用的，写不好就会出现冲突问题。</p><p><strong>总结</strong></p><ol><li>springboot整合Quartz就是将Quartz对应的核心对象交给spring容器管理，包含两个对象，JobDetail和Trigger对象</li><li>JobDetail对象描述的是工作的执行信息，需要绑定一个QuartzJobBean类型的对象</li><li>Trigger对象定义了一个触发器，需要为其指定绑定的JobDetail是哪个，同时要设置执行周期调度器</li></ol><p><strong>思考</strong></p><p>​        上面的操作看上去不多，但是Quartz将其中的对象划分粒度过细，导致开发的时候有点繁琐，spring针对上述规则进行了简化，开发了自己的任务管理组件——Task，如何用呢？咱们下节再说。</p><h4 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h4><p>​        spring根据定时任务的特征，将定时任务的开发简化到了极致。怎么说呢？要做定时任务总要告诉容器有这功能吧，然后定时执行什么任务直接告诉对应的bean什么时间执行就行了，就这么简单，一起来看怎么做</p><p><strong>步骤①</strong>：开启定时任务功能，在引导类上开启定时任务功能的开关，使用注解@EnableScheduling</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment" spellcheck="true">//开启定时任务功能</span><span class="token annotation punctuation">@EnableScheduling</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot22TaskApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Springboot22TaskApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>步骤②</strong>：定义Bean，在对应要定时执行的操作上方，使用注解@Scheduled定义执行的时间，执行时间的描述方式还是cron表达式</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0/1 * * * * ?"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" :spring task run..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        完事，这就完成了定时任务的配置。总体感觉其实什么东西都没少，只不过没有将所有的信息都抽取成bean，而是直接使用注解绑定定时执行任务的事情而已。</p><p>​        如何想对定时任务进行相关配置，可以通过配置文件进行</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">task</span><span class="token punctuation">:</span>       <span class="token key atrule">scheduling</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>           <span class="token key atrule">size</span><span class="token punctuation">:</span> <span class="token number">1                            </span><span class="token comment" spellcheck="true"># 任务调度线程池大小 默认 1</span>      <span class="token key atrule">thread-name-prefix</span><span class="token punctuation">:</span> ssm_          <span class="token comment" spellcheck="true"># 调度线程名称前缀 默认 scheduling-      </span>        <span class="token key atrule">shutdown</span><span class="token punctuation">:</span>          <span class="token key atrule">await-termination</span><span class="token punctuation">:</span> <span class="token boolean important">false        </span><span class="token comment" spellcheck="true"># 线程池关闭时等待所有任务完成</span>          <span class="token key atrule">await-termination-period</span><span class="token punctuation">:</span> 10s    <span class="token comment" spellcheck="true"># 调度线程关闭前最大等待时间，确保最后一定关闭</span></code></pre><p><strong>总结</strong></p><ol><li><p>spring task需要使用注解@EnableScheduling开启定时任务功能</p></li><li><p>为定时执行的的任务设置执行周期，描述方式cron表达式</p></li></ol><h3 id="KF-5-3-邮件"><a href="#KF-5-3-邮件" class="headerlink" title="KF-5-3.邮件"></a>KF-5-3.邮件</h3><p>​        springboot整合第三方技术第三部分我们来说说邮件系统，发邮件是java程序的基本操作，springboot整合javamail其实就是简化开发。不熟悉邮件的小伙伴可以先学习完javamail的基础操作，再来看这一部分内容才能感触到springboot整合javamail究竟简化了哪些操作。简化的多码？其实不多，差别不大，只是还个格式而已。</p><p>​        学习邮件发送之前先了解3个概念，这些概念规范了邮件操作过程中的标准。</p><ul><li>SMTP（Simple Mail Transfer Protocol）：简单邮件传输协议，用于<strong>发送</strong>电子邮件的传输协议</li><li>POP3（Post Office Protocol - Version 3）：用于<strong>接收</strong>电子邮件的标准协议</li><li>IMAP（Internet Mail Access Protocol）：互联网消息协议，是POP3的替代协议</li></ul><p>​        简单说就是SMPT是发邮件的标准，POP3是收邮件的标准，IMAP是对POP3的升级。我们制作程序中操作邮件，通常是发邮件，所以SMTP是使用的重点，收邮件大部分都是通过邮件客户端完成，所以开发收邮件的代码极少。除非你要读取邮件内容，然后解析，做邮件功能的统一处理。例如HR的邮箱收到求职者的简历，可以读取后统一处理。但是为什么不制作独立的投递简历的系统呢？所以说，好奇怪的需求，因为要想收邮件就要规范发邮件的人的书写格式，这个未免有点强人所难，并且极易收到外部攻击，你不可能使用白名单来收邮件。如果能使用白名单来收邮件然后解析邮件，还不如开发个系统给白名单中的人专用呢，更安全，总之就是鸡肋了。下面就开始学习springboot如何整合javamail发送邮件。</p><h4 id="发送简单邮件"><a href="#发送简单邮件" class="headerlink" title="发送简单邮件"></a>发送简单邮件</h4><p><strong>步骤①</strong>：导入springboot整合javamail的starter</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤②</strong>：配置邮箱的登录信息</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mail</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> smtp.126.com    <span class="token key atrule">username</span><span class="token punctuation">:</span> test@126.com    <span class="token key atrule">password</span><span class="token punctuation">:</span> test</code></pre><p>​        java程序仅用于发送邮件，邮件的功能还是邮件供应商提供的，所以这里是用别人的邮件服务，要配置对应信息。</p><p>​        host配置的是提供邮件服务的主机协议，当前程序仅用于发送邮件，因此配置的是smtp的协议。</p><p>​        password并不是邮箱账号的登录密码，是邮件供应商提供的一个加密后的密码，也是为了保障系统安全性。不然外部人员通过地址访问下载了配置文件，直接获取到了邮件密码就会有极大的安全隐患。有关该密码的获取每个邮件供应商提供的方式都不一样，此处略过。可以到邮件供应商的设置页面找POP3或IMAP这些关键词找到对应的获取位置。下例仅供参考：</p><p><img src="img%5Cimage-20220228111251036.png" alt="image-20220228111251036"></p><p><strong>步骤③</strong>：使用JavaMailSender接口发送邮件</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMailServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SendMailService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JavaMailSender javaMailSender<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发送人</span>    <span class="token keyword">private</span> String from <span class="token operator">=</span> <span class="token string">"test@qq.com"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//接收人</span>    <span class="token keyword">private</span> String to <span class="token operator">=</span> <span class="token string">"test@126.com"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//标题</span>    <span class="token keyword">private</span> String subject <span class="token operator">=</span> <span class="token string">"测试邮件"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//正文</span>    <span class="token keyword">private</span> String context <span class="token operator">=</span> <span class="token string">"测试邮件正文内容"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SimpleMailMessage message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>from<span class="token operator">+</span><span class="token string">"(小甜甜)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        javaMailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        将发送邮件的必要信息（发件人、收件人、标题、正文）封装到SimpleMailMessage对象中，可以根据规则设置发送人昵称等。</p><h4 id="发送多组件邮件（附件、复杂正文）"><a href="#发送多组件邮件（附件、复杂正文）" class="headerlink" title="发送多组件邮件（附件、复杂正文）"></a>发送多组件邮件（附件、复杂正文）</h4><p>​        发送简单邮件仅需要提供对应的4个基本信息就可以了，如果想发送复杂的邮件，需要更换邮件对象。使用MimeMessage可以发送特殊的邮件。</p><p><strong>发送网页正文邮件</strong></p><pre class=" language-JAVA"><code class="language-JAVA">@Servicepublic class SendMailServiceImpl2 implements SendMailService &#123;    @Autowired    private JavaMailSender javaMailSender;    //发送人    private String from = "test@qq.com";    //接收人    private String to = "test@126.com";    //标题    private String subject = "测试邮件";    //正文    private String context = "<img src='ABC.JPG'/><a href='https://www.itcast.cn'>点开有惊喜</a>";    public void sendMail() &#123;        try &#123;            MimeMessage message = javaMailSender.createMimeMessage();            MimeMessageHelper helper = new MimeMessageHelper(message);            helper.setFrom(to+"(小甜甜)");            helper.setTo(from);            helper.setSubject(subject);            helper.setText(context,true);        //此处设置正文支持html解析            javaMailSender.send(message);        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p><strong>发送带有附件的邮件</strong></p><pre class=" language-JAVA"><code class="language-JAVA">@Servicepublic class SendMailServiceImpl2 implements SendMailService &#123;    @Autowired    private JavaMailSender javaMailSender;    //发送人    private String from = "test@qq.com";    //接收人    private String to = "test@126.com";    //标题    private String subject = "测试邮件";    //正文    private String context = "测试邮件正文";    public void sendMail() &#123;        try &#123;            MimeMessage message = javaMailSender.createMimeMessage();            MimeMessageHelper helper = new MimeMessageHelper(message,true);        //此处设置支持附件            helper.setFrom(to+"(小甜甜)");            helper.setTo(from);            helper.setSubject(subject);            helper.setText(context);            //添加附件            File f1 = new File("springboot_23_mail-0.0.1-SNAPSHOT.jar");            File f2 = new File("resources\\logo.png");            helper.addAttachment(f1.getName(),f1);            helper.addAttachment("最靠谱的培训结构.png",f2);            javaMailSender.send(message);        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><p><strong>总结</strong></p><ol><li>springboot整合javamail其实就是简化了发送邮件的客户端对象JavaMailSender的初始化过程，通过配置的形式加载信息简化开发过程</li></ol><h3 id="KF-5-4-消息"><a href="#KF-5-4-消息" class="headerlink" title="KF-5-4.消息"></a>KF-5-4.消息</h3><p>​        springboot整合第三方技术最后一部分我们来说说消息中间件，首先先介绍一下消息的应用。</p><h4 id="消息的概念"><a href="#消息的概念" class="headerlink" title="消息的概念"></a>消息的概念</h4><p>​        从广义角度来说，消息其实就是信息，但是和信息又有所不同。信息通常被定义为一组数据，而消息除了具有数据的特征之外，还有消息的来源与接收的概念。通常发送消息的一方称为消息的生产者，接收消息的一方称为消息的消费者。这样比较后，发现其实消息和信息差别还是很大的。</p><p>​        为什么要设置生产者和消费者呢？这就是要说到消息的意义了。信息通常就是一组数据，但是消息由于有了生产者和消费者，就出现了消息中所包含的信息可以被二次解读，生产者发送消息，可以理解为生产者发送了一个信息，也可以理解为生产者发送了一个命令；消费者接收消息，可以理解为消费者得到了一个信息，也可以理解为消费者得到了一个命令。对比一下我们会发现信息是一个基本数据，而命令则可以关联下一个行为动作，这样就可以理解为基于接收的消息相当于得到了一个行为动作，使用这些行为动作就可以组织成一个业务逻辑，进行进一步的操作。总的来说，消息其实也是一组信息，只是为其赋予了全新的含义，因为有了消息的流动，并且是有方向性的流动，带来了基于流动的行为产生的全新解读。开发者就可以基于消息的这种特殊解，将其换成代码中的指令。</p><p>​        对于消息的理解，初学者总认为消息内部的数据非常复杂，这是一个误区。比如我发送了一个消息，要求接受者翻译发送过去的内容。初学者会认为消息中会包含被翻译的文字，已经本次操作要执行翻译操作而不是打印操作。其实这种现象有点过度解读了，发送的消息中仅仅包含被翻译的文字，但是可以通过控制不同的人接收此消息来确认要做的事情。例如发送被翻译的文字仅到A程序，而A程序只能进行翻译操作，这样就可以发送简单的信息完成复杂的业务了，是通过接收消息的主体不同，进而执行不同的操作，而不会在消息内部定义数据的操作行为，当然如果开发者希望消息中包含操作种类信息也是可以的，只是提出消息的内容可以更简单，更单一。</p><p>​        对于消息的生产者与消费者的工作模式，还可以将消息划分成两种模式，同步消费与异步消息。</p><p>​        所谓同步消息就是生产者发送完消息，等待消费者处理，消费者处理完将结果告知生产者，然后生产者继续向下执行业务。这种模式过于卡生产者的业务执行连续性，在现在的企业级开发中，上述这种业务场景通常不会采用消息的形式进行处理。</p><p>​        所谓异步消息就是生产者发送完消息，无需等待消费者处理完毕，生产者继续向下执行其他动作。比如生产者发送了一个日志信息给日志系统，发送过去以后生产者就向下做其他事情了，无需关注日志系统的执行结果。日志系统根据接收到的日志信息继续进行业务执行，是单纯的记录日志，还是记录日志并报警，这些和生产者无关，这样生产者的业务执行效率就会大幅度提升。并且可以通过添加多个消费者来处理同一个生产者发送的消息来提高系统的高并发性，改善系统工作效率，提高用户体验。一旦某一个消费者由于各种问题宕机了，也不会对业务产生影响，提高了系统的高可用性。</p><p>​        以上简单的介绍了一下消息这种工作模式存在的意义，希望对各位学习者有所帮助。</p><h4 id="Java处理消息的标准规范"><a href="#Java处理消息的标准规范" class="headerlink" title="Java处理消息的标准规范"></a>Java处理消息的标准规范</h4><p>​        目前企业级开发中广泛使用的消息处理技术共三大类，具体如下：</p><ul><li>JMS</li><li>AMQP</li><li>MQTT</li></ul><p>​        为什么是三大类，而不是三个技术呢？因为这些都是规范，就想JDBC技术，是个规范，开发针对规范开发，运行还要靠实现类，例如MySQL提供了JDBC的实现，最终运行靠的还是实现。并且这三类规范都是针对异步消息进行处理的，也符合消息的设计本质，处理异步的业务。对以上三种消息规范做一下普及</p><h5 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a>JMS</h5><p>​        JMS（Java Message Service）,这是一个规范，作用等同于JDBC规范，提供了与消息服务相关的API接口。</p><p><strong>JMS消息模型</strong></p><p>​        JMS规范中规范了消息有两种模型。分别是<strong>点对点模型</strong>和<strong>发布订阅模型</strong>。</p><p>​        <strong>点对点模型</strong>：peer-2-peer，生产者会将消息发送到一个保存消息的容器中，通常使用队列模型，使用队列保存消息。一个队列的消息只能被一个消费者消费，或未被及时消费导致超时。这种模型下，生产者和消费者是一对一绑定的。</p><p>​        <strong>发布订阅模型</strong>：publish-subscribe，生产者将消息发送到一个保存消息的容器中，也是使用队列模型来保存。但是消息可以被多个消费者消费，生产者和消费者完全独立，相互不需要感知对方的存在。</p><p>​        以上这种分类是从消息的生产和消费过程来进行区分，针对消息所包含的信息不同，还可以进行不同类别的划分。</p><p><strong>JMS消息种类</strong></p><p>​        根据消息中包含的数据种类划分，可以将消息划分成6种消息。</p><ul><li>TextMessage</li><li>MapMessage</li><li>BytesMessage</li><li>StreamMessage</li><li>ObjectMessage</li><li>Message （只有消息头和属性）</li></ul><p>​        JMS主张不同种类的消息，消费方式不同，可以根据使用需要选择不同种类的消息。但是这一点也成为其诟病之处，后面再说。整体上来说，JMS就是典型的保守派，什么都按照J2EE的规范来，做一套规范，定义若干个标准，每个标准下又提供一大批API。目前对JMS规范实现的消息中间件技术还是挺多的，毕竟是皇家御用，肯定有人舔，例如ActiveMQ、Redis、HornetMQ。但是也有一些不太规范的实现，参考JMS的标准设计，但是又不完全满足其规范，例如：RabbitMQ、RocketMQ。</p><h5 id="AMQP"><a href="#AMQP" class="headerlink" title="AMQP"></a>AMQP</h5><p>​        JMS的问世为消息中间件提供了很强大的规范性支撑，但是使用的过程中就开始被人诟病，比如JMS设置的极其复杂的多种类消息处理机制。本来分门别类处理挺好的，为什么会被诟病呢？原因就在于JMS的设计是J2EE规范，站在Java开发的角度思考问题。但是现实往往是复杂度很高的。比如我有一个.NET开发的系统A，有一个Java开发的系统B，现在要从A系统给B系统发业务消息，结果两边数据格式不统一，没法操作。JMS不是可以统一数据格式吗？提供了6种数据种类，总有一款适合你啊。NO，一个都不能用。因为A系统的底层语言不是Java语言开发的，根本不支持那些对象。这就意味着如果想使用现有的业务系统A继续开发已经不可能了，必须推翻重新做使用Java语言开发的A系统。</p><p>​        这时候有人就提出说，你搞那么复杂，整那么多种类干什么？找一种大家都支持的消息数据类型不就解决这个跨平台的问题了吗？大家一想，对啊，于是AMQP孕育而生。</p><p>​        单从上面的说明中其实可以明确感知到，AMQP的出现解决的是消息传递时使用的消息种类的问题，化繁为简，但是其并没有完全推翻JMS的操作API，所以说AMQP仅仅是一种协议，规范了数据传输的格式而已。</p><p>​        AMQP（advanced message queuing protocol）：一种协议（高级消息队列协议，也是消息代理规范），规范了网络交换的数据格式，兼容JMS操作。<br><strong>优点</strong></p><p>​        具有跨平台性，服务器供应商，生产者，消费者可以使用不同的语言来实现</p><p><strong>JMS消息种类</strong></p><p>​        AMQP消息种类：byte[]</p><p>​        AMQP在JMS的消息模型基础上又进行了进一步的扩展，除了点对点和发布订阅的模型，开发了几种全新的消息模型，适应各种各样的消息发送。</p><p><strong>AMQP消息模型</strong></p><ul><li>direct exchange</li><li>fanout exchange</li><li>topic exchange</li><li>headers exchange</li><li>system exchange</li></ul><p>​        目前实现了AMQP协议的消息中间件技术也很多，而且都是较为流行的技术，例如：RabbitMQ、StormMQ、RocketMQ</p><h5 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h5><p>​        MQTT（Message Queueing Telemetry Transport）消息队列遥测传输，专为小设备设计，是物联网（IOT）生态系统中主要成分之一。由于与JavaEE企业级开发没有交集，此处不作过多的说明。</p><p>​        除了上述3种J2EE企业级应用中广泛使用的三种异步消息传递技术，还有一种技术也不能忽略，Kafka。</p><h5 id="KafKa"><a href="#KafKa" class="headerlink" title="KafKa"></a>KafKa</h5><p>​        Kafka，一种高吞吐量的分布式发布订阅消息系统，提供实时消息功能。Kafka技术并不是作为消息中间件为主要功能的产品，但是其拥有发布订阅的工作模式，也可以充当消息中间件来使用，而且目前企业级开发中其身影也不少见。</p><p>​        本节内容讲围绕着上述内容中的几种实现方案讲解springboot整合各种各样的消息中间件。由于各种消息中间件必须先安装再使用，下面的内容采用Windows系统安装，降低各位学习者的学习难度，基本套路和之前学习NoSQL解决方案一样，先安装再整合。</p><h4 id="购物订单发送手机短信案例"><a href="#购物订单发送手机短信案例" class="headerlink" title="购物订单发送手机短信案例"></a>购物订单发送手机短信案例</h4><p>​        为了便于下面演示各种各样的消息中间件技术，我们创建一个购物过程生成订单时为用户发送短信的案例环境，模拟使用消息中间件实现发送手机短信的过程。</p><p>​        手机验证码案例需求如下：</p><ul><li><p>执行下单业务时（模拟此过程），调用消息服务，将要发送短信的订单id传递给消息中间件</p></li><li><p>消息处理服务接收到要发送的订单id后输出订单id（模拟发短信）</p><p>由于不涉及数据读写，仅开发业务层与表现层，其中短信处理的业务代码独立开发，代码如下：</p></li></ul><p><strong>订单业务</strong></p><p>​        <strong>业务层接口</strong></p><pre class=" language-JAVA"><code class="language-JAVA">public interface OrderService &#123;    void order(String id);&#125;</code></pre><p>​        模拟传入订单id，执行下订单业务，参数为虚拟设定，实际应为订单对应的实体类</p><p>​        <strong>业务层实现</strong></p><pre class=" language-JAVA"><code class="language-JAVA">@Servicepublic class OrderServiceImpl implements OrderService &#123;    @Autowired    private MessageService messageService;        @Override    public void order(String id) &#123;        //一系列操作，包含各种服务调用，处理各种业务        System.out.println("订单处理开始");        //短信消息处理        messageService.sendMessage(id);        System.out.println("订单处理结束");        System.out.println();    &#125;&#125;</code></pre><p>​        业务层转调短信处理的服务MessageService</p><p>​        <strong>表现层服务</strong></p><pre class=" language-JAVA"><code class="language-JAVA">@RestController@RequestMapping("/orders")public class OrderController &#123;    @Autowired    private OrderService orderService;    @PostMapping("&#123;id&#125;")    public void order(@PathVariable String id)&#123;        orderService.order(id);    &#125;&#125;</code></pre><p>​        表现层对外开发接口，传入订单id即可（模拟）</p><p><strong>短信处理业务</strong></p><p>​        <strong>业务层接口</strong></p><pre class=" language-JAVA"><code class="language-JAVA">public interface MessageService &#123;    void sendMessage(String id);    String doMessage();&#125;</code></pre><p>​        短信处理业务层接口提供两个操作，发送要处理的订单id到消息中间件，另一个操作目前暂且设计成处理消息，实际消息的处理过程不应该是手动执行，应该是自动执行，到具体实现时再进行设计</p><p>​        <strong>业务层实现</strong></p><pre class=" language-JAVA"><code class="language-JAVA">@Servicepublic class MessageServiceImpl implements MessageService &#123;    private ArrayList<String> msgList = new ArrayList<String>();    @Override    public void sendMessage(String id) &#123;        System.out.println("待发送短信的订单已纳入处理队列，id："+id);        msgList.add(id);    &#125;    @Override    public String doMessage() &#123;        String id = msgList.remove(0);        System.out.println("已完成短信发送业务，id："+id);        return id;    &#125;&#125;</code></pre><p>​        短信处理业务层实现中使用集合先模拟消息队列，观察效果</p><p>​        <strong>表现层服务</strong></p><pre class=" language-JAVA"><code class="language-JAVA">@RestController@RequestMapping("/msgs")public class MessageController &#123;    @Autowired    private MessageService messageService;    @GetMapping    public String doMessage()&#123;        String id = messageService.doMessage();        return id;    &#125;&#125;</code></pre><p>​        短信处理表现层接口暂且开发出一个处理消息的入口，但是此业务是对应业务层中设计的模拟接口，实际业务不需要设计此接口。</p><p>​        下面开启springboot整合各种各样的消息中间件，从严格满足JMS规范的ActiveMQ开始</p><h4 id="SpringBoot整合ActiveMQ"><a href="#SpringBoot整合ActiveMQ" class="headerlink" title="SpringBoot整合ActiveMQ"></a>SpringBoot整合ActiveMQ</h4><p>​        ActiveMQ是MQ产品中的元老级产品，早期标准MQ产品之一，在AMQP协议没有出现之前，占据了消息中间件市场的绝大部分份额，后期因为AMQP系列产品的出现，迅速走弱，目前仅在一些线上运行的产品中出现，新产品开发较少采用。</p><h5 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h5><p>​        windows版安装包下载地址：<a href="https://activemq.apache.org/components/classic/download/">https://activemq.apache.org/components/classic/download</a><a href="https://activemq.apache.org/components/classic/download/">/</a></p><p>​        下载的安装包是解压缩就能使用的zip文件，解压缩完毕后会得到如下文件</p><p><img src="img%5Cimage-20220228160001620.png" alt="image-20220228160001620"></p><p><strong>启动服务器</strong></p><pre class=" language-CMD"><code class="language-CMD">activemq.bat</code></pre><p>​        运行bin目录下的win32或win64目录下的activemq.bat命令即可，根据自己的操作系统选择即可，默认对外服务端口61616。</p><p><strong>访问web管理服务</strong></p><p>​        ActiveMQ启动后会启动一个Web控制台服务，可以通过该服务管理ActiveMQ。</p><pre class=" language-CMD"><code class="language-CMD">http://127.0.0.1:8161/</code></pre><p>​        web管理服务默认端口8161，访问后可以打开ActiveMQ的管理界面，如下：</p><img src="img\image-20220228160844972.png" alt="image-20220228160844972" style="zoom:67%;" /><p>​        首先输入访问用户名和密码，初始化用户名和密码相同，均为：admin，成功登录后进入管理后台界面，如下：</p><p><img src="img%5Cimage-20220228161010401.png" alt="image-20220228161010401"></p><p>​        看到上述界面视为启动ActiveMQ服务成功。</p><p><strong>启动失败</strong></p><p>​        在ActiveMQ启动时要占用多个端口，以下为正常启动信息：</p><pre class=" language-CMD"><code class="language-CMD">wrapper  | --> Wrapper Started as Consolewrapper  | Launching a JVM...jvm 1    | Wrapper (Version 3.2.3) http://wrapper.tanukisoftware.orgjvm 1    |   Copyright 1999-2006 Tanuki Software, Inc.  All Rights Reserved.jvm 1    |jvm 1    | Java Runtime: Oracle Corporation 1.8.0_172 D:\soft\jdk1.8.0_172\jrejvm 1    |   Heap sizes: current=249344k  free=235037k  max=932352kjvm 1    |     JVM args: -Dactivemq.home=../.. -Dactivemq.base=../.. -Djavax.net.ssl.keyStorePassword=password -Djavax.net.ssl.trustStorePassword=password -Djavax.net.ssl.keyStore=../../conf/broker.ks -Djavax.net.ssl.trustStore=../../conf/broker.ts -Dcom.sun.management.jmxremote -Dorg.apache.activemq.UseDedicatedTaskRunner=true -Djava.util.logging.config.file=logging.properties -Dactivemq.conf=../../conf -Dactivemq.data=../../data -Djava.security.auth.login.config=../../conf/login.config -Xmx1024m -Djava.library.path=../../bin/win64 -Dwrapper.key=7ySrCD75XhLCpLjd -Dwrapper.port=32000 -Dwrapper.jvm.port.min=31000 -Dwrapper.jvm.port.max=31999 -Dwrapper.pid=9364 -Dwrapper.version=3.2.3 -Dwrapper.native_library=wrapper -Dwrapper.cpu.timeout=10 -Dwrapper.jvmid=1jvm 1    | Extensions classpath:jvm 1    |   [..\..\lib,..\..\lib\camel,..\..\lib\optional,..\..\lib\web,..\..\lib\extra]jvm 1    | ACTIVEMQ_HOME: ..\..jvm 1    | ACTIVEMQ_BASE: ..\..jvm 1    | ACTIVEMQ_CONF: ..\..\confjvm 1    | ACTIVEMQ_DATA: ..\..\datajvm 1    | Loading message broker from: xbean:activemq.xmljvm 1    |  INFO | Refreshing org.apache.activemq.xbean.XBeanBrokerFactory$1@5f3ebfe0: startup date [Mon Feb 28 16:07:48 CST 2022]; root of context hierarchyjvm 1    |  INFO | Using Persistence Adapter: KahaDBPersistenceAdapter[D:\soft\activemq\bin\win64\..\..\data\kahadb]jvm 1    |  INFO | KahaDB is version 7jvm 1    |  INFO | PListStore:[D:\soft\activemq\bin\win64\..\..\data\localhost\tmp_storage] startedjvm 1    |  INFO | Apache ActiveMQ 5.16.3 (localhost, ID:CZBK-20210302VL-10434-1646035669595-0:1) is startingjvm 1    |  INFO | Listening for connections at: tcp://CZBK-20210302VL:61616?maximumConnections=1000&wireFormat.maxFrameSize=104857600jvm 1    |  INFO | Connector openwire startedjvm 1    |  INFO | Listening for connections at: amqp://CZBK-20210302VL:5672?maximumConnections=1000&wireFormat.maxFrameSize=104857600jvm 1    |  INFO | Connector amqp startedjvm 1    |  INFO | Listening for connections at: stomp://CZBK-20210302VL:61613?maximumConnections=1000&wireFormat.maxFrameSize=104857600jvm 1    |  INFO | Connector stomp startedjvm 1    |  INFO | Listening for connections at: mqtt://CZBK-20210302VL:1883?maximumConnections=1000&wireFormat.maxFrameSize=104857600jvm 1    |  INFO | Connector mqtt startedjvm 1    |  INFO | Starting Jetty serverjvm 1    |  INFO | Creating Jetty connectorjvm 1    |  WARN | ServletContext@o.e.j.s.ServletContextHandler@7350746f&#123;/,null,STARTING&#125; has uncovered http methods for path: /jvm 1    |  INFO | Listening for connections at ws://CZBK-20210302VL:61614?maximumConnections=1000&wireFormat.maxFrameSize=104857600jvm 1    |  INFO | Connector ws startedjvm 1    |  INFO | Apache ActiveMQ 5.16.3 (localhost, ID:CZBK-20210302VL-10434-1646035669595-0:1) startedjvm 1    |  INFO | For help or more information please see: http://activemq.apache.orgjvm 1    |  WARN | Store limit is 102400 mb (current store usage is 0 mb). The data directory: D:\soft\activemq\bin\win64\..\..\data\kahadb only has 68936 mb of usable space. - resetting to maximum available disk space: 68936 mbjvm 1    |  INFO | ActiveMQ WebConsole available at http://127.0.0.1:8161/jvm 1    |  INFO | ActiveMQ Jolokia REST API available at http://127.0.0.1:8161/api/jolokia/</code></pre><p>​        其中占用的端口有：61616、5672、61613、1883、61614，如果启动失败，请先管理对应端口即可。以下就是某个端口占用的报错信息，可以从抛出异常的位置看出，启动5672端口时端口被占用，显示java.net.BindException: Address already in use: JVM_Bind。Windows系统中终止端口运行的操作参看<a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%AF%E5%8A%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">【命令行启动常见问题及解决方案】</a></p><pre class=" language-CMD"><code class="language-CMD">wrapper  | --> Wrapper Started as Consolewrapper  | Launching a JVM...jvm 1    | Wrapper (Version 3.2.3) http://wrapper.tanukisoftware.orgjvm 1    |   Copyright 1999-2006 Tanuki Software, Inc.  All Rights Reserved.jvm 1    |jvm 1    | Java Runtime: Oracle Corporation 1.8.0_172 D:\soft\jdk1.8.0_172\jrejvm 1    |   Heap sizes: current=249344k  free=235038k  max=932352kjvm 1    |     JVM args: -Dactivemq.home=../.. -Dactivemq.base=../.. -Djavax.net.ssl.keyStorePassword=password -Djavax.net.ssl.trustStorePassword=password -Djavax.net.ssl.keyStore=../../conf/broker.ks -Djavax.net.ssl.trustStore=../../conf/broker.ts -Dcom.sun.management.jmxremote -Dorg.apache.activemq.UseDedicatedTaskRunner=true -Djava.util.logging.config.file=logging.properties -Dactivemq.conf=../../conf -Dactivemq.data=../../data -Djava.security.auth.login.config=../../conf/login.config -Xmx1024m -Djava.library.path=../../bin/win64 -Dwrapper.key=QPJoy9ZoXeWmmwTS -Dwrapper.port=32000 -Dwrapper.jvm.port.min=31000 -Dwrapper.jvm.port.max=31999 -Dwrapper.pid=14836 -Dwrapper.version=3.2.3 -Dwrapper.native_library=wrapper -Dwrapper.cpu.timeout=10 -Dwrapper.jvmid=1jvm 1    | Extensions classpath:jvm 1    |   [..\..\lib,..\..\lib\camel,..\..\lib\optional,..\..\lib\web,..\..\lib\extra]jvm 1    | ACTIVEMQ_HOME: ..\..jvm 1    | ACTIVEMQ_BASE: ..\..jvm 1    | ACTIVEMQ_CONF: ..\..\confjvm 1    | ACTIVEMQ_DATA: ..\..\datajvm 1    | Loading message broker from: xbean:activemq.xmljvm 1    |  INFO | Refreshing org.apache.activemq.xbean.XBeanBrokerFactory$1@2c9392f5: startup date [Mon Feb 28 16:06:16 CST 2022]; root of context hierarchyjvm 1    |  INFO | Using Persistence Adapter: KahaDBPersistenceAdapter[D:\soft\activemq\bin\win64\..\..\data\kahadb]jvm 1    |  INFO | KahaDB is version 7jvm 1    |  INFO | PListStore:[D:\soft\activemq\bin\win64\..\..\data\localhost\tmp_storage] startedjvm 1    |  INFO | Apache ActiveMQ 5.16.3 (localhost, ID:CZBK-20210302VL-10257-1646035577620-0:1) is startingjvm 1    |  INFO | Listening for connections at: tcp://CZBK-20210302VL:61616?maximumConnections=1000&wireFormat.maxFrameSize=104857600jvm 1    |  INFO | Connector openwire startedjvm 1    | ERROR | Failed to start Apache ActiveMQ (localhost, ID:CZBK-20210302VL-10257-1646035577620-0:1)jvm 1    | java.io.IOException: Transport Connector could not be registered in JMX: java.io.IOException: Failed to bind to server socket: amqp://0.0.0.0:5672?maximumConnections=1000&wireFormat.maxFrameSize=104857600 due to: java.net.BindException: Address already in use: JVM_Bindjvm 1    |      at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:28)jvm 1    |      at org.apache.activemq.broker.BrokerService.registerConnectorMBean(BrokerService.java:2288)jvm 1    |      at org.apache.activemq.broker.BrokerService.startTransportConnector(BrokerService.java:2769)jvm 1    |      at org.apache.activemq.broker.BrokerService.startAllConnectors(BrokerService.java:2665)jvm 1    |      at org.apache.activemq.broker.BrokerService.doStartBroker(BrokerService.java:780)jvm 1    |      at org.apache.activemq.broker.BrokerService.startBroker(BrokerService.java:742)jvm 1    |      at org.apache.activemq.broker.BrokerService.start(BrokerService.java:645)jvm 1    |      at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:73)jvm 1    |      at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)jvm 1    |      at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)jvm 1    |      at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)jvm 1    |      at java.lang.reflect.Method.invoke(Method.java:498)jvm 1    |      at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1748)jvm 1    |      at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1685)jvm 1    |      at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1615)jvm 1    |      at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)jvm 1    |      at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:481)jvm 1    |      at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:312)jvm 1    |      at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)jvm 1    |      at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:308)jvm 1    |      at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)jvm 1    |      at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:756)jvm 1    |      at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)jvm 1    |      at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:542)jvm 1    |      at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64)jvm 1    |      at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52)jvm 1    |      at org.apache.activemq.xbean.XBeanBrokerFactory$1.<init>(XBeanBrokerFactory.java:104)jvm 1    |      at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:104)jvm 1    |      at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:67)jvm 1    |      at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)jvm 1    |      at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)jvm 1    |      at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:87)jvm 1    |      at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:63)jvm 1    |      at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:154)jvm 1    |      at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:63)jvm 1    |      at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:104)jvm 1    |      at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)jvm 1    |      at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)jvm 1    |      at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)jvm 1    |      at java.lang.reflect.Method.invoke(Method.java:498)jvm 1    |      at org.apache.activemq.console.Main.runTaskClass(Main.java:262)jvm 1    |      at org.apache.activemq.console.Main.main(Main.java:115)jvm 1    |      at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)jvm 1    |      at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)jvm 1    |      at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)jvm 1    |      at java.lang.reflect.Method.invoke(Method.java:498)jvm 1    |      at org.tanukisoftware.wrapper.WrapperSimpleApp.run(WrapperSimpleApp.java:240)jvm 1    |      at java.lang.Thread.run(Thread.java:748)jvm 1    | Caused by: java.io.IOException: Failed to bind to server socket: amqp://0.0.0.0:5672?maximumConnections=1000&wireFormat.maxFrameSize=104857600 due to: java.net.BindException: Address already in use: JVM_Bindjvm 1    |      at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:34)jvm 1    |      at org.apache.activemq.transport.tcp.TcpTransportServer.bind(TcpTransportServer.java:146)jvm 1    |      at org.apache.activemq.transport.tcp.TcpTransportFactory.doBind(TcpTransportFactory.java:62)jvm 1    |      at org.apache.activemq.transport.TransportFactorySupport.bind(TransportFactorySupport.java:40)jvm 1    |      at org.apache.activemq.broker.TransportConnector.createTransportServer(TransportConnector.java:335)jvm 1    |      at org.apache.activemq.broker.TransportConnector.getServer(TransportConnector.java:145)jvm 1    |      at org.apache.activemq.broker.TransportConnector.asManagedConnector(TransportConnector.java:110)jvm 1    |      at org.apache.activemq.broker.BrokerService.registerConnectorMBean(BrokerService.java:2283)jvm 1    |      ... 46 morejvm 1    | Caused by: java.net.BindException: Address already in use: JVM_Bindjvm 1    |      at java.net.DualStackPlainSocketImpl.bind0(Native Method)jvm 1    |      at java.net.DualStackPlainSocketImpl.socketBind(DualStackPlainSocketImpl.java:106)jvm 1    |      at java.net.AbstractPlainSocketImpl.bind(AbstractPlainSocketImpl.java:387)jvm 1    |      at java.net.PlainSocketImpl.bind(PlainSocketImpl.java:190)jvm 1    |      at java.net.ServerSocket.bind(ServerSocket.java:375)jvm 1    |      at java.net.ServerSocket.<init>(ServerSocket.java:237)jvm 1    |      at javax.net.DefaultServerSocketFactory.createServerSocket(ServerSocketFactory.java:231)jvm 1    |      at org.apache.activemq.transport.tcp.TcpTransportServer.bind(TcpTransportServer.java:143)jvm 1    |      ... 52 morejvm 1    |  INFO | Apache ActiveMQ 5.16.3 (localhost, ID:CZBK-20210302VL-10257-1646035577620-0:1) is shutting downjvm 1    |  INFO | socketQueue interrupted - stoppingjvm 1    |  INFO | Connector openwire stoppedjvm 1    |  INFO | Could not accept connection during shutdown  : null (null)jvm 1    |  INFO | Connector amqp stoppedjvm 1    |  INFO | Connector stomp stoppedjvm 1    |  INFO | Connector mqtt stoppedjvm 1    |  INFO | Connector ws stoppedjvm 1    |  INFO | PListStore:[D:\soft\activemq\bin\win64\..\..\data\localhost\tmp_storage] stoppedjvm 1    |  INFO | Stopping async queue tasksjvm 1    |  INFO | Stopping async topic tasksjvm 1    |  INFO | Stopped KahaDBjvm 1    |  INFO | Apache ActiveMQ 5.16.3 (localhost, ID:CZBK-20210302VL-10257-1646035577620-0:1) uptime 0.426 secondsjvm 1    |  INFO | Apache ActiveMQ 5.16.3 (localhost, ID:CZBK-20210302VL-10257-1646035577620-0:1) is shutdownjvm 1    |  INFO | Closing org.apache.activemq.xbean.XBeanBrokerFactory$1@2c9392f5: startup date [Mon Feb 28 16:06:16 CST 2022]; root of context hierarchyjvm 1    |  WARN | Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.apache.activemq.xbean.XBeanBrokerService#0' defined in class path resource [activemq.xml]: Invocation of init method failed; nested exception is java.io.IOException: Transport Connector could not be registered in JMX: java.io.IOException: Failed to bind to server socket: amqp://0.0.0.0:5672?maximumConnections=1000&wireFormat.maxFrameSize=104857600 due to: java.net.BindException: Address already in use: JVM_Bindjvm 1    | ERROR: java.lang.RuntimeException: Failed to execute start task. Reason: java.lang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContextjvm 1    | java.lang.RuntimeException: Failed to execute start task. Reason: java.lang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContextjvm 1    |      at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:91)jvm 1    |      at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:63)jvm 1    |      at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:154)jvm 1    |      at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:63)jvm 1    |      at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:104)jvm 1    |      at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)jvm 1    |      at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)jvm 1    |      at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)jvm 1    |      at java.lang.reflect.Method.invoke(Method.java:498)jvm 1    |      at org.apache.activemq.console.Main.runTaskClass(Main.java:262)jvm 1    |      at org.apache.activemq.console.Main.main(Main.java:115)jvm 1    |      at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)jvm 1    |      at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)jvm 1    |      at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)jvm 1    |      at java.lang.reflect.Method.invoke(Method.java:498)jvm 1    |      at org.tanukisoftware.wrapper.WrapperSimpleApp.run(WrapperSimpleApp.java:240)jvm 1    |      at java.lang.Thread.run(Thread.java:748)jvm 1    | Caused by: java.lang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContextjvm 1    |      at org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableApplicationContext.java:164)jvm 1    |      at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1034)jvm 1    |      at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:555)jvm 1    |      at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64)jvm 1    |      at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52)jvm 1    |      at org.apache.activemq.xbean.XBeanBrokerFactory$1.<init>(XBeanBrokerFactory.java:104)jvm 1    |      at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:104)jvm 1    |      at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:67)jvm 1    |      at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)jvm 1    |      at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)jvm 1    |      at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:87)jvm 1    |      ... 16 morejvm 1    | ERROR: java.lang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContextjvm 1    | java.lang.IllegalStateException: BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContextjvm 1    |      at org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableApplicationContext.java:164)jvm 1    |      at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1034)jvm 1    |      at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:555)jvm 1    |      at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:64)jvm 1    |      at org.apache.xbean.spring.context.ResourceXmlApplicationContext.<init>(ResourceXmlApplicationContext.java:52)jvm 1    |      at org.apache.activemq.xbean.XBeanBrokerFactory$1.<init>(XBeanBrokerFactory.java:104)jvm 1    |      at org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:104)jvm 1    |      at org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:67)jvm 1    |      at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:71)jvm 1    |      at org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:54)jvm 1    |      at org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:87)jvm 1    |      at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:63)jvm 1    |      at org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:154)jvm 1    |      at org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:63)jvm 1    |      at org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:104)jvm 1    |      at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)jvm 1    |      at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)jvm 1    |      at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)jvm 1    |      at java.lang.reflect.Method.invoke(Method.java:498)jvm 1    |      at org.apache.activemq.console.Main.runTaskClass(Main.java:262)jvm 1    |      at org.apache.activemq.console.Main.main(Main.java:115)jvm 1    |      at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)jvm 1    |      at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)jvm 1    |      at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)jvm 1    |      at java.lang.reflect.Method.invoke(Method.java:498)jvm 1    |      at org.tanukisoftware.wrapper.WrapperSimpleApp.run(WrapperSimpleApp.java:240)jvm 1    |      at java.lang.Thread.run(Thread.java:748)wrapper  | <-- Wrapper Stopped请按任意键继续. . .</code></pre><h5 id="整合-3"><a href="#整合-3" class="headerlink" title="整合"></a>整合</h5><p>​        做了这么多springboot整合第三方技术，已经摸到门路了，加坐标，做配置，调接口，直接开工</p><p><strong>步骤①</strong>：导入springboot整合ActiveMQ的starter</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤②</strong>：配置ActiveMQ的服务器地址</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">activemq</span><span class="token punctuation">:</span>    <span class="token key atrule">broker-url</span><span class="token punctuation">:</span> tcp<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">61616</span></code></pre><p><strong>步骤③</strong>：使用JmsMessagingTemplate操作ActiveMQ</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageServiceActivemqImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MessageService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JmsMessagingTemplate messagingTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"待发送短信的订单已纳入处理队列，id："</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        messagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"order.queue.id"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">doMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String id <span class="token operator">=</span> messagingTemplate<span class="token punctuation">.</span><span class="token function">receiveAndConvert</span><span class="token punctuation">(</span><span class="token string">"order.queue.id"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已完成短信发送业务，id："</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        发送消息需要先将消息的类型转换成字符串，然后再发送，所以是convertAndSend，定义消息发送的位置，和具体的消息内容，此处使用id作为消息内容。</p><p>​        接收消息需要先将消息接收到，然后再转换成指定的数据类型，所以是receiveAndConvert，接收消息除了提供读取的位置，还要给出转换后的数据的具体类型。</p><p><strong>步骤④</strong>：使用消息监听器在服务器启动后，监听指定位置，当消息出现后，立即消费消息</p><pre class=" language-JAVA"><code class="language-JAVA">@Componentpublic class MessageListener &#123;    @JmsListener(destination = "order.queue.id")    @SendTo("order.other.queue.id")    public String receive(String id)&#123;        System.out.println("已完成短信发送业务，id："+id);        return "new:"+id;    &#125;&#125;</code></pre><p>​        使用注解@JmsListener定义当前方法监听ActiveMQ中指定名称的消息队列。</p><p>​        如果当前消息队列处理完还需要继续向下传递当前消息到另一个队列中使用注解@SendTo即可，这样即可构造连续执行的顺序消息队列。</p><p><strong>步骤⑤</strong>：切换消息模型由点对点模型到发布订阅模型，修改jms配置即可</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">activemq</span><span class="token punctuation">:</span>    <span class="token key atrule">broker-url</span><span class="token punctuation">:</span> tcp<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">61616</span>  <span class="token key atrule">jms</span><span class="token punctuation">:</span>    <span class="token key atrule">pub-sub-domain</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>​        pub-sub-domain默认值为false，即点对点模型，修改为true后就是发布订阅模型。</p><p><strong>总结</strong></p><ol><li>springboot整合ActiveMQ提供了JmsMessagingTemplate对象作为客户端操作消息队列</li><li>操作ActiveMQ需要配置ActiveMQ服务器地址，默认端口61616</li><li>企业开发时通常使用监听器来处理消息队列中的消息，设置监听器使用注解@JmsListener</li><li>配置jms的pub-sub-domain属性可以在点对点模型和发布订阅模型间切换消息模型</li></ol><h4 id="SpringBoot整合RabbitMQ"><a href="#SpringBoot整合RabbitMQ" class="headerlink" title="SpringBoot整合RabbitMQ"></a>SpringBoot整合RabbitMQ</h4><p>​        RabbitMQ是MQ产品中的目前较为流行的产品之一，它遵从AMQP协议。RabbitMQ的底层实现语言使用的是Erlang，所以安装RabbitMQ需要先安装Erlang。</p><p><strong>Erlang安装</strong></p><p>​        windows版安装包下载地址：<a href="https://www.erlang.org/downloads">https</a><a href="https://www.erlang.org/downloads">://www.erlang.org/downloads</a></p><p>​        下载完毕后得到exe安装文件，一键傻瓜式安装，安装完毕需要重启，需要重启，需要重启。</p><p>​        安装的过程中可能会出现依赖Windows组件的提示，根据提示下载安装即可，都是自动执行的，如下：</p><p><img src="img%5Cimage-20220228164851551.png" alt="image-20220228164851551"></p><p>​        Erlang安装后需要配置环境变量，否则RabbitMQ将无法找到安装的Erlang。需要配置项如下，作用等同JDK配置环境变量的作用。</p><ul><li>ERLANG_HOME</li><li>PATH</li></ul><h5 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h5><p>​        windows版安装包下载地址：<a href="https://rabbitmq.com/install-windows.html">https://</a><a href="https://rabbitmq.com/install-windows.html">rabbitmq.com/install-windows.html</a></p><p>​        下载完毕后得到exe安装文件，一键傻瓜式安装，安装完毕后会得到如下文件</p><img src="img\image-20220228165151524.png" alt="image-20220228165151524" style="zoom:67%;" /><p><strong>启动服务器</strong></p><pre class=" language-CMD"><code class="language-CMD">rabbitmq-service.bat start        # 启动服务rabbitmq-service.bat stop        # 停止服务rabbitmqctl status                # 查看服务状态</code></pre><p>​        运行sbin目录下的rabbitmq-service.bat命令即可，start参数表示启动，stop参数表示退出，默认对外服务端口5672。</p><p>​        注意：启动rabbitmq的过程实际上是开启rabbitmq对应的系统服务，需要管理员权限方可执行。</p><p>​        说明：有没有感觉5672的服务端口很熟悉？activemq与rabbitmq有一个端口冲突问题，学习阶段无论操作哪一个？请确保另一个处于关闭状态。</p><p>​        说明：不喜欢命令行的小伙伴可以使用任务管理器中的服务页，找到RabbitMQ服务，使用鼠标右键菜单控制服务的启停。</p><img src="img\image-20220228170147193.png" alt="image-20220228170147193" style="zoom:67%;" /><p><strong>访问web管理服务</strong></p><p>​        RabbitMQ也提供有web控制台服务，但是此功能是一个插件，需要先启用才可以使用。</p><pre class=" language-CMD"><code class="language-CMD">rabbitmq-plugins.bat list                            # 查看当前所有插件的运行状态rabbitmq-plugins.bat enable rabbitmq_management        # 启动rabbitmq_management插件</code></pre><p>​        启动插件后可以在插件运行状态中查看是否运行，运行后通过浏览器即可打开服务后台管理界面</p><pre class=" language-CMD"><code class="language-CMD">http://localhost:15672</code></pre><p>​        web管理服务默认端口15672，访问后可以打开RabbitMQ的管理界面，如下：</p><p><img src="img%5Cimage-20220228170504793.png" alt="image-20220228170504793"></p><p>​        首先输入访问用户名和密码，初始化用户名和密码相同，均为：guest，成功登录后进入管理后台界面，如下：</p><p><img src="img%5Cimage-20220228170535261.png" alt="image-20220228170535261"></p><h5 id="整合-direct模型"><a href="#整合-direct模型" class="headerlink" title="整合(direct模型)"></a>整合(direct模型)</h5><p>​        RabbitMQ满足AMQP协议，因此不同的消息模型对应的制作不同，先使用最简单的direct模型开发。</p><p><strong>步骤①</strong>：导入springboot整合amqp的starter，amqp协议默认实现为rabbitmq方案</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤②</strong>：配置RabbitMQ的服务器地址</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span></code></pre><p><strong>步骤③</strong>：初始化直连模式系统设置</p><p>​        由于RabbitMQ不同模型要使用不同的交换机，因此需要先初始化RabbitMQ相关的对象，例如队列，交换机等</p><pre class=" language-JAVA"><code class="language-JAVA">@Configurationpublic class RabbitConfigDirect &#123;    @Bean    public Queue directQueue()&#123;        return new Queue("direct_queue");    &#125;    @Bean    public Queue directQueue2()&#123;        return new Queue("direct_queue2");    &#125;    @Bean    public DirectExchange directExchange()&#123;        return new DirectExchange("directExchange");    &#125;    @Bean    public Binding bindingDirect()&#123;        return BindingBuilder.bind(directQueue()).to(directExchange()).with("direct");    &#125;    @Bean    public Binding bindingDirect2()&#123;        return BindingBuilder.bind(directQueue2()).to(directExchange()).with("direct2");    &#125;&#125;</code></pre><p>​        队列Queue与直连交换机DirectExchange创建后，还需要绑定他们之间的关系Binding，这样就可以通过交换机操作对应队列。</p><p><strong>步骤④</strong>：使用AmqpTemplate操作RabbitMQ</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageServiceRabbitmqDirectImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MessageService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AmqpTemplate amqpTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"待发送短信的订单已纳入处理队列（rabbitmq direct），id："</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        amqpTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"directExchange"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        amqp协议中的操作API接口名称看上去和jms规范的操作API接口很相似，但是传递参数差异很大。</p><p><strong>步骤⑤</strong>：使用消息监听器在服务器启动后，监听指定位置，当消息出现后，立即消费消息</p><pre class=" language-JAVA"><code class="language-JAVA">@Componentpublic class MessageListener &#123;    @RabbitListener(queues = "direct_queue")    public void receive(String id)&#123;        System.out.println("已完成短信发送业务(rabbitmq direct)，id："+id);    &#125;&#125;</code></pre><p>​        使用注解@RabbitListener定义当前方法监听RabbitMQ中指定名称的消息队列。</p><h5 id="整合-topic模型"><a href="#整合-topic模型" class="headerlink" title="整合(topic模型)"></a>整合(topic模型)</h5><p><strong>步骤①</strong>：同上</p><p><strong>步骤②</strong>：同上</p><p><strong>步骤③</strong>：初始化主题模式系统设置</p><pre class=" language-JAVA"><code class="language-JAVA">@Configurationpublic class RabbitConfigTopic &#123;    @Bean    public Queue topicQueue()&#123;        return new Queue("topic_queue");    &#125;    @Bean    public Queue topicQueue2()&#123;        return new Queue("topic_queue2");    &#125;    @Bean    public TopicExchange topicExchange()&#123;        return new TopicExchange("topicExchange");    &#125;    @Bean    public Binding bindingTopic()&#123;        return BindingBuilder.bind(topicQueue()).to(topicExchange()).with("topic.*.id");    &#125;    @Bean    public Binding bindingTopic2()&#123;        return BindingBuilder.bind(topicQueue2()).to(topicExchange()).with("topic.orders.*");    &#125;&#125;</code></pre><p>​        主题模式支持routingKey匹配模式，*表示匹配一个单词，#表示匹配任意内容，这样就可以通过主题交换机将消息分发到不同的队列中，详细内容请参看RabbitMQ系列课程。    </p><table><thead><tr><th><strong>匹配键</strong></th><th><strong>topic.*.*</strong></th><th><strong>topic.#</strong></th></tr></thead><tbody><tr><td>topic.order.id</td><td>true</td><td>true</td></tr><tr><td>order.topic.id</td><td>false</td><td>false</td></tr><tr><td>topic.sm.order.id</td><td>false</td><td>true</td></tr><tr><td>topic.sm.id</td><td>false</td><td>true</td></tr><tr><td>topic.id.order</td><td>true</td><td>true</td></tr><tr><td>topic.id</td><td>false</td><td>true</td></tr><tr><td>topic.order</td><td>false</td><td>true</td></tr></tbody></table><p><strong>步骤④</strong>：使用AmqpTemplate操作RabbitMQ</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageServiceRabbitmqTopicImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MessageService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> AmqpTemplate amqpTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"待发送短信的订单已纳入处理队列（rabbitmq topic），id："</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        amqpTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topicExchange"</span><span class="token punctuation">,</span><span class="token string">"topic.orders.id"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        发送消息后，根据当前提供的routingKey与绑定交换机时设定的routingKey进行匹配，规则匹配成功消息才会进入到对应的队列中。</p><p><strong>步骤⑤</strong>：使用消息监听器在服务器启动后，监听指定队列</p><pre class=" language-JAVA"><code class="language-JAVA">@Componentpublic class MessageListener &#123;    @RabbitListener(queues = "topic_queue")    public void receive(String id)&#123;        System.out.println("已完成短信发送业务(rabbitmq topic 1)，id："+id);    &#125;    @RabbitListener(queues = "topic_queue2")    public void receive2(String id)&#123;        System.out.println("已完成短信发送业务(rabbitmq topic 22222222)，id："+id);    &#125;&#125;</code></pre><p>​        使用注解@RabbitListener定义当前方法监听RabbitMQ中指定名称的消息队列。</p><p><strong>总结</strong></p><ol><li>springboot整合RabbitMQ提供了AmqpTemplate对象作为客户端操作消息队列</li><li>操作ActiveMQ需要配置ActiveMQ服务器地址，默认端口5672</li><li>企业开发时通常使用监听器来处理消息队列中的消息，设置监听器使用注解@RabbitListener</li><li>RabbitMQ有5种消息模型，使用的队列相同，但是交换机不同。交换机不同，对应的消息进入的策略也不同</li></ol><h4 id="SpringBoot整合RocketMQ"><a href="#SpringBoot整合RocketMQ" class="headerlink" title="SpringBoot整合RocketMQ"></a>SpringBoot整合RocketMQ</h4><p>​        RocketMQ由阿里研发，后捐赠给apache基金会，目前是apache基金会顶级项目之一，也是目前市面上的MQ产品中较为流行的产品之一，它遵从AMQP协议。</p><h5 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h5><p>​        windows版安装包下载地址：<a href="https://rocketmq.apache.org/">https://rocketmq.apache.org</a><a href="https://rocketmq.apache.org/">/</a></p><p>​        下载完毕后得到zip压缩文件，解压缩即可使用，解压后得到如下文件</p><p><img src="img%5Cimage-20220228174453471.png" alt="image-20220228174453471"></p><p>​        RocketMQ安装后需要配置环境变量，具体如下：</p><ul><li>ROCKETMQ_HOME</li><li>PATH</li><li>NAMESRV_ADDR （建议）： 127.0.0.1:9876</li></ul><p>​        关于NAMESRV_ADDR对于初学者来说建议配置此项，也可以通过命令设置对应值，操作略显繁琐，建议配置。系统学习RocketMQ知识后即可灵活控制该项。</p><p><strong>RocketMQ工作模式</strong></p><p>​        在RocketMQ中，处理业务的服务器称为broker，生产者与消费者不是直接与broker联系的，而是通过命名服务器进行通信。broker启动后会通知命名服务器自己已经上线，这样命名服务器中就保存有所有的broker信息。当生产者与消费者需要连接broker时，通过命名服务器找到对应的处理业务的broker，因此命名服务器在整套结构中起到一个信息中心的作用。并且broker启动前必须保障命名服务器先启动。</p><img src="img\image-20220228175123790.png" alt="image-20220228175123790" style="zoom:80%;" /><p><strong>启动服务器</strong></p><pre class=" language-CMD"><code class="language-CMD">mqnamesrv        # 启动命名服务器mqbroker        # 启动broker</code></pre><p>​        运行bin目录下的mqnamesrv命令即可启动命名服务器，默认对外服务端口9876。</p><p>​        运行bin目录下的mqbroker命令即可启动broker服务器，如果环境变量中没有设置NAMESRV_ADDR则需要在运行mqbroker指令前通过set指令设置NAMESRV_ADDR的值，并且每次开启均需要设置此项。</p><p><strong>测试服务器启动状态</strong></p><p>​        RocketMQ提供有一套测试服务器功能的测试程序，运行bin目录下的tools命令即可使用。</p><pre class=" language-CMD"><code class="language-CMD">tools org.apache.rocketmq.example.quickstart.Producer        # 生产消息tools org.apache.rocketmq.example.quickstart.Consumer        # 消费消息</code></pre><h5 id="整合（异步消息）"><a href="#整合（异步消息）" class="headerlink" title="整合（异步消息）"></a>整合（异步消息）</h5><p><strong>步骤①</strong>：导入springboot整合RocketMQ的starter，此坐标不由springboot维护版本</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.rocketmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>rocketmq-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤②</strong>：配置RocketMQ的服务器地址</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">rocketmq</span><span class="token punctuation">:</span>  <span class="token key atrule">name-server</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">9876</span>  <span class="token key atrule">producer</span><span class="token punctuation">:</span>    <span class="token key atrule">group</span><span class="token punctuation">:</span> group_rocketmq</code></pre><p>​        设置默认的生产者消费者所属组group。</p><p><strong>步骤③</strong>：使用RocketMQTemplate操作RocketMQ</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageServiceRocketmqImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MessageService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RocketMQTemplate rocketMQTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"待发送短信的订单已纳入处理队列（rocketmq），id："</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        SendCallback callback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SendCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>SendResult sendResult<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息发送失败！！！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">asyncSend</span><span class="token punctuation">(</span><span class="token string">"order_id"</span><span class="token punctuation">,</span>id<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        使用asyncSend方法发送异步消息。</p><p><strong>步骤④</strong>：使用消息监听器在服务器启动后，监听指定位置，当消息出现后，立即消费消息</p><pre class=" language-JAVA"><code class="language-JAVA">@Component@RocketMQMessageListener(topic = "order_id",consumerGroup = "group_rocketmq")public class MessageListener implements RocketMQListener<String> &#123;    @Override    public void onMessage(String id) &#123;        System.out.println("已完成短信发送业务(rocketmq)，id："+id);    &#125;&#125;</code></pre><p>​        RocketMQ的监听器必须按照标准格式开发，实现RocketMQListener接口，泛型为消息类型。</p><p>​        使用注解@RocketMQMessageListener定义当前类监听RabbitMQ中指定组、指定名称的消息队列。</p><p><strong>总结</strong></p><ol><li>springboot整合RocketMQ使用RocketMQTemplate对象作为客户端操作消息队列</li><li>操作RocketMQ需要配置RocketMQ服务器地址，默认端口9876</li><li>企业开发时通常使用监听器来处理消息队列中的消息，设置监听器使用注解@RocketMQMessageListener</li></ol><h4 id="SpringBoot整合Kafka"><a href="#SpringBoot整合Kafka" class="headerlink" title="SpringBoot整合Kafka"></a>SpringBoot整合Kafka</h4><h5 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h5><p>​        windows版安装包下载地址：<a href="https://kafka.apache.org/downloads">https://</a><a href="https://kafka.apache.org/downloads">kafka.apache.org/downloads</a></p><p>​        下载完毕后得到tgz压缩文件，使用解压缩软件解压缩即可使用，解压后得到如下文件</p><p><img src="img%5Cimage-20220228181442155.png" alt="image-20220228181442155"></p><p>​        建议使用windows版2.8.1版本。</p><p><strong>启动服务器</strong></p><p>​        kafka服务器的功能相当于RocketMQ中的broker，kafka运行还需要一个类似于命名服务器的服务。在kafka安装目录中自带一个类似于命名服务器的工具，叫做zookeeper，它的作用是注册中心，相关知识请到对应课程中学习。</p><pre class=" language-CMD"><code class="language-CMD">zookeeper-server-start.bat ..\..\config\zookeeper.properties        # 启动zookeeperkafka-server-start.bat ..\..\config\server.properties                # 启动kafka</code></pre><p>​        运行bin目录下的windows目录下的zookeeper-server-start命令即可启动注册中心，默认对外服务端口2181。</p><p>​        运行bin目录下的windows目录下的kafka-server-start命令即可启动kafka服务器，默认对外服务端口9092。</p><p><strong>创建主题</strong></p><p>​        和之前操作其他MQ产品相似，kakfa也是基于主题操作，操作之前需要先初始化topic。</p><pre class=" language-CMD"><code class="language-CMD"># 创建topickafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic itheima# 查询topickafka-topics.bat --zookeeper 127.0.0.1:2181 --list                    # 删除topickafka-topics.bat --delete --zookeeper localhost:2181 --topic itheima</code></pre><p><strong>测试服务器启动状态</strong></p><p>​        Kafka提供有一套测试服务器功能的测试程序，运行bin目录下的windows目录下的命令即可使用。</p><pre class=" language-CMD"><code class="language-CMD">kafka-console-producer.bat --broker-list localhost:9092 --topic itheima                            # 测试生产消息kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic itheima --from-beginning    # 测试消息消费</code></pre><h5 id="整合-4"><a href="#整合-4" class="headerlink" title="整合"></a>整合</h5><p><strong>步骤①</strong>：导入springboot整合Kafka的starter，此坐标由springboot维护版本</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>步骤②</strong>：配置Kafka的服务器地址</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">kafka</span><span class="token punctuation">:</span>    <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">9092</span>    <span class="token key atrule">consumer</span><span class="token punctuation">:</span>      <span class="token key atrule">group-id</span><span class="token punctuation">:</span> order</code></pre><p>​        设置默认的生产者消费者所属组id。</p><p><strong>步骤③</strong>：使用KafkaTemplate操作Kafka</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageServiceKafkaImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MessageService</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> KafkaTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> kafkaTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"待发送短信的订单已纳入处理队列（kafka），id："</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"itheima2022"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        使用send方法发送消息，需要传入topic名称。</p><p><strong>步骤④</strong>：使用消息监听器在服务器启动后，监听指定位置，当消息出现后，立即消费消息</p><pre class=" language-JAVA"><code class="language-JAVA">@Componentpublic class MessageListener &#123;    @KafkaListener(topics = "itheima2022")    public void onMessage(ConsumerRecord<String,String> record)&#123;        System.out.println("已完成短信发送业务(kafka)，id："+record.value());    &#125;&#125;</code></pre><p>​        使用注解@KafkaListener定义当前方法监听Kafka中指定topic的消息，接收到的消息封装在对象ConsumerRecord中，获取数据从ConsumerRecord对象中获取即可。</p><p><strong>总结</strong></p><ol><li><p>springboot整合Kafka使用KafkaTemplate对象作为客户端操作消息队列</p></li><li><p>操作Kafka需要配置Kafka服务器地址，默认端口9092</p></li><li><p>企业开发时通常使用监听器来处理消息队列中的消息，设置监听器使用注解@KafkaListener。接收消息保存在形参ConsumerRecord对象中</p></li></ol><h2 id="KF-6-监控"><a href="#KF-6-监控" class="headerlink" title="KF-6.监控"></a>KF-6.监控</h2><p>​        在说监控之前，需要回顾一下软件业的发展史。最早的软件完成一些非常简单的功能，代码不多，错误也少。随着软件功能的逐步完善，软件的功能变得越来越复杂，功能不能得到有效的保障，这个阶段出现了针对软件功能的检测，也就是软件测试。伴随着计算机操作系统的逐步升级，软件的运行状态也变得开始让人捉摸不透，出现了不稳定的状况。伴随着计算机网络的发展，程序也从单机状态切换成基于计算机网络的程序，应用于网络的程序开始出现，由于网络的不稳定性，程序的运行状态让使用者更加堪忧。互联网的出现彻底打破了软件的思维模式，随之而来的互联网软件就更加凸显出应对各种各样复杂的网络情况之下的弱小。计算机软件的运行状况已经成为了软件运行的一个大话题，针对软件的运行状况就出现了全新的思维，建立起了初代的软件运行状态监控。</p><p>​        什么是监控？就是通过软件的方式展示另一个软件的运行情况，运行的情况则通过各种各样的指标数据反馈给监控人员。例如网络是否顺畅、服务器是否在运行、程序的功能是否能够整百分百运行成功，内存是否够用，等等等等。</p><p>​        本章要讲解的监控就是对软件的运行情况进行监督，但是springboot程序与非springboot程序的差异还是很大的，为了方便监控软件的开发，springboot提供了一套功能接口，为开发者加速开发过程。</p><h3 id="KF-6-1-监控的意义"><a href="#KF-6-1-监控的意义" class="headerlink" title="KF-6-1.监控的意义"></a>KF-6-1.监控的意义</h3><p>​        对于现代的互联网程序来说，规模越来越大，功能越来越复杂，还要追求更好的客户体验，因此要监控的信息量也就比较大了。由于现在的互联网程序大部分都是基于微服务的程序，一个程序的运行需要若干个服务来保障，因此第一个要监控的指标就是服务是否正常运行，也就是<strong>监控服务状态是否处理宕机状态</strong>。一旦发现某个服务宕机了，必须马上给出对应的解决方案，避免整体应用功能受影响。其次，由于互联网程序服务的客户量是巨大的，当客户的请求在短时间内集中达到服务器后，就会出现各种程序运行指标的波动。比如内存占用严重，请求无法及时响应处理等，这就是第二个要监控的重要指标，<strong>监控服务运行指标</strong>。虽然软件是对外提供用户的访问需求，完成对应功能的，但是后台的运行是否平稳，是否出现了不影响客户使用的功能隐患，这些也是要密切监控的，此时就需要在不停机的情况下，监控系统运行情况，日志是一个不错的手段。如果在众多日志中找到开发者或运维人员所关注的日志信息，简单快速有效的过滤出要看的日志也是监控系统需要考虑的问题，这就是第三个要监控的指标，<strong>监控程序运行日志</strong>。虽然我们期望程序一直平稳运行，但是由于突发情况的出现，例如服务器被攻击、服务器内存溢出等情况造成了服务器宕机，此时当前服务不能满足使用需要，就要将其重启甚至关闭，如果快速控制服务器的启停也是程序运行过程中不可回避的问题，这就是第四个监控项，<strong>管理服务状态</strong>。以上这些仅仅是从大的方面来思考监控这个问题，还有很多的细节点，例如上线了一个新功能，定时提醒用户续费，这种功能不是上线后马上就运行的，但是当前功能是否真的启动，如果快速的查询到这个功能已经开启，这也是监控中要解决的问题，等等。看来监控真的是一项非常重要的工作。</p><p>​        通过上述描述，可以看出监控很重要。那具体的监控要如何开展呢？还要从实际的程序运行角度出发。比如现在有3个服务支撑着一个程序的运行，每个服务都有自己的运行状态。</p><img src="img\image-20220301093704396.png" alt="image-20220301093704396" style="zoom:50%;" /><p>​        此时被监控的信息就要在三个不同的程序中去查询并展示，但是三个服务是服务于一个程序的运行的，如果不能合并到一个平台上展示，监控工作量巨大，而且信息对称性差，要不停的在三个监控端查看数据。如果将业务放大成30个，300个，3000个呢？看来必须有一个单独的平台，将多个被监控的服务对应的监控指标信息汇总在一起，这样更利于监控工作的开展。</p><img src="img\image-20220301094001896.png" alt="image-20220301094001896" style="zoom:50%;" /><p>​        新的程序专门用来监控，新的问题就出现了，是被监控程序主动上报信息还是监控程序主动获取信息？如果监控程序不能主动获取信息，这就意味着监控程序有可能看到的是很久之前被监控程序上报的信息，万一被监控程序宕机了，监控程序就无法区分究竟是好久没法信息了，还是已经下线了。所以监控程序必须具有主动发起请求获取被监控服务信息的能力。</p><img src="img\image-20220301094259844.png" alt="image-20220301094259844" style="zoom:50%;" /><p>​        如果监控程序要监控服务时，主动获取对方的信息。那监控程序如何知道哪些程序被自己监控呢？不可能在监控程序中设置我监控谁，这样互联网上的所有程序岂不是都可以被监控到，这样的话信息安全将无法得到保障。合理的做法只能是在被监控程序启动时上报监控程序，告诉监控程序你可以监控我了。看来需要在被监控程序端做主动上报的操作，这就要求被监控程序中配置对应的监控程序是谁。</p><img src="img\image-20220301094547748.png" alt="image-20220301094547748" style="zoom:50%;" /><p>​        被监控程序可以提供各种各样的指标数据给监控程序看，但是每一个指标都代表着公司的机密信息，并不是所有的指标都可以给任何人看的，乃至运维人员，所以对被监控指标的是否开放出来给监控系统看，也需要做详细的设定。</p><p>​        以上描述的整个过程就是一个监控系统的基本流程。</p><p><strong>总结</strong></p><ol><li>监控是一个非常重要的工作，是保障程序正常运行的基础手段</li><li>监控的过程通过一个监控程序进行，它汇总所有被监控的程序的信息集中统一展示</li><li>被监控程序需要主动上报自己被监控，同时要设置哪些指标被监控</li></ol><p><strong>思考</strong></p><p>​        下面就要开始做监控了，新的问题就来了，监控程序怎么做呢？难道要自己写吗？肯定是不现实的，如何进行监控，咱们下节再讲。</p><h3 id="KF-6-2-可视化监控平台"><a href="#KF-6-2-可视化监控平台" class="headerlink" title="KF-6-2.可视化监控平台"></a>KF-6-2.可视化监控平台</h3><p>​        springboot抽取了大部分监控系统的常用指标，提出了监控的总思想。然后就有好心的同志根据监控的总思想，制作了一个通用性很强的监控系统，因为是基于springboot监控的核心思想制作的，所以这个程序被命名为<strong>Spring Boot Admin</strong>。</p><p>​        Spring Boot Admin，这是一个开源社区项目，用于管理和监控SpringBoot应用程序。这个项目中包含有客户端和服务端两部分，而监控平台指的就是服务端。我们做的程序如果需要被监控，将我们做的程序制作成客户端，然后配置服务端地址后，服务端就可以通过HTTP请求的方式从客户端获取对应的信息，并通过UI界面展示对应信息。</p><p>​        下面就来开发这套监控程序，先制作服务端，其实服务端可以理解为是一个web程序，收到一些信息后展示这些信息。</p><p><strong>服务端开发</strong></p><p><strong>步骤①</strong>：导入springboot admin对应的starter，版本与当前使用的springboot版本保持一致，并将其配置成web工程</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-starter-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>​        上述过程可以通过创建项目时使用勾选的形式完成。</p><img src="img\image-20220301102432817.png" alt="image-20220301102432817" style="zoom:50%;" /><p><strong>步骤②</strong>：在引导类上添加注解@EnableAdminServer，声明当前应用启动后作为SpringBootAdmin的服务器使用</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableAdminServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Springboot25AdminServerApplication</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Springboot25AdminServerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        做到这里，这个服务器就开发好了，启动后就可以访问当前程序了，界面如下。</p><img src="img\image-20220301103028468.png" alt="image-20220301103028468" style="zoom: 50%;" /><p>​        由于目前没有启动任何被监控的程序，所以里面什么信息都没有。下面制作一个被监控的客户端程序。</p><p><strong>客户端开发</strong></p><p>​        客户端程序开发其实和服务端开发思路基本相似，多了一些配置而已。</p><p><strong>步骤①</strong>：导入springboot admin对应的starter，版本与当前使用的springboot版本保持一致，并将其配置成web工程</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-starter-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>​        上述过程也可以通过创建项目时使用勾选的形式完成，不过一定要小心，端口配置成不一样的，否则会冲突。</p><p><strong>步骤②</strong>：设置当前客户端将信息上传到哪个服务器上，通过yml文件配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">boot</span><span class="token punctuation">:</span>    <span class="token key atrule">admin</span><span class="token punctuation">:</span>      <span class="token key atrule">client</span><span class="token punctuation">:</span>        <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8080</span></code></pre><p>​        做到这里，这个客户端就可以启动了。启动后再次访问服务端程序，界面如下。</p><img src="img\image-20220301103838079.png" alt="image-20220301103838079" style="zoom: 50%;" /><p>​        可以看到，当前监控了1个程序，点击进去查看详细信息。</p><img src="img\image-20220301103936386.png" alt="image-20220301103936386" style="zoom: 50%;" /><p>​        由于当前没有设置开放哪些信息给监控服务器，所以目前看不到什么有效的信息。下面需要做两组配置就可以看到信息了。</p><ol><li><p>开放指定信息给服务器看</p></li><li><p>允许服务器以HTTP请求的方式获取对应的信息</p><p>配置如下：</p></li></ol><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">boot</span><span class="token punctuation">:</span>    <span class="token key atrule">admin</span><span class="token punctuation">:</span>      <span class="token key atrule">client</span><span class="token punctuation">:</span>        <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>    <span class="token key atrule">health</span><span class="token punctuation">:</span>      <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span></code></pre><p>​        上述配置对于初学者来说比较容易混淆。简单解释一下，到下一节再做具体的讲解。springbootadmin的客户端默认开放了13组信息给服务器，但是这些信息除了一个之外，其他的信息都不让通过HTTP请求查看。所以你看到的信息基本上就没什么内容了，只能看到一个内容，就是下面的健康信息。</p><img src="img\image-20220301104742563.png" alt="image-20220301104742563" style="zoom: 50%;" /><p>​        但是即便如此我们看到健康信息中也没什么内容，原因在于健康信息中有一些信息描述了你当前应用使用了什么技术等信息，如果无脑的对外暴露功能会有安全隐患。通过配置就可以开放所有的健康信息明细查看了。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>    <span class="token key atrule">health</span><span class="token punctuation">:</span>      <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always</code></pre><p>​        健康明细信息如下：</p><img src="img\image-20220301105116554.png" alt="image-20220301105116554" style="zoom: 50%;" /><p>​        目前除了健康信息，其他信息都查阅不了。原因在于其他12种信息是默认不提供给服务器通过HTTP请求查阅的，所以需要开启查阅的内容项，使用*表示查阅全部。记得带引号。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">endpoints</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    <span class="token key atrule">exposure</span><span class="token punctuation">:</span>      <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span></code></pre><p>​        配置后再刷新服务器页面，就可以看到所有的信息了。</p><img src="img\image-20220301105554494.png" alt="image-20220301105554494" style="zoom: 50%;" /><p>​        以上界面中展示的信息量就非常大了，包含了13组信息，有性能指标监控，加载的bean列表，加载的系统属性，日志的显示控制等等。</p><p><strong>配置多个客户端</strong></p><p>​        可以通过配置客户端的方式在其他的springboot程序中添加客户端坐标，这样当前服务器就可以监控多个客户端程序了。每个客户端展示不同的监控信息。</p><img src="img\image-20220301110352170.png" alt="image-20220301110352170" style="zoom: 50%;" /><p>​        进入监控面板，如果你加载的应用具有功能，在监控面板中可以看到3组信息展示的与之前加载的空工程不一样。</p><ul><li>类加载面板中可以查阅到开发者自定义的类，如左图</li></ul><p>​                        <img src="img\image-20220301161246835.png" alt="image-20220301161246835" style="zoom:33%;" /><img src="img\image-20220301161949431.png" alt="image-20220301161949431" style="zoom:33%;" /></p><ul><li>映射中可以查阅到当前应用配置的所有请求</li></ul><p>​                        <img src="img\image-20220301161418791.png" alt="image-20220301161418791" style="zoom: 33%;" /><img src="img\image-20220301162008737.png" alt="image-20220301162008737" style="zoom:33%;" /></p><ul><li>性能指标中可以查阅当前应用独有的请求路径统计数据</li></ul><p>​                        <img src="img\image-20220301161906949.png" alt="image-20220301161906949" style="zoom: 33%;" /><img src="img\image-20220301162040670.png" alt="image-20220301162040670" style="zoom: 33%;" /></p><p><strong>总结</strong></p><ol><li>开发监控服务端需要导入坐标，然后在引导类上添加注解@EnableAdminServer，并将其配置成web程序即可</li><li>开发被监控的客户端需要导入坐标，然后配置服务端服务器地址，并做开放指标的设定即可</li><li>在监控平台中可以查阅到各种各样被监控的指标，前提是客户端开放了被监控的指标</li></ol><p><strong>思考</strong></p><p>​        之前说过，服务端要想监控客户端，需要主动的获取到对应信息并展示出来。但是目前我们并没有在客户端开发任何新的功能，但是服务端确可以获取监控信息，谁帮我们做的这些功能呢？咱们下一节再讲。</p><h3 id="KF-6-3-监控原理"><a href="#KF-6-3-监控原理" class="headerlink" title="KF-6-3.监控原理"></a>KF-6-3.监控原理</h3><p>​        通过查阅监控中的映射指标，可以看到当前系统中可以运行的所有请求路径，其中大部分路径以/actuator开头</p><img src="img\image-20220301170214076.png" alt="image-20220301170214076" style="zoom: 50%;" /><p>​        首先这些请求路径不是开发者自己编写的，其次这个路径代表什么含义呢？既然这个路径可以访问，就可以通过浏览器发送该请求看看究竟可以得到什么信息。</p><p><img src="img%5Cimage-20220301170723057.png" alt="image-20220301170723057"></p><p>​        通过发送请求，可以得到一组json信息，如下</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"_links"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token property">"self"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"beans"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/beans"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"caches-cache"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/caches/&amp;#123;cache&amp;#125;"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"caches"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/caches"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"health"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/health"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"health-path"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/health/&amp;#123;*path&amp;#125;"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"info"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/info"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"conditions"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/conditions"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"shutdown"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/shutdown"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"configprops"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/configprops"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"configprops-prefix"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/configprops/&amp;#123;prefix&amp;#125;"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"env"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/env"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"env-toMatch"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/env/&amp;#123;toMatch&amp;#125;"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"loggers"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/loggers"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"loggers-name"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/loggers/&amp;#123;name&amp;#125;"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"heapdump"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/heapdump"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"threaddump"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/threaddump"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"metrics-requiredMetricName"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/metrics/&amp;#123;requiredMetricName&amp;#125;"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"metrics"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/metrics"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"scheduledtasks"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/scheduledtasks"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"mappings"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:81/actuator/mappings"</span><span class="token punctuation">,</span>            <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        其中每一组数据都有一个请求路径，而在这里请求路径中有之前看到过的health，发送此请求又得到了一组信息</p><pre class=" language-JSON"><code class="language-JSON">&#123;    "status": "UP",    "components": &#123;        "diskSpace": &#123;            "status": "UP",            "details": &#123;                "total": 297042808832,                "free": 72284409856,                "threshold": 10485760,                "exists": true            &#125;        &#125;,        "ping": &#123;            "status": "UP"        &#125;    &#125;&#125;</code></pre><p>​        当前信息与监控面板中的数据存在着对应关系</p><img src="img\image-20220301171025615.png" alt="image-20220301171025615" style="zoom:50%;" /><p>​        原来监控中显示的信息实际上是通过发送请求后得到json数据，然后展示出来。按照上述操作，可以发送更多的以/actuator开头的链接地址，获取更多的数据，这些数据汇总到一起组成了监控平台显示的所有数据。</p><p>​        到这里我们得到了一个核心信息，监控平台中显示的信息实际上是通过对被监控的应用发送请求得到的。那这些请求谁开发的呢？打开被监控应用的pom文件，其中导入了springboot admin的对应的client，在这个资源中导入了一个名称叫做actuator的包。被监控的应用之所以可以对外提供上述请求路径，就是因为添加了这个包。</p><p><img src="img%5Cimage-20220301171437817.png" alt="image-20220301171437817"></p><p>​        这个actuator是什么呢？这就是本节要讲的核心内容，监控的端点。</p><p>​        Actuator，可以称为端点，描述了一组监控信息，SpringBootAdmin提供了多个内置端点，通过访问端点就可以获取对应的监控信息，也可以根据需要自定义端点信息。通过发送请求路劲**/actuator<strong>可以访问应用所有端点信息，如果端点中还有明细信息可以发送请求</strong>/actuator/端点名称**来获取详细信息。以下列出了所有端点信息说明：</p><table><thead><tr><th>ID</th><th>描述</th><th>默认启用</th></tr></thead><tbody><tr><td>auditevents</td><td>暴露当前应用程序的审计事件信息。</td><td>是</td></tr><tr><td>beans</td><td>显示应用程序中所有 Spring bean 的完整列表。</td><td>是</td></tr><tr><td>caches</td><td>暴露可用的缓存。</td><td>是</td></tr><tr><td>conditions</td><td>显示在配置和自动配置类上评估的条件以及它们匹配或不匹配的原因。</td><td>是</td></tr><tr><td>configprops</td><td>显示所有 @ConfigurationProperties 的校对清单。</td><td>是</td></tr><tr><td>env</td><td>暴露 Spring ConfigurableEnvironment 中的属性。</td><td>是</td></tr><tr><td>flyway</td><td>显示已应用的 Flyway 数据库迁移。</td><td>是</td></tr><tr><td>health</td><td>显示应用程序健康信息</td><td>是</td></tr><tr><td>httptrace</td><td>显示 HTTP 追踪信息（默认情况下，最后 100 个  HTTP 请求/响应交换）。</td><td>是</td></tr><tr><td>info</td><td>显示应用程序信息。</td><td>是</td></tr><tr><td>integrationgraph</td><td>显示 Spring Integration 图。</td><td>是</td></tr><tr><td>loggers</td><td>显示和修改应用程序中日志记录器的配置。</td><td>是</td></tr><tr><td>liquibase</td><td>显示已应用的 Liquibase 数据库迁移。</td><td>是</td></tr><tr><td>metrics</td><td>显示当前应用程序的指标度量信息。</td><td>是</td></tr><tr><td>mappings</td><td>显示所有 @RequestMapping 路径的整理清单。</td><td>是</td></tr><tr><td>scheduledtasks</td><td>显示应用程序中的调度任务。</td><td>是</td></tr><tr><td>sessions</td><td>允许从 Spring Session 支持的会话存储中检索和删除用户会话。当使用 Spring Session 的响应式 Web 应用程序支持时不可用。</td><td>是</td></tr><tr><td>shutdown</td><td>正常关闭应用程序。</td><td>否</td></tr><tr><td>threaddump</td><td>执行线程 dump。</td><td>是</td></tr><tr><td>heapdump</td><td>返回一个 hprof 堆 dump 文件。</td><td>是</td></tr><tr><td>jolokia</td><td>通过 HTTP 暴露 JMX bean（当  Jolokia 在 classpath 上时，不适用于 WebFlux）。</td><td>是</td></tr><tr><td>logfile</td><td>返回日志文件的内容（如果已设置 logging.file 或 logging.path 属性）。支持使用 HTTP Range 头来检索部分日志文件的内容。</td><td>是</td></tr><tr><td>prometheus</td><td>以可以由 Prometheus 服务器抓取的格式暴露指标。</td><td>是</td></tr></tbody></table><p>​        上述端点每一项代表被监控的指标，如果对外开放则监控平台可以查询到对应的端点信息，如果未开放则无法查询对应的端点信息。通过配置可以设置端点是否对外开放功能。使用enable属性控制端点是否对外开放。其中health端点为默认端点，不能关闭。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>    <span class="token key atrule">health</span><span class="token punctuation">:</span>                        <span class="token comment" spellcheck="true"># 端点名称</span>      <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always    <span class="token key atrule">info</span><span class="token punctuation">:</span>                        <span class="token comment" spellcheck="true"># 端点名称</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true                </span><span class="token comment" spellcheck="true"># 是否开放</span></code></pre><p>​        为了方便开发者快速配置端点，springboot admin设置了13个较为常用的端点作为默认开放的端点，如果需要控制默认开放的端点的开放状态，可以通过配置设置，如下：</p><pre class=" language-YAML"><code class="language-YAML">management:  endpoints:    enabled-by-default: true    # 是否开启默认端点，默认值true</code></pre><p>​        上述端点开启后，就可以通过端点对应的路径查看对应的信息了。但是此时还不能通过HTTP请求查询此信息，还需要开启通过HTTP请求查询的端点名称，使用“*”可以简化配置成开放所有端点的WEB端HTTP请求权限。</p><pre class=" language-YAML"><code class="language-YAML">management:  endpoints:    web:      exposure:        include: "*"</code></pre><p>​        整体上来说，对于端点的配置有两组信息，一组是endpoints开头的，对所有端点进行配置，一组是endpoint开头的，对具体端点进行配置。</p><pre class=" language-YAML"><code class="language-YAML">management:  endpoint:        # 具体端点的配置    health:      show-details: always    info:      enabled: true  endpoints:    # 全部端点的配置    web:      exposure:        include: "*"    enabled-by-default: true</code></pre><p><strong>总结</strong></p><ol><li><p>被监控客户端通过添加actuator的坐标可以对外提供被访问的端点功能</p></li><li><p>端点功能的开放与关闭可以通过配置进行控制</p></li><li><p>web端默认无法获取所有端点信息，通过配置开放端点功能</p></li></ol><h3 id="KF-6-4-自定义监控指标"><a href="#KF-6-4-自定义监控指标" class="headerlink" title="KF-6-4.自定义监控指标"></a>KF-6-4.自定义监控指标</h3><p>​        端点描述了被监控的信息，除了系统默认的指标，还可以自行添加显示的指标，下面就通过3种不同的端点的指标自定义方式来学习端点信息的二次开发。</p><p><strong>INFO端点</strong></p><p>​        info端点描述了当前应用的基本信息，可以通过两种形式快速配置info端点的信息</p><ul><li><p>配置形式</p><p>在yml文件中通过设置info节点的信息就可以快速配置端点信息</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">info</span><span class="token punctuation">:</span>  <span class="token key atrule">appName</span><span class="token punctuation">:</span> @project.artifactId@  <span class="token key atrule">version</span><span class="token punctuation">:</span> @project.version@  <span class="token key atrule">company</span><span class="token punctuation">:</span> 传智教育  <span class="token key atrule">author</span><span class="token punctuation">:</span> itheima</code></pre><p>配置完毕后，对应信息显示在监控平台上</p><img src="img\image-20220301174133248.png" alt="image-20220301174133248" style="zoom:50%;" /><p>也可以通过请求端点信息路径获取对应json信息</p><img src="img\image-20220301174241310.png" alt="image-20220301174241310" style="zoom:50%;" /></li><li><p>编程形式</p><p>通过配置的形式只能添加固定的数据，如果需要动态数据还可以通过配置bean的方式为info端点添加信息，此信息与配置信息共存</p><pre class=" language-JAVA"><code class="language-JAVA">@Componentpublic class InfoConfig implements InfoContributor &#123;    @Override    public void contribute(Info.Builder builder) &#123;        builder.withDetail("runTime",System.currentTimeMillis());        //添加单个信息        Map infoMap = new HashMap();                infoMap.put("buildTime","2006");        builder.withDetails(infoMap);                                    //添加一组信息    &#125;&#125;</code></pre></li></ul><p><strong>Health端点</strong></p><p>​        health端点描述当前应用的运行健康指标，即应用的运行是否成功。通过编程的形式可以扩展指标信息。</p><pre class=" language-JAVA"><code class="language-JAVA">@Componentpublic class HealthConfig extends AbstractHealthIndicator &#123;    @Override    protected void doHealthCheck(Health.Builder builder) throws Exception &#123;        boolean condition = true;        if(condition) &#123;            builder.status(Status.UP);                    //设置运行状态为启动状态            builder.withDetail("runTime", System.currentTimeMillis());            Map infoMap = new HashMap();            infoMap.put("buildTime", "2006");            builder.withDetails(infoMap);        &#125;else&#123;            builder.status(Status.OUT_OF_SERVICE);        //设置运行状态为不在服务状态            builder.withDetail("上线了吗？","你做梦");        &#125;    &#125;&#125;</code></pre><p>​        当任意一个组件状态不为UP时，整体应用对外服务状态为非UP状态。</p><img src="img\image-20220301174751845.png" alt="image-20220301174751845" style="zoom:50%;" /><p><strong>Metrics端点</strong></p><p>​        metrics端点描述了性能指标，除了系统自带的监控性能指标，还可以自定义性能指标。</p><pre class=" language-JAVA"><code class="language-JAVA">@Servicepublic class BookServiceImpl extends ServiceImpl<BookDao, Book> implements IBookService &#123;    @Autowired    private BookDao bookDao;    private Counter counter;    public BookServiceImpl(MeterRegistry meterRegistry)&#123;        counter = meterRegistry.counter("用户付费操作次数：");    &#125;    @Override    public boolean delete(Integer id) &#123;        //每次执行删除业务等同于执行了付费业务        counter.increment();        return bookDao.deleteById(id) > 0;    &#125;&#125;</code></pre><p>​        在性能指标中就出现了自定义的性能指标监控项</p><img src="img\image-20220301175101812.png" alt="image-20220301175101812" style="zoom:50%;" /><p><strong>自定义端点</strong></p><p>​        可以根据业务需要自定义端点，方便业务监控</p><pre class=" language-JAVA"><code class="language-JAVA">@Component@Endpoint(id="pay",enableByDefault = true)public class PayEndpoint &#123;    @ReadOperation    public Object getPay()&#123;        Map payMap = new HashMap();        payMap.put("level 1","300");        payMap.put("level 2","291");        payMap.put("level 3","666");        return payMap;    &#125;&#125;</code></pre><p>​        由于此端点数据spirng boot admin无法预知该如何展示，所以通过界面无法看到此数据，通过HTTP请求路径可以获取到当前端点的信息，但是需要先开启当前端点对外功能，或者设置当前端点为默认开发的端点。</p><img src="img\image-20220301175355482.png" alt="image-20220301175355482" style="zoom:50%;" /><p><strong>总结</strong></p><ol><li>端点的指标可以自定义，但是每种不同的指标根据其功能不同，自定义方式不同</li><li>info端点通过配置和编程的方式都可以添加端点指标</li><li>health端点通过编程的方式添加端点指标，需要注意要为对应指标添加启动状态的逻辑设定</li><li>metrics指标通过在业务中添加监控操作设置指标</li><li>可以自定义端点添加更多的指标</li></ol><h2 id="开发实用篇完结"><a href="#开发实用篇完结" class="headerlink" title="开发实用篇完结"></a>开发实用篇完结</h2><p>​        开发实用篇到这里就暂时完结了，在开发实用篇中我们讲解了大量的第三方技术的整合方案，选择的方案都是市面上比较流行的常用方案，还有一些国内流行度较低的方案目前还没讲，留到番外篇中慢慢讲吧。</p><p>​        整体开发实用篇中讲解的内容可以分为两大类知识：实用性知识与经验性知识。</p><p>​        实用性知识就是新知识了，springboot整合各种技术，每种技术整合中都有一些特殊操作，整体来说其实就是三句话。加坐标做配置调接口。经验性知识是对前面两篇中出现的一些知识的补充，在学习基础篇时如果将精力放在这些东西上就有点学偏了，容易钻牛角尖，放到实用开发篇中结合实际开发说一些不常见的但是对系统功能又危害的操作解决方案，提升理解。</p><p>​        开发实用篇做到这里就告一段落，下面就要着手准备原理篇了。市面上很多课程原理篇讲的过于高深莫测，在新手还没明白123的时候就开始讲微积分了，着实让人看了着急。至于原理篇我讲成什么样子？一起期待吧。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx卸载和安装</title>
      <link href="/2022/02/21/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%B1%BB/%E5%8D%B8%E8%BD%BDnginx/"/>
      <url>/2022/02/21/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%B1%BB/%E5%8D%B8%E8%BD%BDnginx/</url>
      
        <content type="html"><![CDATA[<h2 id="nginx卸载和安装"><a href="#nginx卸载和安装" class="headerlink" title="nginx卸载和安装"></a>nginx卸载和安装</h2><p>本机环境：CentOS 7.6 ，使用yum安装的Nginx</p><p>1、查看nginx服务是否在运行。</p><pre class=" language-BASH"><code class="language-BASH"> ps -ef | grep nginx</code></pre><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221185727539.png" alt="image-20230221185727539" style="zoom:80%;" /><p>2、查看nginx安装目录（注意目录）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">whereis</span> nginx</code></pre><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221185825023.png" alt="image-20230221185825023" style="zoom:80%;" /><p>3、终止nginx服务运行</p><pre class=" language-bash"><code class="language-bash">/usr/local/nginx-webServer/sbin/nginx -s stop</code></pre><p>再次查看后，服务已经终止</p><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221185908842.png" alt="image-20230221185908842" style="zoom:80%;" /><p>4、全局查找nginx相关的文件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">find</span> / -name nginx*</code></pre><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221185937683.png" alt="image-20230221185937683" style="zoom:80%;" /><p>5、对相关文件（第二步骤的查询结果）进行删除</p><pre class=" language-bash"><code class="language-bash"><span class="token function">rm</span> -rf <span class="token function">file</span> /usr/bin/nginx*<span class="token function">rm</span> -rf <span class="token function">file</span> /usr/local/nginx*</code></pre><p>6、使用yum卸载 nginx及相关依赖</p><pre class=" language-bash"><code class="language-bash">yum remove nginx</code></pre><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221190125106.png" alt="image-20230221190125106" style="zoom:80%;" /><p>如果提示”This system is not registered with an entitlement server. You can use subscription-manager”，原因：Red Hat Subscription Manager订阅管理器，它会让你一直register。</p><p>解决：停止掉该插件的使用，在配置文件中把enable=0即可。</p><pre class=" language-bash"><code class="language-bash">vim /etc/yum/pluginconf.d/subscription-manager.conf</code></pre><img src="https://raw.githubusercontent.com/c-sin7/picgoIMG/main/image-20230221190800936.png" alt="image-20230221190800936" style="zoom:80%;" /><p>到此，nginx卸载删除完成。</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> CentOS </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
